/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 15:56:03 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.FileDescriptor;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Collection;
import java.util.Iterator;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.Spliterator;
import java.util.function.Predicate;
import java.util.regex.Matcher;
import java.util.regex.Pattern;
import java.util.regex.PatternSyntaxException;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Tag tag0 = Tag.valueOf("y+t2!x9");
      assertFalse(tag0.preserveWhitespace());
      assertEquals("y+t2!x9", tag0.getName());
      assertEquals("y+t2!x9", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("y+t2!x9", true);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attribute attribute0 = new Attribute("y+t2!x9", ")&e~P:q677)06U");
      assertEquals("y+t2!x9", attribute0.getKey());
      assertEquals(")&e~P:q677)06U", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attribute attribute1 = attribute0.clone();
      assertEquals("y+t2!x9", attribute0.getKey());
      assertEquals(")&e~P:q677)06U", attribute0.getValue());
      assertEquals("y+t2!x9", attribute1.getKey());
      assertEquals(")&e~P:q677)06U", attribute1.getValue());
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotNull(attribute1);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      
      Attributes attributes2 = attributes1.put(attribute1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("y+t2!x9", attribute0.getKey());
      assertEquals(")&e~P:q677)06U", attribute0.getValue());
      assertEquals("y+t2!x9", attribute1.getKey());
      assertEquals(")&e~P:q677)06U", attribute1.getValue());
      assertEquals(1, attributes2.size());
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      
      Element element0 = new Element(tag0, "y+t2!x9", attributes2);
      assertFalse(tag0.preserveWhitespace());
      assertEquals("y+t2!x9", tag0.getName());
      assertEquals("y+t2!x9", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("y+t2!x9", attribute0.getKey());
      assertEquals(")&e~P:q677)06U", attribute0.getValue());
      assertEquals("y+t2!x9", attribute1.getKey());
      assertEquals(")&e~P:q677)06U", attribute1.getValue());
      assertEquals(1, attributes2.size());
      assertEquals("y+t2!x9", element0.nodeName());
      assertEquals("y+t2!x9", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("y+t2!x9", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotNull(element0);
      
      String string0 = element0.tagName();
      assertFalse(tag0.preserveWhitespace());
      assertEquals("y+t2!x9", tag0.getName());
      assertEquals("y+t2!x9", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("y+t2!x9", attribute0.getKey());
      assertEquals(")&e~P:q677)06U", attribute0.getValue());
      assertEquals("y+t2!x9", attribute1.getKey());
      assertEquals(")&e~P:q677)06U", attribute1.getValue());
      assertEquals(1, attributes2.size());
      assertEquals("y+t2!x9", element0.nodeName());
      assertEquals("y+t2!x9", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("y+t2!x9", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertEquals("y+t2!x9", string0);
      assertNotNull(string0);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
      
      Elements elements0 = element0.getElementsByAttributeValueStarting("y+t2!x9", ")&e~P:q677)06U");
      assertFalse(tag0.preserveWhitespace());
      assertEquals("y+t2!x9", tag0.getName());
      assertEquals("y+t2!x9", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("y+t2!x9", attribute0.getKey());
      assertEquals(")&e~P:q677)06U", attribute0.getValue());
      assertEquals("y+t2!x9", attribute1.getKey());
      assertEquals(")&e~P:q677)06U", attribute1.getValue());
      assertEquals(1, attributes2.size());
      assertEquals("y+t2!x9", element0.nodeName());
      assertEquals("y+t2!x9", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("y+t2!x9", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertTrue(attribute0.equals((Object)attribute1));
      assertTrue(attribute1.equals((Object)attribute0));
      assertNotNull(elements0);
      assertSame(attributes0, attributes1);
      assertSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attribute0, attribute1);
      assertNotSame(attribute1, attribute0);
      assertSame(attributes2, attributes1);
      assertSame(attributes2, attributes0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Element element0 = new Element("1@O|H6jS.uc}AR>");
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("1@O|H6jS.uc}AR>", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("1@O|H6jS.uc}AR>", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = element0.prependElement("1@O|H6jS.uc}AR>");
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1@O|H6jS.uc}AR>", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("1@O|H6jS.uc}AR>", element0.nodeName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("1@o|h6js.uc}ar>", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("1@o|h6js.uc}ar>", element1.tagName());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "value");
      assertFalse(boolean0);
      
      element1.setSiblingIndex((-60));
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1@O|H6jS.uc}AR>", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("1@O|H6jS.uc}AR>", element0.nodeName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("1@o|h6js.uc}ar>", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals((-60), element1.siblingIndex());
      assertEquals("1@o|h6js.uc}ar>", element1.tagName());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = element1.append("1@O|H6jS.uc}AR>");
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1@O|H6jS.uc}AR>", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("1@O|H6jS.uc}AR>", element0.nodeName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("1@o|h6js.uc}ar>", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals((-60), element1.siblingIndex());
      assertEquals("1@o|h6js.uc}ar>", element1.tagName());
      assertEquals("", element2.baseUri());
      assertEquals((-60), element2.siblingIndex());
      assertEquals("1@o|h6js.uc}ar>", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertFalse(element2.isBlock());
      assertEquals("1@o|h6js.uc}ar>", element2.nodeName());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertNotNull(element2);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      
      Map<String, String> map0 = element2.dataset();
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("1@O|H6jS.uc}AR>", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("1@O|H6jS.uc}AR>", element0.nodeName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("1@o|h6js.uc}ar>", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals((-60), element1.siblingIndex());
      assertEquals("1@o|h6js.uc}ar>", element1.tagName());
      assertEquals("", element2.baseUri());
      assertEquals((-60), element2.siblingIndex());
      assertEquals("1@o|h6js.uc}ar>", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertFalse(element2.isBlock());
      assertEquals("1@o|h6js.uc}ar>", element2.nodeName());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertNotNull(map0);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      String string0 = "P)38\\A8U/$6[Wwr!";
      Document document0 = new Document("P)38A8U/$6[Wwr!");
      assertEquals("P)38A8U/$6[Wwr!", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("P)38A8U/$6[Wwr!", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      MockFile mockFile0 = new MockFile("P)38A8U/$6[Wwr!", "");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      assertNotNull(mockPrintWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.indentAmount(1027);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1027, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1027, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.indentAmount(1428);
      assertEquals(1428, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1428, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1428, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertNotNull(document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.charset((Charset) null);
      assertEquals(1428, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1428, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1428, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(1428, document_OutputSettings4.indentAmount());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertNotNull(document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintWriter0, 1027, document_OutputSettings4);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.ysoup.nodes.E=ement$2", "Rm?_ka3`y=_P");
      assertEquals("#document", document0.nodeName());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = new Document("Rm?_ka3`y=_P");
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      
      Document document2 = (Document)document1.clone();
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("Rm?_ka3`y=_P", document2.location());
      assertEquals("Rm?_ka3`y=_P", document2.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document3 = (Document)document1.appendChild(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("Rm?_ka3`y=_P", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      
      int int0 = document3.elementSiblingIndex();
      assertEquals("#document", document0.nodeName());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("Rm?_ka3`y=_P", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertEquals(0, int0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      
      String string0 = document3.toString();
      assertEquals("#document", document0.nodeName());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("Rm?_ka3`y=_P", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertEquals("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>", string0);
      assertNotNull(string0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      
      Node[] nodeArray0 = document1.childNodesAsArray();
      assertEquals(1, nodeArray0.length);
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(nodeArray0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      
      Document document4 = Document.createShell("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>");
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertNotNull(document4);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      
      Node[] nodeArray1 = new Node[3];
      assertFalse(nodeArray1.equals((Object)nodeArray0));
      
      nodeArray1[0] = (Node) document3;
      nodeArray1[1] = (Node) document4;
      nodeArray1[2] = (Node) document3;
      document3.addChildren(nodeArray1);
      assertEquals(3, nodeArray1.length);
      assertEquals("#document", document0.nodeName());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertEquals(2, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document3.location());
      assertEquals("Rm?_ka3`y=_P", document3.baseUri());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals(2, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(nodeArray1.equals((Object)nodeArray0));
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document4);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertNotSame(document3, document4);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(nodeArray1, nodeArray0);
      
      Elements elements0 = document4.getElementsByAttributeValueContaining("org.ysoup.nodes.E=ement$2", "Rm?_ka3`y=_P");
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals(1, document4.siblingIndex());
      assertEquals("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertNotNull(elements0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      
      Document document5 = (Document)document4.nextElementSibling();
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals(1, document4.siblingIndex());
      assertEquals("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertEquals("Rm?_ka3`y=_P", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(3, document5.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals(2, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertTrue(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document2));
      assertNotNull(document5);
      assertNotSame(document4, document5);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      assertNotSame(document5, document2);
      assertSame(document5, document1);
      assertSame(document5, document3);
      
      Elements elements1 = document0.nextElementSiblings();
      assertEquals("#document", document0.nodeName());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(2, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      // Undeclared exception!
      document0.val("org.ysoup.nodes.E=ement$2");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "revvlsed";
      Element element0 = new Element("revvlsed");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("revvlsed", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("revvlsed", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.val("revvlsed");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("revvlsed", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("revvlsed", element0.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("revvlsed", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("revvlsed", element1.tagName());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = element0.appendChild(element1);
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("revvlsed", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("revvlsed", element0.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("revvlsed", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("revvlsed", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals("revvlsed", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("revvlsed", element2.nodeName());
      assertNotNull(element2);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      assertEquals(":last-child", evaluator_IsLastChild0.toString());
      assertNotNull(evaluator_IsLastChild0);
      
      // Undeclared exception!
      element2.is((Evaluator) evaluator_IsLastChild0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Element element0 = new Element("br");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals("br", element0.nodeName());
      assertNotNull(element0);
      
      DataNode dataNode0 = DataNode.createFromEncoded("org.jsoup.select.evaluator$isnthlastoftype", "XHbl?!wqI}");
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      DataNode dataNode1 = dataNode0.setWholeData("br");
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode1.nodeName());
      assertFalse(dataNode1.hasParent());
      assertEquals(0, dataNode1.siblingIndex());
      assertNotNull(dataNode1);
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      
      element0.setParentNode(dataNode1);
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals("br", element0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode1.nodeName());
      assertFalse(dataNode1.hasParent());
      assertEquals(0, dataNode1.siblingIndex());
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      
      Elements elements0 = element0.getElementsContainingOwnText("");
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals("br", element0.nodeName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        element0.append("XHbl?!wqI}");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "br";
      Element element0 = new Element("br");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("br", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = parser0.parseFragmentInput("br", element0, "br");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("br", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      element0.childNodes = list0;
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("br", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(element0.childNodes.isEmpty());
      assertEquals(1, element0.childNodes.size());
      
      // Undeclared exception!
      try { 
        element0.prependElement("br");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      String string0 = "er";
      Document document0 = Parser.parseBodyFragmentRelaxed("er", "er");
      assertEquals("er", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("er");
      assertEquals("er", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("er", element0.baseUri());
      assertEquals("er", element0.nodeName());
      assertEquals("er", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      List<Node> list0 = element0.childNodes();
      assertEquals("er", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("er", element0.baseUri());
      assertEquals("er", element0.nodeName());
      assertEquals("er", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      document0.childNodes = list0;
      assertEquals("er", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("er", element0.baseUri());
      assertEquals("er", element0.nodeName());
      assertEquals("er", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertTrue(document0.childNodes.isEmpty());
      assertEquals(0, document0.childNodes.size());
      
      // Undeclared exception!
      try { 
        document0.prependText("er");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Element element0 = new Element("revvlsed");
      assertEquals("", element0.baseUri());
      assertEquals("revvlsed", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("revvlsed", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(19);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(19, charBuffer0.remaining());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasArray());
      assertEquals(19, charBuffer0.length());
      assertEquals(19, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(19, charBuffer0.capacity());
      assertNotNull(charBuffer0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings2.prepareEncoder();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotNull(charsetEncoder0);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(false);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(charBuffer0, 19, document_OutputSettings4);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)76;
      byteArray0[1] = (byte)119;
      byteArray0[2] = (byte)37;
      byteArray0[3] = (byte) (-38);
      byteArray0[4] = (byte) (-101);
      byteArray0[5] = (byte) (-25);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)76, (byte)119, (byte)37, (byte) (-38), (byte) (-101), (byte) (-25)}, byteArray0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      boolean boolean3 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F<dP4NO_[#o.,L-h]w!");
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      Element element0 = new Element("&>JYU.\"p;(BW8MDJ7");
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("&>JYU.\"p;(BW8MDJ7", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("&>JYU.\"p;(BW8MDJ7", element0.nodeName());
      assertNotNull(element0);
      
      Elements elements0 = element0.parents();
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("&>JYU.\"p;(BW8MDJ7", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("&>JYU.\"p;(BW8MDJ7", element0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      List<Node> list0 = element0.siblingNodes();
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("&>JYU.\"p;(BW8MDJ7", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("&>JYU.\"p;(BW8MDJ7", element0.nodeName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      Elements elements1 = element0.getElementsMatchingOwnText("Amiu Tk=.O,}");
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("&>JYU.\"p;(BW8MDJ7", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("&>JYU.\"p;(BW8MDJ7", element0.nodeName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      
      element0.siblingIndex = (-2911);
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("&>JYU.\"p;(BW8MDJ7", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals((-2911), element0.siblingIndex());
      assertEquals("&>JYU.\"p;(BW8MDJ7", element0.nodeName());
      
      Elements elements2 = element0.nextElementSiblings();
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("&>JYU.\"p;(BW8MDJ7", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals((-2911), element0.siblingIndex());
      assertEquals("&>JYU.\"p;(BW8MDJ7", element0.nodeName());
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotNull(elements2);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      List<DataNode> list1 = element0.dataNodes();
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("&>JYU.\"p;(BW8MDJ7", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals((-2911), element0.siblingIndex());
      assertEquals("&>JYU.\"p;(BW8MDJ7", element0.nodeName());
      assertNotNull(list1);
      
      Element element1 = element0.appendText("");
      assertEquals("&>JYU.\"p;(BW8MDJ7", element1.tagName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals((-2911), element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("&>JYU.\"p;(BW8MDJ7", element1.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("&>JYU.\"p;(BW8MDJ7", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals((-2911), element0.siblingIndex());
      assertEquals("&>JYU.\"p;(BW8MDJ7", element0.nodeName());
      assertNotNull(element1);
      assertSame(element1, element0);
      assertSame(element0, element1);
      
      // Undeclared exception!
      try { 
        element1.wrap("F<dP4NO_[#o.,L-h]w!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parse("s+", "embed");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("embed", document0.location());
      assertEquals("embed", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      CDataNode cDataNode0 = new CDataNode((String) null);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      TextNode textNode0 = cDataNode0.text("embed");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertFalse(textNode0.hasParent());
      assertEquals("#cdata", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      
      Document document1 = (Document)document0.appendChild(textNode0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("embed", document0.location());
      assertEquals("embed", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertTrue(cDataNode0.hasParent());
      assertEquals(1, cDataNode0.siblingIndex());
      assertEquals("#cdata", textNode0.nodeName());
      assertEquals(1, textNode0.siblingIndex());
      assertTrue(textNode0.hasParent());
      assertEquals("embed", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("embed", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      assertSame(document1, document0);
      
      String string0 = document0.data();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("embed", document0.location());
      assertEquals("embed", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("embed", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("eVj{xJ", "eVj{xJ");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("eVj{xJ", document0.baseUri());
      assertEquals("eVj{xJ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsContainingOwnText("eVj{xJ");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("eVj{xJ", document0.baseUri());
      assertEquals("eVj{xJ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      assertNotNull(mockFileOutputStream0);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      assertFalse(fileDescriptor0.valid());
      assertNotNull(outputStreamWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset((Charset) null);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertNotNull(document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.indentAmount(2380);
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(2380, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(2380, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertEquals(2380, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(2380, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.outline());
      assertNotNull(document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.outline(true);
      assertTrue(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(2380, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(2380, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertEquals(2380, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings4.outline());
      assertEquals(2380, document_OutputSettings4.indentAmount());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings4.syntax());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings5.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings5.escapeMode());
      assertTrue(document_OutputSettings5.prettyPrint());
      assertTrue(document_OutputSettings5.outline());
      assertEquals(2380, document_OutputSettings5.indentAmount());
      assertNotNull(document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings5);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings5);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      assertSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings2);
      assertSame(document_OutputSettings5, document_OutputSettings0);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertSame(document_OutputSettings5, document_OutputSettings3);
      
      // Undeclared exception!
      document0.outerHtmlTail(outputStreamWriter0, 2380, document_OutputSettings5);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      String string0 = "z?e;;,~8i@)lw0eb*";
      Document document0 = Parser.parseBodyFragment("z?e;;,~8i@)lw0eb*", "z?e;;,~8i@)lw0eb*");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("z?e;;,~8i@)lw0eb*", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z?e;;,~8i@)lw0eb*", document0.location());
      assertNotNull(document0);
      
      String string1 = ".";
      String string2 = "java.lang.string@0000000047";
      DataNode dataNode0 = new DataNode(".", "java.lang.string@0000000047");
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertNotNull(dataNode0);
      
      Document document1 = (Document)document0.appendChild(dataNode0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("z?e;;,~8i@)lw0eb*", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z?e;;,~8i@)lw0eb*", document0.location());
      assertTrue(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(1, dataNode0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("z?e;;,~8i@)lw0eb*", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("z?e;;,~8i@)lw0eb*", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("z?e;;,~8i@)lw0eb*", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z?e;;,~8i@)lw0eb*", document0.location());
      assertEquals("z?e;;,~8i@)lw0eb*", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      assertSame(document0, document1);
      
      Element element1 = element0.toggleClass("ONNH R5P7A`MfyZr");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("z?e;;,~8i@)lw0eb*", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z?e;;,~8i@)lw0eb*", document0.location());
      assertEquals("z?e;;,~8i@)lw0eb*", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("z?e;;,~8i@)lw0eb*", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = element0.appendTo(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("z?e;;,~8i@)lw0eb*", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z?e;;,~8i@)lw0eb*", document0.location());
      assertEquals("z?e;;,~8i@)lw0eb*", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("body", element2.nodeName());
      assertEquals("z?e;;,~8i@)lw0eb*", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals(2, element2.siblingIndex());
      assertNotNull(element2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      
      Element element3 = element2.appendChild(dataNode0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("z?e;;,~8i@)lw0eb*", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("z?e;;,~8i@)lw0eb*", document0.location());
      assertTrue(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(1, dataNode0.siblingIndex());
      assertEquals("z?e;;,~8i@)lw0eb*", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.tagName());
      assertEquals("body", element2.nodeName());
      assertEquals("z?e;;,~8i@)lw0eb*", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals(2, element2.childNodeSize());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element3.hasParent());
      assertEquals("body", element3.nodeName());
      assertEquals(2, element3.childNodeSize());
      assertEquals(1, element3.siblingIndex());
      assertEquals("z?e;;,~8i@)lw0eb*", element3.baseUri());
      assertTrue(element3.isBlock());
      assertEquals("body", element3.tagName());
      assertNotNull(element3);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element0, element3);
      assertSame(element2, element1);
      assertSame(element2, element0);
      assertSame(element2, element3);
      assertSame(element3, element0);
      assertSame(element3, element1);
      assertSame(element3, element2);
      
      int int0 = 1;
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) element0;
      String string3 = "org.jsoup.select.Evaluator$Attribute";
      // Undeclared exception!
      try { 
        Tag.valueOf("org.jsoup.select.Evaluator$Attribute", (ParseSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parse("A):s}v(P;DK_", "q@G\"9%gX<!X[E*");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("q@G\"9%gX<!X[E*", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("q@G\"9%gX<!X[E*", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Element element0 = document0.head();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("q@G\"9%gX<!X[E*", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("q@G\"9%gX<!X[E*", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("q@G\"9%gX<!X[E*", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      document0.setParentNode(element0);
      assertEquals("#root", document0.tagName());
      assertEquals("q@G\"9%gX<!X[E*", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("q@G\"9%gX<!X[E*", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("q@G\"9%gX<!X[E*", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      Document document1 = document0.clone();
      assertEquals("#root", document0.tagName());
      assertEquals("q@G\"9%gX<!X[E*", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("q@G\"9%gX<!X[E*", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("q@G\"9%gX<!X[E*", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("q@G\"9%gX<!X[E*", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Attributes attributes0 = document1.attributes();
      assertEquals("#root", document0.tagName());
      assertEquals("q@G\"9%gX<!X[E*", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("q@G\"9%gX<!X[E*", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("q@G\"9%gX<!X[E*", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("q@G\"9%gX<!X[E*", document1.baseUri());
      assertEquals(0, attributes0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(attributes0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Elements elements0 = document1.previousElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals("q@G\"9%gX<!X[E*", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("q@G\"9%gX<!X[E*", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("q@G\"9%gX<!X[E*", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("q@G\"9%gX<!X[E*", document1.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element1 = document0.parent();
      assertEquals("#root", document0.tagName());
      assertEquals("q@G\"9%gX<!X[E*", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("q@G\"9%gX<!X[E*", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", element1.tagName());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("q@G\"9%gX<!X[E*", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertNotNull(element1);
      assertNotSame(document0, document1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("k#gnrvf9e=y8", parseSettings0);
      assertFalse(tag0.isData());
      assertEquals("k#gnrvf9e=y8", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals("k#gnrvf9e=y8", tag0.getName());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "k#gnrvf9e=y8", (Attributes) null);
      assertFalse(tag0.isData());
      assertEquals("k#gnrvf9e=y8", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals("k#gnrvf9e=y8", tag0.getName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("k#gnrvf9e=y8", formElement0.tagName());
      assertEquals("k#gnrvf9e=y8", formElement0.baseUri());
      assertEquals("k#gnrvf9e=y8", formElement0.nodeName());
      assertNotNull(formElement0);
      
      Elements elements0 = formElement0.getElementsByAttributeValue("title", "k#gnrvf9e=y8");
      assertFalse(tag0.isData());
      assertEquals("k#gnrvf9e=y8", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertEquals("k#gnrvf9e=y8", tag0.getName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("k#gnrvf9e=y8", formElement0.tagName());
      assertEquals("k#gnrvf9e=y8", formElement0.baseUri());
      assertEquals("k#gnrvf9e=y8", formElement0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string0 = "value";
      Document document0 = Parser.parse("k#gnrvf9e=y8", "value");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.location());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.location());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.location());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("value", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Element element0 = document2.body();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.location());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("value", document2.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("value", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      element0.parentNode = (Node) document2;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("value", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.location());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("value", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("value", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("value", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("value", document2.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("value", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.parentNode.siblingIndex());
      assertFalse(element0.parentNode.hasParent());
      
      String string1 = "TlXIA3XD;%+";
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("Z9>&H{$Fv[w(~ls", "TlXIA3XD;%+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = new Document(" ");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("br");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertEquals(" ", element0.baseUri());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsContainingOwnText("br");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = element0.getElementsByAttributeValueNot("br", " ");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertEquals(" ", element0.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      
      Document document1 = (Document)document0.val("br");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(" ", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "revvlsed";
      Document document0 = Parser.parseBodyFragment("revvlsed", "(");
      assertEquals(0, document0.siblingIndex());
      assertEquals("(", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("(", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("revvlsed", false);
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertNotNull(xmlDeclaration0);
      
      document0.setParentNode(xmlDeclaration0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("(", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("(", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      
      Document document1 = Parser.parse("(", "(");
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("(", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("(", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      Elements elements0 = document1.previousElementSiblings();
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("(", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("(", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "java.lang.string@0000000058 6`";
      String string1 = "`x$$=2C";
      Document document0 = Parser.parse("java.lang.string@0000000058 6`", "`x$$=2C");
      assertEquals("#root", document0.tagName());
      assertEquals("`x$$=2C", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("`x$$=2C", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      String string2 = "";
      Comment comment0 = new Comment("java.lang.string@0000000058 6`");
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertNotNull(xmlDeclaration0);
      
      Document document1 = (Document)document0.doClone(xmlDeclaration0);
      assertEquals("#root", document0.tagName());
      assertEquals("`x$$=2C", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("`x$$=2C", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("`x$$=2C", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("`x$$=2C", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document1.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Document.createShell("28;c_0C?");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("28;c_0C?", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("28;c_0C?", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      document0.setSiblingIndex((-1882659226));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("28;c_0C?", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("28;c_0C?", document0.baseUri());
      assertEquals((-1882659226), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.setParentNode(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("28;c_0C?", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("28;c_0C?", document0.baseUri());
      assertEquals((-1882659226), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("28;c_0C?", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("28;c_0C?", document0.baseUri());
      assertEquals((-1882659226), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string0 = "68>1U$J8i~D>";
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan((-1882659226));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("{UTZV#GxsK{2(#b!", parseSettings0);
      assertEquals("{utzv#gxsk{2(#b!", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("{utzv#gxsk{2(#b!", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)31;
      byteArray0[1] = (byte)43;
      byteArray0[2] = (byte) (-1);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(3, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)31, (byte)43, (byte) (-1)}, byteArray0);
      
      Attributes attributes1 = attributes0.put("", "{UTZV#GxsK{2(#b!");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      String string0 = parseSettings0.normalizeTag("{UTZV#GxsK{2(#b!");
      assertEquals("{utzv#gxsk{2(#b!", string0);
      assertNotNull(string0);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = attributes1.hasKeyIgnoreCase("");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "g2``8~)[", attributes1);
      assertEquals("{utzv#gxsk{2(#b!", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("{utzv#gxsk{2(#b!", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("g2``8~)[", pseudoTextElement0.baseUri());
      assertEquals("{utzv#gxsk{2(#b!", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("{utzv#gxsk{2(#b!", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertNotNull(pseudoTextElement0);
      
      String string1 = pseudoTextElement0.toString();
      assertEquals("{utzv#gxsk{2(#b!", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("{utzv#gxsk{2(#b!", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("g2``8~)[", pseudoTextElement0.baseUri());
      assertEquals("{utzv#gxsk{2(#b!", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("{utzv#gxsk{2(#b!", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      int int0 = pseudoTextElement0.elementSiblingIndex();
      assertEquals("{utzv#gxsk{2(#b!", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("{utzv#gxsk{2(#b!", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("g2``8~)[", pseudoTextElement0.baseUri());
      assertEquals("{utzv#gxsk{2(#b!", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("{utzv#gxsk{2(#b!", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(0, int0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      boolean boolean3 = attributes0.hasKeyIgnoreCase("InserM osti8n o_ o[?bounds.");
      assertEquals(1, attributes0.size());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3 == boolean2);
      assertFalse(boolean3);
      assertSame(attributes0, attributes1);
      
      List<TextNode> list0 = pseudoTextElement0.textNodes();
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals("{utzv#gxsk{2(#b!", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("{utzv#gxsk{2(#b!", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("g2``8~)[", pseudoTextElement0.baseUri());
      assertEquals("{utzv#gxsk{2(#b!", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("{utzv#gxsk{2(#b!", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertNotNull(list0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.clone();
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotNull(attributes2);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      
      Elements elements0 = pseudoTextElement0.getElementsMatchingOwnText("48+dT|");
      assertEquals("{utzv#gxsk{2(#b!", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("{utzv#gxsk{2(#b!", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("g2``8~)[", pseudoTextElement0.baseUri());
      assertEquals("{utzv#gxsk{2(#b!", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("{utzv#gxsk{2(#b!", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertNotNull(elements0);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      
      Elements elements1 = pseudoTextElement0.getElementsByAttributeValueMatching("", "");
      assertEquals("{utzv#gxsk{2(#b!", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("{utzv#gxsk{2(#b!", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals(1, attributes0.size());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertEquals(1, attributes1.size());
      assertEquals("g2``8~)[", pseudoTextElement0.baseUri());
      assertEquals("{utzv#gxsk{2(#b!", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("{utzv#gxsk{2(#b!", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(attributes0.equals((Object)attributes2));
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(attributes1.equals((Object)attributes2));
      assertNotNull(elements1);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(elements1, elements0);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      
      int int1 = pseudoTextElement0.childNodeSize();
      assertEquals("{utzv#gxsk{2(#b!", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("{utzv#gxsk{2(#b!", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals("g2``8~)[", pseudoTextElement0.baseUri());
      assertEquals("{utzv#gxsk{2(#b!", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("{utzv#gxsk{2(#b!", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(attributes0.equals((Object)attributes2));
      assertTrue(int1 == int0);
      assertFalse(attributes1.equals((Object)attributes2));
      assertEquals(0, int1);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = new Document(" ");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(45);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      StringReader stringReader0 = new StringReader(" ");
      assertNotNull(stringReader0);
      
      Document document1 = parser1.parseInput((Reader) stringReader0, "java.lang.string@0000000081");
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      boolean boolean0 = document1.hasText();
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertFalse(boolean0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      String string0 = "&quot;";
      Document document0 = parser0.parseInput("&quot;", "&quot;");
      assertFalse(parser0.isTrackErrors());
      assertEquals("&quot;", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("&quot;", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      DocumentType documentType0 = new DocumentType("&quot;", "&quot;", "&quot;", "&quot;");
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertFalse(documentType0.hasParent());
      assertNotNull(documentType0);
      
      document0.parentNode = (Node) documentType0;
      assertFalse(parser0.isTrackErrors());
      assertEquals("&quot;", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("&quot;", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertFalse(documentType0.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      
      Element element0 = document0.body();
      assertFalse(parser0.isTrackErrors());
      assertEquals("&quot;", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("&quot;", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("&quot;", element0.baseUri());
      assertNotNull(element0);
      
      int int0 = element0.childNodeSize();
      assertFalse(parser0.isTrackErrors());
      assertEquals("&quot;", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("&quot;", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("&quot;", element0.baseUri());
      assertEquals(1, int0);
      
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Element element1 = element0.insertChildren(1, (Collection<? extends Node>) linkedHashSet0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("&quot;", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("&quot;", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("&quot;", element0.baseUri());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("&quot;", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Document document1 = (Document)document0.attr("SYSTEM", "PUBLIC");
      assertFalse(parser0.isTrackErrors());
      assertEquals("&quot;", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("&quot;", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("&quot;", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("&quot;", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      int int1 = 124;
      StringBuilder stringBuilder0 = new StringBuilder(124);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.append((String) null);
      assertEquals("null", stringBuilder0.toString());
      assertEquals("null", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      int int2 = (-2);
      int int3 = (-389);
      // Undeclared exception!
      try { 
        stringBuilder1.append((CharSequence) stringBuilder0, (-2), (-389));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -2, end -389, s.length() 4
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = new Document(" ");
      assertFalse(document0.hasParent());
      assertEquals(" ", document0.baseUri());
      assertEquals(" ", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("br");
      assertFalse(document0.hasParent());
      assertEquals(" ", document0.baseUri());
      assertEquals(" ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertEquals(" ", element0.baseUri());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsContainingOwnText("br");
      assertFalse(document0.hasParent());
      assertEquals(" ", document0.baseUri());
      assertEquals(" ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Tag tag0 = element0.tag();
      assertFalse(document0.hasParent());
      assertEquals(" ", document0.baseUri());
      assertEquals(" ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertEquals(" ", element0.baseUri());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("br", tag0.getName());
      assertTrue(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals("br", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertNotNull(tag0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell("28;c_0C?");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("28;c_0C?", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("28;c_0C?", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      document0.setSiblingIndex((-1882659226));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-1882659226), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("28;c_0C?", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("28;c_0C?", document0.location());
      assertFalse(document0.hasParent());
      
      document0.setParentNode(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals((-1882659226), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("28;c_0C?", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("28;c_0C?", document0.location());
      
      Elements elements0 = document0.previousElementSiblings();
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals((-1882659226), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("28;c_0C?", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("28;c_0C?", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document1 = (Document)document0.attr("68>1U$J8i~D>", true);
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals((-1882659226), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("28;c_0C?", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("28;c_0C?", document0.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("28;c_0C?", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("28;c_0C?", document1.location());
      assertEquals((-1882659226), document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Document.createShell("co|");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("co|", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("co|", document0.baseUri());
      assertNotNull(document0);
      
      document0.setSiblingIndex((-3194));
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("co|", document0.location());
      assertEquals((-3194), document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("co|", document0.baseUri());
      
      Document document1 = (Document)document0.toggleClass("co|");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("co|", document0.location());
      assertEquals((-3194), document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("co|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("co|", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals((-3194), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("co|", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.toString();
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("co|", document0.location());
      assertEquals((-3194), document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("co|", document0.baseUri());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.addClass("co|");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("co|", document0.location());
      assertEquals((-3194), document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("co|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("co|", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals((-3194), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("co|", document1.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("co|", document2.baseUri());
      assertEquals((-3194), document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("co|", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = document2.hasClass("java.lang.string@0000000058");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("co|", document0.location());
      assertEquals((-3194), document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("co|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("co|", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals((-3194), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("co|", document1.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("co|", document2.baseUri());
      assertEquals((-3194), document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("co|", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(62);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      StringReader stringReader0 = new StringReader("Children collectioc to be inserted must not be null.");
      assertNotNull(stringReader0);
      
      CharBuffer charBuffer0 = CharBuffer.allocate(9);
      assertEquals(9, charBuffer0.remaining());
      assertEquals(9, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(9, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(9, charBuffer0.length());
      assertNotNull(charBuffer0);
      
      int int0 = stringReader0.read(charBuffer0);
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.capacity());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("", charBuffer0.toString());
      assertEquals(9, charBuffer0.limit());
      assertTrue(charBuffer0.hasArray());
      assertEquals(9, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(9, int0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = parser1.parseInput((Reader) stringReader0, "html");
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("html", document0.location());
      assertNotNull(document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document1 = document0.normalise();
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("html", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("html", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = "width must be > 0";
      Elements elements0 = document0.select("width must be > 0");
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("html", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document1);
      
      Elements elements1 = document0.getElementsByAttributeValueEnding(">", "w8_h~Dc5vXD]RZ%cg?");
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("html", document0.location());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = document1.getElementsByIndexGreaterThan(62);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("html", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("html", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotNull(elements2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      String string1 = document1.html();
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("html", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("html", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(string1.equals((Object)string0));
      assertEquals("<html>\n <head></head>\n <body>\n  collectioc to be inserted must not be null. \n </body>\n</html>", string1);
      assertNotNull(string1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.appendChild(document0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("html", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("html", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("html", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("html", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertNotNull(document2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      document2.childNodes = null;
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("html", document0.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("html", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("html", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("html", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document1.getElementsByAttribute("_@r0");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Document.createShell("MYzd@Eq,RMc`");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("MYzd@Eq,RMc`", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("MYzd@Eq,RMc`", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("v0lzMY");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("MYzd@Eq,RMc`", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("MYzd@Eq,RMc`", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("MYzd@Eq,RMc`", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("MYzd@Eq,RMc`", document1.baseUri());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.toString();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("MYzd@Eq,RMc`", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("MYzd@Eq,RMc`", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.addClass("<html>\n <head></head>\n <body></body>\n</html>");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("MYzd@Eq,RMc`", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("MYzd@Eq,RMc`", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("MYzd@Eq,RMc`", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("MYzd@Eq,RMc`", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document2.getElementsMatchingOwnText("<html>\n <head></head>\n <body></body>\n</html>");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("MYzd@Eq,RMc`", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("MYzd@Eq,RMc`", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("MYzd@Eq,RMc`", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("MYzd@Eq,RMc`", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.text("MYzd@Eq,RMc`");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("MYzd@Eq,RMc`", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("MYzd@Eq,RMc`", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("MYzd@Eq,RMc`", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("MYzd@Eq,RMc`", document3.location());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      Document document4 = (Document)document3.toggleClass("v0lzMY");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("MYzd@Eq,RMc`", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("MYzd@Eq,RMc`", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("MYzd@Eq,RMc`", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("MYzd@Eq,RMc`", document3.location());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("MYzd@Eq,RMc`", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("MYzd@Eq,RMc`", document4.baseUri());
      assertFalse(document4.hasParent());
      assertNotNull(document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      
      boolean boolean0 = document3.hasClass("v0lzMY");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("MYzd@Eq,RMc`", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("MYzd@Eq,RMc`", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("MYzd@Eq,RMc`", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("MYzd@Eq,RMc`", document3.location());
      assertTrue(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertSame(document3, document1);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("er", "er");
      assertFalse(document0.isBlock());
      assertEquals("er", document0.location());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("Rk(qP;t*8&yv5");
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.shallowClone();
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(node0.hasParent());
      assertEquals("#cdata", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertFalse(node0.equals((Object)cDataNode0));
      assertNotNull(node0);
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      
      document0.parentNode = node0;
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("er", document0.location());
      assertEquals("er", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(node0.hasParent());
      assertEquals("#cdata", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      
      document0.title("er");
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("er", document0.location());
      assertEquals("er", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Element element0 = new Element("mark");
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("mark", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("mark", element0.nodeName());
      assertNotNull(element0);
      
      String string0 = element0.outerHtml();
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("mark", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("mark", element0.nodeName());
      assertEquals("<mark></mark>", string0);
      assertNotNull(string0);
      
      Tag tag0 = element0.tag();
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("mark", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("mark", element0.nodeName());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("mark", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertEquals("mark", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertNotNull(tag0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Document.createShell("er");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("er", document0.location());
      assertEquals("er", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("br");
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("er", document0.location());
      assertEquals("er", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", element0.nodeName());
      assertEquals("er", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsContainingOwnText("er");
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("er", document0.location());
      assertEquals("er", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Pattern pattern0 = Pattern.compile("br", 1);
      assertEquals(1, pattern0.flags());
      assertEquals("br", pattern0.toString());
      assertEquals("br", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements1 = element0.getElementsMatchingText(pattern0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("er", document0.location());
      assertEquals("er", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", element0.nodeName());
      assertEquals("er", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, pattern0.flags());
      assertEquals("br", pattern0.toString());
      assertEquals("br", pattern0.pattern());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      
      Element element1 = document0.child(1);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("er", document0.location());
      assertEquals("er", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("html", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.tagName());
      assertEquals("er", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Element element0 = new Element("-^t0y:]A7]");
      assertFalse(element0.isBlock());
      assertEquals("-^t0y:]A7]", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("-^t0y:]A7]", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.settings((ParseSettings) null);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = parser1.parseInput("java.lang.string@0000000086", "java.lang.string@0000000086");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      // Undeclared exception!
      try { 
        document0.prependElement("pRqY~ !-Pwv#uxLiu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parse("mark", "mark");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mark", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mark", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("br");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mark", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mark", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("mark", element0.baseUri());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      document0.updateMetaCharsetElement(true);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mark", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mark", document0.location());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Element element1 = element0.appendElement("mark");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mark", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mark", document0.location());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("mark", element0.baseUri());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("mark", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("mark", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("mark", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      element1.outerHtml((Appendable) stringWriter0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mark", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mark", document0.location());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("mark", element0.baseUri());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("mark", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("mark", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("mark", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("<mark></mark>", stringWriter0.toString());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String string0 = document0.html();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mark", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mark", document0.location());
      assertTrue(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<br><mark></mark></br>\n<html>\n <head></head>\n <body>\n  mark\n </body>\n</html>", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Element element0 = new Element("kNky");
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("kNky", element0.nodeName());
      assertEquals("kNky", element0.tagName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Elements elements0 = element0.getElementsByClass("kNky");
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("kNky", element0.nodeName());
      assertEquals("kNky", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Pattern pattern0 = Pattern.compile("kNky");
      assertEquals("kNky", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("kNky", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements1 = element0.getElementsMatchingText(pattern0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("kNky", element0.nodeName());
      assertEquals("kNky", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("kNky", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("kNky", pattern0.pattern());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = element0.getElementsByTag("kNky");
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("kNky", element0.nodeName());
      assertEquals("kNky", element0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertNotNull(elements2);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      element0.setSiblingIndex((-611));
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("kNky", element0.nodeName());
      assertEquals((-611), element0.siblingIndex());
      assertEquals("kNky", element0.tagName());
      assertFalse(element0.hasParent());
      
      Elements elements3 = element0.children();
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("kNky", element0.nodeName());
      assertEquals((-611), element0.siblingIndex());
      assertEquals("kNky", element0.tagName());
      assertFalse(element0.hasParent());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertFalse(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertNotNull(elements3);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      
      Elements elements4 = element0.getElementsMatchingOwnText("hm\"38/7p");
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("kNky", element0.nodeName());
      assertEquals((-611), element0.siblingIndex());
      assertEquals("kNky", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, elements4.size());
      assertTrue(elements4.isEmpty());
      assertTrue(elements4.equals((Object)elements3));
      assertFalse(elements4.equals((Object)elements2));
      assertTrue(elements4.equals((Object)elements1));
      assertTrue(elements4.equals((Object)elements0));
      assertNotNull(elements4);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements3);
      assertNotSame(elements4, elements1);
      
      String string0 = element0.tagName();
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("kNky", element0.nodeName());
      assertEquals((-611), element0.siblingIndex());
      assertEquals("kNky", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("kNky", string0);
      assertNotNull(string0);
      
      Element element1 = element0.html("kNky");
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("kNky", element0.nodeName());
      assertEquals((-611), element0.siblingIndex());
      assertEquals("kNky", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("kNky", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("kNky", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals((-611), element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = element0.empty();
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("kNky", element0.nodeName());
      assertEquals((-611), element0.siblingIndex());
      assertEquals("kNky", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals("kNky", element2.tagName());
      assertFalse(element2.hasParent());
      assertEquals("kNky", element2.nodeName());
      assertEquals((-611), element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertNotNull(element2);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      
      // Undeclared exception!
      try { 
        element2.child((-611));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("ow@aTSgm[j3/bGIu!=", "ow@aTSgm[j3/bGIu!=");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      List<Node> list0 = document0.childNodesCopy();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      document0.childNodes = null;
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.hasText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("28c_l?", "28c_l?");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("28c_l?", document0.location());
      assertEquals("28c_l?", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      TextNode textNode0 = TextNode.createFromEncoded("br");
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      document0.setParentNode(textNode0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("28c_l?", document0.location());
      assertEquals("28c_l?", document0.baseUri());
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      Element element0 = document0.body();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("28c_l?", document0.location());
      assertEquals("28c_l?", document0.baseUri());
      assertEquals("28c_l?", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText("java.lang.string@000000077");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      String string0 = "Chilren collection to b( nserted must noo be null.";
      Document document0 = Parser.parseBodyFragment("Chilren collection to b( nserted must noo be null.", "Chilren collection to b( nserted must noo be null.");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Chilren collection to b( nserted must noo be null.", document0.location());
      assertEquals("Chilren collection to b( nserted must noo be null.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("N1wea?0lI}F Z0");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Chilren collection to b( nserted must noo be null.", document0.location());
      assertEquals("Chilren collection to b( nserted must noo be null.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Chilren collection to b( nserted must noo be null.", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("Chilren collection to b( nserted must noo be null.", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      char[] charArray0 = new char[8];
      charArray0[0] = 'p';
      charArray0[1] = 'T';
      charArray0[2] = ')';
      charArray0[3] = 'M';
      charArray0[4] = 'A';
      charArray0[5] = '=';
      charArray0[6] = 'h';
      charArray0[7] = 'M';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(8, charArray0.length);
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals("pT)MA=hM", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(8, charBuffer0.limit());
      assertArrayEquals(new char[] {'p', 'T', ')', 'M', 'A', '=', 'h', 'M'}, charArray0);
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        document1.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(([+-])?(d+)?)n(s*([+-])?s*d+)?", "acronym");
      assertEquals(0, document0.siblingIndex());
      assertEquals("acronym", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("acronym", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = Document.createShell("java.lang.string@0000000082 tag name must not be m!j-q");
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      DataNode dataNode0 = new DataNode("select");
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertNotNull(dataNode0);
      
      document1.setParentNode(dataNode0);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      
      Elements elements0 = document1.getElementsContainingOwnText("(([+-])?(d+)?)n(s*([+-])?s*d+)?");
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document1.getElementsByIndexGreaterThan(20);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parse("er", " +UcZ~(so$x_vI^dBzP");
      assertEquals(" +UcZ~(so$x_vI^dBzP", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(" +UcZ~(so$x_vI^dBzP", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("er");
      assertEquals(" +UcZ~(so$x_vI^dBzP", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(" +UcZ~(so$x_vI^dBzP", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(" +UcZ~(so$x_vI^dBzP", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("er", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("er", element0.tagName());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      element0.siblingIndex = (-508);
      assertEquals(" +UcZ~(so$x_vI^dBzP", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(" +UcZ~(so$x_vI^dBzP", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals((-508), element0.siblingIndex());
      assertEquals(" +UcZ~(so$x_vI^dBzP", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("er", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("er", element0.tagName());
      assertTrue(element0.hasParent());
      
      // Undeclared exception!
      try { 
        element0.getElementsContainingOwnText(" +UcZ~(so$x_vI^dBzP");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parse("mf", "mf");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("mf", document0.location());
      assertEquals("mf", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Set<String> set0 = document0.classNames();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("mf", document0.location());
      assertEquals("mf", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("mf"));
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "e?_>g\";p($HluFw");
      assertFalse(boolean0);
      
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("org.jsoup.nodes.Element$2", true);
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertNotNull(xmlDeclaration0);
      
      document0.setParentNode(xmlDeclaration0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("mf", document0.location());
      assertEquals("mf", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      
      Document document1 = document0.normalise();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("mf", document0.location());
      assertEquals("mf", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("mf", document1.baseUri());
      assertEquals("mf", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(document1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("inserm osti8n ou o[?bounds. inserm osti8n ou o[?bounds.", "Wfo]qC$)O) SyL@h");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Wfo]qC$)O) SyL@h", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Wfo]qC$)O) SyL@h", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      DataNode dataNode0 = new DataNode(" +xKuDrm*<>-HRNFm", "JvBDqv~QW&~=G");
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      DataNode dataNode1 = dataNode0.setWholeData("Wfo]qC$)O) SyL@h");
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode1.nodeName());
      assertFalse(dataNode1.hasParent());
      assertEquals(0, dataNode1.siblingIndex());
      assertNotNull(dataNode1);
      assertSame(dataNode0, dataNode1);
      assertSame(dataNode1, dataNode0);
      
      document0.parentNode = (Node) dataNode1;
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("Wfo]qC$)O) SyL@h", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Wfo]qC$)O) SyL@h", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode1.nodeName());
      assertFalse(dataNode1.hasParent());
      assertEquals(0, dataNode1.siblingIndex());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      
      String string0 = document0.id();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("Wfo]qC$)O) SyL@h", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Wfo]qC$)O) SyL@h", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("er", "er");
      assertFalse(document0.hasParent());
      assertEquals("er", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("er", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("er");
      assertFalse(document0.hasParent());
      assertEquals("er", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("er", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, element0.siblingIndex());
      assertEquals("er", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("er", element0.baseUri());
      assertEquals("er", element0.nodeName());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.prependText("er");
      assertFalse(document0.hasParent());
      assertEquals("er", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertEquals("er", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("er", document1.baseUri());
      assertEquals("er", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<Node> list0 = document1.childNodesCopy();
      assertFalse(document0.hasParent());
      assertEquals("er", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertEquals("er", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("er", document1.baseUri());
      assertEquals("er", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertNotNull(list0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      element0.childNodes = list0;
      assertFalse(document0.hasParent());
      assertEquals("er", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertEquals("er", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("er", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(3, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("er", element0.baseUri());
      assertEquals("er", element0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("er", document1.baseUri());
      assertEquals("er", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals(3, element0.childNodes.size());
      assertFalse(element0.childNodes.isEmpty());
      
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("er");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      String string0 = "Chilren collection to b( nserted must noo be null.";
      Document document0 = Parser.parseBodyFragment("Chilren collection to b( nserted must noo be null.", "Chilren collection to b( nserted must noo be null.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("Chilren collection to b( nserted must noo be null.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Chilren collection to b( nserted must noo be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      List<Node> list0 = document0.childNodesCopy();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("Chilren collection to b( nserted must noo be null.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Chilren collection to b( nserted must noo be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      document0.childNodes = list0;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("Chilren collection to b( nserted must noo be null.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Chilren collection to b( nserted must noo be null.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document0.childNodes.isEmpty());
      assertEquals(1, document0.childNodes.size());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("Chilren collection to b( nserted must noo be null.", "(\"rq y)]l9~Qh#A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Tag tag0 = Tag.valueOf("m");
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("m", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("m", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("q7f%X;4J", false);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.clone();
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(0, attributes2.size());
      assertTrue(attributes2.equals((Object)attributes1));
      assertTrue(attributes2.equals((Object)attributes0));
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      
      Attributes attributes3 = attributes2.put("q7f%X;4J", "q7f%X;4J");
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertNotNull(attributes3);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "m", attributes3);
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("m", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("m", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals("m", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("m", pseudoTextElement0.tagName());
      assertEquals("m", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertNotNull(pseudoTextElement0);
      
      Elements elements0 = pseudoTextElement0.getElementsByAttributeStarting("q7f%X;4J");
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("m", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("m", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(1, attributes3.size());
      assertEquals("m", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("m", pseudoTextElement0.tagName());
      assertEquals("m", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes0.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes3));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes3.equals((Object)attributes0));
      assertFalse(attributes3.equals((Object)attributes1));
      assertNotNull(elements0);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes0, attributes3);
      assertNotSame(attributes1, attributes3);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertSame(attributes2, attributes3);
      assertNotSame(attributes3, attributes0);
      assertNotSame(attributes3, attributes1);
      assertSame(attributes3, attributes2);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Document.createShell("o|");
      assertFalse(document0.isBlock());
      assertEquals("o|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("o|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("o|");
      assertFalse(document0.isBlock());
      assertEquals("o|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("o|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("o|", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("o|", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.toString();
      assertFalse(document0.isBlock());
      assertEquals("o|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("o|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.addClass("o|");
      assertFalse(document0.isBlock());
      assertEquals("o|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("o|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("o|", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("o|", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("o|", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("o|", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      document1.setSiblingIndex(2662);
      assertFalse(document0.isBlock());
      assertEquals("o|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2662, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("o|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("o|", document1.baseUri());
      assertEquals(2662, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("o|", document1.location());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      boolean boolean0 = document2.hasClass("java.lang.string@0000000058");
      assertFalse(document0.isBlock());
      assertEquals("o|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2662, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("o|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("o|", document1.baseUri());
      assertEquals(2662, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("o|", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("o|", document2.location());
      assertEquals(2662, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("o|", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document0.clone();
      assertFalse(document0.isBlock());
      assertEquals("o|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2662, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("o|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("o|", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("o|", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertFalse(boolean0);
      
      Document document0 = Parser.parseBodyFragment("~G?'n#~", "~G?'n#~");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("~G?'n#~", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("~G?'n#~", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("~G?'n#~");
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.clone();
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(node0.hasParent());
      assertEquals("#cdata", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertFalse(node0.equals((Object)cDataNode0));
      assertNotNull(node0);
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      
      document0.parentNode = node0;
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("~G?'n#~", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("~G?'n#~", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(node0.hasParent());
      assertEquals("#cdata", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      
      String string0 = "pNJ>$fiuseGH#`hr::";
      Elements elements0 = document0.getElementsByAttributeValueEnding("~G?'n#~", "pNJ>$fiuseGH#`hr::");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("~G?'n#~", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("~G?'n#~", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Tag tag0 = document0.tag();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("~G?'n#~", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("~G?'n#~", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("#root", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertNotNull(tag0);
      
      Element element0 = document0.prependElement("body");
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("~G?'n#~", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("~G?'n#~", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("~G?'n#~", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hj0!pzzB'.]S%j", "hj0!pzzB'.]S%j");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("hj0!pzzB'.]S%j", document0.baseUri());
      assertEquals("hj0!pzzB'.]S%j", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertEquals(4, nodeArray0.length);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("hj0!pzzB'.]S%j", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("hj0!pzzB'.]S%j", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      
      Document document1 = (Document)document0.parent();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("hj0!pzzB'.]S%j", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("hj0!pzzB'.]S%j", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("hj0!pzzB'.]S%j", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("hj0!pzzB'.]S%j", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      String string0 = "acronym";
      Tag tag0 = Tag.valueOf("acronym");
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertEquals("acronym", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("acronym", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      FormElement formElement0 = new FormElement(tag0, "acronym", (Attributes) null);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertEquals("acronym", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("acronym", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("acronym", formElement0.tagName());
      assertEquals("acronym", formElement0.nodeName());
      assertEquals("acronym", formElement0.baseUri());
      assertNotNull(formElement0);
      
      formElement0.setSiblingIndex((-2));
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertEquals("acronym", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("acronym", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("acronym", formElement0.tagName());
      assertEquals((-2), formElement0.siblingIndex());
      assertEquals("acronym", formElement0.nodeName());
      assertEquals("acronym", formElement0.baseUri());
      
      Element element0 = formElement0.val("U+`A>n6");
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertEquals("acronym", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("acronym", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("acronym", formElement0.tagName());
      assertEquals((-2), formElement0.siblingIndex());
      assertEquals("acronym", formElement0.nodeName());
      assertEquals("acronym", formElement0.baseUri());
      assertEquals((-2), element0.siblingIndex());
      assertEquals("acronym", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("acronym", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("acronym", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
      
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-2), (Object) formElement0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -2
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Element element0 = new Element("revvlsed");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("revvlsed", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("revvlsed", element0.tagName());
      assertNotNull(element0);
      
      DataNode dataNode0 = DataNode.createFromEncoded("revvlsed", "`2$$d`gcnxu");
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      element0.parentNode = (Node) dataNode0;
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("revvlsed", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("revvlsed", element0.tagName());
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals(0, element0.parentNode.siblingIndex());
      assertFalse(element0.parentNode.hasParent());
      
      String string0 = dataNode0.outerHtml();
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("revvlsed", string0);
      assertNotNull(string0);
      
      String string1 = element0.val();
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("revvlsed", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("revvlsed", element0.tagName());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      // Undeclared exception!
      try { 
        element0.before((Node) dataNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("er", "er");
      assertFalse(document0.isBlock());
      assertEquals("er", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("er");
      assertFalse(document0.isBlock());
      assertEquals("er", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("er", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("er", element0.baseUri());
      assertEquals("er", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.tagName("er");
      assertFalse(document0.isBlock());
      assertEquals("er", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("er", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("er", element0.baseUri());
      assertEquals("er", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("er", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("er", element1.tagName());
      assertEquals("er", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      element1.replaceWith(element0);
      assertFalse(document0.isBlock());
      assertEquals("er", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("er", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("er", element0.baseUri());
      assertEquals("er", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("er", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("er", element1.tagName());
      assertEquals("er", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("er");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("Chilren collection to b( nserted must noo be null.", "Chilren collection to b( nserted must noo be null.");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Chilren collection to b( nserted must noo be null.", document0.baseUri());
      assertEquals("Chilren collection to b( nserted must noo be null.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Chilren collection to b( nserted must noo be null.", document0.baseUri());
      assertEquals("Chilren collection to b( nserted must noo be null.", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Elements elements0 = document0.getElementsByIndexLessThan(8230);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Chilren collection to b( nserted must noo be null.", document0.baseUri());
      assertEquals("Chilren collection to b( nserted must noo be null.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Element element0 = new Element("textarea");
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      String string0 = element0.val();
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Elements elements0 = element0.getElementsContainingOwnText("html");
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Element element1 = element0.prependText("characterreferenceindata");
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.tagName());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals("textarea", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("textarea", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Cdfr^", "Cdfr^");
      assertEquals("Cdfr^", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Cdfr^", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("br");
      assertEquals("Cdfr^", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Cdfr^", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("br", element0.nodeName());
      assertEquals("Cdfr^", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      element0.siblingIndex = (-406);
      assertEquals("Cdfr^", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Cdfr^", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals((-406), element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertEquals("Cdfr^", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("inserm osti8n ou o[?bounds.", "InserM osti8n ou o[?bounds.");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("InserM osti8n ou o[?bounds.", document0.location());
      assertEquals("InserM osti8n ou o[?bounds.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      document0.siblingIndex = (-866);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("InserM osti8n ou o[?bounds.", document0.location());
      assertEquals("InserM osti8n ou o[?bounds.", document0.baseUri());
      assertEquals((-866), document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = document0.hasText();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("InserM osti8n ou o[?bounds.", document0.location());
      assertEquals("InserM osti8n ou o[?bounds.", document0.baseUri());
      assertEquals((-866), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(boolean0);
      
      Document document1 = (Document)document0.prependText("=:@");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("InserM osti8n ou o[?bounds.", document0.location());
      assertEquals("InserM osti8n ou o[?bounds.", document0.baseUri());
      assertEquals((-866), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("InserM osti8n ou o[?bounds.", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-866), document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("InserM osti8n ou o[?bounds.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-34);
      byteArray0[1] = (byte)84;
      byteArray0[2] = (byte)23;
      byteArray0[3] = (byte) (-13);
      byteArray0[4] = (byte)38;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(5, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-34), (byte)84, (byte)23, (byte) (-13), (byte)38}, byteArray0);
      
      Document document0 = Document.createShell("inserm osti8n ou o[?bounds.");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("inserm osti8n ou o[?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("inserm osti8n ou o[?bounds.", document0.location());
      assertNotNull(document0);
      
      Document document1 = Parser.parseBodyFragmentRelaxed("e9FZdlm.|w:%", "");
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      document0.parentNode = (Node) document1;
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("inserm osti8n ou o[?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("inserm osti8n ou o[?bounds.", document0.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      
      Document document2 = (Document)document0.removeClass(":<#Q");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("inserm osti8n ou o[?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("inserm osti8n ou o[?bounds.", document0.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("inserm osti8n ou o[?bounds.", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("inserm osti8n ou o[?bounds.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      document0.setSiblingIndex((-42679123));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("inserm osti8n ou o[?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals((-42679123), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("inserm osti8n ou o[?bounds.", document0.location());
      assertFalse(document0.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      
      // Undeclared exception!
      try { 
        document0.after("inserm osti8n ou o[?bounds.");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -42679122, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("er", "er");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("er", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.wrap("er");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("er", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("er", element1.baseUri());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = element0.cssSelector();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("er", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("html > head:nth-child(2) > body:nth-child(1)", string0);
      assertNotNull(string0);
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Document.createShell("h3");
      assertEquals("h3", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("h3", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      TextNode textNode0 = new TextNode("YIl3 T{`L~v}r\u0002jv", "ScriptDataDoubleEscapedDash");
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      document0.parentNode = (Node) textNode0;
      assertTrue(document0.hasParent());
      assertEquals("h3", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("h3", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      Elements elements0 = document0.getElementsByIndexLessThan(1);
      assertTrue(document0.hasParent());
      assertEquals("h3", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("h3", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(2, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        document0.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "802w";
      Document document0 = Parser.parseBodyFragmentRelaxed("802w", "802w");
      assertFalse(document0.isBlock());
      assertEquals("802w", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("802w", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals("802w", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("802w", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("802w", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      List<Node> list0 = parser1.parseFragmentInput("java.lang.string@0000000080", document0, "802w");
      assertFalse(document0.isBlock());
      assertEquals("802w", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("802w", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      element0.childNodes = list0;
      assertFalse(document0.isBlock());
      assertEquals("802w", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("802w", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("802w", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, element0.childNodes.size());
      assertFalse(element0.childNodes.isEmpty());
      
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.Validate", "java.lang.string@0000000058");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsByAttributeStarting("org.jsoup.helper.Validate");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      DataNode dataNode0 = DataNode.createFromEncoded("org.jsoup.helper.Validate", "\"zQuk");
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertNotNull(dataNode0);
      
      Element element1 = element0.after((Node) dataNode0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(2, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertTrue(dataNode0.hasParent());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("g{*O<!8$eqGAP!$", "inserm osti8n ou o[?bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("inserm osti8n ou o[?bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("inserm osti8n ou o[?bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      DocumentType documentType0 = new DocumentType("inserm osti8n ou o[?bounds.", "inserm osti8n ou o[?bounds.", "g{*O<!8$eqGAP!$", "   ");
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertFalse(documentType0.hasParent());
      assertNotNull(documentType0);
      
      Document document1 = (Document)document0.prependChild(documentType0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("inserm osti8n ou o[?bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("inserm osti8n ou o[?bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(documentType0.hasParent());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("inserm osti8n ou o[?bounds.", document1.baseUri());
      assertEquals("inserm osti8n ou o[?bounds.", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasText();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("inserm osti8n ou o[?bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("inserm osti8n ou o[?bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(boolean0);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#jPMt", "#jPMt");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#jPMt", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#jPMt", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("cmw");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#jPMt", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#jPMt", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("cmw", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("cmw", element0.tagName());
      assertEquals("#jPMt", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte)21;
      byteArray0[1] = (byte)18;
      byteArray0[2] = (byte) (-79);
      byteArray0[3] = (byte)43;
      byteArray0[4] = (byte) (-11);
      byteArray0[5] = (byte) (-43);
      byteArray0[6] = (byte)16;
      byteArray0[7] = (byte) (-94);
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(8, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte)21, (byte)18, (byte) (-79), (byte)43, (byte) (-11), (byte) (-43), (byte)16, (byte) (-94)}, byteArray0);
      
      Elements elements0 = element0.getElementsContainingOwnText("#jPMt");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#jPMt", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#jPMt", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("cmw", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("cmw", element0.tagName());
      assertEquals("#jPMt", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      CDataNode cDataNode0 = new CDataNode("");
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Node node0 = cDataNode0.shallowClone();
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(node0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertFalse(node0.equals((Object)cDataNode0));
      assertNotNull(node0);
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      
      Element element1 = element0.prependChild(node0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#jPMt", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#jPMt", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("cmw", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("cmw", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("#jPMt", element0.baseUri());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertTrue(node0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("cmw", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("cmw", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("#jPMt", element1.baseUri());
      assertFalse(cDataNode0.equals((Object)node0));
      assertFalse(node0.equals((Object)cDataNode0));
      assertNotNull(element1);
      assertSame(element0, element1);
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertSame(element1, element0);
      
      Elements elements1 = element0.getElementsContainingOwnText((String) null);
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#jPMt", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#jPMt", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("cmw", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("cmw", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("#jPMt", element0.baseUri());
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[OHXCKj^sIXR5{<!@", "1.0");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("1.0", document0.baseUri());
      assertEquals("1.0", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("[OHXCKj^sIXR5{<!@");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("1.0", document0.baseUri());
      assertEquals("1.0", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("[ohxckj^sixr5{<!@", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("[ohxckj^sixr5{<!@", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("1.0", element0.baseUri());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsContainingOwnText("BM|YZjlF");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("1.0", document0.baseUri());
      assertEquals("1.0", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = element0.getElementsByTag("tPj&JVRI/tF2!8!aO.]");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("1.0", document0.baseUri());
      assertEquals("1.0", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("[ohxckj^sixr5{<!@", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("[ohxckj^sixr5{<!@", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("1.0", element0.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Tag tag0 = Tag.valueOf("java.lang.string@0000000046");
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      String string0 = "tfoot";
      Element element0 = new Element(tag0, "tfoot");
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertEquals("tfoot", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("tfoot"));
      
      String string1 = null;
      Tag tag1 = Tag.valueOf("tfoot");
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.canContainBlock());
      assertTrue(tag1.isBlock());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isInline());
      assertFalse(tag1.isSelfClosing());
      assertTrue(tag1.isKnownTag());
      assertEquals("tfoot", tag1.toString());
      assertEquals("tfoot", tag1.getName());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isData());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.equals((Object)tag0));
      assertNotNull(tag1);
      assertNotSame(tag1, tag0);
      
      boolean boolean0 = linkedHashSet0.add((String) null);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.contains("tfoot"));
      
      boolean boolean1 = linkedHashSet0.add(":1*%4_}");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertTrue(boolean1 == boolean0);
      assertTrue(boolean1);
      assertTrue(linkedHashSet0.contains(":1*%4_}"));
      assertFalse(linkedHashSet0.contains("tfoot"));
      
      boolean boolean2 = linkedHashSet0.add(":1*%4_}");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(2, linkedHashSet0.size());
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2 == boolean1);
      assertFalse(boolean2);
      assertTrue(linkedHashSet0.contains(":1*%4_}"));
      assertFalse(linkedHashSet0.contains("tfoot"));
      
      boolean boolean3 = linkedHashSet0.add("java.lang.string@0000000038");
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(3, linkedHashSet0.size());
      assertFalse(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3);
      assertTrue(linkedHashSet0.contains(":1*%4_}"));
      assertFalse(linkedHashSet0.contains("tfoot"));
      
      // Undeclared exception!
      try { 
        element0.classNames((Set<String>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Document.createShell("G|w");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("G|w", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("G|w", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("br");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("G|w", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("G|w", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("br", element0.nodeName());
      assertEquals("G|w", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      String string0 = element0.absUrl("G|w");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("G|w", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("G|w", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("br", element0.nodeName());
      assertEquals("G|w", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Document document1 = Parser.parseBodyFragmentRelaxed("br", "br");
      assertEquals("br", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("br", document1.location());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(79);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Element element1 = document0.prependElement("G|w");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("G|w", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("G|w", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("G|w", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("g|w", element1.tagName());
      assertEquals("g|w", element1.nodeName());
      assertFalse(element1.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(document0, document1);
      assertNotSame(element1, element0);
      
      Document document2 = (Document)document0.prependText("?");
      assertEquals("#document", document0.nodeName());
      assertEquals(4, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("G|w", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("G|w", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(4, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("G|w", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("G|w", document2.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document0.getElementsMatchingText("Pattern syntax error: ");
      assertEquals("#document", document0.nodeName());
      assertEquals(4, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("G|w", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("G|w", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("re", "re");
      assertFalse(document0.hasParent());
      assertEquals("re", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("re", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByIndexLessThan(3378);
      assertFalse(document0.hasParent());
      assertEquals("re", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("re", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string0 = document0.cssSelector();
      assertFalse(document0.hasParent());
      assertEquals("re", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("re", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", string0);
      assertNotNull(string0);
      
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(0, charArray0.length);
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.limit());
      assertEquals("", charBuffer0.toString());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.length());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(0, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertArrayEquals(new char[] {}, charArray0);
      assertNotNull(charBuffer0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(3378);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(3378, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(3378, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(3378, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(3378, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(3378, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(true);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(3378, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(3378, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(3378, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(3378, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertNotNull(document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(3378, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(3378, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(3378, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(3378, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(3378, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.outline());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 3378, document_OutputSettings4);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Document.createShell("G|w");
      assertEquals("G|w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("G|w", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("G|w");
      assertEquals("G|w", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("G|w", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G|w", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("G|w", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = "br";
      Element element0 = document1.prependElement("br");
      assertEquals("G|w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("G|w", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G|w", document1.location());
      assertEquals("G|w", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("G|w", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.nodeName());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("G|w", parseSettings0);
      assertEquals("G|w", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertEquals("G|w", tag0.toString());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertTrue(attributes1.equals((Object)attributes0));
      assertNotNull(attributes1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.put("%ldX3L6|IDX'7", "Z1/<So~H$Y>M");
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotNull(attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "P)<}O)", attributes2);
      assertEquals("G|w", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertEquals("G|w", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("P)<}O)", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("G|w", formElement0.tagName());
      assertEquals("G|w", formElement0.nodeName());
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotNull(formElement0);
      
      Element element1 = element0.doClone(formElement0);
      assertEquals("G|w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("G|w", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G|w", document1.location());
      assertEquals("G|w", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("G|w", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.nodeName());
      assertEquals("G|w", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertEquals("G|w", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("P)<}O)", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("G|w", formElement0.tagName());
      assertEquals("G|w", formElement0.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("br", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("G|w", element1.baseUri());
      assertEquals("br", element1.nodeName());
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      assertNotSame(element1, element0);
      
      Iterator<Attribute> iterator0 = attributes1.iterator();
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertNotNull(iterator0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes1, attributes2);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, true);
      assertEquals("true", stringBuilder0.toString());
      assertEquals("true", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      FormElement formElement1 = new FormElement(tag0, "br", attributes1);
      assertEquals("G|w", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertEquals("G|w", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("G|w", formElement1.tagName());
      assertEquals("G|w", formElement1.nodeName());
      assertEquals("br", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.hasParent());
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(formElement1.equals((Object)formElement0));
      assertNotNull(formElement1);
      
      // Undeclared exception!
      try { 
        stringBuilder1.insert(12, (Object) element0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 12
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Tag tag0 = Tag.valueOf("acronym");
      assertEquals("acronym", tag0.getName());
      assertEquals("acronym", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Tag tag1 = Tag.valueOf("acronym");
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isEmpty());
      assertTrue(tag1.isInline());
      assertEquals("acronym", tag1.getName());
      assertFalse(tag1.formatAsBlock());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isData());
      assertFalse(tag1.isBlock());
      assertEquals("acronym", tag1.toString());
      assertTrue(tag1.isKnownTag());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isSelfClosing());
      assertNotNull(tag1);
      assertSame(tag1, tag0);
      
      Element element0 = new Element(tag0, "acronym", (Attributes) null);
      assertEquals("acronym", tag0.getName());
      assertEquals("acronym", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("acronym", element0.tagName());
      assertEquals("acronym", element0.baseUri());
      assertEquals("acronym", element0.nodeName());
      assertNotNull(element0);
      
      String string0 = "D#BcEdJg0&.";
      Elements elements0 = element0.getElementsByAttributeValueNot("java.lang.string@0000000045", "D#BcEdJg0&.");
      assertEquals("acronym", tag0.getName());
      assertEquals("acronym", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("acronym", element0.tagName());
      assertEquals("acronym", element0.baseUri());
      assertEquals("acronym", element0.nodeName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      assertSame(tag0, tag1);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      assertFalse(boolean0);
      
      Tag tag2 = Tag.valueOf("acronym");
      assertFalse(tag2.isEmpty());
      assertFalse(tag2.preserveWhitespace());
      assertEquals("acronym", tag2.toString());
      assertEquals("acronym", tag2.getName());
      assertFalse(tag2.isBlock());
      assertFalse(tag2.isFormSubmittable());
      assertFalse(tag2.isSelfClosing());
      assertFalse(tag2.canContainBlock());
      assertTrue(tag2.isInline());
      assertTrue(tag2.isKnownTag());
      assertFalse(tag2.isData());
      assertFalse(tag2.isFormListed());
      assertFalse(tag2.formatAsBlock());
      assertNotNull(tag2);
      assertSame(tag2, tag0);
      assertSame(tag2, tag1);
      
      Element element1 = element0.doClone((Node) null);
      assertEquals("acronym", tag0.getName());
      assertEquals("acronym", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("acronym", element0.tagName());
      assertEquals("acronym", element0.baseUri());
      assertEquals("acronym", element0.nodeName());
      assertEquals("acronym", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("acronym", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("acronym", element1.nodeName());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertSame(tag0, tag1);
      assertSame(tag0, tag2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      StringBuilder stringBuilder0 = new StringBuilder();
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      int int0 = 0;
      StringBuilder stringBuilder1 = stringBuilder0.insert(0, true);
      assertEquals("true", stringBuilder0.toString());
      assertEquals("true", stringBuilder1.toString());
      assertNotNull(stringBuilder1);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder1, stringBuilder0);
      
      FormElement formElement0 = new FormElement(tag1, "D#BcEdJg0&.", (Attributes) null);
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isEmpty());
      assertTrue(tag1.isInline());
      assertEquals("acronym", tag1.getName());
      assertFalse(tag1.formatAsBlock());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isData());
      assertFalse(tag1.isBlock());
      assertEquals("acronym", tag1.toString());
      assertTrue(tag1.isKnownTag());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isSelfClosing());
      assertEquals("acronym", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("D#BcEdJg0&.", formElement0.baseUri());
      assertEquals("acronym", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertNotNull(formElement0);
      
      StringBuilder stringBuilder2 = stringBuilder1.insert(0, (Object) formElement0);
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isEmpty());
      assertTrue(tag1.isInline());
      assertEquals("acronym", tag1.getName());
      assertFalse(tag1.formatAsBlock());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isData());
      assertFalse(tag1.isBlock());
      assertEquals("acronym", tag1.toString());
      assertTrue(tag1.isKnownTag());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isSelfClosing());
      assertEquals("<acronym></acronym>true", stringBuilder0.toString());
      assertEquals("<acronym></acronym>true", stringBuilder1.toString());
      assertEquals("acronym", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("D#BcEdJg0&.", formElement0.baseUri());
      assertEquals("acronym", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("<acronym></acronym>true", stringBuilder2.toString());
      assertNotNull(stringBuilder2);
      assertSame(tag1, tag2);
      assertSame(tag1, tag0);
      assertSame(stringBuilder0, stringBuilder1);
      assertSame(stringBuilder0, stringBuilder2);
      assertSame(stringBuilder1, stringBuilder0);
      assertSame(stringBuilder1, stringBuilder2);
      assertSame(stringBuilder2, stringBuilder1);
      assertSame(stringBuilder2, stringBuilder0);
      
      int int1 = 213;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(0);
      assertEquals(0, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(0, document_OutputSettings2.indentAmount());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(0, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      
      // Undeclared exception!
      try { 
        Charset.forName("acronym");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // acronym
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Document.createShell("G|w");
      assertFalse(document0.hasParent());
      assertEquals("G|w", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G|w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("G|w");
      assertFalse(document0.hasParent());
      assertEquals("G|w", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G|w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("G|w", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("G|w", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.prependElement("br");
      assertFalse(document0.hasParent());
      assertEquals("G|w", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G|w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("G|w", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("G|w", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("br", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("G|w", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsContainingOwnText((String) null);
      assertFalse(document0.hasParent());
      assertEquals("G|w", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G|w", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("G|w", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("G|w", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(5, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        Charset.forName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Null charset name
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = new Document("er");
      assertFalse(document0.hasParent());
      assertEquals("er", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("er", document0.baseUri());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasClass("er");
      assertFalse(document0.hasParent());
      assertEquals("er", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("er", document0.baseUri());
      assertFalse(boolean0);
      
      Document document1 = (Document)document0.attr(" ", false);
      assertFalse(document0.hasParent());
      assertEquals("er", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("er", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("er", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("er", document1.baseUri());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(" "));
      
      Document document2 = (Document)document1.classNames((Set<String>) linkedHashSet0);
      assertFalse(document0.hasParent());
      assertEquals("er", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("er", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("er", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("er", document1.baseUri());
      assertFalse(document1.hasParent());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("er", document2.baseUri());
      assertEquals(0, document2.childNodeSize());
      assertEquals("er", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(linkedHashSet0.contains(" "));
      
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      assertEquals("#root", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("#root");
      assertEquals("#root", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.toString();
      assertEquals("#root", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.addClass(" > ");
      assertEquals("#root", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = document2.hasClass("QQ.");
      assertEquals("#root", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      // Undeclared exception!
      try { 
        TextNode.createFromEncoded((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Element element1 = new Element("ek5)_VG1CR!+x\"w");
      assertEquals("ek5)_VG1CR!+x\"w", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("ek5)_VG1CR!+x\"w", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      
      String string0 = element1.cssSelector();
      assertEquals("ek5)_VG1CR!+x\"w", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("ek5)_VG1CR!+x\"w", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertEquals("ek5)_VG1CR!+x\"w", string0);
      assertNotNull(string0);
      assertNotSame(element1, element0);
      
      Element element2 = element0.after((Node) document0);
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("#root", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.tagName());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertNotNull(element2);
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("er", "er");
      assertEquals("#root", document0.tagName());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#root", document0.tagName());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("er", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.append("er");
      assertEquals("#root", document0.tagName());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("er", element0.baseUri());
      assertEquals("er", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Document document1 = (Document)document0.val((String) null);
      assertEquals("#root", document0.tagName());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("er", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("er", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element$2");
      assertEquals("org.jsoup.nodes.Element$2", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("org.jsoup.nodes.Element$2", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements0 = element1.getElementsByAttributeValueMatching((String) null, pattern0);
      assertEquals("#root", document0.tagName());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("er", element0.baseUri());
      assertEquals("er", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("org.jsoup.nodes.Element$2", pattern0.pattern());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      String string0 = element0.cssSelector();
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("html > head", string0);
      assertNotNull(string0);
      
      Element element1 = element0.prependChild(document0);
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.child(0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.tagName());
      assertEquals("html", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsByIndexGreaterThan(1660);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Pattern pattern0 = Pattern.compile("", 1660);
      assertEquals(1660, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertNotNull(pattern0);
      
      Elements elements1 = document0.getElementsMatchingText(pattern0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1660, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(4, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Document.createShell("O");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("O", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("O", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("O", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("O", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("O", element0.baseUri());
      assertNotNull(element0);
      
      String string0 = element0.cssSelector();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("O", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("O", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("O", element0.baseUri());
      assertEquals("html > body", string0);
      assertNotNull(string0);
      
      Element element1 = element0.before((Node) document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("O", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("O", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("O", element0.baseUri());
      assertEquals("O", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      element0.prependElement("html > body");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte) (-32);
      byteArray0[1] = (byte)68;
      byteArray0[2] = (byte)108;
      byteArray0[3] = (byte)14;
      byteArray0[4] = (byte)86;
      byteArray0[5] = (byte)32;
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte)16;
      byteArray0[8] = (byte)127;
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(9, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {(byte) (-32), (byte)68, (byte)108, (byte)14, (byte)86, (byte)32, (byte) (-1), (byte)16, (byte)127}, byteArray0);
      
      Document document0 = Document.createShell("InserMaostion ou o[?bounds.");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("InserMaostion ou o[?bounds.", document0.baseUri());
      assertEquals("InserMaostion ou o[?bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("InserMaostion ou o[?bounds.", document0.baseUri());
      assertEquals("InserMaostion ou o[?bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("InserMaostion ou o[?bounds.", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertNotNull(element0);
      
      Tag tag0 = element0.tag();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("InserMaostion ou o[?bounds.", document0.baseUri());
      assertEquals("InserMaostion ou o[?bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("InserMaostion ou o[?bounds.", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertEquals("head", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("head", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertNotNull(tag0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Document.createShell("O");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("O", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("O", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("O", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("O", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      document0.childNodes = list0;
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("O", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("O", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, document0.childNodes.size());
      assertFalse(document0.childNodes.isEmpty());
      
      Document document1 = (Document)document0.append("O");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("O", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("O", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("O", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("O", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.prependText("O");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("O", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("O", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("O", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("O", document1.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("O", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("O", document2.baseUri());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document0.getElementsMatchingText("_]Nkc7o>");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("O", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("O", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Element element0 = new Element("reversed");
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("reversed", element0.tagName());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      boolean boolean0 = element0.hasSameValue("reversed");
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("reversed", element0.tagName());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(boolean0);
      
      String string0 = element0.val();
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("reversed", element0.tagName());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Elements elements0 = element0.getElementsByIndexLessThan((-2761));
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("reversed", element0.tagName());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Element element1 = element0.append("");
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("reversed", element0.tagName());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals("reversed", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("reversed", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parse("Insert position out of bounds.", "Insert position out of bounds.");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("Insert position out of bounds.");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("Insert position out of bounds.", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      
      Tag tag0 = document0.tag();
      assertEquals(1, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("#root", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertNotNull(tag0);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      
      Elements elements0 = document1.getElementsByAttributeValueMatching("ctV,Hn] ( hQB0H>", "Insert position out of bounds.");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertNotNull(elements0);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      
      List<DataNode> list0 = document2.dataNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertNotNull(list0);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      
      Element element0 = document2.getElementById("zOY.mP~l;0cLa8~H`%");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertNull(element0);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      
      Document document4 = (Document)document2.appendText("zOY.mP~l;0cLa8~H`%");
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("Insert position out of bounds.", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals("Insert position out of bounds.", document4.location());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertNotNull(document4);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document2);
      
      String string0 = document0.cssSelector();
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertNotNull(string0);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      
      Document document5 = document4.clone();
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("Insert position out of bounds.", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals("Insert position out of bounds.", document4.location());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document5.hasParent());
      assertEquals("Insert position out of bounds.", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals("Insert position out of bounds.", document5.location());
      assertEquals(2, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertNotNull(document5);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document5);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertNotSame(document5, document2);
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      
      boolean boolean0 = document5.hasText();
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("Insert position out of bounds.", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals("Insert position out of bounds.", document4.location());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document5.hasParent());
      assertEquals("Insert position out of bounds.", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals("Insert position out of bounds.", document5.location());
      assertEquals(2, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertTrue(boolean0);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document5);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertNotSame(document5, document2);
      assertNotSame(document5, document0);
      assertNotSame(document5, document4);
      
      Elements elements1 = document1.children();
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document1, document4);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = document1.getElementsByIndexEquals(2126);
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertNotNull(elements2);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document1, document5);
      assertNotSame(document1, document4);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      document2.setSiblingIndex((-2107));
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-2107), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals((-2107), document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Document document6 = (Document)document2.removeClass(" ");
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-2107), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.hasParent());
      assertEquals(2, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals((-2107), document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("Insert position out of bounds.", document6.baseUri());
      assertEquals("Insert position out of bounds.", document6.location());
      assertFalse(document6.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals((-2107), document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertNotNull(document6);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document6, document1);
      assertNotSame(document6, document5);
      assertSame(document6, document4);
      assertSame(document6, document2);
      assertSame(document6, document0);
      assertNotSame(document6, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document6);
      assertSame(document2, document4);
      
      Element element1 = document2.prependElement("#root.java.lang.String@0000000146");
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-2107), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals((-2107), document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertNotNull(element1);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document6);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document6);
      assertSame(document2, document4);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Spliterator<Attribute> spliterator0 = attributes0.spliterator();
      assertEquals(0, attributes0.size());
      assertNotNull(spliterator0);
      
      Attributes attributes1 = attributes0.put("multiple", "^A}aHje5^cH");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.clone();
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(attributes2.equals((Object)attributes1));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotNull(attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes1, attributes2);
      assertNotSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(17);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = parser1.parseInput("#", "^A}aHje5^cH");
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("^A}aHje5^cH", document0.location());
      assertEquals("^A}aHje5^cH", document0.baseUri());
      assertNotNull(document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Elements elements0 = document0.getElementsMatchingText("i2@,cq4%CE,J>");
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("^A}aHje5^cH", document0.location());
      assertEquals("^A}aHje5^cH", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document1 = (Document)document0.doClone((Node) null);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("^A}aHje5^cH", document0.location());
      assertEquals("^A}aHje5^cH", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^A}aHje5^cH", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("^A}aHje5^cH", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.append("^A}aHje5^cH");
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("^A}aHje5^cH", document0.location());
      assertEquals("^A}aHje5^cH", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^A}aHje5^cH", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("^A}aHje5^cH", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("^A}aHje5^cH", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("^A}aHje5^cH", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("em", "em");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("em", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      document0.title("em");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("em", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Document.createShell("Gw");
      assertEquals("Gw", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Gw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("Gw");
      assertEquals("Gw", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Gw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Gw", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("Gw", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.toString();
      assertEquals("Gw", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Gw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.addClass("Gw");
      assertEquals("Gw", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Gw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Gw", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("Gw", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Gw", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("Gw", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = document0.hasClass("java.lang.string@0000000057");
      assertEquals("Gw", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Gw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Document document3 = (Document)document0.html("<html>\n <head></head>\n <body></body>\n</html>");
      assertEquals("Gw", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Gw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Gw", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Gw", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Elements elements0 = document2.getElementsByTag("5PP<:Edn)$M#|;4|");
      assertEquals("Gw", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Gw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(3, document1.childNodeSize());
      assertEquals("Gw", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("Gw", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Gw", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("Gw", document2.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("er", "er");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("er");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("er", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("er", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("er", element0.baseUri());
      assertEquals("er", element0.nodeName());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.prependText("er");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("er", document1.baseUri());
      assertEquals("er", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsMatchingText("er");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      Element element1 = element0.addClass("n\"S");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("er", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("er", element0.baseUri());
      assertEquals("er", element0.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("er", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("er", element1.baseUri());
      assertEquals("er", element1.tagName());
      assertNotNull(element1);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset((Charset) null);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(true);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertTrue(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertTrue(document_OutputSettings4.prettyPrint());
      assertTrue(document_OutputSettings4.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings4.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings2);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings3);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertNotSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings4);
      assertNotSame(document_OutputSettings3, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings3);
      
      try { 
        document1.outerHtmlHead(pipedWriter0, (-1), document_OutputSettings4);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^@<orscj", ":matchesOwn(");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":matchesOwn(", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(":matchesOwn(", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      document0.setSiblingIndex(102);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(102, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":matchesOwn(", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(":matchesOwn(", document0.baseUri());
      assertFalse(document0.isBlock());
      
      TextNode textNode0 = new TextNode("p.LUVx>[ez]>~&k+cO", "mE_S#yooF]w1|-RD");
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      document0.setParentNode(textNode0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(102, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":matchesOwn(", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(":matchesOwn(", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("^@<orscj");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parse("area", "area");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("area", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("area", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      String string0 = "inserm ostion ou o[?bounes.";
      Document document1 = Parser.parse("inserm ostion ou o[?bounes.", "r;eCOd");
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("r;eCOd", document1.location());
      assertEquals("r;eCOd", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      document1.childNodes = null;
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("r;eCOd", document1.location());
      assertEquals("r;eCOd", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      // Undeclared exception!
      try { 
        document1.append("r;eCOd");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("sD14y+eT.K|", "sD14y+eT.K|");
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("sD14y+eT.K|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("sD14y+eT.K|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      String string0 = ",dV$/S%@F82K/1?";
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(",dV$/S%@F82K/1?", "sD14y+eT.K|", true);
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertNotNull(xmlDeclaration0);
      
      xmlDeclaration0.setSiblingIndex(63);
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(63, xmlDeclaration0.siblingIndex());
      
      Node node0 = xmlDeclaration0.doClone(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("sD14y+eT.K|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("sD14y+eT.K|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(63, xmlDeclaration0.siblingIndex());
      assertTrue(node0.hasParent());
      assertEquals("#declaration", node0.nodeName());
      assertEquals(63, node0.siblingIndex());
      assertFalse(node0.equals((Object)xmlDeclaration0));
      assertNotNull(node0);
      assertNotSame(xmlDeclaration0, node0);
      assertNotSame(node0, xmlDeclaration0);
      
      Document document1 = (Document)document0.prependChild(xmlDeclaration0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("sD14y+eT.K|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("sD14y+eT.K|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertTrue(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("sD14y+eT.K|", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("sD14y+eT.K|", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(xmlDeclaration0.equals((Object)node0));
      assertNotNull(document1);
      assertSame(document0, document1);
      assertNotSame(xmlDeclaration0, node0);
      assertSame(document1, document0);
      
      Attributes attributes0 = document1.attributes();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("sD14y+eT.K|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("sD14y+eT.K|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertTrue(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("sD14y+eT.K|", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("sD14y+eT.K|", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, attributes0.size());
      assertFalse(xmlDeclaration0.equals((Object)node0));
      assertNotNull(attributes0);
      assertSame(document0, document1);
      assertNotSame(xmlDeclaration0, node0);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.removeClass("sD14y+eT.K|");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("sD14y+eT.K|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("sD14y+eT.K|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("sD14y+eT.K|", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("sD14y+eT.K|", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements0 = document1.siblingElements();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("sD14y+eT.K|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("sD14y+eT.K|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertTrue(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("sD14y+eT.K|", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("sD14y+eT.K|", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(xmlDeclaration0.equals((Object)node0));
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(xmlDeclaration0, node0);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Pattern pattern0 = Pattern.compile(")Y+BHL", 63);
      assertEquals(")Y+BHL", pattern0.pattern());
      assertEquals(63, pattern0.flags());
      assertEquals(")Y+BHL", pattern0.toString());
      assertNotNull(pattern0);
      
      Predicate<String> predicate0 = pattern0.asPredicate();
      assertEquals(")Y+BHL", pattern0.pattern());
      assertEquals(63, pattern0.flags());
      assertEquals(")Y+BHL", pattern0.toString());
      assertNotNull(predicate0);
      
      Elements elements1 = document2.getElementsMatchingText(pattern0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("sD14y+eT.K|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("sD14y+eT.K|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("sD14y+eT.K|", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("sD14y+eT.K|", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(")Y+BHL", pattern0.pattern());
      assertEquals(63, pattern0.flags());
      assertEquals(")Y+BHL", pattern0.toString());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(elements1, elements0);
      
      Document document3 = (Document)document0.val(",dV$/S%@F82K/1?");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("sD14y+eT.K|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("sD14y+eT.K|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("sD14y+eT.K|", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals("sD14y+eT.K|", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      Elements elements2 = document2.getElementsByAttributeValue(",dV$/S%@F82K/1?", "sD14y+eT.K|");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("sD14y+eT.K|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("sD14y+eT.K|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("sD14y+eT.K|", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("sD14y+eT.K|", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotNull(elements2);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.addChildren(63, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 63, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("InserM ostion ou o[?bounds.");
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("InserM ostion ou o[?bounds.");
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("InserM ostion ou o[?bounds.", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasClass("InserM ostion ou o[?bounds.");
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertFalse(boolean0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.tagName("InserM ostion ou o[?bounds.");
      assertFalse(document0.hasParent());
      assertEquals("inserm ostion ou o[?bounds.", document0.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("InserM ostion ou o[?bounds.", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("inserm ostion ou o[?bounds.", document2.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      // Undeclared exception!
      try { 
        document1.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("er", "er");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("er");
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals("er", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("er", element0.nodeName());
      assertEquals("er", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.firstElementSibling();
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals("er", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("er", element0.nodeName());
      assertEquals("er", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("er", element1.nodeName());
      assertEquals("er", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("er", element1.tagName());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = document0.data();
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals("er", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("er", element0.nodeName());
      assertEquals("er", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("InserM ostion ou o[?bounds.", "a^!Si!pXW.7SVl");
      assertEquals(0, document0.siblingIndex());
      assertEquals("a^!Si!pXW.7SVl", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("a^!Si!pXW.7SVl", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      String string0 = document0.cssSelector();
      assertEquals(0, document0.siblingIndex());
      assertEquals("a^!Si!pXW.7SVl", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("a^!Si!pXW.7SVl", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", string0);
      assertNotNull(string0);
      
      Node node0 = document0.nextSibling();
      assertEquals(0, document0.siblingIndex());
      assertEquals("a^!Si!pXW.7SVl", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("a^!Si!pXW.7SVl", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNull(node0);
      
      String string1 = document0.data();
      assertEquals(0, document0.siblingIndex());
      assertEquals("a^!Si!pXW.7SVl", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("a^!Si!pXW.7SVl", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      Elements elements0 = document0.getElementsByAttributeValueContaining("java.lang.string@0000000058 gw", "java.lang.string@0000000058 gw");
      assertEquals(0, document0.siblingIndex());
      assertEquals("a^!Si!pXW.7SVl", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("a^!Si!pXW.7SVl", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("er", "er");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("er");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("er", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("er", element0.nodeName());
      assertEquals("er", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.prependText("er");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("er", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("er", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsMatchingText("er");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      Element element1 = document1.selectFirst("er");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("er", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("er", document1.location());
      assertEquals("er", element1.nodeName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("er", element1.tagName());
      assertEquals("er", element1.baseUri());
      assertNotNull(element1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(element1, element0);
      
      Element element2 = document0.getElementById("er");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("er", document0.location());
      assertFalse(document0.isBlock());
      assertNull(element2);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Element element0 = new Element("reversed");
      assertEquals(0, element0.childNodeSize());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("reversed", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Elements elements0 = element0.select("reversed");
      assertEquals(0, element0.childNodeSize());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("reversed", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      
      String string0 = element0.val();
      assertEquals(0, element0.childNodeSize());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("reversed", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element1 = element0.prepend("reversed");
      assertEquals(1, element0.childNodeSize());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("reversed", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals("reversed", element1.tagName());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("reversed", element1.nodeName());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000028", "smY(B[q");
      assertFalse(document0.hasParent());
      assertEquals("smY(B[q", document0.baseUri());
      assertEquals("smY(B[q", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(969);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(969, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(969, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(969, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      Document document1 = document0.outputSettings(document_OutputSettings2);
      assertFalse(document0.hasParent());
      assertEquals("smY(B[q", document0.baseUri());
      assertEquals("smY(B[q", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(969, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(969, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(969, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals("smY(B[q", document1.baseUri());
      assertEquals("smY(B[q", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document1, document0);
      
      Element element0 = document1.head();
      assertFalse(document0.hasParent());
      assertEquals("smY(B[q", document0.baseUri());
      assertEquals("smY(B[q", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(969, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(969, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(969, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals("smY(B[q", document1.baseUri());
      assertEquals("smY(B[q", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("smY(B[q", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document1, document0);
      
      String string0 = element0.html();
      assertFalse(document0.hasParent());
      assertEquals("smY(B[q", document0.baseUri());
      assertEquals("smY(B[q", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(969, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(969, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(969, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals("smY(B[q", document1.baseUri());
      assertEquals("smY(B[q", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("smY(B[q", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("er", "er");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("er");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("er", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("er", element0.nodeName());
      assertEquals("er", element0.baseUri());
      assertNotNull(element0);
      
      element0.doSetBaseUri("er");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("er", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("er", element0.nodeName());
      assertEquals("er", element0.baseUri());
      
      Document document1 = (Document)document0.prependText("er");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("er", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("er", document1.baseUri());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasAttr("java.lang.string@0000000047");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(boolean0);
      assertSame(document0, document1);
      
      Elements elements0 = document0.getElementsMatchingText("java.lang.string@0000000047");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      Element element1 = element0.firstElementSibling();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertEquals("er", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("er", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("er", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("er", element0.nodeName());
      assertEquals("er", element0.baseUri());
      assertEquals("er", element1.baseUri());
      assertEquals("er", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("er", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      String string0 = "reversed";
      Document document0 = Parser.parse("reversed", "reversed");
      assertEquals(0, document0.siblingIndex());
      assertEquals("reversed", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(0, document0.siblingIndex());
      assertEquals("reversed", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.location());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("reversed", element0.baseUri());
      assertNotNull(element0);
      
      element0.siblingIndex = (-18);
      assertEquals(0, document0.siblingIndex());
      assertEquals("reversed", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.location());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals((-18), element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("reversed", element0.baseUri());
      
      document0.setParentNode(element0);
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("reversed", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.location());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals((-18), element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("reversed", element0.baseUri());
      
      Document document1 = document0.clone();
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("reversed", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("reversed", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("reversed", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      assertEquals(0, linkedList0.size());
      assertNotNull(linkedList0);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText(",U06Q9^??c;");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Element element0 = new Element("reversed");
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("reversed", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("reversed", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = element0.selectFirst("reversed");
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("reversed", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("reversed", element0.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("reversed", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("reversed", element1.nodeName());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = element0.val();
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("reversed", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("reversed", element0.nodeName());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(element0, element1);
      
      Elements elements0 = element1.getElementsByAttributeValueContaining("(T+>8~e)q3Ybt+(+", ",A8&awfd6|[E98*U");
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("reversed", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("reversed", element0.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("reversed", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("reversed", element1.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Document.createShell("Gw");
      assertFalse(document0.hasParent());
      assertEquals("Gw", document0.location());
      assertEquals("Gw", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("LZcvc");
      assertFalse(document0.hasParent());
      assertEquals("Gw", document0.location());
      assertEquals("Gw", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Gw", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("Gw", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.prependText("G\"b6-afCk/a|G\"4");
      assertFalse(document0.hasParent());
      assertEquals("Gw", document0.location());
      assertEquals("Gw", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Gw", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("Gw", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      String string0 = document0.toString();
      assertFalse(document0.hasParent());
      assertEquals("Gw", document0.location());
      assertEquals("Gw", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G\"b6-afCk/a|G\"4\n<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Document document3 = (Document)document0.addClass("Gw");
      assertFalse(document0.hasParent());
      assertEquals("Gw", document0.location());
      assertEquals("Gw", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Gw", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("Gw", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      Document document4 = new Document("meta");
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("meta", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("meta", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertNotNull(document4);
      
      Elements elements0 = document4.previousElementSiblings();
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("meta", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("meta", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertNotNull(elements0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      
      boolean boolean0 = document0.hasClass("G\"b6-afCk/a|G\"4\n<html>\n <head></head>\n <body></body>\n</html>");
      assertFalse(document0.hasParent());
      assertEquals("Gw", document0.location());
      assertEquals("Gw", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document4));
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      
      List<DataNode> list0 = document1.dataNodes();
      assertFalse(document0.hasParent());
      assertEquals("Gw", document0.location());
      assertEquals("Gw", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Gw", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("Gw", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertNotNull(list0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      
      // Undeclared exception!
      try { 
        document3.html((PipedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("reversed", "reversed");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("reversed", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertNotNull(element0);
      
      document0.setParentNode(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("reversed", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      
      String string0 = document0.cssSelector();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("html > body > #root", string0);
      assertNotNull(string0);
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = document0.previousElementSiblings();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      
      Element element1 = element0.parent();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("reversed", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("html", element1.nodeName());
      assertEquals("reversed", element1.baseUri());
      assertEquals("html", element1.tagName());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = element1.shallowClone();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("reversed", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("reversed", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("html", element1.nodeName());
      assertEquals("reversed", element1.baseUri());
      assertEquals("html", element1.tagName());
      assertEquals("html", element2.tagName());
      assertEquals("html", element2.nodeName());
      assertEquals("reversed", element2.baseUri());
      assertTrue(element2.isBlock());
      assertFalse(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertNotNull(element2);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Document.createShell("4xBaVKRNcX`RD6C2$");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("4xBaVKRNcX`RD6C2$", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("4xBaVKRNcX`RD6C2$", document0.baseUri());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("4xBaVKRNcX`RD6C2$", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("4xBaVKRNcX`RD6C2$", document0.baseUri());
      
      String string0 = "z$lNZCOgO`=Ygq+";
      // Undeclared exception!
      document0.append("z$lNZCOgO`=Ygq+");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Element element0 = new Element("reversed");
      assertEquals("reversed", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.val("reversed");
      assertEquals("reversed", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("reversed", element1.tagName());
      assertEquals("reversed", element1.nodeName());
      assertFalse(element1.hasParent());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = element0.appendChild(element1);
      assertEquals("reversed", element0.tagName());
      assertEquals("reversed", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("reversed", element1.tagName());
      assertEquals("reversed", element1.nodeName());
      assertEquals("reversed", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals("reversed", element2.tagName());
      assertNotNull(element2);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      
      CDataNode cDataNode0 = new CDataNode("menu");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      TextNode textNode0 = cDataNode0.text("BA%Y>JU`U\"~g");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertEquals("#cdata", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      
      Element element3 = element2.after((Node) textNode0);
      assertEquals("reversed", element0.tagName());
      assertEquals("reversed", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertEquals("reversed", element1.tagName());
      assertEquals("reversed", element1.nodeName());
      assertEquals("reversed", element2.nodeName());
      assertEquals(2, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals("", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals("reversed", element2.tagName());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertTrue(cDataNode0.hasParent());
      assertEquals(1, cDataNode0.siblingIndex());
      assertTrue(textNode0.hasParent());
      assertEquals("#cdata", textNode0.nodeName());
      assertEquals(1, textNode0.siblingIndex());
      assertEquals("", element3.baseUri());
      assertEquals("reversed", element3.tagName());
      assertFalse(element3.isBlock());
      assertEquals("reversed", element3.nodeName());
      assertEquals(0, element3.siblingIndex());
      assertEquals(2, element3.childNodeSize());
      assertTrue(element3.hasParent());
      assertNotNull(element3);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertSame(element0, element2);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element1, element3);
      assertSame(element2, element1);
      assertSame(element2, element3);
      assertSame(element2, element0);
      assertSame(cDataNode0, textNode0);
      assertSame(textNode0, cDataNode0);
      assertSame(element3, element0);
      assertSame(element3, element1);
      assertSame(element3, element2);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("textarea", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertNotNull(element0);
      
      document0.setParentNode(element0);
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("textarea", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      
      String string0 = document0.cssSelector();
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("html > body > #root", string0);
      assertNotNull(string0);
      
      Elements elements0 = document0.previousElementSiblings();
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element1 = element0.empty();
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("textarea", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("textarea", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element0 = new Element("textarea");
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Elements elements0 = element0.getElementsByIndexLessThan(4);
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Tag tag0 = Tag.valueOf("textarea");
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.formatAsBlock());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertNotNull(tag0);
      
      Element element1 = new Element(tag0, "reversed");
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.formatAsBlock());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(element1.isBlock());
      assertEquals("reversed", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("textarea", element1.tagName());
      assertEquals("textarea", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      
      Element element2 = element1.val("reversed");
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.formatAsBlock());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(element1.isBlock());
      assertEquals("reversed", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("textarea", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("textarea", element1.nodeName());
      assertFalse(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals("reversed", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals("textarea", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("textarea", element2.nodeName());
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertNotNull(element2);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Document.createShell("^@<orscj");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^@<orscj", document0.location());
      assertEquals("^@<orscj", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("^@<orscj");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      document0.setParentNode(cDataNode0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^@<orscj", document0.location());
      assertEquals("^@<orscj", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      
      Document document1 = new Document("^@<orscj");
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("^@<orscj", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("^@<orscj", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "p`j/X1SeXBwEib%&");
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("p`j/X1SeXBwEib%&", "ethy'tg6");
      assertEquals("ethy'tg6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("ethy'tg6", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("ethy'tg6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("ethy'tg6", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("ethy'tg6", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.parent();
      assertEquals("ethy'tg6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("ethy'tg6", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("ethy'tg6", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("ethy'tg6", element1.baseUri());
      assertEquals("html", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.isBlock());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = element1.attr("ethy'tg6", false);
      assertEquals("ethy'tg6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("ethy'tg6", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("ethy'tg6", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("ethy'tg6", element1.baseUri());
      assertEquals("html", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.isBlock());
      assertTrue(element2.hasParent());
      assertEquals("html", element2.nodeName());
      assertEquals(2, element2.childNodeSize());
      assertEquals("ethy'tg6", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("html", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertNotNull(element2);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertNotSame(element2, element0);
      
      byte[] byteArray0 = new byte[6];
      byteArray0[0] = (byte)78;
      byteArray0[1] = (byte)1;
      byteArray0[2] = (byte)10;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte) (-102);
      byteArray0[5] = (byte) (-104);
      boolean boolean2 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(6, byteArray0.length);
      assertFalse(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      assertArrayEquals(new byte[] {(byte)78, (byte)1, (byte)10, (byte)17, (byte) (-102), (byte) (-104)}, byteArray0);
      
      Element element3 = element2.prependText("p`j/X1SeXBwEib%&");
      assertEquals("ethy'tg6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("ethy'tg6", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("ethy'tg6", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("ethy'tg6", element1.baseUri());
      assertEquals("html", element1.tagName());
      assertEquals(3, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.isBlock());
      assertTrue(element2.hasParent());
      assertEquals("html", element2.nodeName());
      assertEquals(3, element2.childNodeSize());
      assertEquals("ethy'tg6", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("html", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element3.hasParent());
      assertEquals("ethy'tg6", element3.baseUri());
      assertEquals(3, element3.childNodeSize());
      assertEquals("html", element3.nodeName());
      assertTrue(element3.isBlock());
      assertEquals(0, element3.siblingIndex());
      assertEquals("html", element3.tagName());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element3.equals((Object)element0));
      assertNotNull(element3);
      assertNotSame(element0, element2);
      assertNotSame(element0, element3);
      assertNotSame(element0, element1);
      assertSame(element1, element3);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertSame(element2, element3);
      assertNotSame(element2, element0);
      assertSame(element3, element2);
      assertSame(element3, element1);
      assertNotSame(element3, element0);
      
      String string0 = element2.wholeText();
      assertEquals("ethy'tg6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("ethy'tg6", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("ethy'tg6", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("ethy'tg6", element1.baseUri());
      assertEquals("html", element1.tagName());
      assertEquals(3, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.isBlock());
      assertTrue(element2.hasParent());
      assertEquals("html", element2.nodeName());
      assertEquals(3, element2.childNodeSize());
      assertEquals("ethy'tg6", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("html", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertEquals("p`j/X1SeXBwEib%&p`j/X1SeXBwEib%&", string0);
      assertNotNull(string0);
      assertNotSame(element0, element2);
      assertNotSame(element0, element3);
      assertNotSame(element0, element1);
      assertSame(element1, element3);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertSame(element2, element3);
      assertNotSame(element2, element0);
      
      Element element4 = element2.removeClass("p`j/X1SeXBwEib%&");
      assertTrue(element4.hasParent());
      assertEquals("html", element4.nodeName());
      assertEquals(0, element4.siblingIndex());
      assertEquals(3, element4.childNodeSize());
      assertEquals("ethy'tg6", element4.baseUri());
      assertTrue(element4.isBlock());
      assertEquals("html", element4.tagName());
      assertEquals("ethy'tg6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("ethy'tg6", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("ethy'tg6", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("ethy'tg6", element1.baseUri());
      assertEquals("html", element1.tagName());
      assertEquals(3, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.isBlock());
      assertTrue(element2.hasParent());
      assertEquals("html", element2.nodeName());
      assertEquals(3, element2.childNodeSize());
      assertEquals("ethy'tg6", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("html", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element4.equals((Object)element0));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertNotNull(element4);
      assertSame(element4, element1);
      assertSame(element4, element3);
      assertSame(element4, element2);
      assertNotSame(element4, element0);
      assertNotSame(element0, element2);
      assertNotSame(element0, element3);
      assertNotSame(element0, element4);
      assertNotSame(element0, element1);
      assertSame(element1, element4);
      assertSame(element1, element3);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertSame(element2, element3);
      assertNotSame(element2, element0);
      assertSame(element2, element4);
      
      List<Node> list0 = element2.ensureChildNodes();
      assertFalse(list0.isEmpty());
      assertEquals(3, list0.size());
      assertEquals("ethy'tg6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("ethy'tg6", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("ethy'tg6", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("ethy'tg6", element1.baseUri());
      assertEquals("html", element1.tagName());
      assertEquals(3, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.isBlock());
      assertTrue(element2.hasParent());
      assertEquals("html", element2.nodeName());
      assertEquals(3, element2.childNodeSize());
      assertEquals("ethy'tg6", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("html", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element4));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertNotNull(list0);
      assertNotSame(element0, element2);
      assertNotSame(element0, element3);
      assertNotSame(element0, element4);
      assertNotSame(element0, element1);
      assertSame(element1, element4);
      assertSame(element1, element3);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertSame(element2, element3);
      assertNotSame(element2, element0);
      assertSame(element2, element4);
      
      Element element5 = element2.before("ethy'tg6");
      assertEquals(3, element5.childNodeSize());
      assertEquals(1, element5.siblingIndex());
      assertEquals("html", element5.nodeName());
      assertTrue(element5.isBlock());
      assertEquals("ethy'tg6", element5.baseUri());
      assertTrue(element5.hasParent());
      assertEquals("html", element5.tagName());
      assertEquals("ethy'tg6", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("ethy'tg6", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("ethy'tg6", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("ethy'tg6", element1.baseUri());
      assertEquals("html", element1.tagName());
      assertEquals(3, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertEquals("html", element2.nodeName());
      assertEquals(3, element2.childNodeSize());
      assertEquals("ethy'tg6", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("html", element2.tagName());
      assertFalse(element5.equals((Object)element0));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element4));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertNotNull(element5);
      assertSame(element5, element4);
      assertNotSame(element5, element0);
      assertSame(element5, element2);
      assertSame(element5, element3);
      assertSame(element5, element1);
      assertNotSame(element0, element2);
      assertNotSame(element0, element3);
      assertNotSame(element0, element5);
      assertNotSame(element0, element4);
      assertNotSame(element0, element1);
      assertSame(element1, element4);
      assertSame(element1, element3);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element1, element5);
      assertSame(element2, element1);
      assertSame(element2, element3);
      assertNotSame(element2, element0);
      assertSame(element2, element5);
      assertSame(element2, element4);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter("^%^Twlrj|:ytH9");
      assertNotNull(mockFileWriter0);
      
      MockFileWriter mockFileWriter1 = element0.html(mockFileWriter0);
      assertEquals("ethy'tg6", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("ethy'tg6", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("ethy'tg6", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element5));
      assertFalse(element0.equals((Object)element4));
      assertFalse(element0.equals((Object)element1));
      assertNotNull(mockFileWriter1);
      assertSame(mockFileWriter0, mockFileWriter1);
      assertNotSame(element0, element2);
      assertNotSame(element0, element3);
      assertNotSame(element0, element5);
      assertNotSame(element0, element4);
      assertNotSame(element0, element1);
      assertSame(mockFileWriter1, mockFileWriter0);
      
      String string1 = element1.data();
      assertEquals("ethy'tg6", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("ethy'tg6", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("ethy'tg6", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("ethy'tg6", element1.baseUri());
      assertEquals("html", element1.tagName());
      assertEquals(3, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.isBlock());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element5));
      assertFalse(element0.equals((Object)element4));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(element0, element2);
      assertNotSame(element0, element3);
      assertNotSame(element0, element5);
      assertNotSame(element0, element4);
      assertNotSame(element0, element1);
      assertSame(element1, element4);
      assertSame(element1, element3);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element1, element5);
      
      Elements elements0 = element5.getElementsContainingOwnText("^@<orsc>");
      assertEquals(3, element5.childNodeSize());
      assertEquals(1, element5.siblingIndex());
      assertEquals("html", element5.nodeName());
      assertTrue(element5.isBlock());
      assertEquals("ethy'tg6", element5.baseUri());
      assertTrue(element5.hasParent());
      assertEquals("html", element5.tagName());
      assertEquals("ethy'tg6", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("ethy'tg6", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("ethy'tg6", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("ethy'tg6", element1.baseUri());
      assertEquals("html", element1.tagName());
      assertEquals(3, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertEquals("html", element2.nodeName());
      assertEquals(3, element2.childNodeSize());
      assertEquals("ethy'tg6", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("html", element2.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(element5.equals((Object)element0));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element5));
      assertFalse(element0.equals((Object)element4));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertNotNull(elements0);
      assertSame(element5, element4);
      assertNotSame(element5, element0);
      assertSame(element5, element2);
      assertSame(element5, element3);
      assertSame(element5, element1);
      assertNotSame(element0, element2);
      assertNotSame(element0, element3);
      assertNotSame(element0, element5);
      assertNotSame(element0, element4);
      assertNotSame(element0, element1);
      assertSame(element1, element4);
      assertSame(element1, element3);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element1, element5);
      assertSame(element2, element1);
      assertSame(element2, element3);
      assertNotSame(element2, element0);
      assertSame(element2, element5);
      assertSame(element2, element4);
      
      Element element6 = element3.html("p`j/X1SeXBwEib%&");
      assertEquals("ethy'tg6", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("ethy'tg6", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("ethy'tg6", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("ethy'tg6", element1.baseUri());
      assertEquals("html", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertEquals("html", element2.nodeName());
      assertEquals(2, element2.childNodeSize());
      assertEquals("ethy'tg6", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("html", element2.tagName());
      assertEquals("ethy'tg6", element6.baseUri());
      assertEquals("html", element6.nodeName());
      assertEquals(1, element6.siblingIndex());
      assertTrue(element6.hasParent());
      assertEquals(2, element6.childNodeSize());
      assertTrue(element6.isBlock());
      assertEquals("html", element6.tagName());
      assertTrue(element3.hasParent());
      assertEquals(1, element3.siblingIndex());
      assertEquals("ethy'tg6", element3.baseUri());
      assertEquals(2, element3.childNodeSize());
      assertEquals("html", element3.nodeName());
      assertTrue(element3.isBlock());
      assertEquals("html", element3.tagName());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element5));
      assertFalse(element0.equals((Object)element4));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element6.equals((Object)element0));
      assertFalse(element3.equals((Object)element0));
      assertNotNull(element6);
      assertNotSame(element0, element2);
      assertNotSame(element0, element3);
      assertNotSame(element0, element5);
      assertNotSame(element0, element4);
      assertNotSame(element0, element1);
      assertNotSame(element0, element6);
      assertSame(element1, element4);
      assertSame(element1, element6);
      assertSame(element1, element3);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element1, element5);
      assertSame(element2, element1);
      assertSame(element2, element3);
      assertNotSame(element2, element0);
      assertSame(element2, element5);
      assertSame(element2, element6);
      assertSame(element2, element4);
      assertSame(element6, element3);
      assertSame(element6, element2);
      assertSame(element6, element1);
      assertSame(element6, element4);
      assertNotSame(element6, element0);
      assertSame(element6, element5);
      assertSame(element3, element2);
      assertSame(element3, element1);
      assertSame(element3, element6);
      assertNotSame(element3, element0);
      assertSame(element3, element4);
      assertSame(element3, element5);
      
      String string2 = element6.wholeText();
      assertEquals("ethy'tg6", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("ethy'tg6", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("ethy'tg6", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("ethy'tg6", element1.baseUri());
      assertEquals("html", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertEquals("html", element2.nodeName());
      assertEquals(2, element2.childNodeSize());
      assertEquals("ethy'tg6", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("html", element2.tagName());
      assertEquals("ethy'tg6", element6.baseUri());
      assertEquals("html", element6.nodeName());
      assertEquals(1, element6.siblingIndex());
      assertTrue(element6.hasParent());
      assertEquals(2, element6.childNodeSize());
      assertTrue(element6.isBlock());
      assertEquals("html", element6.tagName());
      assertTrue(element3.hasParent());
      assertEquals(1, element3.siblingIndex());
      assertEquals("ethy'tg6", element3.baseUri());
      assertEquals(2, element3.childNodeSize());
      assertEquals("html", element3.nodeName());
      assertTrue(element3.isBlock());
      assertEquals("html", element3.tagName());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element5));
      assertFalse(element0.equals((Object)element4));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element0.equals((Object)element6));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element6.equals((Object)element0));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertFalse(element3.equals((Object)element0));
      assertEquals("p`j/X1SeXBwEib%&", string2);
      assertNotNull(string2);
      assertNotSame(element0, element2);
      assertNotSame(element0, element3);
      assertNotSame(element0, element5);
      assertNotSame(element0, element4);
      assertNotSame(element0, element1);
      assertNotSame(element0, element6);
      assertSame(element1, element4);
      assertSame(element1, element6);
      assertSame(element1, element3);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element1, element5);
      assertSame(element2, element1);
      assertSame(element2, element3);
      assertNotSame(element2, element0);
      assertSame(element2, element5);
      assertSame(element2, element6);
      assertSame(element2, element4);
      assertSame(element6, element3);
      assertSame(element6, element2);
      assertSame(element6, element1);
      assertSame(element6, element4);
      assertNotSame(element6, element0);
      assertSame(element6, element5);
      assertSame(element3, element2);
      assertSame(element3, element1);
      assertSame(element3, element6);
      assertNotSame(element3, element0);
      assertSame(element3, element4);
      assertSame(element3, element5);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("em", "em");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("em", document0.location());
      assertEquals("em", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("em");
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("em", document0.location());
      assertEquals("em", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("em", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("em", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("em", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      document0.title("em");
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("em", document0.location());
      assertEquals("em", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Elements elements0 = element0.getElementsByClass("em");
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("em", document0.location());
      assertEquals("em", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("em", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("em", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("em", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      String string0 = document0.html();
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("em", document0.location());
      assertEquals("em", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("<em></em>\n<html>\n <head>\n  <title>em</title>\n </head>\n <body>\n  em\n </body>\n</html>", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        document0.before((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("em", "em");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("em", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("em");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("em", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("em", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("em", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("em", element0.baseUri());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      document0.title("em");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("em", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      
      Elements elements0 = element0.getElementsByClass("em");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("em", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("em", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("em", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("em", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("em", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      StringWriter stringWriter0 = new StringWriter();
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
      assertNotNull(document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings1, document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(stringWriter0, (-1), document_OutputSettings1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Document.createShell("InserM ostion ou o[?bounds.");
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("InserM ostion ou o[?bounds.");
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("InserM ostion ou o[?bounds.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasClass("InserM ostion ou o[?bounds.");
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(boolean0);
      assertSame(document0, document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(60);
      assertEquals(60, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(60, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      assertEquals(60, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(60, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(60, document_OutputSettings2.indentAmount());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      assertEquals(60, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertEquals(60, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(60, document_OutputSettings2.indentAmount());
      assertEquals(60, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings3.escapeMode());
      assertNotNull(document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 60, document_OutputSettings3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Document.createShell("InserM ostion ou o[?bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass(" > ");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.toString();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.addClass("<html>\n <head></head>\n <body></body>\n</html>");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertFalse(document2.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document2.location());
      assertEquals("InserM ostion ou o[?bounds.", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document0.children();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      boolean boolean0 = document2.hasClass("textarea");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertFalse(document2.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document2.location());
      assertEquals("InserM ostion ou o[?bounds.", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = new Document("i`gWGrX]m>,.j9@0 ");
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(document3);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document document4 = (Document)document3.val("<html>\n <head></head>\n <body></body>\n</html>");
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.childNodeSize());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertNotNull(document4);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      
      String string1 = document3.data();
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Document.createShell("v");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("v", document0.baseUri());
      assertEquals("v", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("v", document0.baseUri());
      assertEquals("v", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("v", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.lastElementSibling();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("v", document0.baseUri());
      assertEquals("v", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("v", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("v", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      document0.setParentNode(element0);
      assertFalse(document0.isBlock());
      assertEquals("v", document0.baseUri());
      assertEquals("v", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("v", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertSame(element0, element1);
      
      Document document1 = Document.createShell("v");
      assertEquals("v", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("v", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      String string0 = document1.cssSelector();
      assertEquals("v", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("v", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertEquals("#root", string0);
      assertNotNull(string0);
      assertNotSame(document1, document0);
      
      String string1 = document0.data();
      assertFalse(document0.isBlock());
      assertEquals("v", document0.baseUri());
      assertEquals("v", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "head");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.location());
      assertEquals("head", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      int int0 = 2463;
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(2463);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      List<Node> list0 = Parser.parseFragment("head", (Element) document0, "head", parseErrorList0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.location());
      assertEquals("head", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document1 = parser1.parseInput("B~(U2FXvudmv? g", "B~(U2FXvudmv? g");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("B~(U2FXvudmv? g", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("B~(U2FXvudmv? g", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.appendElement("B~(U2FXvudmv? g");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("B~(U2FXvudmv? g", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("B~(U2FXvudmv? g", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("B~(U2FXvudmv? g", element0.nodeName());
      assertEquals("B~(U2FXvudmv? g", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("B~(U2FXvudmv? g", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      List<DataNode> list1 = element0.dataNodes();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("B~(U2FXvudmv? g", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("B~(U2FXvudmv? g", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("B~(U2FXvudmv? g", element0.nodeName());
      assertEquals("B~(U2FXvudmv? g", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("B~(U2FXvudmv? g", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(list1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      String string0 = "org.jsoup.select.Evaluator";
      Elements elements0 = element0.getElementsByAttributeValueMatching("22FdIU", "org.jsoup.select.Evaluator");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("B~(U2FXvudmv? g", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("B~(U2FXvudmv? g", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("B~(U2FXvudmv? g", element0.nodeName());
      assertEquals("B~(U2FXvudmv? g", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("B~(U2FXvudmv? g", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(elements0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = element0.empty();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("B~(U2FXvudmv? g", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("B~(U2FXvudmv? g", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("B~(U2FXvudmv? g", element0.nodeName());
      assertEquals("B~(U2FXvudmv? g", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("B~(U2FXvudmv? g", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("B~(U2FXvudmv? g", element1.tagName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("B~(U2FXvudmv? g", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("B~(U2FXvudmv? g", element1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      List<Node> list2 = element0.siblingNodes();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("B~(U2FXvudmv? g", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("B~(U2FXvudmv? g", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("B~(U2FXvudmv? g", element0.nodeName());
      assertEquals("B~(U2FXvudmv? g", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("B~(U2FXvudmv? g", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
      assertFalse(document1.equals((Object)document0));
      assertFalse(list2.equals((Object)list0));
      assertNotNull(list2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertSame(element0, element1);
      
      Document document2 = (Document)document1.append("org.jsoup.select.Evaluator");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("B~(U2FXvudmv? g", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("B~(U2FXvudmv? g", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("B~(U2FXvudmv? g", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("B~(U2FXvudmv? g", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Element element2 = document0.head();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.location());
      assertEquals("head", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.baseUri());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertNotNull(element2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      Element element3 = element1.append("B~(U2FXvudmv? g");
      assertEquals(1, element3.siblingIndex());
      assertEquals("B~(U2FXvudmv? g", element3.tagName());
      assertFalse(element3.isBlock());
      assertEquals("B~(U2FXvudmv? g", element3.nodeName());
      assertEquals(1, element3.childNodeSize());
      assertTrue(element3.hasParent());
      assertEquals("B~(U2FXvudmv? g", element3.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("B~(U2FXvudmv? g", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("B~(U2FXvudmv? g", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("B~(U2FXvudmv? g", element0.nodeName());
      assertEquals("B~(U2FXvudmv? g", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("B~(U2FXvudmv? g", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("B~(U2FXvudmv? g", element1.tagName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("B~(U2FXvudmv? g", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("B~(U2FXvudmv? g", element1.baseUri());
      assertFalse(element3.equals((Object)element2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element1.equals((Object)element2));
      assertNotNull(element3);
      assertSame(element3, element0);
      assertSame(element3, element1);
      assertNotSame(element3, element2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertNotSame(element0, element2);
      assertSame(element1, element3);
      assertNotSame(element1, element2);
      assertSame(element1, element0);
      
      Element element4 = element2.appendChild(element0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, element4.siblingIndex());
      assertEquals("head", element4.nodeName());
      assertTrue(element4.hasParent());
      assertEquals("head", element4.baseUri());
      assertTrue(element4.isBlock());
      assertEquals("head", element4.tagName());
      assertEquals(1, element4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.location());
      assertEquals("head", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(parser1.isTrackErrors());
      assertEquals("B~(U2FXvudmv? g", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("B~(U2FXvudmv? g", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("B~(U2FXvudmv? g", element0.nodeName());
      assertEquals("B~(U2FXvudmv? g", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("B~(U2FXvudmv? g", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element2.childNodeSize());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.baseUri());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertFalse(element4.equals((Object)element1));
      assertFalse(element4.equals((Object)element3));
      assertFalse(element4.equals((Object)element0));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element3));
      assertNotNull(element4);
      assertSame(parser0, parser1);
      assertNotSame(element4, element1);
      assertSame(element4, element2);
      assertNotSame(element4, element3);
      assertNotSame(element4, element0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(parser1, parser0);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertNotSame(element0, element2);
      assertNotSame(element0, element4);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      assertSame(element2, element4);
      assertNotSame(element2, element3);
      
      Element element5 = element1.attr(";Mutc_uE", ",7Q*T])Bkj]8ph");
      assertFalse(parser0.isTrackErrors());
      assertEquals("B~(U2FXvudmv? g", element5.baseUri());
      assertEquals("B~(U2FXvudmv? g", element5.nodeName());
      assertEquals(1, element5.childNodeSize());
      assertEquals("B~(U2FXvudmv? g", element5.tagName());
      assertEquals(0, element5.siblingIndex());
      assertTrue(element5.hasParent());
      assertFalse(element5.isBlock());
      assertFalse(parser1.isTrackErrors());
      assertEquals("B~(U2FXvudmv? g", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("B~(U2FXvudmv? g", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("B~(U2FXvudmv? g", element0.nodeName());
      assertEquals("B~(U2FXvudmv? g", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("B~(U2FXvudmv? g", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("B~(U2FXvudmv? g", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("B~(U2FXvudmv? g", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("B~(U2FXvudmv? g", element1.baseUri());
      assertFalse(element5.equals((Object)element2));
      assertFalse(element5.equals((Object)element4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element4));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element1.equals((Object)element4));
      assertNotNull(element5);
      assertSame(parser0, parser1);
      assertSame(element5, element1);
      assertSame(element5, element3);
      assertNotSame(element5, element2);
      assertSame(element5, element0);
      assertNotSame(element5, element4);
      assertSame(parser1, parser0);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element0, element3);
      assertNotSame(element0, element2);
      assertNotSame(element0, element4);
      assertSame(element0, element5);
      assertSame(element1, element3);
      assertNotSame(element1, element2);
      assertSame(element1, element5);
      assertNotSame(element1, element4);
      assertSame(element1, element0);
      
      // Undeclared exception!
      try { 
        element4.getElementsByAttributeValue("org.jsoup.select.Evaluator", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "9H");
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("LE%[]eQ", "9H");
      assertEquals("9H", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("9H", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("9H");
      assertEquals("9H", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("9H", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("9h", element0.tagName());
      assertEquals("9H", element0.baseUri());
      assertEquals("9h", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = element0.before((Node) document0);
      assertEquals("9H", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("9H", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("9h", element0.tagName());
      assertEquals("9H", element0.baseUri());
      assertEquals("9h", element0.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("9h", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("9h", element1.nodeName());
      assertEquals("9H", element1.baseUri());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = Document.createShell("");
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element0);
      assertNotSame(document1, document0);
      
      Element element1 = element0.toggleClass("java.lang.string@0000000058 gw");
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element1);
      assertNotSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      document1.setParentNode(element0);
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertSame(element0, element1);
      
      Document document2 = (Document)document1.prependText("");
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = document0.hasAttr("");
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(boolean0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      
      Elements elements0 = document1.getElementsContainingOwnText("");
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      
      Document document3 = (Document)document0.toggleClass("java.lang.string@0000000058 gj");
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(document3);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document1);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^@<orsc>", "^@<orsc>");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("^@<orsc>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("^@<orsc>", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsContainingOwnText("^@<orsc>");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("^@<orsc>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("^@<orsc>", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("textarea", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = element0.after("br");
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("textarea", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("textarea", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      document0.setParentNode(element0);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("textarea", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertSame(element0, element1);
      
      String string0 = document0.cssSelector();
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("html > body:nth-child(2) > #root", string0);
      assertNotNull(string0);
      
      boolean boolean0 = document0.hasClass("html > body:nth-child(2) > #root");
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Document.createShell("y~P8!");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("y~P8!", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("y~P8!", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("y~P8!", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("y~P8!", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("y~P8!", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("y~P8!", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.toggleClass("&,*GrXd?[zM1hdr]4-");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("y~P8!", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("y~P8!", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("y~P8!", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("y~P8!", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("y~P8!", document2.location());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.addClass("&,*GrXd?[zM1hdr]4-");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("y~P8!", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("y~P8!", document3.baseUri());
      assertEquals("y~P8!", document3.location());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      String string0 = element0.val();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("y~P8!", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("y~P8!", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Elements elements0 = document0.children();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("y~P8!", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      boolean boolean0 = document1.hasClass("&,*GrXd?[zM1hdr]4-");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("y~P8!", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("y~P8!", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("y~P8!", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertTrue(boolean0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      String string1 = element0.val();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("y~P8!", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("y~P8!", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^^@<orsSc>", "^^@<orsSc>");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("^^@<orsSc>", document0.location());
      assertEquals("^^@<orsSc>", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("^^@<orsSc>", document0.location());
      assertEquals("^^@<orsSc>", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("^^@<orsSc>", element0.baseUri());
      assertNotNull(element0);
      
      String string0 = document0.data();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("^^@<orsSc>", document0.location());
      assertEquals("^^@<orsSc>", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", string0);
      assertNotNull(string0);
      
      boolean boolean0 = element0.isBlock();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("^^@<orsSc>", document0.location());
      assertEquals("^^@<orsSc>", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("^^@<orsSc>", element0.baseUri());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("textarea", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertNotNull(element0);
      
      Tag tag0 = Tag.valueOf("h6-%8n>{gk\"[NhsfP");
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertEquals("h6-%8n>{gk\"[NhsfP", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertEquals("h6-%8n>{gk\"[NhsfP", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Tag tag1 = Tag.valueOf("1ZrnG\"5r&az:_B.H^.");
      assertFalse(tag1.isBlock());
      assertTrue(tag1.isInline());
      assertFalse(tag1.isFormListed());
      assertEquals("1ZrnG\"5r&az:_B.H^.", tag1.toString());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.canContainBlock());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isData());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isEmpty());
      assertEquals("1ZrnG\"5r&az:_B.H^.", tag1.getName());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.equals((Object)tag0));
      assertNotNull(tag1);
      assertNotSame(tag1, tag0);
      
      Element element1 = element0.attr("value", "h6-%8n>{gk\"[NhsfP");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("textarea", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("textarea", element1.baseUri());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = element1.val();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("textarea", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("textarea", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("h6-%8n>{gk\"[NhsfP", string0);
      assertNotNull(string0);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      
      Document document1 = new Document("textarea");
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      
      boolean boolean0 = document1.hasAttr("texta'rea");
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertFalse(boolean0);
      assertNotSame(document1, document0);
      
      String string0 = document1.html();
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.prepend("");
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("textarea", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("textarea", document2.baseUri());
      assertEquals("textarea", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("y~P8!", "y~P8!");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("y~P8!", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("y~P8!", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      TextNode textNode0 = TextNode.createFromEncoded(":eq(");
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      document0.setParentNode(textNode0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals("y~P8!", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Document.createShell("^@<orsc>");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^@<orsc>", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^@<orsc>", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      DataNode dataNode0 = new DataNode("^@<orsc>");
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertNotNull(dataNode0);
      
      Document document1 = (Document)document0.prependChild(dataNode0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^@<orsc>", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^@<orsc>", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, dataNode0.siblingIndex());
      assertTrue(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("^@<orsc>", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("^@<orsc>", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document0.normalise();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^@<orsc>", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^@<orsc>", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("^@<orsc>", document2.location());
      assertEquals("^@<orsc>", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      document0.setParentNode(document2);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^@<orsc>", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^@<orsc>", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("^@<orsc>", document2.location());
      assertEquals("^@<orsc>", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = document0.data();
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^@<orsc>", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^@<orsc>", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(string1.equals((Object)string0));
      assertEquals("^@<orsc>", string1);
      assertNotNull(string1);
      assertSame(document0, document2);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Document.createShell("Gw");
      assertEquals("Gw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Gw", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("Gw");
      assertEquals("Gw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Gw", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Gw", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Gw", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.toString();
      assertEquals("Gw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Gw", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.addClass("Gw");
      assertEquals("Gw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Gw", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Gw", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Gw", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Gw", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("Gw", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document1.children();
      assertEquals("Gw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Gw", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Gw", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Gw", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      boolean boolean0 = document2.hasClass("java.lang.string@0000000058");
      assertEquals("Gw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Gw", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Gw", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Gw", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Gw", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("Gw", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = new Document("java.lang.string@0000000058");
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document document4 = (Document)document2.val("Gw");
      assertEquals("Gw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Gw", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Gw", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Gw", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Gw", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("Gw", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Gw", document4.location());
      assertFalse(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("Gw", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertNotNull(document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      
      Element element0 = document4.nextElementSibling();
      assertEquals("Gw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Gw", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Gw", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Gw", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Gw", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("Gw", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Gw", document4.location());
      assertFalse(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("Gw", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertNull(element0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      
      Document document5 = (Document)document0.toggleClass("Gw");
      assertEquals("Gw", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Gw", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("Gw", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("Gw", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document5.equals((Object)document3));
      assertNotNull(document5);
      assertSame(document0, document1);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertNotSame(document5, document3);
      assertSame(document5, document4);
      assertSame(document5, document1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Document.createShell("^@<orsc>");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^@<orsc>", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^@<orsc>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^@<orsc>", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^@<orsc>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("^@<orsc>", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^@<orsc>", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document0.setParentNode(document1);
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^@<orsc>", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^@<orsc>", document0.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("^@<orsc>", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("^@<orsc>", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element0 = document0.nextElementSibling();
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^@<orsc>", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("^@<orsc>", document0.baseUri());
      assertNull(element0);
      assertSame(document0, document1);
      
      // Undeclared exception!
      document1.html((BufferedWriter) null);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Gw", "Gw");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Gw", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Gw", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.append("Gw");
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Gw", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Gw", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Gw", document1.location());
      assertEquals("Gw", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsMatchingOwnText("Gw");
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Gw", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Gw", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(2, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.val("Gw");
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Gw", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Gw", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("Gw", document2.location());
      assertEquals("Gw", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document2.appendTo(document1);
      assertEquals("#root", document0.tagName());
      assertEquals("Gw", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("Gw", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("Gw", document1.location());
      assertEquals("Gw", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("Gw", document2.location());
      assertEquals("Gw", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals(2, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("Gw", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("Gw", document3.location());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals(2, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Document document4 = (Document)document3.attr("Gw", true);
      assertEquals("#root", document0.tagName());
      assertEquals("Gw", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("Gw", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("Gw", document1.location());
      assertEquals("Gw", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("Gw", document2.location());
      assertEquals("Gw", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals(2, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("Gw", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("Gw", document3.location());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertEquals(2, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals("Gw", document4.baseUri());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("Gw", document4.location());
      assertEquals(2, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(3, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      
      // Undeclared exception!
      document4.tagName("$");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "scriptdatadoubleescapeddash");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("scriptdatadoubleescapeddash", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("scriptdatadoubleescapeddash", document0.location());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("scriptdatadoubleescapeddash", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("scriptdatadoubleescapeddash", document0.location());
      assertEquals("scriptdatadoubleescapeddash", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("scriptdatadoubleescapeddash", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("scriptdatadoubleescapeddash", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("scriptdatadoubleescapeddash", document0.location());
      assertEquals("scriptdatadoubleescapeddash", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("scriptdatadoubleescapeddash", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("scriptdatadoubleescapeddash", document2.location());
      assertEquals("scriptdatadoubleescapeddash", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element0 = document1.prependElement("textarea");
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("scriptdatadoubleescapeddash", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("scriptdatadoubleescapeddash", document0.location());
      assertEquals("scriptdatadoubleescapeddash", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("scriptdatadoubleescapeddash", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("scriptdatadoubleescapeddash", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      Document document3 = Parser.parse("2t?%s2Sn?zkIUA", "script");
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("script", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("script", document3.location());
      assertFalse(document3.hasParent());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      
      Document document4 = document0.normalise();
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("scriptdatadoubleescapeddash", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("scriptdatadoubleescapeddash", document0.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals("scriptdatadoubleescapeddash", document4.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.hasParent());
      assertEquals("scriptdatadoubleescapeddash", document4.location());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertNotNull(document4);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
      
      Elements elements0 = document3.getElementsContainingText("?NeAiDvd");
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("script", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("script", document3.location());
      assertFalse(document3.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document3, document4);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      
      Document document5 = (Document)document1.parent();
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("scriptdatadoubleescapeddash", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("scriptdatadoubleescapeddash", document0.location());
      assertEquals("scriptdatadoubleescapeddash", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("scriptdatadoubleescapeddash", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("scriptdatadoubleescapeddash", document5.location());
      assertEquals("scriptdatadoubleescapeddash", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(2, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.hasParent());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertNotNull(document5);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document5);
      assertNotSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertSame(document5, document0);
      assertNotSame(document5, document3);
      assertSame(document5, document4);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parse("v", "v");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("v", document0.baseUri());
      assertEquals("v", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("v", document0.baseUri());
      assertEquals("v", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("v", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("v", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("v", document0.baseUri());
      assertEquals("v", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.siblingIndex());
      assertEquals("v", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("v", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("v", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("v", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element0 = document1.prependElement("v");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("v", document0.baseUri());
      assertEquals("v", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("v", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("v", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("v", element0.tagName());
      assertEquals("v", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("v", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      
      Element element1 = element0.prependElement("v");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("v", document0.baseUri());
      assertEquals("v", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("v", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("v", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("v", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("v", element0.nodeName());
      assertEquals("v", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("v", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("v", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("v", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Elements elements0 = element0.getElementsByAttributeStarting("v");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("v", document0.baseUri());
      assertEquals("v", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("v", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("v", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("v", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("v", element0.nodeName());
      assertEquals("v", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertNotNull(elements0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element0, element1);
      
      Element element2 = document1.selectFirst("v");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("v", document0.baseUri());
      assertEquals("v", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("v", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("v", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("v", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals("v", element2.nodeName());
      assertEquals("v", element2.baseUri());
      assertEquals(1, element2.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element2.equals((Object)element1));
      assertNotNull(element2);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      
      Document document3 = Parser.parse("v", "v");
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("v", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("v", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      
      Document document4 = document1.normalise();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("v", document0.baseUri());
      assertEquals("v", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("v", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("v", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("v", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("v", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertNotNull(document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document2);
      
      Elements elements1 = document0.getElementsContainingText("v");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("v", document0.baseUri());
      assertEquals("v", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(6, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      String string0 = document3.text();
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("v", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("v", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertEquals("v", string0);
      assertNotNull(string0);
      assertNotSame(document3, document4);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Document.createShell("InserM ostion ou o[?bounds.");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("InserM ostion ou o[?bounds.");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("InserM ostion ou o[?bounds.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = Parser.parse("PK!`y%PjD:RnrYjNzR$", "InserM ostion ou o[?bounds.");
      assertEquals(1, document2.childNodeSize());
      assertEquals("InserM ostion ou o[?bounds.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document3 = document2.normalise();
      assertEquals(1, document2.childNodeSize());
      assertEquals("InserM ostion ou o[?bounds.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("InserM ostion ou o[?bounds.", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(document3);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      
      Elements elements0 = document0.getElementsContainingText("InserM ostion ou o[?bounds.");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertNotNull(elements0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      
      Element element0 = document3.prependElement("org.jsoup.nodes.Element$1");
      assertEquals("InserM ostion ou o[?bounds.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("InserM ostion ou o[?bounds.", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("org.jsoup.nodes.element$1", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.element$1", element0.nodeName());
      assertEquals("InserM ostion ou o[?bounds.", element0.baseUri());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(element0);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      
      Document document4 = (Document)document0.html("");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertEquals("InserM ostion ou o[?bounds.", document4.location());
      assertFalse(document4.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertNotNull(document4);
      assertSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document0);
      assertNotSame(document4, document3);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("textarea", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      document0.setParentNode(element0);
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.location());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("textarea", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      String string0 = document0.cssSelector();
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.location());
      assertEquals("html > body > #root", string0);
      assertNotNull(string0);
      
      String string1 = element0.val();
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.location());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("textarea", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = document0.data();
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.location());
      assertFalse(string2.equals((Object)string0));
      assertTrue(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Element element1 = element0.addClass("#root");
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.location());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("textarea", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      document0.setParentNode(element0);
      assertEquals("textarea", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      
      String string0 = document0.cssSelector();
      assertEquals("textarea", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("html > body > #root", string0);
      assertNotNull(string0);
      
      String string1 = element0.val();
      assertEquals("textarea", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      String string2 = document0.data();
      assertEquals("textarea", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertTrue(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      
      Element element1 = element0.parent();
      assertEquals("textarea", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.tagName());
      assertEquals("textarea", element1.baseUri());
      assertTrue(element1.hasParent());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = element1.prependText("id");
      assertEquals("textarea", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(3, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.tagName());
      assertEquals("textarea", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("html", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals(3, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("html", element2.tagName());
      assertEquals("textarea", element2.baseUri());
      assertTrue(element2.hasParent());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertNotNull(element2);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("InserM ostion ou o[?bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("/Er{vIJc");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("/Er{vIJc", parseSettings0);
      assertFalse(tag0.isEmpty());
      assertEquals("/er{vijc", tag0.toString());
      assertEquals("/er{vijc", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertNotNull(tag0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ":%s(%dn)", attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isEmpty());
      assertEquals("/er{vijc", tag0.toString());
      assertEquals("/er{vijc", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertEquals(":%s(%dn)", pseudoTextElement0.baseUri());
      assertEquals("/er{vijc", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("/er{vijc", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertNotNull(pseudoTextElement0);
      
      Tag tag1 = Tag.valueOf(":%s(%dn)");
      assertFalse(tag1.isBlock());
      assertTrue(tag1.formatAsBlock());
      assertTrue(tag1.isInline());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isData());
      assertEquals(":%s(%dn)", tag1.toString());
      assertFalse(tag1.preserveWhitespace());
      assertEquals(":%s(%dn)", tag1.getName());
      assertFalse(tag1.equals((Object)tag0));
      assertNotNull(tag1);
      assertNotSame(tag1, tag0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors((-1));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document1 = document0.parser(parser1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals("InserM ostion ou o[?bounds.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("InserM ostion ou o[?bounds.", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.attr("form", "bj");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals("InserM ostion ou o[?bounds.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("InserM ostion ou o[?bounds.", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document2.baseUri());
      assertEquals("InserM ostion ou o[?bounds.", document2.location());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document2.tagName("form");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("form", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertTrue(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertTrue(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("InserM ostion ou o[?bounds.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("InserM ostion ou o[?bounds.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("form", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("form", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document2.baseUri());
      assertTrue(document2.isBlock());
      assertEquals("InserM ostion ou o[?bounds.", document2.location());
      assertEquals("form", document3.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("InserM ostion ou o[?bounds.", document3.baseUri());
      assertTrue(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      String string0 = pseudoTextElement0.val();
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isEmpty());
      assertEquals("/er{vijc", tag0.toString());
      assertEquals("/er{vijc", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertEquals(":%s(%dn)", pseudoTextElement0.baseUri());
      assertEquals("/er{vijc", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("/er{vijc", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(tag0.equals((Object)tag1));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(tag0, tag1);
      
      Document document4 = (Document)document1.appendText("");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("form", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertTrue(document0.isBlock());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.isBlock());
      assertEquals("InserM ostion ou o[?bounds.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("InserM ostion ou o[?bounds.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("form", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertEquals("InserM ostion ou o[?bounds.", document4.location());
      assertTrue(document4.isBlock());
      assertEquals("InserM ostion ou o[?bounds.", document4.baseUri());
      assertEquals("form", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertNotNull(document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Document.createShell("^@<orsc>");
      assertEquals(0, document0.siblingIndex());
      assertEquals("^@<orsc>", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^@<orsc>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertEquals(0, document0.siblingIndex());
      assertEquals("^@<orsc>", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^@<orsc>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^@<orsc>", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^@<orsc>", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document0.setParentNode(document1);
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("^@<orsc>", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^@<orsc>", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^@<orsc>", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("^@<orsc>", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document1.hasAttr("^@<orsc>");
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("^@<orsc>", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^@<orsc>", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^@<orsc>", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("^@<orsc>", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsContainingOwnText("reversed");
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("^@<orsc>", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^@<orsc>", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.before((Node) document1);
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("^@<orsc>", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("^@<orsc>", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("^@<orsc>", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("^@<orsc>", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("^@<orsc>", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("^@<orsc>", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Parser.parse("@z|(6uDV", "@z|(6uDV");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("@z|(6uDV", document0.location());
      assertEquals("@z|(6uDV", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendTo(document0);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("@z|(6uDV", document0.location());
      assertEquals("@z|(6uDV", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("@z|(6uDV", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("@z|(6uDV", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.head();
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("@z|(6uDV", document0.location());
      assertEquals("@z|(6uDV", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("@z|(6uDV", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      assertSame(document0, document1);
      
      Elements elements0 = document0.previousElementSiblings();
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("@z|(6uDV", document0.location());
      assertEquals("@z|(6uDV", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      // Undeclared exception!
      try { 
        document0.after((Node) document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parse("y~P8!", "y~P8!");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("y~P8!", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parse("y~P8!", "y~P8!");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("y~P8!", document0.location());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Elements elements0 = document0.nextElementSiblings();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("y~P8!", document0.location());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      boolean boolean0 = document0.hasClass("y~P8!");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("y~P8!", document0.location());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(boolean0);
      
      Document document1 = Parser.parse("y~P8!", "InFrameset");
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("InFrameset", document1.baseUri());
      assertEquals("InFrameset", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document0.appendTo(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("y~P8!", document0.location());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("InFrameset", document1.baseUri());
      assertEquals("InFrameset", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("y~P8!", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("y~P8!", document2.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      Element element0 = document1.prependElement("InFrameset");
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("InFrameset", document1.baseUri());
      assertEquals("InFrameset", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("inframeset", element0.tagName());
      assertEquals("InFrameset", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("inframeset", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      
      Elements elements1 = document0.getElementsContainingOwnText("y~P8!");
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("y~P8!", document0.location());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements1, elements0);
      
      Element element1 = document1.nextElementSibling();
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("InFrameset", document1.baseUri());
      assertEquals("InFrameset", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNull(element1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      
      Element element2 = document2.previousElementSibling();
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("y~P8!", document0.location());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("InFrameset", document1.baseUri());
      assertEquals("InFrameset", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("y~P8!", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("y~P8!", document2.baseUri());
      assertEquals(2, document2.siblingIndex());
      assertEquals("html", element2.nodeName());
      assertEquals(2, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("html", element2.tagName());
      assertEquals("InFrameset", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(element2.equals((Object)element0));
      assertNotNull(element2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(element2, element0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("^@<orsc>");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("textarea", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("^@<orsc>", element0.tagName());
      assertEquals("^@<orsc>", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = document0.body();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("textarea", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(element1, element0);
      
      Elements elements0 = element1.parents();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("textarea", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(elements0);
      assertNotSame(element1, element0);
      
      document0.setParentNode(element1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("textarea", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      
      Document document1 = (Document)document0.prependText("textarea");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document1.hasAttr("textarea");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("textarea", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements1 = document0.getElementsContainingOwnText("^@<orsc>");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      String string0 = document0.cssSelector();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("html > body > #root", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      
      String string1 = document0.val();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000082 tag name must not be m!j-q", "org.jsoup.select.Evaluator$MatchesOwn");
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = Document.createShell("x`g;+G(QFgfT]yY3tyG");
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("x`g;+G(QFgfT]yY3tyG", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("x`g;+G(QFgfT]yY3tyG", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document0.appendTo(document1);
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("x`g;+G(QFgfT]yY3tyG", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("x`g;+G(QFgfT]yY3tyG", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      String string0 = document0.cssSelector();
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertEquals("#root", string0);
      assertNotNull(string0);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      
      Element element0 = document1.head();
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("x`g;+G(QFgfT]yY3tyG", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("x`g;+G(QFgfT]yY3tyG", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("x`g;+G(QFgfT]yY3tyG", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertNotNull(element0);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      
      Element element1 = element0.before("inert");
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("x`g;+G(QFgfT]yY3tyG", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("x`g;+G(QFgfT]yY3tyG", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertEquals("x`g;+G(QFgfT]yY3tyG", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(2, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("x`g;+G(QFgfT]yY3tyG", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertNotNull(element1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Elements elements0 = document1.previousElementSiblings();
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("x`g;+G(QFgfT]yY3tyG", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("x`g;+G(QFgfT]yY3tyG", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertNotNull(elements0);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      
      document1.removeChild(document2);
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("x`g;+G(QFgfT]yY3tyG", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("x`g;+G(QFgfT]yY3tyG", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      Element element2 = document1.getElementById("K/16le$[ZG.TUUR");
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("x`g;+G(QFgfT]yY3tyG", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("x`g;+G(QFgfT]yY3tyG", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertNull(element2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      
      Element element3 = document0.nextElementSibling();
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertNull(element3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      
      Element element4 = element0.getElementById("org.jsoup.select.Evaluator$MatchesOwn");
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("x`g;+G(QFgfT]yY3tyG", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("x`g;+G(QFgfT]yY3tyG", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertEquals("x`g;+G(QFgfT]yY3tyG", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertNull(element4);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("textarea", element0.baseUri());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.appendTo(element0);
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("textarea", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("textarea", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.setParentNode(element0);
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("textarea", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("textarea", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("textarea", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.prependText("textarea");
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("textarea", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Element element1 = document2.head();
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("textarea", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("head", element1.nodeName());
      assertEquals("textarea", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(element1, element0);
      
      boolean boolean0 = document2.hasText();
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("textarea", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Element element2 = element1.prependText("org.jsoup.nodes.PseudoTextElement");
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("textarea", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("head", element1.nodeName());
      assertEquals("textarea", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals("textarea", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertNotNull(element2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      
      Element element3 = element2.clone();
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("textarea", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("head", element1.nodeName());
      assertEquals("textarea", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals("textarea", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.isBlock());
      assertEquals("head", element3.tagName());
      assertEquals(1, element3.childNodeSize());
      assertFalse(element3.hasParent());
      assertEquals("head", element3.nodeName());
      assertEquals("textarea", element3.baseUri());
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element1));
      assertNotNull(element3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertNotSame(element1, element3);
      assertNotSame(element2, element3);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      assertNotSame(element3, element0);
      assertNotSame(element3, element2);
      assertNotSame(element3, element1);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Document.createShell("InserM ostion ou o[?bounds.");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("InserM ostion ou o[?bounds.");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document1.baseUri());
      assertEquals("InserM ostion ou o[?bounds.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document0.setParentNode(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document1.baseUri());
      assertEquals("InserM ostion ou o[?bounds.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.prependText("InserM ostion ou o[?bounds.");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("InserM ostion ou o[?bounds.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = document2.hasAttr("InserM ostion ou o[?bounds.");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("InserM ostion ou o[?bounds.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document0.getElementsContainingOwnText("InserM ostion ou o[?bounds.");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      String string0 = document0.cssSelector();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertNotNull(string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        document2.outerHtmlTail((Appendable) null, 2156, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^@<orsc>", "^@<orsc>");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("^@<orsc>", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^@<orsc>", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("title");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("^@<orsc>", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^@<orsc>", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("title", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("^@<orsc>", element0.baseUri());
      assertEquals("title", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      boolean boolean0 = element0.hasClass("java.lang.string@0000000092");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("^@<orsc>", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^@<orsc>", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("title", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("^@<orsc>", element0.baseUri());
      assertEquals("title", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(boolean0);
      
      Elements elements0 = document0.previousElementSiblings();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("^@<orsc>", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^@<orsc>", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element1 = document0.getElementById("java.lang.string@0000000092");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("^@<orsc>", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^@<orsc>", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNull(element1);
      
      Document document1 = document0.normalise();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("^@<orsc>", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^@<orsc>", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^@<orsc>", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^@<orsc>", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element2 = document1.nextElementSibling();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("^@<orsc>", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("^@<orsc>", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("^@<orsc>", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("^@<orsc>", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNull(element2);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Parser.parse("v", "v");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("v", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("v", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("v", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("v", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("v", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("v", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("v", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("v", document2.location());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("v", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element0 = document1.prependElement("v");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("v", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("v", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("v", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("v", element0.tagName());
      assertEquals("v", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("v", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      
      Elements elements0 = document1.getElementsContainingOwnText("v");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("v", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("v", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("v", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      
      String string0 = document1.data();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("v", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("v", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("v", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      
      Element element1 = element0.prependChild(document2);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("v", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("v", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("v", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("v", document2.location());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("v", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("v", element0.tagName());
      assertEquals("v", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("v", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("v", element1.tagName());
      assertEquals("v", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("v", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(element1);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      document1.is("Character");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parse("y~P8!", "y~P8!");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("y~P8!", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Tag tag0 = Tag.valueOf("y~P8!");
      assertEquals("y~P8!", tag0.getName());
      assertEquals("y~P8!", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("java.lang.string@0000000091", "y~P8!");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.clone();
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertNotNull(attributes2);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "_rU8HzmV-{'b\"", attributes2);
      assertEquals("y~P8!", tag0.getName());
      assertEquals("y~P8!", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("y~P8!", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("y~P8!", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("_rU8HzmV-{'b\"", pseudoTextElement0.baseUri());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertNotNull(pseudoTextElement0);
      
      Document document1 = (Document)document0.appendTo(pseudoTextElement0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("y~P8!", document0.location());
      assertEquals("y~P8!", tag0.getName());
      assertEquals("y~P8!", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("y~P8!", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("y~P8!", pseudoTextElement0.nodeName());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("_rU8HzmV-{'b\"", pseudoTextElement0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("y~P8!", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("y~P8!", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertNotNull(document1);
      assertSame(document0, document1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      assertSame(document1, document0);
      
      Element element0 = document0.createElement("y~P8!");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("y~P8!", document0.location());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("y~P8!", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("y~P8!", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("y~P8!", element0.tagName());
      assertNotNull(element0);
      assertSame(document0, document1);
      
      element0.setParentNode(pseudoTextElement0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("y~P8!", document0.location());
      assertEquals("y~P8!", tag0.getName());
      assertEquals("y~P8!", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(1, attributes2.size());
      assertEquals("y~P8!", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("y~P8!", pseudoTextElement0.nodeName());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("_rU8HzmV-{'b\"", pseudoTextElement0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("y~P8!", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("y~P8!", element0.nodeName());
      assertEquals("y~P8!", element0.tagName());
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes2));
      assertFalse(attributes2.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes1));
      assertSame(document0, document1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes2);
      assertSame(attributes1, attributes0);
      assertNotSame(attributes2, attributes0);
      assertNotSame(attributes2, attributes1);
      
      Document document2 = (Document)document0.prependText("y~P8!");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("y~P8!", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("y~P8!", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("y~P8!", document2.location());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements0 = document0.getElementsContainingOwnText("Pattern syntax error: ");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("y~P8!", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      document0.remove();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("y~P8!", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("y~P8!", document0.location());
      assertFalse(document0.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Document document3 = Parser.parse("8`J9jIp", "Pattern syntax error: ");
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("Pattern syntax error: ", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Pattern syntax error: ", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      
      String string0 = document3.cssSelector();
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("Pattern syntax error: ", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Pattern syntax error: ", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertEquals("#root", string0);
      assertNotNull(string0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      
      String string1 = document3.val();
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("Pattern syntax error: ", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Pattern syntax error: ", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("InserM ostion ou o[?bounds.");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Pattern pattern0 = Pattern.compile("InserM ostion ou o[?bounds.", 17);
      assertEquals("InserM ostion ou o[?bounds.", pattern0.toString());
      assertEquals(17, pattern0.flags());
      assertEquals("InserM ostion ou o[?bounds.", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("InserM ostion ou o[?bounds.", pattern0.toString());
      assertEquals(17, pattern0.flags());
      assertEquals("InserM ostion ou o[?bounds.", pattern0.pattern());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document1 = (Document)document0.addClass("InserM ostion ou o[?bounds.");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("InserM ostion ou o[?bounds.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.prepend("InserM ostion ou o[?bounds.");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("InserM ostion ou o[?bounds.", document2.location());
      assertEquals("InserM ostion ou o[?bounds.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Comment comment0 = new Comment("InserM ostion ou o[?bounds.", "InserM ostion ou o[?bounds.");
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertNotNull(comment0);
      
      boolean boolean0 = document0.hasClass("InserM ostion ou o[?bounds.");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou o[?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Document document3 = new Document("InserM ostion ou o[?bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("InserM ostion ou o[?bounds.", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("InserM ostion ou o[?bounds.", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(document3);
      
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      StringReader stringReader0 = new StringReader("}A+qX`&d]/Ve");
      assertNotNull(stringReader0);
      
      String string0 = Parser.unescapeEntities("br", false);
      assertEquals("br", string0);
      assertNotNull(string0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "br");
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      document0.title("}A+qX`&d]/Ve");
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Elements elements0 = document0.getElementsContainingOwnText("br");
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        document0.after(" > ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Document.createShell("onserM ostion ou of?bounds.");
      assertEquals("onserM ostion ou of?bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("onserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.prepend("onserM ostion ou of?bounds.");
      assertEquals("onserM ostion ou of?bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("onserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("onserM ostion ou of?bounds.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("onserM ostion ou of?bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertEquals("onserM ostion ou of?bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("onserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("onserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("onserM ostion ou of?bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(3, document2.childNodeSize());
      assertEquals("onserM ostion ou of?bounds.", document2.baseUri());
      assertEquals("onserM ostion ou of?bounds.", document2.location());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      document2.setParentNode(document1);
      assertEquals("onserM ostion ou of?bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("onserM ostion ou of?bounds.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("onserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("onserM ostion ou of?bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("onserM ostion ou of?bounds.", document2.baseUri());
      assertEquals("onserM ostion ou of?bounds.", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document0.prependText(" > ");
      assertEquals("onserM ostion ou of?bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("onserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document3.isBlock());
      assertEquals("onserM ostion ou of?bounds.", document3.location());
      assertEquals("onserM ostion ou of?bounds.", document3.baseUri());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertEquals(2, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      Elements elements0 = document1.getElementsContainingOwnText(" > ");
      assertEquals("onserM ostion ou of?bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("onserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("onserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("onserM ostion ou of?bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      
      // Undeclared exception!
      document3.wrap(" > ");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Parser.parse("v", "v");
      assertEquals("v", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("v", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals("v", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("v", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("v", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("v", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertEquals("v", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("v", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("v", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("v", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("v", document2.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = document1.prependElement(" > ");
      assertEquals("v", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("v", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("v", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("v", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      Document document3 = document2.normalise();
      assertEquals("v", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("v", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("v", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("v", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("v", document2.location());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("v", document3.location());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("v", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      
      Document document4 = document1.normalise();
      assertEquals("v", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("v", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("v", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("v", document4.location());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("v", document4.baseUri());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotNull(document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      
      Elements elements0 = document0.getElementsContainingText(" > ");
      assertEquals("v", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertNotNull(elements0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      
      Document document5 = (Document)document4.addClass("v");
      assertEquals("v", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("v", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("v", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("v", document4.location());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("v", document4.baseUri());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document5.childNodeSize());
      assertEquals("v", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("v", document5.location());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertTrue(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.siblingIndex());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertNotNull(document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document4, document5);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document5, document0);
      assertSame(document5, document2);
      assertSame(document5, document3);
      assertSame(document5, document1);
      assertSame(document5, document4);
      
      // Undeclared exception!
      try { 
        document4.selectFirst("</");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '</': unexpected token at '</'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = new Document("ScriptDataDoubleEscapedDash");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ScriptDataDoubleEscapedDash", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ScriptDataDoubleEscapedDash", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = Parser.parse("RqHK 9`!", "RqHK 9`!");
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("RqHK 9`!", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("RqHK 9`!", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.appendTo(document1);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("RqHK 9`!", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("RqHK 9`!", document1.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertEquals("RqHK 9`!", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("RqHK 9`!", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      document2.setParentNode(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ScriptDataDoubleEscapedDash", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("ScriptDataDoubleEscapedDash", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("RqHK 9`!", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("RqHK 9`!", document1.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertEquals("RqHK 9`!", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("RqHK 9`!", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = document2.prependElement("j3:$h@xC!o");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("RqHK 9`!", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("RqHK 9`!", document1.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertEquals("RqHK 9`!", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("RqHK 9`!", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("j3:$h@xc!o", element0.nodeName());
      assertEquals("RqHK 9`!", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("j3:$h@xc!o", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(element0);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = document1.hasClass("j3:$h@xC!o");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("RqHK 9`!", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("RqHK 9`!", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(boolean0);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      Elements elements0 = document1.previousElementSiblings();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("RqHK 9`!", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("RqHK 9`!", document1.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(elements0);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      Element element1 = element0.getElementById("br");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("RqHK 9`!", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("RqHK 9`!", document1.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertEquals("RqHK 9`!", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("RqHK 9`!", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("j3:$h@xc!o", element0.nodeName());
      assertEquals("RqHK 9`!", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("j3:$h@xc!o", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNull(element1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Element element2 = document2.nextElementSibling();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("RqHK 9`!", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("RqHK 9`!", document1.baseUri());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertEquals("RqHK 9`!", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("RqHK 9`!", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNull(element2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Parser.parse("#", "#");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.location());
      assertEquals("#", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.location());
      assertEquals("#", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#", document2.location());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = document1.prependElement(" > ");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.location());
      assertEquals("#", document1.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertEquals(">", element0.tagName());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      
      boolean boolean0 = document2.hasClass(" > ");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.location());
      assertEquals("#", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(boolean0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements0 = document1.previousElementSiblings();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.location());
      assertEquals("#", document1.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      
      Element element1 = document2.getElementById(" > ");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.location());
      assertEquals("#", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNull(element1);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean1 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      
      Map<String, String> map0 = document2.dataset();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.location());
      assertEquals("#", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(map0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document1.before("#S^*1");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.location());
      assertEquals("#", document1.baseUri());
      assertTrue(document3.hasParent());
      assertEquals(2, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("#", document3.location());
      assertEquals("#", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Parser.parse("v", "v");
      assertEquals("#root", document0.tagName());
      assertEquals("v", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("v", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals("#root", document0.tagName());
      assertEquals("v", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("v", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("v", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("v", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("v", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("v", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("v", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("v", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("v", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document2.removeClass("v");
      assertEquals("#root", document0.tagName());
      assertEquals("v", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("v", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("v", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("v", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("v", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("v", document3.baseUri());
      assertEquals(1, document3.siblingIndex());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("v", document3.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      
      Element element0 = document1.prependElement(" > ");
      assertEquals("#root", document0.tagName());
      assertEquals("v", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("v", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("v", document1.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("v", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.tagName());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      
      Document document4 = (Document)document2.lastElementSibling();
      assertEquals("#root", document0.tagName());
      assertEquals("v", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("v", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("v", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("v", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("v", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertEquals("v", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(2, document4.childNodeSize());
      assertEquals("v", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.siblingIndex());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotNull(document4);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document2);
      
      Elements elements0 = element0.getElementsContainingOwnText(" > ");
      assertEquals("#root", document0.tagName());
      assertEquals("v", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("v", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("v", document1.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("v", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      
      Document document5 = document2.normalise();
      assertEquals("#root", document0.tagName());
      assertEquals("v", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("v", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("v", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("v", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("v", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(1, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertTrue(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals(2, document5.childNodeSize());
      assertEquals("v", document5.location());
      assertEquals("v", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertNotNull(document5);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document5);
      assertNotSame(document5, document0);
      assertSame(document5, document1);
      assertSame(document5, document2);
      assertSame(document5, document3);
      assertSame(document5, document4);
      
      Document document6 = document1.normalise();
      assertEquals("#root", document0.tagName());
      assertEquals("v", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertEquals("v", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("v", document1.baseUri());
      assertEquals(1, document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertTrue(document6.hasParent());
      assertEquals("v", document6.baseUri());
      assertFalse(document6.updateMetaCharsetElement());
      assertFalse(document6.isBlock());
      assertEquals(2, document6.childNodeSize());
      assertEquals("v", document6.location());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("#root", document6.tagName());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document6.equals((Object)document0));
      assertNotNull(document6);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertSame(document1, document6);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document6, document0);
      assertSame(document6, document4);
      assertSame(document6, document3);
      assertSame(document6, document5);
      assertSame(document6, document1);
      assertSame(document6, document2);
      
      Elements elements1 = document0.getElementsContainingText(" > ");
      assertEquals("#root", document0.tagName());
      assertEquals("v", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertNotSame(elements1, elements0);
      
      Element element1 = element0.after((Node) document1);
      assertEquals("#root", document0.tagName());
      assertEquals("v", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("v", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("v", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("v", document1.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("v", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(">", element1.tagName());
      assertEquals(">", element1.nodeName());
      assertEquals("v", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document0, document1);
      assertNotSame(document0, document6);
      assertNotSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertSame(document1, document6);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      String string0 = "ScriptDataDoubleEscapedDash";
      Document document0 = new Document("ScriptDataDoubleEscapedDash");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ScriptDataDoubleEscapedDash", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("ScriptDataDoubleEscapedDash", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      String string1 = "RqHK 9`!";
      Document document1 = Parser.parse("RqHK 9`!", "RqHK 9`!");
      assertEquals("#root", document1.tagName());
      assertEquals("RqHK 9`!", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("RqHK 9`!", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      document1.setParentNode(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ScriptDataDoubleEscapedDash", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("ScriptDataDoubleEscapedDash", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("RqHK 9`!", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("RqHK 9`!", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document1.appendTo(document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Tag tag0 = Tag.valueOf("reversed");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("reversed", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("reversed");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "reversed", attributes0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("reversed", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("reversed", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("reversed", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("reversed", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertNotNull(pseudoTextElement0);
      
      Tag tag1 = Tag.valueOf("reversed");
      assertTrue(tag1.isInline());
      assertFalse(tag1.isBlock());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isData());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.canContainBlock());
      assertEquals("reversed", tag1.toString());
      assertEquals("reversed", tag1.getName());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.preserveWhitespace());
      assertTrue(tag1.equals((Object)tag0));
      assertNotNull(tag1);
      assertNotSame(tag1, tag0);
      
      Element element0 = pseudoTextElement0.attr("reversed", "reversed");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("reversed", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("reversed", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("reversed", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("reversed", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("reversed", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("reversed", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("reversed", element0.tagName());
      assertTrue(tag0.equals((Object)tag1));
      assertNotNull(element0);
      assertNotSame(tag0, tag1);
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, pseudoTextElement0);
      
      String string0 = pseudoTextElement0.val();
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("reversed", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("reversed", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("reversed", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("reversed", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertTrue(tag0.equals((Object)tag1));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(tag0, tag1);
      assertSame(pseudoTextElement0, element0);
      
      Attributes attributes1 = pseudoTextElement0.attributes();
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("reversed", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("reversed", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("reversed", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("reversed", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(2, attributes1.size());
      assertTrue(tag0.equals((Object)tag1));
      assertNotNull(attributes1);
      assertNotSame(tag0, tag1);
      assertSame(attributes0, attributes1);
      assertSame(pseudoTextElement0, element0);
      assertSame(attributes1, attributes0);
      
      BufferedWriter bufferedWriter0 = pseudoTextElement0.html((BufferedWriter) null);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("reversed", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("reversed", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("reversed", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("reversed", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertTrue(tag0.equals((Object)tag1));
      assertNull(bufferedWriter0);
      assertNotSame(tag0, tag1);
      assertSame(attributes0, attributes1);
      assertSame(pseudoTextElement0, element0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      Tag tag0 = Tag.valueOf("dto@jf <~vqeu");
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("dto@jf <~vqeu", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("dto@jf <~vqeu", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Attributes attributes1 = attributes0.put("X_", false);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "|\"2?o0", attributes0);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("dto@jf <~vqeu", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("dto@jf <~vqeu", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertEquals("|\"2?o0", formElement0.baseUri());
      assertEquals("dto@jf <~vqeu", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("dto@jf <~vqeu", formElement0.tagName());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("dto@jf <~vqeu", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("dto@jf <~vqeu", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertEquals("|\"2?o0", formElement0.baseUri());
      assertEquals("dto@jf <~vqeu", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("dto@jf <~vqeu", formElement0.tagName());
      assertEquals("dto@jf <~vqeu", formElement1.tagName());
      assertEquals(0, formElement1.childNodeSize());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("|\"2?o0", formElement1.baseUri());
      assertEquals("dto@jf <~vqeu", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertNotNull(formElement1);
      assertSame(attributes0, attributes1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      String string0 = attributes1.html();
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Document document1 = (Document)document0.appendTo(formElement0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("dto@jf <~vqeu", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("dto@jf <~vqeu", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertEquals("|\"2?o0", formElement0.baseUri());
      assertEquals("dto@jf <~vqeu", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("dto@jf <~vqeu", formElement0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(attributes0, attributes1);
      assertSame(formElement0, formElement1);
      assertSame(document1, document0);
      
      Document document2 = new Document("inserm ostion ou of?bounds. inserm ostion ou of?bounds.");
      assertEquals("inserm ostion ou of?bounds. inserm ostion ou of?bounds.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("inserm ostion ou of?bounds. inserm ostion ou of?bounds.", document2.location());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      
      document2.setParentNode(formElement1);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("dto@jf <~vqeu", tag0.getName());
      assertFalse(tag0.isData());
      assertEquals("dto@jf <~vqeu", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, attributes0.size());
      assertEquals("|\"2?o0", formElement0.baseUri());
      assertEquals("dto@jf <~vqeu", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("dto@jf <~vqeu", formElement0.tagName());
      assertEquals("dto@jf <~vqeu", formElement1.tagName());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals("|\"2?o0", formElement1.baseUri());
      assertEquals("dto@jf <~vqeu", formElement1.nodeName());
      assertFalse(formElement1.hasParent());
      assertEquals("inserm ostion ou of?bounds. inserm ostion ou of?bounds.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("inserm ostion ou of?bounds. inserm ostion ou of?bounds.", document2.location());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(attributes0, attributes1);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document3 = (Document)document2.prependText("org.jsoup.select.Evaluator$ContainsOwnText");
      assertEquals("inserm ostion ou of?bounds. inserm ostion ou of?bounds.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("inserm ostion ou of?bounds. inserm ostion ou of?bounds.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("inserm ostion ou of?bounds. inserm ostion ou of?bounds.", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals("inserm ostion ou of?bounds. inserm ostion ou of?bounds.", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      
      String string1 = document0.cssSelector();
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("dto@jf <~vqeu > #root", string1);
      assertNotNull(string1);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      
      Map<String, String> map0 = document0.dataset();
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertNotNull(map0);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      
      Document document4 = (Document)document2.before("X_");
      assertEquals("inserm ostion ou of?bounds. inserm ostion ou of?bounds.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("inserm ostion ou of?bounds. inserm ostion ou of?bounds.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("inserm ostion ou of?bounds. inserm ostion ou of?bounds.", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals("inserm ostion ou of?bounds. inserm ostion ou of?bounds.", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertNotNull(document4);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = new Document("ScriptDataDoubleEscapedDash");
      assertEquals("ScriptDataDoubleEscapedDash", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ScriptDataDoubleEscapedDash", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = Parser.parse("RqHK 9`!", "RqHK 9`!");
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("RqHK 9`!", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("RqHK 9`!", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.appendTo(document1);
      assertEquals("#root", document1.tagName());
      assertEquals("RqHK 9`!", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("RqHK 9`!", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("RqHK 9`!", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("RqHK 9`!", document2.location());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      document2.setParentNode(document0);
      assertEquals("ScriptDataDoubleEscapedDash", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("ScriptDataDoubleEscapedDash", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("RqHK 9`!", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("RqHK 9`!", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("RqHK 9`!", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("RqHK 9`!", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document document3 = Parser.parseBodyFragmentRelaxed("ScriptDataDoubleEscapedDash", "RqHK 9`!");
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("RqHK 9`!", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("RqHK 9`!", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      
      Document document4 = (Document)document2.val("2o]qe >{zi");
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("RqHK 9`!", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("RqHK 9`!", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("RqHK 9`!", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("RqHK 9`!", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("RqHK 9`!", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.siblingIndex());
      assertEquals("RqHK 9`!", document4.baseUri());
      assertFalse(document4.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertNotNull(document4);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      
      Elements elements0 = document4.getAllElements();
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("RqHK 9`!", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("RqHK 9`!", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("RqHK 9`!", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("RqHK 9`!", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("RqHK 9`!", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.siblingIndex());
      assertEquals("RqHK 9`!", document4.baseUri());
      assertFalse(document4.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      
      Elements elements1 = document1.getElementsByAttributeValueStarting("Nz", "%GueEMp#dr0nw7ky&");
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("RqHK 9`!", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("RqHK 9`!", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document3);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = document2.getElementsByIndexEquals(1329);
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("RqHK 9`!", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("RqHK 9`!", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("RqHK 9`!", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("RqHK 9`!", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document0));
      assertFalse(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotNull(elements2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      // Undeclared exception!
      try { 
        document1.before((Node) document2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Document.createShell("j0hmet");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("j0hmet", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("j0hmet", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.removeClass("java.lang.string@0000000082 tag name must not be m!j-q");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("j0hmet", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("j0hmet", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("j0hmet", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("j0hmet", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("T9Y#*[Rv");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("j0hmet", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("j0hmet", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("j0hmet", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("j0hmet", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document2.attr("j0hmet", true);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("j0hmet", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("j0hmet", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("j0hmet", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("j0hmet", document2.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("j0hmet", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals("j0hmet", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      Comment comment0 = new Comment("XqX`m(w7:;'mG1.^1=", "_=@");
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertNotNull(comment0);
      
      boolean boolean0 = document2.hasClass(";>~UK,VwTEP");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("j0hmet", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("j0hmet", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("j0hmet", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("j0hmet", document2.baseUri());
      assertFalse(boolean0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document4 = new Document("o%u");
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals("o%u", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals("o%u", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertNotNull(document4);
      
      boolean boolean1 = document0.is("missing semicolon");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("j0hmet", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("j0hmet", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.equals((Object)document4));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      String string0 = "trb7wKu_$Cw";
      Document document0 = Parser.parseBodyFragment("trb7wKu_$Cw", "trb7wKu_$Cw");
      assertEquals("trb7wKu_$Cw", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("trb7wKu_$Cw", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByTag("j_XDKK/Q3hV>6gk;S");
      assertEquals("trb7wKu_$Cw", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("trb7wKu_$Cw", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document1 = (Document)document0.insertChildren((-1), (Collection<? extends Node>) elements0);
      assertEquals("trb7wKu_$Cw", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("trb7wKu_$Cw", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("trb7wKu_$Cw", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("trb7wKu_$Cw", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      MockFile mockFile0 = new MockFile("Children collection to be inserted must not be null.");
      assertNotNull(mockFile0);
      
      MockFile mockFile1 = new MockFile(mockFile0, "trb7wKu_$Cw");
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockFile1);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile1);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotNull(mockPrintStream0);
      
      mockPrintStream0.println((-1));
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("Children collection to be inserted must not be null.", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("Children collection to be inserted must not be null.", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Children collection to be inserted must not be null./trb7wKu_$Cw", mockFile1.toString());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.canWrite());
      assertEquals(3L, mockFile1.length());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.canExecute());
      assertEquals("trb7wKu_$Cw", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isHidden());
      assertEquals("/experiment/Children collection to be inserted must not be null.", mockFile1.getParent());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, false);
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream1);
      
      Object[] objectArray0 = new Object[3];
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[0] = object0;
      objectArray0[1] = (Object) document0;
      objectArray0[2] = (Object) elements0;
      MockPrintStream mockPrintStream2 = (MockPrintStream)mockPrintStream1.printf("j(yW|[ee<", objectArray0);
      assertEquals(3, objectArray0.length);
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("Children collection to be inserted must not be null.", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("Children collection to be inserted must not be null.", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals(12L, mockFile1.length());
      assertEquals("/experiment/Children collection to be inserted must not be null./trb7wKu_$Cw", mockFile1.toString());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.canExecute());
      assertEquals("trb7wKu_$Cw", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canRead());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isHidden());
      assertEquals("/experiment/Children collection to be inserted must not be null.", mockFile1.getParent());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream0));
      assertNotNull(mockPrintStream2);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream0, mockPrintStream2);
      assertSame(mockPrintStream1, mockPrintStream2);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertSame(mockPrintStream2, mockPrintStream1);
      assertNotSame(mockPrintStream2, mockPrintStream0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      
      Charset charset0 = document0.charset();
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("trb7wKu_$Cw", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("trb7wKu_$Cw", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(charset0);
      assertSame(document0, document1);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("trb7wKu_$Cw", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("trb7wKu_$Cw", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document0, document1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("trb7wKu_$Cw", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("trb7wKu_$Cw", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings3.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document0, document1);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      
      document1.outerHtmlHead(mockPrintStream2, (-1436010313), document_OutputSettings2);
      assertEquals(3, objectArray0.length);
      assertEquals("trb7wKu_$Cw", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("trb7wKu_$Cw", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("trb7wKu_$Cw", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("trb7wKu_$Cw", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertEquals("Children collection to be inserted must not be null.", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(0L, mockFile0.length());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertFalse(mockFile0.isHidden());
      assertEquals("Children collection to be inserted must not be null.", mockFile0.toString());
      assertTrue(mockFile0.isDirectory());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isFile());
      assertTrue(mockFile0.exists());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertEquals("/experiment/Children collection to be inserted must not be null./trb7wKu_$Cw", mockFile1.toString());
      assertEquals(0L, mockFile1.getUsableSpace());
      assertTrue(mockFile1.canWrite());
      assertFalse(mockFile1.isDirectory());
      assertTrue(mockFile1.canExecute());
      assertEquals("trb7wKu_$Cw", mockFile1.getName());
      assertEquals(0L, mockFile1.getTotalSpace());
      assertTrue(mockFile1.exists());
      assertEquals(0L, mockFile1.getFreeSpace());
      assertEquals(1392409281320L, mockFile1.lastModified());
      assertTrue(mockFile1.isAbsolute());
      assertTrue(mockFile1.canRead());
      assertEquals(19L, mockFile1.length());
      assertTrue(mockFile1.isFile());
      assertFalse(mockFile1.isHidden());
      assertEquals("/experiment/Children collection to be inserted must not be null.", mockFile1.getParent());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(mockFile0.equals((Object)mockFile1));
      assertFalse(mockFile1.equals((Object)mockFile0));
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream1));
      assertFalse(mockPrintStream0.equals((Object)mockPrintStream2));
      assertFalse(mockPrintStream1.equals((Object)mockPrintStream0));
      assertFalse(mockPrintStream2.equals((Object)mockPrintStream0));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(mockFile0, mockFile1);
      assertNotSame(mockFile1, mockFile0);
      assertNotSame(mockPrintStream0, mockPrintStream1);
      assertNotSame(mockPrintStream0, mockPrintStream2);
      assertSame(mockPrintStream1, mockPrintStream2);
      assertNotSame(mockPrintStream1, mockPrintStream0);
      assertSame(mockPrintStream2, mockPrintStream1);
      assertNotSame(mockPrintStream2, mockPrintStream0);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      String string1 = "ea5iqE#";
      // Undeclared exception!
      try { 
        document1.before("ea5iqE#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parse("GnNr Xa|", "hJ\"w@(m,Vf{/kqGxyb");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("hJ\"w@(m,Vf{/kqGxyb", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("hJ\"w@(m,Vf{/kqGxyb", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      TextNode textNode0 = new TextNode((String) null, (String) null);
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      document0.setParentNode(textNode0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("hJ\"w@(m,Vf{/kqGxyb", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("hJ\"w@(m,Vf{/kqGxyb", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("Rj\"ijL#h?sto`1", "Rj\"ijL#h?sto`1");
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Rj\"ijL#h?sto`1", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rj\"ijL#h?sto`1", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("GnNr Xa|");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      String string0 = "reversed";
      Element element0 = new Element("reversed");
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("reversed", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Map<String, String> map0 = element0.dataset();
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("reversed", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Elements elements0 = element0.children();
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("reversed", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Elements elements1 = element0.getElementsByAttributeStarting("reversed");
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("reversed", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      
      boolean boolean0 = element0.is("reversed");
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("reversed", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertTrue(boolean0);
      
      boolean boolean1 = element0.hasClass("reversed");
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("reversed", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Element element1 = element0.clone();
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("reversed", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals("reversed", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("reversed", element1.nodeName());
      assertFalse(element1.hasParent());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      // Undeclared exception!
      try { 
        element0.insertChildren(1175, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Parser.parse("v", "v");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("v", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("v", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("v", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("v", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("v", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("v", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("v", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("v", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("v", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element0 = document1.prependElement(" > ");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("v", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("v", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("v", document1.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertEquals(">", element0.tagName());
      assertEquals("v", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      Elements elements0 = element0.getElementsContainingOwnText(" > ");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("v", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("v", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("v", document1.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertEquals(">", element0.tagName());
      assertEquals("v", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      Document document3 = document2.normalise();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("v", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("v", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("v", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("v", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("v", document2.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals("v", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("v", document3.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      Document document4 = document1.normalise();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("v", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("v", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("v", document1.baseUri());
      assertEquals("v", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertEquals("v", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotNull(document4);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      
      Elements elements1 = document0.getElementsContainingText(" > ");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("v", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(elements1, elements0);
      
      boolean boolean0 = document4.isBlock();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("v", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("v", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("v", document1.baseUri());
      assertEquals("v", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertEquals("v", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(boolean0);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      
      Element element1 = element0.firstElementSibling();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("v", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("v", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("v", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("v", document1.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertEquals(">", element0.tagName());
      assertEquals("v", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(">", element1.nodeName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals(">", element1.tagName());
      assertEquals("v", element1.baseUri());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parse("hI?#tb\"0r", "m sN`M47o<");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("m sN`M47o<", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("m sN`M47o<", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("m sN`M47o<", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("m sN`M47o<", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("m sN`M47o<", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("m sN`M47o<", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document0.clone();
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("m sN`M47o<", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("m sN`M47o<", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("m sN`M47o<", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("m sN`M47o<", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document3 = (Document)document2.appendTo(document1);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("m sN`M47o<", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("m sN`M47o<", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("m sN`M47o<", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("m sN`M47o<", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("m sN`M47o<", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("m sN`M47o<", document2.location());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals(1, document3.childNodeSize());
      assertEquals("m sN`M47o<", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("m sN`M47o<", document3.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(document3);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document2);
      
      Element element0 = document1.prependElement(" > ");
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("m sN`M47o<", document0.location());
      assertEquals("m sN`M47o<", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("m sN`M47o<", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("m sN`M47o<", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(">", element0.nodeName());
      assertEquals("m sN`M47o<", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertNotNull(element0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsContainingOwnText("hI?#tb\"0r");
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("m sN`M47o<", document0.location());
      assertEquals("m sN`M47o<", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(elements0.isEmpty());
      assertEquals(2, elements0.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertNotNull(elements0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      
      Document document4 = (Document)document2.lastElementSibling();
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("m sN`M47o<", document0.location());
      assertEquals("m sN`M47o<", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("m sN`M47o<", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("m sN`M47o<", document2.location());
      assertEquals(2, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals(2, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("m sN`M47o<", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals("m sN`M47o<", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertNotNull(document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      
      Document document5 = Parser.parse("#", "i=WbQ>*d1");
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals("i=WbQ>*d1", document5.baseUri());
      assertEquals("#document", document5.nodeName());
      assertEquals("i=WbQ>*d1", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertNotNull(document5);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document0);
      
      boolean boolean0 = document5.hasClass("qW4We<8TfMa{\"sd");
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals("i=WbQ>*d1", document5.baseUri());
      assertEquals("#document", document5.nodeName());
      assertEquals("i=WbQ>*d1", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(boolean0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document0);
      
      Elements elements1 = document2.previousElementSiblings();
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("m sN`M47o<", document0.location());
      assertEquals("m sN`M47o<", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("m sN`M47o<", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("m sN`M47o<", document2.location());
      assertEquals(2, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals(2, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document5);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(elements1, elements0);
      
      Tag tag0 = Tag.valueOf("Pattern syntax error: ");
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("Pattern syntax error:", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("Pattern syntax error:", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Element element1 = new Element(tag0, "Lo%5c_VFX!b3l", (Attributes) null);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("Pattern syntax error:", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("Pattern syntax error:", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("Lo%5c_VFX!b3l", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("Pattern syntax error:", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("Pattern syntax error:", element1.nodeName());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      
      Element element2 = element1.getElementById("qW4We<8TfMa{\"sd");
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("Pattern syntax error:", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("Pattern syntax error:", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("Lo%5c_VFX!b3l", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("Pattern syntax error:", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("Pattern syntax error:", element1.nodeName());
      assertFalse(element1.equals((Object)element0));
      assertNull(element2);
      assertNotSame(element1, element0);
      
      Element element3 = document0.body();
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("m sN`M47o<", document0.location());
      assertEquals("m sN`M47o<", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(element3.isBlock());
      assertEquals("body", element3.tagName());
      assertEquals(1, element3.childNodeSize());
      assertEquals(1, element3.siblingIndex());
      assertEquals("m sN`M47o<", element3.baseUri());
      assertTrue(element3.hasParent());
      assertEquals("body", element3.nodeName());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element0));
      assertNotNull(element3);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(element3, element1);
      assertNotSame(element3, element0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("XqX`m(w7:;'mG1.^1=", "Q]+CX5etx~$-;''p+/2");
      assertFalse(document0.hasParent());
      assertEquals("Q]+CX5etx~$-;''p+/2", document0.baseUri());
      assertEquals("Q]+CX5etx~$-;''p+/2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.hasParent());
      assertEquals("Q]+CX5etx~$-;''p+/2", document0.baseUri());
      assertEquals("Q]+CX5etx~$-;''p+/2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Q]+CX5etx~$-;''p+/2", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.wrap("/7i~|YcW%sv +|");
      assertFalse(document0.hasParent());
      assertEquals("Q]+CX5etx~$-;''p+/2", document0.baseUri());
      assertEquals("Q]+CX5etx~$-;''p+/2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Q]+CX5etx~$-;''p+/2", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("Q]+CX5etx~$-;''p+/2", element1.baseUri());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      boolean boolean0 = document0.hasText();
      assertFalse(document0.hasParent());
      assertEquals("Q]+CX5etx~$-;''p+/2", document0.baseUri());
      assertEquals("Q]+CX5etx~$-;''p+/2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$ContainsOwnText");
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$ContainsOwnText");
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", tag0.getName());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      boolean boolean1 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Attributes attributes1 = attributes0.put("6&k.3UJWZ:U@mFz|WQ", false);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, ":matchesOwn(", attributes1);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", tag0.getName());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(":matchesOwn(", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertNotNull(formElement0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(16);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document1 = document0.parser(parser1);
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      
      FormElement formElement1 = formElement0.addElement(document1);
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", tag0.getName());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(":matchesOwn(", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(formElement1.isBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      assertEquals(":matchesOwn(", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertNotNull(formElement1);
      assertSame(document0, document1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      assertSame(formElement1, formElement0);
      
      Document document2 = (Document)document0.appendTo(formElement1);
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", tag0.getName());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(":matchesOwn(", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(formElement1.isBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      assertEquals(":matchesOwn(", formElement1.baseUri());
      assertEquals(1, formElement1.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(formElement1, formElement0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      document0.setParentNode(document1);
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      Document document3 = (Document)document1.prependText("org.jsoup.select.Evaluator$ContainsOwnText");
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document3.baseUri());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      String string0 = document1.cssSelector();
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#root", string0);
      assertNotNull(string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      
      Map<String, String> map0 = document0.dataset();
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      
      // Undeclared exception!
      document0.before("orsc");
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$ContainsOwnText");
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$ContainsOwnText");
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", tag0.toString());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("6&k.3UJWZ:U@mFz|WQ", false);
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, ":matchesOwn(", attributes1);
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(":matchesOwn(", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertNotNull(formElement0);
      
      FormElement formElement1 = formElement0.addElement(document0);
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(":matchesOwn(", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(":matchesOwn(", formElement1.baseUri());
      assertNotNull(formElement1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      Document document1 = (Document)document0.appendTo(formElement1);
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(":matchesOwn(", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement1.tagName());
      assertFalse(formElement1.hasParent());
      assertEquals(":matchesOwn(", formElement1.baseUri());
      assertEquals(1, formElement1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      assertSame(document1, document0);
      
      formElement0.setParentNode(formElement1);
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertEquals(0, attributes1.size());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement0.tagName());
      assertTrue(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(":matchesOwn(", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement0.nodeName());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement1.nodeName());
      assertEquals(0, formElement1.siblingIndex());
      assertFalse(formElement1.isBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", formElement1.tagName());
      assertEquals(":matchesOwn(", formElement1.baseUri());
      assertEquals(1, formElement1.childNodeSize());
      assertTrue(formElement1.hasParent());
      assertSame(document0, document1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      Document document2 = (Document)document0.prependText(":matchesOwn(");
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("org.jsoup.select.Evaluator$ContainsOwnText", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = Parser.parseBodyFragmentRelaxed("P.jc:,,", "6&k.3UJWZ:U@mFz|WQ");
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("6&k.3UJWZ:U@mFz|WQ", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("6&k.3UJWZ:U@mFz|WQ", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      
      Elements elements0 = document3.getElementsContainingOwnText("kr]%F14$,a|Qk]hNLYd");
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("6&k.3UJWZ:U@mFz|WQ", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("6&k.3UJWZ:U@mFz|WQ", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(elements0);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.select.Evaluator$ContainsOwnText': unexpected token at '$ContainsOwnText'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("scriptdatadoubleescapeddash inserm ostion ou of?bounds.", "nowrap");
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("nowrap", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("nowrap", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.prepend("M-");
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("nowrap", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("nowrap", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("nowrap", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("nowrap", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document2 = document0.parser(parser0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("nowrap", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("nowrap", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("nowrap", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("nowrap", document2.location());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document2.toggleClass("");
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("nowrap", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("nowrap", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("nowrap", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("nowrap", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("nowrap", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals("nowrap", document3.baseUri());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Document document4 = (Document)document2.addClass("Tag name must not be empty.");
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("nowrap", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("nowrap", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("nowrap", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("nowrap", document2.location());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("nowrap", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("nowrap", document4.location());
      assertNotNull(document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      
      Comment comment0 = new Comment(";", ";");
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      Document document5 = (Document)document2.append("#");
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("nowrap", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("nowrap", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals("nowrap", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("nowrap", document2.location());
      assertEquals(3, document5.childNodeSize());
      assertEquals("nowrap", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("nowrap", document5.location());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertNotNull(document5);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document1);
      assertSame(document5, document4);
      assertSame(document5, document2);
      
      String string0 = document3.val();
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("nowrap", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("nowrap", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals("nowrap", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("nowrap", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("nowrap", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals("nowrap", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document5);
      
      Elements elements0 = document2.children();
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("nowrap", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("nowrap", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals("nowrap", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("nowrap", document2.location());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = document4.hasClass("M!j-Q");
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("nowrap", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("nowrap", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals("nowrap", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("nowrap", document2.location());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("nowrap", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(3, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("nowrap", document4.location());
      assertFalse(boolean0);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document5);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Document.createShell("InserM ostion ou of?bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.prepend("InserM ostion ou of?bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document2 = document0.parser(parser0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertEquals("InserM ostion ou of?bounds.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document2.toggleClass("InserM ostion ou of?bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertEquals("InserM ostion ou of?bounds.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      Document document4 = (Document)document0.addClass("InserM ostion ou of?bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document4.location());
      assertEquals("InserM ostion ou of?bounds.", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      
      Comment comment0 = new Comment((String) null, (String) null);
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      String string0 = document0.val();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      
      Elements elements0 = document0.children();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      
      boolean boolean0 = document3.hasClass("");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertEquals("InserM ostion ou of?bounds.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document1);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Elements elements1 = document0.previousElementSiblings();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      assertFalse(boolean0);
      
      Document document0 = Parser.parse("#", "#");
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      document0.siblingIndex = (-3368);
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals((-3368), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = document0.clone();
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals((-3368), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals((-3368), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = document1.prependElement(" > ");
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals((-3368), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.nodeName());
      assertEquals("#", element0.baseUri());
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      
      List<DataNode> list0 = document1.dataNodes();
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals((-3368), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(list0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      
      Element element1 = document2.nextElementSibling();
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals((-3368), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNull(element1);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document1.removeClass("`oByF{!wu(o3`}rl");
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals((-3368), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#", document3.baseUri());
      assertEquals("#", document3.location());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Tag tag0 = Tag.valueOf("reversed");
      assertFalse(tag0.isData());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("reversed", tag0.getName());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("reversed");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Tag tag1 = Tag.valueOf("s+");
      assertFalse(tag1.isBlock());
      assertTrue(tag1.isInline());
      assertFalse(tag1.isSelfClosing());
      assertEquals("s+", tag1.getName());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isData());
      assertFalse(tag1.isEmpty());
      assertEquals("s+", tag1.toString());
      assertFalse(tag1.isFormSubmittable());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.equals((Object)tag0));
      assertNotNull(tag1);
      assertNotSame(tag1, tag0);
      
      attributes0.normalize();
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      boolean boolean1 = attributes0.hasKey("Insert position out of bounds.");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "reversed", attributes0);
      assertFalse(tag0.isData());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("reversed", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("reversed", pseudoTextElement0.tagName());
      assertEquals("reversed", pseudoTextElement0.nodeName());
      assertEquals("reversed", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertFalse(tag0.equals((Object)tag1));
      assertNotNull(pseudoTextElement0);
      
      Tag tag2 = Tag.valueOf("@O #l7;dTu1Y");
      assertFalse(tag2.isSelfClosing());
      assertFalse(tag2.isBlock());
      assertTrue(tag2.isInline());
      assertEquals("@O #l7;dTu1Y", tag2.getName());
      assertFalse(tag2.preserveWhitespace());
      assertTrue(tag2.formatAsBlock());
      assertFalse(tag2.isKnownTag());
      assertFalse(tag2.isFormListed());
      assertEquals("@O #l7;dTu1Y", tag2.toString());
      assertFalse(tag2.isFormSubmittable());
      assertFalse(tag2.isEmpty());
      assertFalse(tag2.isData());
      assertFalse(tag2.canContainBlock());
      assertFalse(tag2.equals((Object)tag1));
      assertFalse(tag2.equals((Object)tag0));
      assertNotNull(tag2);
      assertNotSame(tag2, tag1);
      assertNotSame(tag2, tag0);
      
      Element element0 = pseudoTextElement0.attr("reversed", "reversed");
      assertFalse(tag0.isData());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("reversed", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("reversed", pseudoTextElement0.tagName());
      assertEquals("reversed", pseudoTextElement0.nodeName());
      assertEquals("reversed", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("reversed", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("reversed", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("reversed", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(tag0.equals((Object)tag2));
      assertNotNull(element0);
      assertNotSame(tag0, tag1);
      assertNotSame(tag0, tag2);
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, pseudoTextElement0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Elements elements0 = element0.getElementsByAttribute("reversed");
      assertFalse(tag0.isData());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("reversed", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("reversed", pseudoTextElement0.tagName());
      assertEquals("reversed", pseudoTextElement0.nodeName());
      assertEquals("reversed", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("reversed", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("reversed", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("reversed", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(tag0.equals((Object)tag2));
      assertNotNull(elements0);
      assertNotSame(tag0, tag1);
      assertNotSame(tag0, tag2);
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, pseudoTextElement0);
      
      Element element1 = pseudoTextElement0.prependElement("@O #l7;dTu1Y");
      assertFalse(tag0.isData());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("reversed", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(2, attributes0.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals("reversed", pseudoTextElement0.tagName());
      assertEquals("reversed", pseudoTextElement0.nodeName());
      assertEquals("reversed", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.hasParent());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("@o #l7;dtu1y", element1.nodeName());
      assertEquals("@o #l7;dtu1y", element1.tagName());
      assertEquals("reversed", element1.baseUri());
      assertFalse(tag0.equals((Object)tag1));
      assertFalse(tag0.equals((Object)tag2));
      assertNotNull(element1);
      assertNotSame(tag0, tag1);
      assertNotSame(tag0, tag2);
      assertSame(pseudoTextElement0, element0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Document.createShell("InserM ostion ou of?bounds.");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document0.siblingIndex = 1613;
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertEquals(1613, document0.siblingIndex());
      
      document1.updateMetaCharsetElement(false);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertEquals(1613, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1613, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("InserM ostion ou of?bounds.");
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertEquals(1613, document0.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("InserM ostion ou of?bounds.", document2.baseUri());
      assertEquals(1613, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Comment comment0 = new Comment((String) null, (String) null);
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      String string0 = document0.val();
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertEquals(1613, document0.siblingIndex());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Elements elements0 = document0.children();
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertEquals(1613, document0.siblingIndex());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      boolean boolean0 = document1.hasClass("InserM ostion ou of?bounds.");
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertEquals(1613, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1613, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("I5vDX1oK", "bzX2O<['>p");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("bzX2O<['>p", document0.location());
      assertEquals("bzX2O<['>p", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("bzX2O<['>p", document0.location());
      assertEquals("bzX2O<['>p", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("bzX2O<['>p", element0.baseUri());
      assertNotNull(element0);
      
      Elements elements0 = element0.getElementsByIndexEquals((-1049));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("bzX2O<['>p", document0.location());
      assertEquals("bzX2O<['>p", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("bzX2O<['>p", element0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Element element1 = element0.after("I5vDX1oK");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("bzX2O<['>p", document0.location());
      assertEquals("bzX2O<['>p", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("bzX2O<['>p", element0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals("bzX2O<['>p", element1.baseUri());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = element0.val("bzX2O<['>p");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("bzX2O<['>p", document0.location());
      assertEquals("bzX2O<['>p", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("bzX2O<['>p", element0.baseUri());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("bzX2O<['>p", element2.baseUri());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.tagName());
      assertNotNull(element2);
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element2, element0);
      assertSame(element2, element1);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Parser.parse("#", "#");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#", document2.location());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element0 = document1.prependElement(" > ");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals(">", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      Elements elements0 = element0.getElementsContainingOwnText(" > ");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals(">", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      Document document3 = (Document)document2.lastElementSibling();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("#", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals("#", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      boolean boolean0 = document2.hasClass(" > ");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(boolean0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      
      Element element1 = element0.nextElementSibling();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals(">", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertEquals("#", element1.baseUri());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("html", element1.tagName());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Elements elements1 = document3.nextElementSiblings();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("#", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals("#", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(elements1, elements0);
      
      Document document4 = (Document)document1.val("@oT~YWo9G7FN%,");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals("#", document4.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#", document4.location());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotNull(document4);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.ysoup.nodes.E=ement$2", "Rm?_ka3`y=_P");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = new Document("Rm?_ka3`y=_P");
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      
      Document document2 = (Document)document1.clone();
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Rm?_ka3`y=_P", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("Rm?_ka3`y=_P", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document document3 = (Document)document1.appendChild(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("Rm?_ka3`y=_P", document3.baseUri());
      assertFalse(document3.hasParent());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      
      int int0 = document3.elementSiblingIndex();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("Rm?_ka3`y=_P", document3.baseUri());
      assertFalse(document3.hasParent());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertEquals(0, int0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      
      String string0 = document3.toString();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("Rm?_ka3`y=_P", document3.baseUri());
      assertFalse(document3.hasParent());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertEquals("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>", string0);
      assertNotNull(string0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      
      Document document4 = Document.createShell("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>");
      assertEquals("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertNotNull(document4);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      
      Elements elements0 = document4.getElementsByAttributeValueContaining("org.ysoup.nodes.E=ement$2", "Rm?_ka3`y=_P");
      assertEquals("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertNotNull(elements0);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      
      Element element0 = document4.nextElementSibling();
      assertEquals("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>", document4.location());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertNull(element0);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      
      Elements elements1 = document0.nextElementSiblings();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Document document5 = (Document)document0.val("org.ysoup.nodes.E=ement$2");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("Rm?_ka3`y=_P", document5.baseUri());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("Rm?_ka3`y=_P", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertTrue(document5.hasParent());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertNotNull(document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document5);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertNotSame(document5, document2);
      assertSame(document5, document0);
      assertNotSame(document5, document4);
      
      // Undeclared exception!
      try { 
        document3.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.ysoup.nodes.E=ement$2", "Rm?_ka3`y=_P");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = new Document("Rm?_ka3`y=_P");
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      
      Document document2 = (Document)document1.clone();
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("Rm?_ka3`y=_P", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("Rm?_ka3`y=_P", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document3 = (Document)document1.appendChild(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("Rm?_ka3`y=_P", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(document3);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      
      int int0 = document3.elementSiblingIndex();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("Rm?_ka3`y=_P", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertEquals(0, int0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      
      String string0 = document3.toString();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("Rm?_ka3`y=_P", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertEquals("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>", string0);
      assertNotNull(string0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      
      Document document4 = Document.createShell("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>");
      assertEquals("#root", document4.tagName());
      assertEquals("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>", document4.location());
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertNotNull(document4);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      
      Elements elements0 = document4.getElementsByAttributeValueContaining("org.ysoup.nodes.E=ement$2", "Rm?_ka3`y=_P");
      assertEquals("#root", document4.tagName());
      assertEquals("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>", document4.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      
      Element element0 = document4.nextElementSibling();
      assertEquals("#root", document4.tagName());
      assertEquals("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals("<#root>\n <html>\n  <head></head>\n  <body>\n   org.ysoup.nodes.E=ement$2\n  </body>\n </html>\n</#root>", document4.location());
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertNull(element0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      
      Elements elements1 = document0.nextElementSiblings();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(elements1, elements0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.settings((ParseSettings) null);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document5 = document3.parser(parser1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("Rm?_ka3`y=_P", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.hasParent());
      assertEquals(1, document5.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals("Rm?_ka3`y=_P", document5.baseUri());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertNotNull(document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertSame(document1, document5);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document5);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertSame(document5, document1);
      assertNotSame(document5, document0);
      assertSame(document5, document3);
      
      // Undeclared exception!
      try { 
        document5.appendElement("Rm?_ka3`y=_P");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      String string0 = "ScriptDataDoubleEscapedDash";
      Document document0 = new Document("ScriptDataDoubleEscapedDash");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("ScriptDataDoubleEscapedDash", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("ScriptDataDoubleEscapedDash", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = Document.createShell("ScriptDataDoubleEscapedDash");
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("ScriptDataDoubleEscapedDash", document1.location());
      assertEquals("ScriptDataDoubleEscapedDash", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document0.appendTo(document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("ScriptDataDoubleEscapedDash", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ScriptDataDoubleEscapedDash", document0.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("ScriptDataDoubleEscapedDash", document1.location());
      assertEquals("ScriptDataDoubleEscapedDash", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ScriptDataDoubleEscapedDash", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("ScriptDataDoubleEscapedDash", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = document2.clone();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("ScriptDataDoubleEscapedDash", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ScriptDataDoubleEscapedDash", document0.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("ScriptDataDoubleEscapedDash", document1.location());
      assertEquals("ScriptDataDoubleEscapedDash", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ScriptDataDoubleEscapedDash", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("ScriptDataDoubleEscapedDash", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals("ScriptDataDoubleEscapedDash", document3.location());
      assertEquals("ScriptDataDoubleEscapedDash", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(document3);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      
      document2.setParentNode(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("ScriptDataDoubleEscapedDash", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("ScriptDataDoubleEscapedDash", document0.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("ScriptDataDoubleEscapedDash", document1.location());
      assertEquals("ScriptDataDoubleEscapedDash", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ScriptDataDoubleEscapedDash", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("ScriptDataDoubleEscapedDash", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      
      // Undeclared exception!
      document0.html("(&k");
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Document.createShell("InserM ostion ou of?bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.toggleClass("InserM ostion ou of?bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("InserM ostion ou of?bounds.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.addClass("InserM ostion ou of?bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      Comment comment0 = new Comment((String) null, (String) null);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertNotNull(comment0);
      
      String string0 = document0.val();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Elements elements0 = document0.children();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      
      boolean boolean0 = document1.hasClass("InserM ostion ou of?bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = new Document("ScriptDataDoubleEscapedDash");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ScriptDataDoubleEscapedDash", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("ScriptDataDoubleEscapedDash", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = Document.createShell("java.lang.string@0000000045");
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document0.appendTo(document1);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ScriptDataDoubleEscapedDash", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ScriptDataDoubleEscapedDash", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("ScriptDataDoubleEscapedDash", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("ScriptDataDoubleEscapedDash", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      document2.setParentNode(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ScriptDataDoubleEscapedDash", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ScriptDataDoubleEscapedDash", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("ScriptDataDoubleEscapedDash", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("ScriptDataDoubleEscapedDash", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document3 = (Document)document0.prependText("ScriptDataDoubleEscapedDash");
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ScriptDataDoubleEscapedDash", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ScriptDataDoubleEscapedDash", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ScriptDataDoubleEscapedDash", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("ScriptDataDoubleEscapedDash", document3.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      
      String string0 = document0.cssSelector();
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ScriptDataDoubleEscapedDash", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ScriptDataDoubleEscapedDash", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertEquals("#root", string0);
      assertNotNull(string0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      
      Map<String, String> map0 = document0.dataset();
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ScriptDataDoubleEscapedDash", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("ScriptDataDoubleEscapedDash", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotNull(map0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      
      // Undeclared exception!
      try { 
        document3.appendChild(document2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "k");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("k", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = new Document("}c^_&:hJ");
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("}c^_&:hJ", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("}c^_&:hJ", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      
      Document document2 = (Document)document0.appendTo(document1);
      assertEquals("#root", document0.tagName());
      assertEquals("k", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("}c^_&:hJ", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("}c^_&:hJ", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("k", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("k", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      Element element0 = document0.prependElement("dto@jF <~VqEu");
      assertEquals("#root", document0.tagName());
      assertEquals("k", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("dto@jf <~vqeu", element0.nodeName());
      assertEquals("k", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("dto@jf <~vqeu", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertNotNull(element0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      
      Elements elements0 = document2.getElementsContainingOwnText("");
      assertEquals("#root", document0.tagName());
      assertEquals("k", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("}c^_&:hJ", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("}c^_&:hJ", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("k", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("k", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(elements0.isEmpty());
      assertEquals(5, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      Element element1 = document2.lastElementSibling();
      assertEquals("#root", document0.tagName());
      assertEquals("k", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("}c^_&:hJ", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("}c^_&:hJ", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("k", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("k", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNull(element1);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements1 = document1.children();
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("}c^_&:hJ", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("}c^_&:hJ", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(elements1, elements0);
      
      Document document3 = (Document)document0.text("k");
      assertEquals("#root", document0.tagName());
      assertEquals("k", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("k", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("k", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      
      boolean boolean0 = document3.hasClass("br");
      assertEquals("#root", document0.tagName());
      assertEquals("k", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("k", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("k", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(boolean0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      
      Elements elements2 = document0.previousElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals("k", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertNotNull(elements2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      String string0 = document2.data();
      assertEquals("#root", document0.tagName());
      assertEquals("k", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("}c^_&:hJ", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("}c^_&:hJ", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("k", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("k", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document3);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      Document document4 = (Document)document0.text("orsc");
      assertEquals("#root", document0.tagName());
      assertEquals("k", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("k", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("k", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("k", document4.location());
      assertEquals(2, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertNotNull(document4);
      assertNotSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertNotSame(document4, document1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      String string0 = "InserM ostion ou of?bounds.";
      Document document0 = Document.createShell("InserM ostion ou of?bounds.");
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertNotNull(document0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("InserM ostion ou of?bounds.");
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document2.location());
      assertEquals("InserM ostion ou of?bounds.", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      // Undeclared exception!
      try { 
        document2.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Parser.parse("#", "#");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#", document2.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element0 = document1.prependElement(" > ");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(">", element0.tagName());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      Elements elements0 = element0.getElementsContainingOwnText(" > ");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(">", element0.tagName());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      Document document3 = (Document)document2.lastElementSibling();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#", document2.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("#", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals("#", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Elements elements1 = document0.children();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements1.isEmpty());
      assertEquals(2, elements1.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      
      Document document4 = (Document)document2.after("A[hR?2GR5q{D\"\"'");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#", document2.baseUri());
      assertEquals("#", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals("#", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotNull(document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertSame(document4, document1);
      
      boolean boolean0 = document2.hasClass(" > ");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#", document2.baseUri());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(boolean0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      
      Elements elements2 = document1.previousElementSiblings();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertNotNull(elements2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      String string0 = element0.data();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(">", element0.tagName());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Document document5 = (Document)document3.text("");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#", document2.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("#", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals("#", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals(1, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertTrue(document5.hasParent());
      assertEquals("#", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals("#", document5.location());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document5.equals((Object)document0));
      assertNotNull(document5);
      assertNotSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document5);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document5, document1);
      assertNotSame(document5, document0);
      assertSame(document5, document4);
      assertSame(document5, document2);
      assertSame(document5, document3);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Document document0 = Document.createShell("#");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = Parser.parseBodyFragmentRelaxed("#", "#");
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Document document2 = (Document)document0.empty();
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document3 = Parser.parse("#", "#");
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals("#", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      
      boolean boolean3 = document2.hasAttr("ScriptData");
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertFalse(boolean3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      Element element0 = document2.shallowClone();
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", element0.tagName());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(element0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
      assertNotNull(evaluator_IsFirstOfType0);
      
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Parser.parse("#", "#");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#", document2.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element0 = document1.prependElement(" > ");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.tagName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      
      Elements elements0 = element0.getElementsContainingOwnText(" > ");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      
      Document document3 = (Document)document2.lastElementSibling();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#", document3.location());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      
      Elements elements1 = document0.children();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertFalse(elements1.isEmpty());
      assertEquals(2, elements1.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      boolean boolean0 = document2.hasClass(" > ");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(boolean0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      
      Elements elements2 = document1.previousElementSiblings();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, elements2.size());
      assertFalse(elements2.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertNotNull(elements2);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      String string0 = element0.data();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.tagName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("", locale0.getVariant());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      boolean boolean1 = document1.hasText();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      
      Document document4 = (Document)document0.attr("Pattern syntax error: ", true);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertNotNull(document4);
      assertNotSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document0);
      assertNotSame(document4, document2);
      
      boolean boolean2 = document4.isBlock();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      assertNotSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertSame(document4, document0);
      assertNotSame(document4, document2);
      
      Document document5 = (Document)document1.tagName(" > ");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(">", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, document5.siblingIndex());
      assertEquals(">", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertTrue(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals(2, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#", document5.baseUri());
      assertEquals("#", document5.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertNotNull(document5);
      assertNotSame(document0, document2);
      assertNotSame(document0, document5);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertSame(document5, document1);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "k");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("k", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("k", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.append("br");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("k", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("k", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("k", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("k", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = Parser.parseBodyFragmentRelaxed("'pv", "k");
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("k", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("k", document2.baseUri());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Elements elements0 = document0.getElementsMatchingOwnText("k");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("k", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("k", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertNotNull(elements0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      
      Elements elements1 = document0.getElementsMatchingText("br");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("k", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("k", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements1.isEmpty());
      assertEquals(3, elements1.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Document document3 = (Document)document1.prependText("k");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("k", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("k", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("k", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("k", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("k", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("k", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(document3);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document0);
      
      Document document4 = (Document)document0.text("reversed");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("k", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("k", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(3, document4.childNodeSize());
      assertEquals("k", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("k", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertNotNull(document4);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document0);
      
      String string0 = document1.baseUri();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("k", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("k", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("k", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("k", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertEquals("k", string0);
      assertNotNull(string0);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document0);
      
      String string1 = document1.text();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("k", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("k", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("k", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("k", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("k reversed br", string1);
      assertNotNull(string1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document3.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Document.createShell(" />");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" />", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" />", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text(" />");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" />", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" />", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(" />", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(" />", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.parents();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" />", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" />", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(" />", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(" />", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.toggleClass(" />");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" />", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" />", document0.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(" />", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(" />", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements1 = document0.getElementsByIndexEquals(126);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" />", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" />", document0.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Document document3 = (Document)document2.appendChild(document1);
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals(" />", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" />", document0.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" />", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(" />", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(" />", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(" />", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(" />", document3.baseUri());
      assertEquals(" />", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Elements elements2 = document3.children();
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals(" />", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" />", document0.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(" />", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(" />", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(1, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(" />", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(" />", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(" />", document3.baseUri());
      assertEquals(" />", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertEquals(2, elements2.size());
      assertFalse(elements2.isEmpty());
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotNull(elements2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      // Undeclared exception!
      document3.attr("&3[]6S", " />");
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Document.createShell("InserM ostion ou of?bounds.");
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document2.tagName());
      assertEquals("InserM ostion ou of?bounds.", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = document0.body();
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("InserM ostion ou of?bounds.", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      String string0 = document1.html();
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      Document document3 = document1.normalise();
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document3.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Document.QuirksMode document_QuirksMode1 = Document.QuirksMode.quirks;
      Document document4 = document3.quirksMode(document_QuirksMode1);
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document3.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document4.baseUri());
      assertFalse(document_QuirksMode1.equals((Object)document_QuirksMode0));
      assertNotNull(document4);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document_QuirksMode1, document_QuirksMode0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document0);
      
      Element element1 = document3.appendElement("InserM ostion ou of?bounds.");
      assertEquals(2, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document3.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", element1.baseUri());
      assertEquals("inserm ostion ou of?bounds.", element1.tagName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("inserm ostion ou of?bounds.", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(element1, element0);
      
      Document document5 = (Document)document2.text("ZD+tE}");
      assertEquals(2, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document2.tagName());
      assertEquals("InserM ostion ou of?bounds.", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document2.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.quirks, document5.quirksMode());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document5.location());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertFalse(document_QuirksMode0.equals((Object)document_QuirksMode1));
      assertNotNull(document5);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document_QuirksMode0, document_QuirksMode1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertSame(document5, document1);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertSame(document5, document0);
      
      Element element2 = document5.previousElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document2.tagName());
      assertEquals("InserM ostion ou of?bounds.", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document2.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.quirks, document5.quirksMode());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document5.location());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertFalse(document_QuirksMode0.equals((Object)document_QuirksMode1));
      assertNull(element2);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document_QuirksMode0, document_QuirksMode1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document5);
      assertSame(document5, document1);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertSame(document5, document0);
      
      List<DataNode> list0 = element0.dataNodes();
      assertEquals(2, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("InserM ostion ou of?bounds.", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(element0.equals((Object)element1));
      assertNotNull(list0);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(element0, element1);
      
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Document document6 = (Document)document4.appendTo(element1);
      assertEquals(2, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals(2, document4.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", document4.baseUri());
      assertEquals("InserM ostion ou of?bounds.", element1.baseUri());
      assertEquals("inserm ostion ou of?bounds.", element1.tagName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("inserm ostion ou of?bounds.", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(2, document6.childNodeSize());
      assertEquals("#root", document6.tagName());
      assertEquals("InserM ostion ou of?bounds.", document6.baseUri());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertEquals("InserM ostion ou of?bounds.", document6.location());
      assertFalse(document_QuirksMode1.equals((Object)document_QuirksMode0));
      assertFalse(element1.equals((Object)element0));
      assertNotNull(document6);
      assertSame(document0, document6);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document6);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document3, document6);
      assertSame(document3, document5);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document_QuirksMode1, document_QuirksMode0);
      assertSame(document4, document6);
      assertSame(document4, document5);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertNotSame(element1, element0);
      assertSame(document6, document0);
      assertSame(document6, document2);
      assertSame(document6, document3);
      assertSame(document6, document1);
      assertSame(document6, document5);
      assertSame(document6, document4);
      
      Elements elements0 = element0.getElementsMatchingText("<html>\n <head></head>\n <body></body>\n</html>");
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertEquals(2, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("InserM ostion ou of?bounds.", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.equals((Object)element1));
      assertNotNull(elements0);
      assertSame(document0, document6);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      String string0 = "F-J'Qr";
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "F-J'Qr");
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2 == boolean0);
      assertFalse(boolean2);
      
      String string1 = "TC@9#5T2?sl5A0OgQDU";
      boolean boolean3 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      
      Element element0 = new Element("TC@9#5T2?sl5A0OgQDU");
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      boolean boolean4 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, (String) null);
      assertFalse(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean1);
      assertFalse(boolean4);
      
      boolean boolean5 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "0");
      assertTrue(boolean5 == boolean2);
      assertFalse(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertFalse(boolean5);
      
      Elements elements0 = element0.getElementsByIndexGreaterThan(8205);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      // Undeclared exception!
      try { 
        element0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Document document0 = Document.createShell("#");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Document document2 = (Document)document0.empty();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = Parser.parseBodyFragmentRelaxed("C", "L%5j_V1VX!b3!l");
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("L%5j_V1VX!b3!l", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("L%5j_V1VX!b3!l", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      
      Document document4 = document2.ownerDocument();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals("#", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals("#", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertNotNull(document4);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document0);
      
      Elements elements0 = document2.getElementsByIndexEquals(27);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertNotNull(elements0);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      
      Document document5 = (Document)document0.appendChild(document2);
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#", document2.location());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#root", document5.tagName());
      assertEquals("#", document5.location());
      assertEquals("#", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document5.equals((Object)document3));
      assertNotNull(document5);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document5);
      assertNotSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document4);
      assertSame(document5, document1);
      assertSame(document5, document0);
      
      Elements elements1 = document2.children();
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#", document2.location());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document2, document5);
      assertNotSame(elements1, elements0);
      
      Document document6 = (Document)document0.prependChild(document3);
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("L%5j_V1VX!b3!l", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("L%5j_V1VX!b3!l", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#", document6.location());
      assertEquals(2, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(1, document6.siblingIndex());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("#root", document6.tagName());
      assertEquals("#", document6.baseUri());
      assertFalse(document6.isBlock());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertNotNull(document6);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document5);
      assertNotSame(document3, document4);
      assertNotSame(document3, document2);
      assertNotSame(document3, document6);
      assertNotSame(document3, document1);
      assertSame(document6, document2);
      assertSame(document6, document4);
      assertNotSame(document6, document3);
      assertSame(document6, document1);
      assertSame(document6, document0);
      assertSame(document6, document5);
      
      Document document7 = Parser.parseBodyFragment("L%5j_V1VX!b3!l", "[");
      assertEquals("#root", document7.tagName());
      assertFalse(document7.hasParent());
      assertEquals(1, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals("[", document7.baseUri());
      assertEquals("#document", document7.nodeName());
      assertEquals(0, document7.siblingIndex());
      assertEquals("[", document7.location());
      assertFalse(document7.isBlock());
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document6));
      assertNotNull(document7);
      assertNotSame(document7, document0);
      assertNotSame(document7, document5);
      assertNotSame(document7, document3);
      assertNotSame(document7, document1);
      assertNotSame(document7, document4);
      assertNotSame(document7, document2);
      assertNotSame(document7, document6);
      
      String string0 = document7.cssSelector();
      assertEquals("#root", document7.tagName());
      assertFalse(document7.hasParent());
      assertEquals(1, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals("[", document7.baseUri());
      assertEquals("#document", document7.nodeName());
      assertEquals(0, document7.siblingIndex());
      assertEquals("[", document7.location());
      assertFalse(document7.isBlock());
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document6));
      assertEquals("#root", string0);
      assertNotNull(string0);
      assertNotSame(document7, document0);
      assertNotSame(document7, document5);
      assertNotSame(document7, document3);
      assertNotSame(document7, document1);
      assertNotSame(document7, document4);
      assertNotSame(document7, document2);
      assertNotSame(document7, document6);
      
      // Undeclared exception!
      document5.prepend("[");
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Document.createShell("InserM ostion ou of?bounds.");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Element element0 = document0.createElement("InserM ostion ou of?bounds.");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertEquals("InserM ostion ou of?bounds.", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      String string0 = "";
      // Undeclared exception!
      try { 
        element0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Document.createShell("InserM ostion ou of?bounds.");
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("InserM ostion ou of?bounds.", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = document0.body();
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      String string0 = document1.html();
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("<html>\n <head></head>\n <body></body>\n</html>", string0);
      assertNotNull(string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Document document3 = document1.normalise();
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      Document.QuirksMode document_QuirksMode1 = Document.QuirksMode.quirks;
      Document document4 = document3.quirksMode(document_QuirksMode1);
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals("InserM ostion ou of?bounds.", document4.baseUri());
      assertFalse(document4.hasParent());
      assertFalse(document_QuirksMode1.equals((Object)document_QuirksMode0));
      assertNotNull(document4);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document_QuirksMode1, document_QuirksMode0);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      
      Element element1 = document3.appendElement("InserM ostion ou of?bounds.");
      assertEquals(2, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("inserm ostion ou of?bounds.", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("inserm ostion ou of?bounds.", element1.nodeName());
      assertEquals("InserM ostion ou of?bounds.", element1.baseUri());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(element1, element0);
      
      Document document5 = (Document)document2.text("ZD+tE}");
      assertEquals(2, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("InserM ostion ou of?bounds.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals(2, document5.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.quirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document_QuirksMode0.equals((Object)document_QuirksMode1));
      assertNotNull(document5);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertNotSame(document_QuirksMode0, document_QuirksMode1);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document5, document3);
      assertSame(document5, document1);
      assertSame(document5, document4);
      assertSame(document5, document2);
      assertSame(document5, document0);
      
      Element element2 = document5.previousElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("InserM ostion ou of?bounds.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals(2, document5.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.quirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document_QuirksMode0.equals((Object)document_QuirksMode1));
      assertNull(element2);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertNotSame(document_QuirksMode0, document_QuirksMode1);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document5, document3);
      assertSame(document5, document1);
      assertSame(document5, document4);
      assertSame(document5, document2);
      assertSame(document5, document0);
      
      List<DataNode> list0 = element0.dataNodes();
      assertEquals(2, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(element0.equals((Object)element1));
      assertNotNull(list0);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(element0, element1);
      
      boolean boolean0 = Element.preserveWhitespace(document5);
      assertEquals(2, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("InserM ostion ou of?bounds.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals(2, document5.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.quirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document_QuirksMode0.equals((Object)document_QuirksMode1));
      assertFalse(boolean0);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertNotSame(document_QuirksMode0, document_QuirksMode1);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document5, document3);
      assertSame(document5, document1);
      assertSame(document5, document4);
      assertSame(document5, document2);
      assertSame(document5, document0);
      
      Document document6 = (Document)document4.appendTo(element1);
      assertEquals(2, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(2, document1.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document4.location());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals("InserM ostion ou of?bounds.", document4.baseUri());
      assertEquals("inserm ostion ou of?bounds.", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("inserm ostion ou of?bounds.", element1.nodeName());
      assertEquals("InserM ostion ou of?bounds.", element1.baseUri());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", document6.location());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(2, document6.childNodeSize());
      assertEquals("#document", document6.nodeName());
      assertEquals("#root", document6.tagName());
      assertEquals(0, document6.siblingIndex());
      assertTrue(document6.hasParent());
      assertFalse(document6.isBlock());
      assertEquals(Document.QuirksMode.quirks, document6.quirksMode());
      assertEquals("InserM ostion ou of?bounds.", document6.baseUri());
      assertFalse(document_QuirksMode1.equals((Object)document_QuirksMode0));
      assertFalse(element1.equals((Object)element0));
      assertNotNull(document6);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document6);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document3, document2);
      assertSame(document3, document5);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document6);
      assertNotSame(document_QuirksMode1, document_QuirksMode0);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document6);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document5);
      assertNotSame(element1, element0);
      assertSame(document6, document0);
      assertSame(document6, document5);
      assertSame(document6, document2);
      assertSame(document6, document3);
      assertSame(document6, document4);
      assertSame(document6, document1);
      
      Elements elements0 = element0.getElementsMatchingText("<html>\n <head></head>\n <body></body>\n</html>");
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertEquals(2, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.equals((Object)element1));
      assertNotNull(elements0);
      assertSame(document0, document5);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.element$2", "{A/l.OIJ!CSkx^]");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("{A/l.OIJ!CSkx^]", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("{A/l.OIJ!CSkx^]", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.isBlock());
      assertEquals("{A/l.OIJ!CSkx^]", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("{A/l.OIJ!CSkx^]", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("{A/l.OIJ!CSkx^]", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("{A/l.OIJ!CSkx^]", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      assertNotNull(pipedOutputStream0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      assertNotNull(mockPrintStream0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      
      Charset charset0 = Charset.defaultCharset();
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertNotNull(charset0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings1.charset(charset0);
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(1, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.prettyPrint());
      assertFalse(document_OutputSettings3.outline());
      assertNotNull(document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings2.clone();
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertNotNull(document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.outline(false);
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(1, document_OutputSettings5.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings5.escapeMode());
      assertFalse(document_OutputSettings5.prettyPrint());
      assertFalse(document_OutputSettings5.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings5.syntax());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings3));
      assertNotNull(document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings5);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertNotSame(document_OutputSettings5, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      assertNotSame(document_OutputSettings5, document_OutputSettings3);
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings5.encoder();
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(1, document_OutputSettings5.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings5.escapeMode());
      assertFalse(document_OutputSettings5.prettyPrint());
      assertFalse(document_OutputSettings5.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings5.syntax());
      assertEquals(1.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertEquals(1.0F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings3));
      assertNotNull(charsetEncoder0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings5);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertNotSame(document_OutputSettings5, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      assertNotSame(document_OutputSettings5, document_OutputSettings3);
      
      mockPrintStream0.print((float) (-1));
      Document.OutputSettings document_OutputSettings6 = document_OutputSettings5.prettyPrint(false);
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings6.escapeMode());
      assertFalse(document_OutputSettings6.prettyPrint());
      assertFalse(document_OutputSettings6.outline());
      assertEquals(1, document_OutputSettings6.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings6.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(1, document_OutputSettings5.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings5.escapeMode());
      assertFalse(document_OutputSettings5.prettyPrint());
      assertFalse(document_OutputSettings5.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings5.syntax());
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings6.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings3));
      assertNotNull(document_OutputSettings6);
      assertNotSame(document_OutputSettings6, document_OutputSettings0);
      assertNotSame(document_OutputSettings6, document_OutputSettings1);
      assertSame(document_OutputSettings6, document_OutputSettings4);
      assertNotSame(document_OutputSettings6, document_OutputSettings2);
      assertNotSame(document_OutputSettings6, document_OutputSettings3);
      assertSame(document_OutputSettings6, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings6);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings6);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings6);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings5);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings6);
      assertSame(document_OutputSettings5, document_OutputSettings6);
      assertNotSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertNotSame(document_OutputSettings5, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      
      document1.outerHtmlTail(mockPrintStream0, (-1), document_OutputSettings5);
      assertFalse(document0.isBlock());
      assertEquals("{A/l.OIJ!CSkx^]", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("{A/l.OIJ!CSkx^]", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("{A/l.OIJ!CSkx^]", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("{A/l.OIJ!CSkx^]", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings2.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings2.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.prettyPrint());
      assertFalse(document_OutputSettings2.outline());
      assertFalse(document_OutputSettings4.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings4.syntax());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings4.escapeMode());
      assertEquals(1, document_OutputSettings4.indentAmount());
      assertFalse(document_OutputSettings4.prettyPrint());
      assertEquals(1, document_OutputSettings5.indentAmount());
      assertEquals(Entities.EscapeMode.extended, document_OutputSettings5.escapeMode());
      assertFalse(document_OutputSettings5.prettyPrint());
      assertFalse(document_OutputSettings5.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings5.syntax());
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings6));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings6));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings4));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings6));
      assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings5));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings4.equals((Object)document_OutputSettings3));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings1));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings2));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings0));
      assertFalse(document_OutputSettings5.equals((Object)document_OutputSettings3));
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertNotSame(document_OutputSettings0, document_OutputSettings4);
      assertNotSame(document_OutputSettings0, document_OutputSettings5);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertNotSame(document_OutputSettings0, document_OutputSettings6);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertNotSame(document_OutputSettings1, document_OutputSettings6);
      assertSame(document_OutputSettings1, document_OutputSettings3);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertNotSame(document_OutputSettings1, document_OutputSettings5);
      assertNotSame(document_OutputSettings1, document_OutputSettings4);
      assertNotSame(document_OutputSettings2, document_OutputSettings4);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertNotSame(document_OutputSettings2, document_OutputSettings6);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertNotSame(document_OutputSettings2, document_OutputSettings5);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertNotSame(document_OutputSettings4, document_OutputSettings2);
      assertNotSame(document_OutputSettings4, document_OutputSettings1);
      assertSame(document_OutputSettings4, document_OutputSettings5);
      assertNotSame(document_OutputSettings4, document_OutputSettings3);
      assertNotSame(document_OutputSettings4, document_OutputSettings0);
      assertSame(document_OutputSettings4, document_OutputSettings6);
      assertSame(document_OutputSettings5, document_OutputSettings6);
      assertNotSame(document_OutputSettings5, document_OutputSettings1);
      assertSame(document_OutputSettings5, document_OutputSettings4);
      assertNotSame(document_OutputSettings5, document_OutputSettings2);
      assertNotSame(document_OutputSettings5, document_OutputSettings3);
      assertNotSame(document_OutputSettings5, document_OutputSettings0);
      
      Element element0 = document1.createElement("head");
      assertFalse(document0.isBlock());
      assertEquals("{A/l.OIJ!CSkx^]", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("{A/l.OIJ!CSkx^]", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("{A/l.OIJ!CSkx^]", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("{A/l.OIJ!CSkx^]", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("{A/l.OIJ!CSkx^]", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element1 = element0.previousElementSibling();
      assertFalse(document0.isBlock());
      assertEquals("{A/l.OIJ!CSkx^]", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("{A/l.OIJ!CSkx^]", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("{A/l.OIJ!CSkx^]", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("{A/l.OIJ!CSkx^]", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("{A/l.OIJ!CSkx^]", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertNull(element1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element2 = element0.html(" > ");
      assertFalse(document0.isBlock());
      assertEquals("{A/l.OIJ!CSkx^]", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("{A/l.OIJ!CSkx^]", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("{A/l.OIJ!CSkx^]", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("{A/l.OIJ!CSkx^]", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("{A/l.OIJ!CSkx^]", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.hasParent());
      assertEquals("{A/l.OIJ!CSkx^]", element2.baseUri());
      assertEquals("head", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertNotNull(element2);
      assertSame(document0, document1);
      assertSame(element0, element2);
      assertSame(document1, document0);
      assertSame(element2, element0);
      
      String string0 = document1.ownText();
      assertFalse(document0.isBlock());
      assertEquals("{A/l.OIJ!CSkx^]", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("{A/l.OIJ!CSkx^]", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("{A/l.OIJ!CSkx^]", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("{A/l.OIJ!CSkx^]", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = element0.previousElementSiblings();
      assertFalse(document0.isBlock());
      assertEquals("{A/l.OIJ!CSkx^]", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("{A/l.OIJ!CSkx^]", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("{A/l.OIJ!CSkx^]", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("{A/l.OIJ!CSkx^]", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("{A/l.OIJ!CSkx^]", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(element0, element2);
      assertSame(document1, document0);
      
      Elements elements1 = document1.getElementsByAttributeValueStarting("org.jsoup.nodes.element$2", "java.lang.string@0000000014");
      assertFalse(document0.isBlock());
      assertEquals("{A/l.OIJ!CSkx^]", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("{A/l.OIJ!CSkx^]", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("{A/l.OIJ!CSkx^]", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("{A/l.OIJ!CSkx^]", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      
      boolean boolean1 = element0.hasClass("");
      assertFalse(document0.isBlock());
      assertEquals("{A/l.OIJ!CSkx^]", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("{A/l.OIJ!CSkx^]", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("{A/l.OIJ!CSkx^]", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("{A/l.OIJ!CSkx^]", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("{A/l.OIJ!CSkx^]", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(document0, document1);
      assertSame(element0, element2);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.clone();
      assertFalse(document0.isBlock());
      assertEquals("{A/l.OIJ!CSkx^]", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("{A/l.OIJ!CSkx^]", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("{A/l.OIJ!CSkx^]", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("{A/l.OIJ!CSkx^]", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("hO):y@'V", "org.jsoup.nodes.Element$2");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.head();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      assertSame(document0, document1);
      
      String string0 = element0.html();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      
      Document document2 = Parser.parseBodyFragment("hO):y@'V", "org.jsoup.nodes.Element$2");
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document document3 = document2.quirksMode(document_QuirksMode0);
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(document3);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      
      Element element1 = document3.appendElement("org.jsoup.nodes.Element$2");
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("org.jsoup.nodes.element$2", element1.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("org.jsoup.nodes.element$2", element1.tagName());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(element1, element0);
      
      Element element2 = element0.previousElementSibling();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(element0.equals((Object)element1));
      assertNull(element2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(element0, element1);
      
      List<DataNode> list0 = element0.dataNodes();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(element0.equals((Object)element1));
      assertNotNull(list0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(element0, element1);
      
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(element0.equals((Object)element1));
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(element0, element1);
      
      // Undeclared exception!
      try { 
        document3.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("CA", locale0.getCountry());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("hO):y@'V", "org.jsoup.nodes.Element$2");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.body();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = element0.html();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("hO):y@'V", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.normalise();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = document2.quirksMode(document_QuirksMode0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Element element1 = document3.appendElement("org.jsoup.nodes.Element$2");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("org.jsoup.nodes.element$2", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("org.jsoup.nodes.element$2", element1.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(element1, element0);
      
      Attributes attributes0 = document0.attributes();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Element element2 = element0.prependText("^:R.N^D2!tQO%%/Tg)`");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", element2.baseUri());
      assertEquals(2, element2.childNodeSize());
      assertEquals("body", element2.nodeName());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertNotNull(element2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      
      String string1 = document0.ownText();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      String string2 = document2.html();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("<html>\n <head></head>\n <body>\n  ^:R.N^D2!tQO%%/Tg)`hO):y@'V\n </body>\n</html>\n<org.jsoup.nodes.element$2></org.jsoup.nodes.element$2>", string2);
      assertNotNull(string2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.ysoup.nodes.E=ement$2", "Rm?_ka3`y=_P");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.createElement("Rm?_ka3`y=_P");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals("Rm?_ka3`y=_P", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.clone();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals("Rm?_ka3`y=_P", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("Rm?_ka3`y=_P", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("Rm?_ka3`y=_P", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = element0.appendChild(document0);
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals("Rm?_ka3`y=_P", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element2.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", element2.tagName());
      assertFalse(element2.hasParent());
      assertEquals("Rm?_ka3`y=_P", element2.nodeName());
      assertEquals("Rm?_ka3`y=_P", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertNotNull(element2);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      
      int int0 = element2.elementSiblingIndex();
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals("Rm?_ka3`y=_P", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element2.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", element2.tagName());
      assertFalse(element2.hasParent());
      assertEquals("Rm?_ka3`y=_P", element2.nodeName());
      assertEquals("Rm?_ka3`y=_P", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals(0, int0);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      
      Element element3 = document0.firstElementSibling();
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNull(element3);
      
      String string0 = element2.toString();
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals("Rm?_ka3`y=_P", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, element2.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", element2.tagName());
      assertFalse(element2.hasParent());
      assertEquals("Rm?_ka3`y=_P", element2.nodeName());
      assertEquals("Rm?_ka3`y=_P", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals("<Rm?_ka3`y=_P>\n <#root>\n  <html>\n   <head></head>\n   <body>\n    org.ysoup.nodes.E=ement$2\n   </body>\n  </html>\n </#root>\n</Rm?_ka3`y=_P>", string0);
      assertNotNull(string0);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      
      Document document1 = Document.createShell("<Rm?_ka3`y=_P>\n <#root>\n  <html>\n   <head></head>\n   <body>\n    org.ysoup.nodes.E=ement$2\n   </body>\n  </html>\n </#root>\n</Rm?_ka3`y=_P>");
      assertEquals("<Rm?_ka3`y=_P>\n <#root>\n  <html>\n   <head></head>\n   <body>\n    org.ysoup.nodes.E=ement$2\n   </body>\n  </html>\n </#root>\n</Rm?_ka3`y=_P>", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("<Rm?_ka3`y=_P>\n <#root>\n  <html>\n   <head></head>\n   <body>\n    org.ysoup.nodes.E=ement$2\n   </body>\n  </html>\n </#root>\n</Rm?_ka3`y=_P>", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      boolean boolean0 = element1.hasClass("o?hDT&3{");
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals("Rm?_ka3`y=_P", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("Rm?_ka3`y=_P", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("Rm?_ka3`y=_P", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertFalse(boolean0);
      assertNotSame(document0, document1);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      
      Tag tag0 = document0.tag();
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("#root", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.toString());
      assertFalse(document0.equals((Object)document1));
      assertNotNull(tag0);
      assertNotSame(document0, document1);
      
      Elements elements0 = document0.previousElementSiblings();
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      
      String string1 = document0.data();
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(document0, document1);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      // Undeclared exception!
      try { 
        document1.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Parser.parse("#", "#");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#", document1.location());
      assertEquals("#", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element0 = document1.prependElement(" > ");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#", document1.location());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      Elements elements0 = document2.getElementsByTag("#");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#", document1.location());
      assertEquals("#", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document document3 = (Document)document2.lastElementSibling();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#", document1.location());
      assertEquals("#", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals("#", document3.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      
      String string0 = document3.nodeName();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#", document1.location());
      assertEquals("#", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals("#", document3.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertEquals("#document", string0);
      assertNotNull(string0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      
      Element element1 = element0.attr("#document", "#");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#", document1.location());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.nodeName());
      assertEquals("#", element1.baseUri());
      assertEquals(">", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(">", element1.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element1);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      try { 
        document2.outerHtml((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("hO):y@'V", "org.jsoup.nodes.Element$2");
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.body();
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = element0.html();
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("hO):y@'V", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.normalise();
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = document2.quirksMode(document_QuirksMode0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document3.location());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Element element1 = document3.appendElement("org.jsoup.nodes.Element$2");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document3.location());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("org.jsoup.nodes.element$2", element1.nodeName());
      assertEquals("org.jsoup.nodes.element$2", element1.tagName());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(element1, element0);
      
      Element element2 = element0.previousElementSibling();
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("head", element2.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", element2.baseUri());
      assertTrue(element2.isBlock());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotNull(element2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      Elements elements0 = document0.parents();
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      
      List<DataNode> list0 = element2.dataNodes();
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.tagName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("head", element2.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotNull(list0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      Document document4 = (Document)document0.toggleClass("br");
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document4.location());
      assertEquals("org.jsoup.nodes.Element$2", document4.baseUri());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertNotNull(document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      
      // Undeclared exception!
      try { 
        element1.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("hO):y@'V", "org.jsoup.nodes.Element$2");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.body();
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = element0.html();
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("hO):y@'V", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.normalise();
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = document2.quirksMode(document_QuirksMode0);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertEquals("org.jsoup.nodes.Element$2", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Element element1 = document3.appendElement("org.jsoup.nodes.Element$2");
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertEquals("org.jsoup.nodes.Element$2", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("org.jsoup.nodes.element$2", element1.nodeName());
      assertEquals("org.jsoup.nodes.element$2", element1.tagName());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(element1, element0);
      
      Element element2 = element1.firstElementSibling();
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertEquals("org.jsoup.nodes.Element$2", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("org.jsoup.nodes.element$2", element1.nodeName());
      assertEquals("org.jsoup.nodes.element$2", element1.tagName());
      assertEquals("html", element2.tagName());
      assertEquals("html", element2.nodeName());
      assertTrue(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", element2.baseUri());
      assertEquals(2, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotNull(element2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      List<DataNode> list0 = element2.dataNodes();
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertEquals("org.jsoup.nodes.Element$2", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("org.jsoup.nodes.element$2", element1.nodeName());
      assertEquals("org.jsoup.nodes.element$2", element1.tagName());
      assertEquals("html", element2.tagName());
      assertEquals("html", element2.nodeName());
      assertTrue(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", element2.baseUri());
      assertEquals(2, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(element1.equals((Object)element0));
      assertFalse(element1.equals((Object)element2));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotNull(list0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(element1, element0);
      assertNotSame(element1, element2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      Element element3 = element0.previousElementSibling();
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(element3.hasParent());
      assertEquals("head", element3.tagName());
      assertTrue(element3.isBlock());
      assertEquals(0, element3.childNodeSize());
      assertEquals("head", element3.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertNotNull(element3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(element0, element3);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element3, element2);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      
      List<DataNode> list1 = element3.dataNodes();
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(element3.hasParent());
      assertEquals("head", element3.tagName());
      assertTrue(element3.isBlock());
      assertEquals(0, element3.childNodeSize());
      assertEquals("head", element3.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(element0, element3);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element3, element2);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      assertNotSame(list1, list0);
      
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(element0, element3);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      
      Document document4 = (Document)document3.appendTo(element3);
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertEquals("org.jsoup.nodes.Element$2", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertTrue(element3.hasParent());
      assertEquals("head", element3.tagName());
      assertTrue(element3.isBlock());
      assertEquals(1, element3.childNodeSize());
      assertEquals("head", element3.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", element3.baseUri());
      assertEquals(0, element3.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document4.location());
      assertTrue(document4.hasParent());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertNotNull(document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(element0, element3);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertNotSame(element3, element2);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Parser.parse("#", "#");
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals("#", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element0 = document1.prependElement(" > ");
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals("#", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#", element0.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      Elements elements0 = document2.getElementsByTag("#");
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals("#", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document document3 = (Document)document2.lastElementSibling();
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals("#", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("#", document3.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      String string0 = document3.nodeName();
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals("#", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("#", document3.baseUri());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertEquals("#document", string0);
      assertNotNull(string0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Element element1 = element0.attr("#document", "#");
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals("#", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#", element0.baseUri());
      assertEquals(">", element1.tagName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("#", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(">", element1.nodeName());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      boolean boolean0 = document1.hasClass("nSel");
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals("#", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(boolean0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      
      Tag tag0 = document2.tag();
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals("#", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("#root", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(tag0);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      
      Elements elements1 = document3.previousElementSiblings();
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals("#", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertEquals("#", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("#", document3.baseUri());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(elements1, elements0);
      
      String string1 = document2.data();
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals("#", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("TW", locale0.getCountry());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Document document4 = (Document)document2.toggleClass("");
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals("#", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#", document2.location());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertEquals("#", document4.location());
      assertTrue(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("#", document4.baseUri());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotNull(document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Document.createShell("InserM ostion ou of?bounds.");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("InserM ostion ou of?bounds.");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document2.baseUri());
      assertEquals("InserM ostion ou of?bounds.", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Comment comment0 = new Comment("qI:@/cpi3BqR", "InserM ostion ou of?bounds.");
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      String string0 = document1.val();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document2.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = Parser.parse("R%MNd6", "h}f-]g6g[ZC&C<");
      assertFalse(document0.hasParent());
      assertEquals("h}f-]g6g[ZC&C<", document0.location());
      assertEquals("h}f-]g6g[ZC&C<", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement(" 1Mb;PEcozCT=o`BK");
      assertFalse(document0.hasParent());
      assertEquals("h}f-]g6g[ZC&C<", document0.location());
      assertEquals("h}f-]g6g[ZC&C<", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("1mb;pecozct=o`bk", element0.tagName());
      assertEquals("1mb;pecozct=o`bk", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("h}f-]g6g[ZC&C<", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsByTag("body");
      assertFalse(document0.hasParent());
      assertEquals("h}f-]g6g[ZC&C<", document0.location());
      assertEquals("h}f-]g6g[ZC&C<", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      Element element1 = element0.lastElementSibling();
      assertFalse(document0.hasParent());
      assertEquals("h}f-]g6g[ZC&C<", document0.location());
      assertEquals("h}f-]g6g[ZC&C<", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("1mb;pecozct=o`bk", element0.tagName());
      assertEquals("1mb;pecozct=o`bk", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("h}f-]g6g[ZC&C<", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("html", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("h}f-]g6g[ZC&C<", element1.baseUri());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String string0 = document0.nodeName();
      assertFalse(document0.hasParent());
      assertEquals("h}f-]g6g[ZC&C<", document0.location());
      assertEquals("h}f-]g6g[ZC&C<", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", string0);
      assertNotNull(string0);
      
      Element element2 = element1.attr("Ge[Q9f53,#*{,1YMAd", "body");
      assertFalse(document0.hasParent());
      assertEquals("h}f-]g6g[ZC&C<", document0.location());
      assertEquals("h}f-]g6g[ZC&C<", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("1mb;pecozct=o`bk", element0.tagName());
      assertEquals("1mb;pecozct=o`bk", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("h}f-]g6g[ZC&C<", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("html", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("h}f-]g6g[ZC&C<", element1.baseUri());
      assertEquals("h}f-]g6g[ZC&C<", element2.baseUri());
      assertEquals("html", element2.tagName());
      assertEquals(2, element2.childNodeSize());
      assertEquals("html", element2.nodeName());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertNotNull(element2);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      
      Document document1 = (Document)document0.toggleClass("q$:O}v0LRFca'_@oRv");
      assertFalse(document0.hasParent());
      assertEquals("h}f-]g6g[ZC&C<", document0.location());
      assertEquals("h}f-]g6g[ZC&C<", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("h}f-]g6g[ZC&C<", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("h}f-]g6g[ZC&C<", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element2;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) element0;
      nodeArray0[7] = (Node) document1;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Parser.parse("#", "#");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("|a,DY'u96PY?.J%Vt", 3);
      assertEquals(3, pattern0.flags());
      assertEquals("|a,DY'u96PY?.J%Vt", pattern0.toString());
      assertEquals("|a,DY'u96PY?.J%Vt", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(3, pattern0.flags());
      assertEquals("|a,DY'u96PY?.J%Vt", pattern0.toString());
      assertEquals("|a,DY'u96PY?.J%Vt", pattern0.pattern());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      
      String string0 = "7}5bX}K1}#";
      // Undeclared exception!
      try { 
        document1.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element$NodeList");
      assertEquals("org.jsoup.nodes.Element$NodeList", pattern0.toString());
      assertEquals("org.jsoup.nodes.Element$NodeList", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertNotNull(pattern0);
      
      Document document1 = (Document)document0.text("org.jsoup.nodes.Element$NodeList");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.appendTo(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(1, document0.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      // Undeclared exception!
      document0.prependElement("9oyB E~eC");
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Parser.parse("#", "#");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = document1.prependElement(" > ");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      Elements elements0 = document2.getElementsByTag("#");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Element element1 = element0.lastElementSibling();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.tagName());
      assertEquals("html", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("#", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String string0 = element0.nodeName();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(">", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertEquals(">", string0);
      assertNotNull(string0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(element0, element1);
      
      Document document3 = (Document)document2.attr(" > ", ">");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("#", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals("#", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document0);
      
      Document document4 = (Document)document1.toggleClass("body");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals(2, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("#", document4.baseUri());
      assertEquals("#", document4.location());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotNull(document4);
      assertNotSame(document0, document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertNotSame(document1, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertNotSame(document4, document0);
      
      // Undeclared exception!
      try { 
        document4.insertChildren(124, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("#", "~W?R~_");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("~W?R~_", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("~W?R~_", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("~W?R~_", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("~W?R~_", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("~W?R~_", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("~W?R~_", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.body();
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("~W?R~_", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("~W?R~_", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("~W?R~_", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("~W?R~_", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("~W?R~_", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.normalise();
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("~W?R~_", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("~W?R~_", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("~W?R~_", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("~W?R~_", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("~W?R~_", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("~W?R~_", document2.location());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = document0.quirksMode(document_QuirksMode0);
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("~W?R~_", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("~W?R~_", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("~W?R~_", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("~W?R~_", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Element element1 = document3.appendElement("hO):y@'V");
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("~W?R~_", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("~W?R~_", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("~W?R~_", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("~W?R~_", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals("ho):y@'v", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("~W?R~_", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("ho):y@'v", element1.nodeName());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(element1, element0);
      
      Element element2 = document2.shallowClone();
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("~W?R~_", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("~W?R~_", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("~W?R~_", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("~W?R~_", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("~W?R~_", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("~W?R~_", document2.location());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals("~W?R~_", element2.baseUri());
      assertEquals("#root", element2.tagName());
      assertEquals("#root", element2.nodeName());
      assertFalse(element2.hasParent());
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotNull(element2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      Element element3 = element0.previousElementSibling();
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("~W?R~_", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("~W?R~_", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("~W?R~_", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("~W?R~_", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("~W?R~_", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element3.siblingIndex());
      assertTrue(element3.isBlock());
      assertEquals("head", element3.tagName());
      assertEquals(0, element3.childNodeSize());
      assertEquals("head", element3.nodeName());
      assertTrue(element3.hasParent());
      assertEquals("~W?R~_", element3.baseUri());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element0));
      assertNotNull(element3);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(element0, element3);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element3, element1);
      assertNotSame(element3, element2);
      assertNotSame(element3, element0);
      
      List<DataNode> list0 = element0.dataNodes();
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("~W?R~_", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("~W?R~_", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("~W?R~_", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("~W?R~_", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("~W?R~_", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertNotNull(list0);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(element0, element3);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      
      boolean boolean0 = Element.preserveWhitespace(document2);
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("~W?R~_", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("~W?R~_", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("~W?R~_", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("~W?R~_", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("~W?R~_", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("~W?R~_", document2.location());
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      
      Document document4 = document0.normalise();
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("~W?R~_", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("~W?R~_", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals("~W?R~_", document4.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("~W?R~_", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertNotNull(document4);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      
      Document document5 = (Document)document0.appendTo(document4);
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("~W?R~_", document0.location());
      assertEquals("~W?R~_", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(3, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertEquals("~W?R~_", document4.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertEquals("~W?R~_", document4.location());
      assertEquals(2, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.limitedQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals("~W?R~_", document5.location());
      assertEquals("~W?R~_", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(3, document5.childNodeSize());
      assertTrue(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals(2, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertNotNull(document5);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document4, document2);
      assertSame(document4, document5);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document5, document1);
      assertSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document4);
      
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Parser.parse("#", "#");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document1 = document0.clone();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.appendTo(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertEquals("#", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = document1.prependElement(" > ");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals(">", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      
      Elements elements0 = document2.getElementsByTag("#");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document2.lastElementSibling();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document3.isBlock());
      assertEquals("#", document3.location());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("#", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      
      String string0 = document3.nodeName();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document3.isBlock());
      assertEquals("#", document3.location());
      assertEquals(1, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("#", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertEquals("#document", string0);
      assertNotNull(string0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      
      Element element1 = element0.attr("#document", "#");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals(">", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">", element0.tagName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(">", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(">", element1.tagName());
      assertEquals("#", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element1);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Tag tag0 = Tag.valueOf("reversed");
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("reversed", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertEquals("reversed", tag0.toString());
      assertNotNull(tag0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("reversed", "br");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("br", document1.location());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("br", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document2 = document1.parser(parser0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("br", document1.location());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("br", document1.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("br", document2.location());
      assertEquals("br", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document1.addClass("textarea");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("br", document1.location());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("br", document1.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("br", document3.location());
      assertEquals("br", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      ParseErrorList parseErrorList0 = parser0.getErrors();
      assertFalse(parser0.isTrackErrors());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      List<Node> list0 = Parser.parseFragment("body", (Element) document2, "id", parseErrorList0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("br", document1.location());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("br", document1.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("br", document2.location());
      assertEquals("br", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      
      Comment comment0 = new Comment("ZJlwO]30NIjC", "br");
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      String string0 = document2.val();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("br", document1.location());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("br", document1.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("br", document2.location());
      assertEquals("br", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      
      Elements elements0 = document1.children();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("br", document1.location());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("br", document1.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      boolean boolean1 = document1.hasClass("main");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("br", document1.location());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("br", document1.baseUri());
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Elements elements1 = document1.getElementsContainingText("reve/rsed");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("br", document1.location());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("br", document1.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements1, elements0);
      
      String string1 = document0.className();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Document document0 = Document.createShell("#");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document0.normalise();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("#", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Document document3 = (Document)document0.empty();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("#", document3.location());
      assertEquals("#", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      List<Node> list0 = document1.ensureChildNodes();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      
      Document document4 = (Document)document0.tagName("#");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals("#", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("#", document4.location());
      assertEquals("#", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertNotNull(document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      
      boolean boolean3 = document3.hasAttr("ScriptData");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals("#", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#", document3.location());
      assertEquals("#", document3.baseUri());
      assertEquals("#", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertTrue(boolean3 == boolean1);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean0);
      assertFalse(boolean3);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      Element element0 = document3.shallowClone();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals("#", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#", document3.location());
      assertEquals("#", document3.baseUri());
      assertEquals("#", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("#", element0.baseUri());
      assertEquals("#", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#", element0.tagName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
      assertNotNull(evaluator_IsFirstOfType0);
      
      boolean boolean4 = evaluator_IsFirstOfType0.matches(document3, document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals("#", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#", document3.location());
      assertEquals("#", document3.baseUri());
      assertEquals("#", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
      assertTrue(boolean4 == boolean0);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertFalse(boolean4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      boolean boolean5 = document0.is((Evaluator) evaluator_IsFirstOfType0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals("#", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      
      boolean boolean6 = document3.is((Evaluator) evaluator_IsFirstOfType0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals("#", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#", document3.location());
      assertEquals("#", document3.baseUri());
      assertEquals("#", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean5);
      assertTrue(boolean6 == boolean2);
      assertFalse(boolean6);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      Elements elements0 = document3.getAllElements();
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals("#", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#", document3.location());
      assertEquals("#", document3.baseUri());
      assertEquals("#", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document3, document4);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      document3.parentNode = (Node) document4;
      assertEquals(0, document3.parentNode.siblingIndex());
      assertTrue(document3.parentNode.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertEquals("#", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document3.hasParent());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#", document3.location());
      assertEquals("#", document3.baseUri());
      assertEquals("#", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("#", document4.location());
      assertEquals("#", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document4.isBlock());
      
      Tag tag0 = document2.tag();
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("#", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("#", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertEquals("#", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#", document2.tagName());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#", document2.baseUri());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(tag0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements1 = document0.select("3");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertEquals("#", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(elements1, elements0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document document5 = document1.outputSettings(document_OutputSettings0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#", document0.location());
      assertEquals("#", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals("#", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#", document1.tagName());
      assertFalse(document1.isBlock());
      assertTrue(document5.hasParent());
      assertEquals(Document.QuirksMode.quirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.childNodeSize());
      assertEquals("#", document5.location());
      assertEquals("#", document5.tagName());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#", document5.baseUri());
      assertNotNull(document5);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document5, document0);
      assertSame(document5, document3);
      assertSame(document5, document1);
      assertSame(document5, document2);
      assertSame(document5, document4);
      
      // Undeclared exception!
      try { 
        document5.prependChild(document2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("br", "");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Map<String, String> map0 = document0.dataset();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Element element0 = document0.nextElementSibling();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertNull(element0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("br", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("Insert position out of bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Comment comment0 = new Comment((String) null, "^@<o%ursc>");
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      Pattern pattern0 = Pattern.compile("^@<o%ursc>");
      assertEquals("^@<o%ursc>", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("^@<o%ursc>", pattern0.pattern());
      assertNotNull(pattern0);
      
      Element element0 = document2.body();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertNull(element0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      String string0 = document1.html();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      Document document3 = document2.normalise();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertEquals("Insert position out of bounds.", document3.location());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document4 = document1.quirksMode(document_QuirksMode0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("Insert position out of bounds.", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("Insert position out of bounds.", document4.location());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      
      Element element1 = document4.appendElement("#");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("Insert position out of bounds.", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("Insert position out of bounds.", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("#", element1.tagName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("#", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("Insert position out of bounds.", element1.baseUri());
      assertNotNull(element1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      
      Element element2 = element1.previousElementSibling();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("Insert position out of bounds.", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("Insert position out of bounds.", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("#", element1.tagName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("#", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("Insert position out of bounds.", element1.baseUri());
      assertEquals(2, element2.childNodeSize());
      assertEquals("html", element2.nodeName());
      assertTrue(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("Insert position out of bounds.", element2.baseUri());
      assertEquals("html", element2.tagName());
      assertTrue(element2.hasParent());
      assertFalse(element2.equals((Object)element1));
      assertNotNull(element2);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertNotSame(element1, element2);
      assertNotSame(element2, element1);
      
      Document.QuirksMode document_QuirksMode1 = Document.QuirksMode.noQuirks;
      Document document5 = document3.quirksMode(document_QuirksMode1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertEquals("Insert position out of bounds.", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("Insert position out of bounds.", document5.baseUri());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals("Insert position out of bounds.", document5.location());
      assertEquals(2, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertNotNull(document5);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document2, document5);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document_QuirksMode1, document_QuirksMode0);
      assertSame(document5, document4);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertSame(document5, document1);
      assertSame(document5, document2);
      
      List<DataNode> list0 = document5.dataNodes();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertEquals("Insert position out of bounds.", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("Insert position out of bounds.", document5.baseUri());
      assertEquals("#document", document5.nodeName());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals("Insert position out of bounds.", document5.location());
      assertEquals(2, document5.childNodeSize());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document2, document5);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document_QuirksMode1, document_QuirksMode0);
      assertSame(document5, document4);
      assertSame(document5, document3);
      assertSame(document5, document0);
      assertSame(document5, document1);
      assertSame(document5, document2);
      
      boolean boolean0 = Element.preserveWhitespace(element1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("Insert position out of bounds.", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.siblingIndex());
      assertEquals("Insert position out of bounds.", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("#", element1.tagName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("#", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("Insert position out of bounds.", element1.baseUri());
      assertFalse(element1.equals((Object)element2));
      assertFalse(boolean0);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document_QuirksMode0, document_QuirksMode1);
      assertSame(document4, document5);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertNotSame(element1, element2);
      
      Document document6 = (Document)document0.appendTo(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertTrue(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(2, document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(3, document6.childNodeSize());
      assertEquals("Insert position out of bounds.", document6.location());
      assertEquals("Insert position out of bounds.", document6.baseUri());
      assertFalse(document6.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertNotNull(document6);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document6);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document6, document0);
      assertSame(document6, document3);
      assertSame(document6, document1);
      assertSame(document6, document2);
      assertSame(document6, document5);
      assertSame(document6, document4);
      assertSame(document1, document5);
      assertSame(document1, document2);
      assertSame(document1, document6);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document4);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("Insert position out of bounds.");
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Comment comment0 = new Comment((String) null, "^@<o%ursc>");
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      Pattern pattern0 = Pattern.compile("^@<o%ursc>");
      assertEquals("^@<o%ursc>", pattern0.pattern());
      assertEquals("^@<o%ursc>", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNotNull(pattern0);
      
      Document document3 = Parser.parseBodyFragmentRelaxed("^@<o%ursc>", "L%5j_V1VX!b3!l");
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("L%5j_V1VX!b3!l", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("L%5j_V1VX!b3!l", document3.location());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      
      Document document4 = document3.ownerDocument();
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("L%5j_V1VX!b3!l", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("L%5j_V1VX!b3!l", document3.location());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("L%5j_V1VX!b3!l", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("L%5j_V1VX!b3!l", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertNotNull(document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertNotSame(document3, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      
      Elements elements0 = document4.getElementsByIndexEquals(27);
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("L%5j_V1VX!b3!l", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("L%5j_V1VX!b3!l", document3.location());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("L%5j_V1VX!b3!l", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("L%5j_V1VX!b3!l", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertNotNull(elements0);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertNotSame(document3, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      
      Document document5 = (Document)document4.appendChild(document3);
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("L%5j_V1VX!b3!l", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertEquals("L%5j_V1VX!b3!l", document3.location());
      assertEquals("#root", document4.tagName());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("L%5j_V1VX!b3!l", document4.location());
      assertEquals(1, document4.siblingIndex());
      assertTrue(document4.hasParent());
      assertEquals("L%5j_V1VX!b3!l", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(1, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("L%5j_V1VX!b3!l", document5.baseUri());
      assertEquals("#document", document5.nodeName());
      assertEquals(2, document5.childNodeSize());
      assertTrue(document5.hasParent());
      assertEquals("L%5j_V1VX!b3!l", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertNotNull(document5);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertNotSame(document3, document2);
      assertSame(document3, document5);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertSame(document4, document5);
      assertNotSame(document4, document2);
      assertSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document0);
      assertSame(document5, document4);
      
      Elements elements1 = document0.children();
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(elements1, elements0);
      
      Document document6 = (Document)document3.prependChild(comment0);
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals("L%5j_V1VX!b3!l", document3.baseUri());
      assertEquals(2, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals("L%5j_V1VX!b3!l", document3.location());
      assertEquals("L%5j_V1VX!b3!l", document6.location());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(3, document6.childNodeSize());
      assertFalse(document6.isBlock());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("L%5j_V1VX!b3!l", document6.baseUri());
      assertEquals(2, document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertTrue(document6.hasParent());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document1));
      assertNotNull(document6);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertNotSame(document3, document2);
      assertSame(document3, document6);
      assertSame(document3, document5);
      assertNotSame(document6, document2);
      assertSame(document6, document3);
      assertNotSame(document6, document0);
      assertSame(document6, document4);
      assertSame(document6, document5);
      assertNotSame(document6, document1);
      
      String string0 = document5.cssSelector();
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals("L%5j_V1VX!b3!l", document3.baseUri());
      assertEquals(2, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals("L%5j_V1VX!b3!l", document3.location());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(3, document4.childNodeSize());
      assertEquals("L%5j_V1VX!b3!l", document4.location());
      assertTrue(document4.hasParent());
      assertEquals(2, document4.siblingIndex());
      assertEquals("L%5j_V1VX!b3!l", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(3, document5.childNodeSize());
      assertEquals("L%5j_V1VX!b3!l", document5.baseUri());
      assertEquals(2, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertTrue(document5.hasParent());
      assertEquals("L%5j_V1VX!b3!l", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertEquals("#root", string0);
      assertNotNull(string0);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertSame(document3, document4);
      assertNotSame(document3, document2);
      assertSame(document3, document6);
      assertSame(document3, document5);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertSame(document4, document5);
      assertNotSame(document4, document2);
      assertSame(document4, document6);
      assertSame(document5, document6);
      assertSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document0);
      assertSame(document5, document4);
      assertNotSame(document5, document2);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Document.createShell("InserM ostion ou of?bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("InserM ostion ou of?bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("InserM ostion ou of?bounds.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Comment comment0 = new Comment((String) null, (String) null);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertNotNull(comment0);
      
      String string0 = document0.val();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Elements elements0 = document0.children();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      boolean boolean0 = document1.hasClass("InserM ostion ou of?bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("InserM ostion ou of?bounds.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      Document document4 = new Document("");
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertEquals("", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertNotNull(document4);
      
      boolean boolean1 = document1.hasText();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document0);
      
      Elements elements1 = document0.children();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(document0.equals((Object)document4));
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = document0.nextElementSiblings();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertFalse(document0.equals((Object)document4));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertNotNull(elements2);
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k", "head");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("head", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      String string0 = "N";
      String string1 = "6J]g^61 _~,";
      Document document1 = (Document)document0.append("6J]g^61 _~,");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("head", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("head", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("head", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = Parser.parseBodyFragmentRelaxed("Oc/FtD@+{", "br");
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("br", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("br", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("(k607ruf@q,:a-hG/U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: (k607ruf@q,:a-hG/U
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.ysoup.nodes.E=ement$2", "Rm?_ka3`y=_P");
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.createElement("Rm?_ka3`y=_P");
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("Rm?_ka3`y=_P", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", element0.nodeName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Element element1 = element0.clone();
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("Rm?_ka3`y=_P", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("Rm?_ka3`y=_P", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("Rm?_ka3`y=_P", element1.nodeName());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = element0.appendChild(document0);
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("Rm?_ka3`y=_P", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", element2.nodeName());
      assertEquals("Rm?_ka3`y=_P", element2.baseUri());
      assertEquals("Rm?_ka3`y=_P", element2.tagName());
      assertFalse(element2.isBlock());
      assertFalse(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertNotNull(element2);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      
      int int0 = element2.elementSiblingIndex();
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("Rm?_ka3`y=_P", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", element2.nodeName());
      assertEquals("Rm?_ka3`y=_P", element2.baseUri());
      assertEquals("Rm?_ka3`y=_P", element2.tagName());
      assertFalse(element2.isBlock());
      assertFalse(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals(0, int0);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      
      String string0 = element2.toString();
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("Rm?_ka3`y=_P", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", element2.nodeName());
      assertEquals("Rm?_ka3`y=_P", element2.baseUri());
      assertEquals("Rm?_ka3`y=_P", element2.tagName());
      assertFalse(element2.isBlock());
      assertFalse(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals("<Rm?_ka3`y=_P>\n <#root>\n  <html>\n   <head></head>\n   <body>\n    org.ysoup.nodes.E=ement$2\n   </body>\n  </html>\n </#root>\n</Rm?_ka3`y=_P>", string0);
      assertNotNull(string0);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      
      Document document1 = Document.createShell("<Rm?_ka3`y=_P>\n <#root>\n  <html>\n   <head></head>\n   <body>\n    org.ysoup.nodes.E=ement$2\n   </body>\n  </html>\n </#root>\n</Rm?_ka3`y=_P>");
      assertEquals("<Rm?_ka3`y=_P>\n <#root>\n  <html>\n   <head></head>\n   <body>\n    org.ysoup.nodes.E=ement$2\n   </body>\n  </html>\n </#root>\n</Rm?_ka3`y=_P>", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("<Rm?_ka3`y=_P>\n <#root>\n  <html>\n   <head></head>\n   <body>\n    org.ysoup.nodes.E=ement$2\n   </body>\n  </html>\n </#root>\n</Rm?_ka3`y=_P>", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      Elements elements0 = document1.getElementsByAttributeValueContaining("org.ysoup.nodes.E=ement$2", "Rm?_ka3`y=_P");
      assertEquals("<Rm?_ka3`y=_P>\n <#root>\n  <html>\n   <head></head>\n   <body>\n    org.ysoup.nodes.E=ement$2\n   </body>\n  </html>\n </#root>\n</Rm?_ka3`y=_P>", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("<Rm?_ka3`y=_P>\n <#root>\n  <html>\n   <head></head>\n   <body>\n    org.ysoup.nodes.E=ement$2\n   </body>\n  </html>\n </#root>\n</Rm?_ka3`y=_P>", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document1, document0);
      
      Element element3 = document1.nextElementSibling();
      assertEquals("<Rm?_ka3`y=_P>\n <#root>\n  <html>\n   <head></head>\n   <body>\n    org.ysoup.nodes.E=ement$2\n   </body>\n  </html>\n </#root>\n</Rm?_ka3`y=_P>", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("<Rm?_ka3`y=_P>\n <#root>\n  <html>\n   <head></head>\n   <body>\n    org.ysoup.nodes.E=ement$2\n   </body>\n  </html>\n </#root>\n</Rm?_ka3`y=_P>", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNull(element3);
      assertNotSame(document1, document0);
      
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
      
      // Undeclared exception!
      try { 
        document1.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "k");
      assertFalse(document0.isBlock());
      assertEquals("k", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("k", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.append("N");
      assertFalse(document0.isBlock());
      assertEquals("k", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("k", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("k", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("k", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = Parser.parseBodyFragmentRelaxed("'pv", "N");
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("N", document2.location());
      assertEquals("N", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Elements elements0 = document0.getElementsMatchingOwnText("k");
      assertFalse(document0.isBlock());
      assertEquals("k", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("k", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      
      Elements elements1 = document0.getElementsMatchingText("br");
      assertFalse(document0.isBlock());
      assertEquals("k", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("k", document0.baseUri());
      assertFalse(elements1.isEmpty());
      assertEquals(3, elements1.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      
      Document document3 = new Document("org.jsoup.select.Evaluator");
      assertEquals("org.jsoup.select.Evaluator", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(document3);
      
      boolean boolean0 = document0.hasText();
      assertFalse(document0.isBlock());
      assertEquals("k", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("k", document0.baseUri());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertTrue(boolean0);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      
      Elements elements2 = document0.getElementsByIndexEquals(27);
      assertFalse(document0.isBlock());
      assertEquals("k", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("k", document0.baseUri());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotNull(elements2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      Document document4 = (Document)document3.appendChild(document0);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("k", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("k", document0.baseUri());
      assertEquals("org.jsoup.select.Evaluator", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("org.jsoup.select.Evaluator", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertNotNull(document4);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertNotSame(document4, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      
      Elements elements3 = document0.select("br");
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("k", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("k", document0.baseUri());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      assertNotNull(elements3);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      
      Document document5 = (Document)document1.prependChild(document3);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("k", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("k", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("k", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("k", document1.baseUri());
      assertEquals("org.jsoup.select.Evaluator", document3.baseUri());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("k", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertTrue(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals(3, document5.childNodeSize());
      assertEquals("k", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document2));
      assertNotNull(document5);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document5);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document2);
      assertSame(document5, document0);
      assertSame(document5, document1);
      
      String string0 = document5.cssSelector();
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("k", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("k", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("k", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("k", document1.baseUri());
      assertEquals("org.jsoup.select.Evaluator", document3.baseUri());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("k", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertTrue(document5.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals(3, document5.childNodeSize());
      assertEquals("k", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document2));
      assertEquals("#root", string0);
      assertNotNull(string0);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document5);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document5);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document2);
      assertSame(document5, document0);
      assertSame(document5, document1);
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("Insert position out of bounds.");
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Comment comment0 = new Comment((String) null, "^@<o%ursc>");
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertNotNull(comment0);
      
      Pattern pattern0 = Pattern.compile("^@<o%ursc>");
      assertEquals("^@<o%ursc>", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("^@<o%ursc>", pattern0.toString());
      assertNotNull(pattern0);
      
      document2.setParentNode(comment0);
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Comment comment1 = new Comment("$<#", "GGbc(Hd/uv(k|vk");
      assertEquals(0, comment1.siblingIndex());
      assertFalse(comment1.hasParent());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(comment1.equals((Object)comment0));
      assertNotNull(comment1);
      
      byte[] byteArray0 = new byte[0];
      boolean boolean0 = FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      assertEquals(0, byteArray0.length);
      assertFalse(boolean0);
      assertArrayEquals(new byte[] {}, byteArray0);
      
      Document document3 = Parser.parse("hPK-}mYxC6;d,k^+K", "Insert position out of bounds.");
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      
      Document document4 = (Document)document3.attr("textarea", "GGbc(Hd/uv(k|vk");
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("Insert position out of bounds.", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.hasParent());
      assertEquals("Insert position out of bounds.", document4.baseUri());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertNotNull(document4);
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      
      String string0 = document0.val();
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Elements elements0 = document3.children();
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(elements0);
      assertSame(document3, document4);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      
      boolean boolean1 = document1.hasClass("*~j{8&BZ(S_#Qm");
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      assertNotSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      
      Document document5 = (Document)document0.val("!{");
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertTrue(document5.hasParent());
      assertEquals("#document", document5.nodeName());
      assertEquals("Insert position out of bounds.", document5.baseUri());
      assertEquals(0, document5.siblingIndex());
      assertEquals("Insert position out of bounds.", document5.location());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals(0, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertNotNull(document5);
      assertNotSame(document0, document4);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document5, document0);
      assertNotSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document1);
      assertNotSame(document5, document4);
      
      Document document6 = (Document)document2.removeClass(")");
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document6.baseUri());
      assertEquals("#document", document6.nodeName());
      assertTrue(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(0, document6.childNodeSize());
      assertFalse(document6.isBlock());
      assertEquals("Insert position out of bounds.", document6.location());
      assertEquals(0, document6.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      assertNotNull(document6);
      assertSame(document6, document0);
      assertSame(document6, document5);
      assertSame(document6, document2);
      assertNotSame(document6, document3);
      assertSame(document6, document1);
      assertNotSame(document6, document4);
      assertNotSame(document0, document4);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertSame(document2, document0);
      assertSame(document2, document6);
      assertSame(document2, document5);
      assertSame(document2, document1);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      
      Document document7 = (Document)document0.empty();
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document7.isBlock());
      assertEquals("Insert position out of bounds.", document7.baseUri());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document7.location());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#root", document7.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals(0, document7.childNodeSize());
      assertEquals("#document", document7.nodeName());
      assertTrue(document7.hasParent());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document3));
      assertNotNull(document7);
      assertNotSame(document0, document4);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document7);
      assertSame(document0, document6);
      assertSame(document7, document5);
      assertSame(document7, document6);
      assertNotSame(document7, document4);
      assertSame(document7, document1);
      assertSame(document7, document0);
      assertNotSame(document7, document3);
      assertSame(document7, document2);
      
      Document document8 = (Document)document1.appendChild(comment1);
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document8.childNodeSize());
      assertEquals("Insert position out of bounds.", document8.location());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document8.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertTrue(document8.hasParent());
      assertFalse(document8.isBlock());
      assertEquals(0, document8.siblingIndex());
      assertEquals("#document", document8.nodeName());
      assertEquals("#root", document8.tagName());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(comment1.hasParent());
      assertEquals(0, comment1.siblingIndex());
      assertEquals("#comment", comment1.nodeName());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(comment1.equals((Object)comment0));
      assertNotNull(document8);
      assertNotSame(document0, document4);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertSame(document0, document8);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document7);
      assertSame(document0, document6);
      assertSame(document8, document1);
      assertNotSame(document8, document4);
      assertSame(document8, document6);
      assertNotSame(document8, document3);
      assertSame(document8, document5);
      assertSame(document8, document2);
      assertSame(document8, document7);
      assertSame(document8, document0);
      assertSame(document1, document7);
      assertNotSame(document1, document3);
      assertSame(document1, document8);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document5);
      assertSame(document1, document6);
      assertSame(document1, document0);
      assertNotSame(comment1, comment0);
      
      // Undeclared exception!
      try { 
        document3.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "Rm?_ka3`y=_P");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.createElement("Pattern syntax error: ");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.clone();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Pattern syntax error:", element1.tagName());
      assertEquals("Rm?_ka3`y=_P", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("Pattern syntax error:", element1.nodeName());
      assertFalse(element1.hasParent());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element2 = element0.appendChild(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals("Pattern syntax error:", element2.nodeName());
      assertEquals("Pattern syntax error:", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertNotNull(element2);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      
      int int0 = element2.elementSiblingIndex();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals("Pattern syntax error:", element2.nodeName());
      assertEquals("Pattern syntax error:", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals(0, int0);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      
      String string0 = element2.toString();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals("Pattern syntax error:", element2.nodeName());
      assertEquals("Pattern syntax error:", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals("<Pattern syntax error:>\n <#root>\n  <html>\n   <head></head>\n   <body>\n    org.jsoup.nodes.Element$2\n   </body>\n  </html>\n </#root>\n</Pattern syntax error:>", string0);
      assertNotNull(string0);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      
      Document document1 = (Document)document0.text("org.jsoup.nodes.Element$2");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsByAttributeValueContaining("org.jsoup.nodes.Element$2", "qha>yyeUA3N46w");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element3 = document1.nextElementSibling();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertNull(element3);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element4 = document1.wrap("org.jsoup.select.Evaluator");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertNull(element4);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.val("org.jsoup.nodes.Element$2");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("Rm?_ka3`y=_P", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Rm?_ka3`y=_P", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements1 = document0.nextElementSiblings();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      Document document3 = (Document)document2.insertChildren(0, (Collection<? extends Node>) elements1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("Rm?_ka3`y=_P", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Rm?_ka3`y=_P", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(document3.hasParent());
      assertEquals("Rm?_ka3`y=_P", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(elements1, elements0);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Element element5 = element2.addClass("");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals("Pattern syntax error:", element2.nodeName());
      assertEquals("Pattern syntax error:", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element5.isBlock());
      assertEquals("Pattern syntax error:", element5.tagName());
      assertEquals(0, element5.siblingIndex());
      assertEquals(1, element5.childNodeSize());
      assertFalse(element5.hasParent());
      assertEquals("Rm?_ka3`y=_P", element5.baseUri());
      assertEquals("Pattern syntax error:", element5.nodeName());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element5.equals((Object)element1));
      assertNotNull(element5);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(element0, element2);
      assertSame(element0, element5);
      assertNotSame(element0, element1);
      assertSame(element2, element5);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertSame(element5, element0);
      assertSame(element5, element2);
      assertNotSame(element5, element1);
      
      Document document4 = (Document)document1.tagName("Rm?_ka3`y=_P");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("rm?_ka3`y=_p", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("rm?_ka3`y=_p", document1.tagName());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertEquals("Rm?_ka3`y=_P", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document4.location());
      assertEquals("rm?_ka3`y=_p", document4.tagName());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = new Document("InserM ostion ou of?bounds.");
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("InserM ostion ou of?bounds.");
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("InserM ostion ou of?bounds.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Comment comment0 = new Comment((String) null, "body");
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      Document document3 = (Document)document0.attr("r>Eg", (String) null);
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      String string0 = document3.val();
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Elements elements0 = document0.children();
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      
      boolean boolean0 = document1.hasClass("InserM ostion ou of?bounds.");
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document4 = document3.quirksMode(document_QuirksMode0);
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("InserM ostion ou of?bounds.", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertNotNull(document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      
      Elements elements1 = document4.nextElementSiblings();
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("InserM ostion ou of?bounds.", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = document0.getElementsByIndexEquals(27);
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotNull(elements2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      Document document5 = Parser.parseBodyFragment("8p#:mcBJmC<Fq\"R", "8p#:mcBJmC<Fq\"R");
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("8p#:mcBJmC<Fq\"R", document5.location());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("8p#:mcBJmC<Fq\"R", document5.baseUri());
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertNotNull(document5);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      
      Document document6 = (Document)document5.removeClass("InserM ostion ou of?bounds.");
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertEquals("8p#:mcBJmC<Fq\"R", document5.location());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("8p#:mcBJmC<Fq\"R", document5.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("8p#:mcBJmC<Fq\"R", document6.baseUri());
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertFalse(document6.hasParent());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals("#root", document6.tagName());
      assertEquals(1, document6.childNodeSize());
      assertEquals("8p#:mcBJmC<Fq\"R", document6.location());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document4));
      assertNotNull(document6);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertSame(document5, document6);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertSame(document6, document5);
      assertNotSame(document6, document0);
      assertNotSame(document6, document2);
      assertNotSame(document6, document1);
      assertNotSame(document6, document3);
      assertNotSame(document6, document4);
      
      Document document7 = (Document)document4.insertChildren(0, (Collection<? extends Node>) elements1);
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("InserM ostion ou of?bounds.", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document4.location());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertEquals("InserM ostion ou of?bounds.", document7.baseUri());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document7.location());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#root", document7.tagName());
      assertEquals("#document", document7.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals(0, document7.childNodeSize());
      assertFalse(document7.isBlock());
      assertFalse(document7.hasParent());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document4.equals((Object)document5));
      assertTrue(elements1.equals((Object)elements2));
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document5));
      assertNotNull(document7);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertNotSame(document0, document6);
      assertSame(document0, document7);
      assertSame(document0, document4);
      assertSame(document3, document0);
      assertNotSame(document3, document5);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document6);
      assertSame(document3, document4);
      assertSame(document3, document7);
      assertSame(document4, document2);
      assertSame(document4, document7);
      assertSame(document4, document0);
      assertNotSame(document4, document6);
      assertSame(document4, document3);
      assertNotSame(document4, document5);
      assertSame(document4, document1);
      assertNotSame(elements1, elements2);
      assertNotSame(elements1, elements0);
      assertSame(document7, document2);
      assertNotSame(document7, document6);
      assertNotSame(document7, document5);
      assertSame(document7, document1);
      assertSame(document7, document3);
      assertSame(document7, document4);
      assertSame(document7, document0);
      
      Elements elements3 = document3.nextElementSiblings();
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertFalse(document3.hasParent());
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document6));
      assertNotNull(elements3);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertNotSame(document0, document6);
      assertSame(document0, document7);
      assertSame(document0, document4);
      assertSame(document3, document0);
      assertNotSame(document3, document5);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document6);
      assertSame(document3, document4);
      assertSame(document3, document7);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertNotNull(document0);
      
      Map<String, String> map0 = document0.dataset();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Comment comment0 = new Comment("!3ZrLLNM1m1t5NH(SK", ":SZR");
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      Pattern pattern0 = Pattern.compile("");
      assertEquals("", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertNotNull(pattern0);
      
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(document0));
      
      Document document1 = (Document)document0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(linkedHashSet0.contains(document0));
      
      Document document2 = Parser.parseBodyFragmentRelaxed("p(|<#(K|]A0L~`A", " ");
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(" ", document2.baseUri());
      assertEquals(" ", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Elements elements0 = document0.getElementsMatchingOwnText("3h");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document2));
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      
      Elements elements1 = document2.getElementsMatchingText("");
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(" ", document2.baseUri());
      assertEquals(" ", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(4, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(elements1, elements0);
      
      Document document3 = new Document("=\"");
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals("=\"", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("=\"", document3.location());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      
      // Undeclared exception!
      try { 
        Charset.forName("Insert position out of bounds.");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = new Document("Rm?_ka3`y=_P");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document1 = (Document)document0.clone();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string0 = document0.cssSelector();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertEquals("#root", string0);
      assertNotNull(string0);
      assertNotSame(document0, document1);
      
      Document document2 = document0.parser((Parser) null);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Rm?_ka3`y=_P", document2.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      Element element0 = document0.shallowClone();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("#root", element0.tagName());
      assertEquals("#root", element0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertNotNull(element0);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      
      int int0 = document0.childNodeSize();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document1));
      assertEquals(0, int0);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      String string0 = "'3dl72Rrn";
      Document document0 = Document.createShell("'3dl72Rrn");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("'3dl72Rrn", document0.location());
      assertEquals("'3dl72Rrn", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = new Document("org.jsoup.select.Evaluator");
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.select.Evaluator", document1.baseUri());
      assertEquals("org.jsoup.select.Evaluator", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document0.after((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("CA", locale0.getCountry());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("hO):y@'V", "org.jsoup.nodes.Element$2");
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.clone();
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string0 = element0.html();
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertEquals("hO):y@'V", string0);
      assertNotNull(string0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string1 = element0.data();
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = document1.normalise();
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document document3 = document2.quirksMode(document_QuirksMode0);
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document3.baseUri());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document3.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      
      Element element1 = document3.appendElement("org.jsoup.nodes.Element$2");
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document3.baseUri());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document3.location());
      assertEquals("org.jsoup.nodes.element$2", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("org.jsoup.nodes.element$2", element1.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", element1.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(element1, element0);
      
      Element element2 = element0.wrap("hO):y@'V");
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element2.hasParent());
      assertEquals("body", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals("body", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", element2.baseUri());
      assertEquals(1, element2.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertNotNull(element2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      
      Document document4 = (Document)document2.val("");
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document4.location());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertNotNull(document4);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document1);
      
      Elements elements0 = document1.nextElementSiblings();
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      
      Element element3 = document1.head();
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertTrue(element3.isBlock());
      assertEquals("head", element3.tagName());
      assertEquals(0, element3.childNodeSize());
      assertEquals("head", element3.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", element3.baseUri());
      assertTrue(element3.hasParent());
      assertEquals(0, element3.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element3.equals((Object)element2));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertNotNull(element3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(element3, element2);
      assertNotSame(element3, element0);
      assertNotSame(element3, element1);
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "Rm?_ka3`y=_P");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.createElement("Pattern syntax error: ");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.clone();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals("Pattern syntax error:", element1.nodeName());
      assertEquals("Pattern syntax error:", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", element1.baseUri());
      assertFalse(element1.hasParent());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element2 = element0.appendChild(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertEquals("Pattern syntax error:", element2.nodeName());
      assertFalse(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals("Pattern syntax error:", element2.tagName());
      assertEquals("Rm?_ka3`y=_P", element2.baseUri());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertNotNull(element2);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      
      int int0 = element2.elementSiblingIndex();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertEquals("Pattern syntax error:", element2.nodeName());
      assertFalse(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals("Pattern syntax error:", element2.tagName());
      assertEquals("Rm?_ka3`y=_P", element2.baseUri());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals(0, int0);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      
      String string0 = element2.toString();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertEquals("Pattern syntax error:", element2.nodeName());
      assertFalse(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals("Pattern syntax error:", element2.tagName());
      assertEquals("Rm?_ka3`y=_P", element2.baseUri());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals("<Pattern syntax error:>\n <#root>\n  <html>\n   <head></head>\n   <body>\n    org.jsoup.nodes.Element$2\n   </body>\n  </html>\n </#root>\n</Pattern syntax error:>", string0);
      assertNotNull(string0);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      
      Document document1 = (Document)document0.text("org.jsoup.nodes.Element$2");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsByAttributeValueContaining("Rm?_ka3`y=_P", "qha>yyeUA3N46w");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element3 = document1.nextElementSibling();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNull(element3);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element4 = document1.wrap("org.jsoup.select.Evaluator");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNull(element4);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.val("org.jsoup.nodes.Element$2");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("Rm?_ka3`y=_P", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("Rm?_ka3`y=_P", document2.location());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements1 = document0.nextElementSiblings();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements1, elements0);
      
      Document document3 = (Document)document2.insertChildren(0, (Collection<? extends Node>) elements1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("Rm?_ka3`y=_P", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("Rm?_ka3`y=_P", document2.location());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document3.baseUri());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(elements1, elements0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      assertEquals(":only-of-type", evaluator_IsOnlyOfType0.toString());
      assertNotNull(evaluator_IsOnlyOfType0);
      
      boolean boolean1 = document3.is((Evaluator) evaluator_IsOnlyOfType0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document2.hasParent());
      assertEquals("Rm?_ka3`y=_P", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("Rm?_ka3`y=_P", document2.location());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document3.baseUri());
      assertEquals(":only-of-type", evaluator_IsOnlyOfType0.toString());
      assertTrue(elements1.equals((Object)elements0));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertNotSame(elements1, elements0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("textarea", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Elements elements0 = document0.select("textarea");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Set<String> set0 = document0.classNames();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("textarea"));
      
      element0.setSiblingIndex(1333);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("textarea", element0.baseUri());
      assertEquals(1333, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      
      List<Node> list1 = document0.ensureChildNodes();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, list1.size());
      assertFalse(list1.isEmpty());
      assertNotNull(list1);
      
      String string0 = element0.tagName();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("textarea", element0.baseUri());
      assertEquals(1333, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", string0);
      assertNotNull(string0);
      
      Elements elements1 = document0.getElementsByIndexEquals(14);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("textarea"));
      
      boolean boolean0 = linkedHashSet0.containsAll(elements1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(elements1.equals((Object)elements0));
      assertTrue(boolean0);
      assertNotSame(elements1, elements0);
      assertFalse(linkedHashSet0.contains("textarea"));
      
      Element element1 = element0.classNames((Set<String>) linkedHashSet0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("textarea", element0.baseUri());
      assertEquals(1333, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("textarea", element1.baseUri());
      assertEquals(1333, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(linkedHashSet0.contains("textarea"));
      
      Pattern pattern0 = Pattern.compile("body");
      assertEquals("body", pattern0.pattern());
      assertEquals("body", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements2 = element1.getElementsMatchingText(pattern0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("textarea", element0.baseUri());
      assertEquals(1333, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("textarea", element1.baseUri());
      assertEquals(1333, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", pattern0.pattern());
      assertEquals("body", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotNull(elements2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      assertFalse(linkedHashSet0.contains("body"));
      
      Element element2 = document0.nextElementSibling();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("textarea", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNull(element2);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("CA", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("hO):y@'V", "org.jsoup.nodes.Element$2");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.body();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = element0.html();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("hO):y@'V", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = element0.data();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.normalise();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = document2.quirksMode(document_QuirksMode0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Element element1 = document3.appendElement("org.jsoup.nodes.Element$2");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document3.location());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.element$2", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", element1.baseUri());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("org.jsoup.nodes.element$2", element1.tagName());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertNotSame(element1, element0);
      
      Element element2 = element0.previousElementSibling();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotNull(element2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      List<DataNode> list0 = element2.dataNodes();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotNull(list0);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(boolean0);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      
      Document document4 = (Document)document3.appendTo(element2);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document3.location());
      assertTrue(document3.hasParent());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document4.location());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals(2, document4.childNodeSize());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(element0.equals((Object)element2));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotNull(document4);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertNotSame(element0, element2);
      assertNotSame(element0, element1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Tag tag0 = Tag.valueOf("reversed");
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertEquals("reversed", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals("reversed", tag0.toString());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("reversed");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "reversed", attributes0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertEquals("reversed", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals("reversed", tag0.toString());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("reversed", pseudoTextElement0.tagName());
      assertEquals("reversed", pseudoTextElement0.baseUri());
      assertEquals("reversed", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertNotNull(pseudoTextElement0);
      
      Document document0 = Parser.parseBodyFragment("C{VT6w&bgbd@", "=m~+^2");
      assertFalse(document0.hasParent());
      assertEquals("=m~+^2", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("=m~+^2", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.hasParent());
      assertEquals("=m~+^2", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("=m~+^2", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("=m~+^2", document1.baseUri());
      assertEquals("=m~+^2", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.normalise();
      assertFalse(document0.hasParent());
      assertEquals("=m~+^2", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("=m~+^2", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("=m~+^2", document1.baseUri());
      assertEquals("=m~+^2", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("=m~+^2", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("=m~+^2", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Map<String, String> map0 = document2.dataset();
      assertFalse(document0.hasParent());
      assertEquals("=m~+^2", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("=m~+^2", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("=m~+^2", document1.baseUri());
      assertEquals("=m~+^2", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("=m~+^2", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("=m~+^2", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = document1.nextElementSibling();
      assertFalse(document0.hasParent());
      assertEquals("=m~+^2", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("=m~+^2", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("=m~+^2", document1.baseUri());
      assertEquals("=m~+^2", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertNull(element0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Document document3 = Parser.parse("=m~+^2", "C{VT6w&bgbd@");
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("C{VT6w&bgbd@", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("C{VT6w&bgbd@", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      
      Elements elements0 = document3.getElementsByAttributeValueContaining("java.lang.string@0000000014", "Lj^'*;!|AbUlB_b");
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("C{VT6w&bgbd@", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("C{VT6w&bgbd@", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(elements0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      
      Document document4 = document2.clone();
      assertFalse(document0.hasParent());
      assertEquals("=m~+^2", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("=m~+^2", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("=m~+^2", document1.baseUri());
      assertEquals("=m~+^2", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("=m~+^2", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("=m~+^2", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("=m~+^2", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("=m~+^2", document4.baseUri());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertNotNull(document4);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      
      // Undeclared exception!
      try { 
        document4.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Document document0 = Parser.parseBodyFragment("`DsK.zgX@$fmy", " />");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" />", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" />", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Map<String, String> map0 = document0.dataset();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" />", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" />", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Document document1 = (Document)document0.addClass("`DsK.zgX@$fmy");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" />", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" />", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(" />", document1.location());
      assertEquals(" />", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.text("qf ");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" />", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" />", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(" />", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(" />", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document0.attr("#", "`DsK.zgX@$fmy");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" />", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" />", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(" />", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(" />", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Element element0 = document0.nextElementSibling();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" />", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" />", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNull(element0);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Elements elements0 = document2.getElementsByAttributeValueContaining("#", "a{;g?gT$I5R8s'5X");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" />", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" />", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(" />", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(" />", document2.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      
      Elements elements1 = document0.nextElementSiblings();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" />", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" />", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(elements1, elements0);
      
      // Undeclared exception!
      try { 
        document0.tagName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Document document0 = Document.createShell("#");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document0.normalise();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("#", document2.location());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      Document document3 = (Document)document0.empty();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("#", document3.location());
      assertEquals("#", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      List<Node> list0 = document1.ensureChildNodes();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      
      Document document4 = (Document)document0.tagName("#");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#", document4.baseUri());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("#", document4.tagName());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals("#", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotNull(document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document0);
      
      boolean boolean3 = document3.hasAttr("ScriptData");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#", document3.location());
      assertEquals("#", document3.baseUri());
      assertEquals("#", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Element element0 = document3.shallowClone();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#", document3.location());
      assertEquals("#", document3.baseUri());
      assertEquals("#", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#", element0.nodeName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#", element0.tagName());
      assertNotNull(element0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      List<Node> list1 = element0.siblingNodes();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#", document3.location());
      assertEquals("#", document3.baseUri());
      assertEquals("#", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#", element0.nodeName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#", element0.tagName());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
      assertNotNull(evaluator_IsFirstOfType0);
      
      boolean boolean4 = evaluator_IsFirstOfType0.matches(document3, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#", document1.location());
      assertEquals("#", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#", document3.location());
      assertEquals("#", document3.baseUri());
      assertEquals("#", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      boolean boolean5 = document0.is((Evaluator) evaluator_IsFirstOfType0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean1);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean4);
      assertFalse(boolean5);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      
      boolean boolean6 = document3.is((Evaluator) evaluator_IsFirstOfType0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#", document3.location());
      assertEquals("#", document3.baseUri());
      assertEquals("#", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Elements elements0 = document3.getAllElements();
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#", document3.location());
      assertEquals("#", document3.baseUri());
      assertEquals("#", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertNotNull(elements0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      document3.parentNode = (Node) document4;
      assertEquals(0, document3.parentNode.siblingIndex());
      assertTrue(document3.parentNode.hasParent());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#", document3.location());
      assertEquals("#", document3.baseUri());
      assertEquals("#", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("#", document4.baseUri());
      assertEquals(0, document4.childNodeSize());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("#", document4.tagName());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals("#", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      
      Tag tag0 = document2.tag();
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertEquals("#", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("#", tag0.toString());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#", document2.location());
      assertNotNull(tag0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document4);
      
      Elements elements1 = document2.previousElementSiblings();
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#", document2.tagName());
      assertEquals("#", document2.baseUri());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#", document2.location());
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document4);
      
      String string0 = document4.data();
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#", document4.baseUri());
      assertEquals(0, document4.childNodeSize());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertTrue(document4.hasParent());
      assertEquals("#", document4.tagName());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals("#", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zh_TW", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TW", locale0.getCountry());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      boolean boolean7 = document1.hasClass("`R");
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.location());
      assertEquals("#", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertTrue(boolean7 == boolean5);
      assertTrue(boolean7 == boolean0);
      assertTrue(boolean7 == boolean2);
      assertTrue(boolean7 == boolean4);
      assertTrue(boolean7 == boolean6);
      assertTrue(boolean7 == boolean1);
      assertTrue(boolean7 == boolean3);
      assertFalse(boolean7);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      
      // Undeclared exception!
      document2.val("ScriptData");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      String string0 = "textarea";
      Document document0 = Document.createShell("textarea");
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.after((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      String string0 = "#";
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Document document0 = Document.createShell("#");
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document0.normalise();
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean2 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertTrue(boolean2 == boolean0);
      assertTrue(boolean2 == boolean1);
      assertFalse(boolean2);
      
      Document document3 = (Document)document0.empty();
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("#", document3.baseUri());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      List<Node> list0 = document1.ensureChildNodes();
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#", document1.location());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      
      Document document4 = (Document)document0.tagName("#");
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.childNodeSize());
      assertEquals("#", document4.tagName());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("#", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertEquals("#", document4.baseUri());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      
      boolean boolean3 = document3.hasAttr("ScriptData");
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("#", document3.baseUri());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#", document3.tagName());
      assertEquals("#", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertTrue(boolean3 == boolean0);
      assertTrue(boolean3 == boolean2);
      assertTrue(boolean3 == boolean1);
      assertFalse(boolean3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      
      Element element0 = document3.shallowClone();
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("#", document3.baseUri());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#", document3.tagName());
      assertEquals("#", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      
      List<Node> list1 = element0.siblingNodes();
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("#", document3.baseUri());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#", document3.tagName());
      assertEquals("#", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals("#", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertTrue(list1.equals((Object)list0));
      assertNotNull(list1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
      assertNotNull(evaluator_IsFirstOfType0);
      
      boolean boolean4 = evaluator_IsFirstOfType0.matches(document3, document1);
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#", document1.tagName());
      assertEquals("#", document1.location());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("#", document3.baseUri());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#", document3.tagName());
      assertEquals("#", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
      assertTrue(boolean4 == boolean2);
      assertTrue(boolean4 == boolean1);
      assertTrue(boolean4 == boolean3);
      assertTrue(boolean4 == boolean0);
      assertFalse(boolean4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      
      boolean boolean5 = document0.is((Evaluator) evaluator_IsFirstOfType0);
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
      assertTrue(boolean5 == boolean0);
      assertTrue(boolean5 == boolean4);
      assertTrue(boolean5 == boolean3);
      assertTrue(boolean5 == boolean2);
      assertTrue(boolean5 == boolean1);
      assertFalse(boolean5);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      
      boolean boolean6 = document3.is((Evaluator) evaluator_IsFirstOfType0);
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("#", document3.baseUri());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#", document3.tagName());
      assertEquals("#", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
      assertTrue(boolean6 == boolean3);
      assertTrue(boolean6 == boolean2);
      assertTrue(boolean6 == boolean1);
      assertTrue(boolean6 == boolean0);
      assertTrue(boolean6 == boolean4);
      assertTrue(boolean6 == boolean5);
      assertFalse(boolean6);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      
      Elements elements0 = document3.getAllElements();
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document0.hasParent());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals("#", document3.baseUri());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#", document3.tagName());
      assertEquals("#", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      
      document3.parentNode = (Node) document4;
      assertTrue(document3.parentNode.hasParent());
      assertEquals(0, document3.parentNode.siblingIndex());
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#", document3.baseUri());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#", document3.tagName());
      assertEquals("#", document3.location());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#", document4.tagName());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("#", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#", document4.baseUri());
      assertFalse(document4.isBlock());
      
      Tag tag0 = document2.tag();
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertEquals("#", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertTrue(document2.hasParent());
      assertEquals("#", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#", document2.baseUri());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(tag0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      
      Elements elements1 = document2.previousElementSiblings();
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(document2.hasParent());
      assertEquals("#", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#", document2.baseUri());
      assertEquals(0, document2.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals("#", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(elements1, elements0);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      
      String string1 = document4.data();
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals(0, document4.childNodeSize());
      assertTrue(document4.hasParent());
      assertEquals("#", document4.tagName());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertEquals("#", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#", document4.baseUri());
      assertFalse(document4.isBlock());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("#"));
      
      Document document5 = (Document)document3.classNames(set0);
      assertEquals("#", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#", document3.baseUri());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#", document3.tagName());
      assertEquals("#", document3.location());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertEquals(Document.QuirksMode.quirks, document3.quirksMode());
      assertTrue(document5.hasParent());
      assertEquals("#", document5.tagName());
      assertEquals(Document.QuirksMode.quirks, document5.quirksMode());
      assertEquals("#document", document5.nodeName());
      assertEquals("#", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#", document5.baseUri());
      assertEquals(0, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertNotNull(document5);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document5);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertSame(document5, document1);
      assertSame(document5, document4);
      assertSame(document5, document3);
      assertFalse(set0.contains("#"));
      
      // Undeclared exception!
      try { 
        document4.text("br");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("textarea");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.clone();
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(attributes1.equals((Object)attributes0));
      assertNotNull(attributes1);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes1, attributes0);
      
      Attributes attributes2 = attributes1.put("textarea", "address");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertNotNull(attributes2);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      String string0 = attributes2.get("R TIM9J|/=BGg[/%.C");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals(2, attributes2.size());
      assertFalse(attributes0.equals((Object)attributes1));
      assertFalse(attributes0.equals((Object)attributes2));
      assertFalse(attributes1.equals((Object)attributes0));
      assertFalse(attributes2.equals((Object)attributes0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(attributes0, attributes1);
      assertNotSame(attributes0, attributes2);
      assertSame(attributes1, attributes2);
      assertNotSame(attributes1, attributes0);
      assertSame(attributes2, attributes1);
      assertNotSame(attributes2, attributes0);
      
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "textarea", attributes2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("Insert position out of bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      String string0 = null;
      String string1 = "textarea";
      // Undeclared exception!
      try { 
        document2.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = new Document("InserM ostion ou of?bounds.");
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("InserM ostion ou of?bounds.");
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Comment comment0 = new Comment((String) null, "body");
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertNotNull(comment0);
      
      Document document3 = (Document)document0.attr("r>Eg", (String) null);
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertEquals(0, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      String string0 = document3.val();
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertEquals(0, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      Elements elements0 = document0.children();
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      
      boolean boolean0 = document1.hasClass("InserM ostion ou of?bounds.");
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("InserM ostion ou of?bounds.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document4 = document3.quirksMode(document_QuirksMode0);
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertEquals(0, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("InserM ostion ou of?bounds.", document4.location());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document4.baseUri());
      assertNotNull(document4);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      
      Elements elements1 = document4.nextElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertEquals(0, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("InserM ostion ou of?bounds.", document4.location());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("InserM ostion ou of?bounds.", document4.baseUri());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertNotSame(elements1, elements0);
      
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document5 = document3.parser(parser1);
      assertEquals("#root", document0.tagName());
      assertEquals("InserM ostion ou of?bounds.", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("InserM ostion ou of?bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("InserM ostion ou of?bounds.", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals("InserM ostion ou of?bounds.", document3.baseUri());
      assertEquals(0, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(parser1.isTrackErrors());
      assertEquals("InserM ostion ou of?bounds.", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals("InserM ostion ou of?bounds.", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(0, document5.childNodeSize());
      assertNotNull(document5);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(parser1, parser0);
      assertSame(document5, document1);
      assertSame(document5, document0);
      assertSame(document5, document4);
      assertSame(document5, document3);
      assertSame(document5, document2);
      
      // Undeclared exception!
      try { 
        document5.insertChildren(46, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "k");
      assertEquals("k", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("k", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.append("N");
      assertEquals("k", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("k", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("k", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("k", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = Parser.parseBodyFragmentRelaxed("'pv", "N");
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("N", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("N", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Elements elements0 = document0.getElementsMatchingOwnText("k");
      assertEquals("k", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("k", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document2));
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      
      Elements elements1 = document0.getElementsMatchingText("br");
      assertEquals("k", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("k", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      
      Document document3 = new Document("org.jsoup.select.Evaluator");
      assertFalse(document3.hasParent());
      assertEquals("org.jsoup.select.Evaluator", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("org.jsoup.select.Evaluator", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(document3);
      
      boolean boolean0 = document0.hasText();
      assertEquals("k", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("k", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertTrue(boolean0);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      
      Elements elements2 = document3.children();
      assertFalse(document3.hasParent());
      assertEquals("org.jsoup.select.Evaluator", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("org.jsoup.select.Evaluator", document3.location());
      assertFalse(document3.isBlock());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotNull(elements2);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      Elements elements3 = document0.getElementsByIndexEquals(27);
      assertEquals("k", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("k", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements3.size());
      assertTrue(elements3.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements2));
      assertNotNull(elements3);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      
      // Undeclared exception!
      try { 
        document3.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Tag tag0 = Tag.valueOf("reversed");
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("reversed", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("reversed");
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "reversed", attributes0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("reversed", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("reversed", pseudoTextElement0.tagName());
      assertEquals("reversed", pseudoTextElement0.baseUri());
      assertEquals("reversed", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertNotNull(pseudoTextElement0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Document document0 = Document.createShell(" />");
      assertEquals(" />", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" />", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.append("reversed");
      assertEquals(" />", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" />", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(" />", document1.location());
      assertEquals(" />", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = "VC5";
      Document document2 = Parser.parseBodyFragmentRelaxed("VC5", "Children collection to be inserted must not be null.");
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Elements elements0 = document2.getElementsMatchingOwnText("reversed");
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("Children collection to be inserted must not be null.", document2.location());
      assertEquals("Children collection to be inserted must not be null.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(elements0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document3 = Parser.parse("/wqN,h\u0005If", "reversed");
      assertEquals(1, document3.childNodeSize());
      assertEquals("reversed", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("reversed", document3.baseUri());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      
      // Undeclared exception!
      try { 
        document3.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = "Insert position out of bounds.";
      Document document0 = new Document("Insert position out of bounds.");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = Parser.htmlParser();
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser1.equals((Object)parser0));
      assertNotNull(parser1);
      assertNotSame(parser1, parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(parser0.equals((Object)parser1));
      assertNotNull(document1);
      assertSame(document0, document1);
      assertNotSame(parser0, parser1);
      assertSame(document1, document0);
      
      Document document2 = document1.normalise();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(parser0.equals((Object)parser1));
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(parser0, parser1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document3 = (Document)document2.appendChild(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.siblingIndex());
      assertEquals("Insert position out of bounds.", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(document3.hasParent());
      assertFalse(parser0.equals((Object)parser1));
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(parser0, parser1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      int int0 = document1.elementSiblingIndex();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(parser0.equals((Object)parser1));
      assertEquals(1, int0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(parser0, parser1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      
      // Undeclared exception!
      document1.toString();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "Rm?_ka3`y=_P");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.createElement("Pattern syntax error: ");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = element0.clone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("Pattern syntax error:", element1.tagName());
      assertEquals("Pattern syntax error:", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = element0.appendChild(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("Pattern syntax error:", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals("Rm?_ka3`y=_P", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals("Pattern syntax error:", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertNotNull(element2);
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      
      int int0 = element2.elementSiblingIndex();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("Pattern syntax error:", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals("Rm?_ka3`y=_P", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals("Pattern syntax error:", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals(0, int0);
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      
      String string0 = element2.toString();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("Pattern syntax error:", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals("Rm?_ka3`y=_P", element2.baseUri());
      assertFalse(element2.isBlock());
      assertEquals("Pattern syntax error:", element2.tagName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals("<Pattern syntax error:>\n <#root>\n  <html>\n   <head></head>\n   <body>\n    org.jsoup.nodes.Element$2\n   </body>\n  </html>\n </#root>\n</Pattern syntax error:>", string0);
      assertNotNull(string0);
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      
      Document document1 = (Document)document0.text("org.jsoup.nodes.Element$2");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsByAttributeValueContaining("org.jsoup.nodes.Element$2", "qha>yyeUA3N46w");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element3 = document1.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertNull(element3);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.wrap("<Pattern syntax error:>\n <#root>\n  <html>\n   <head></head>\n   <body>\n    org.jsoup.nodes.Element$2\n   </body>\n  </html>\n </#root>\n</Pattern syntax error:>");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(8, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(8, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals("Rm?_ka3`y=_P", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("Rm?_ka3`y=_P", document2.baseUri());
      assertEquals(8, document2.siblingIndex());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document0.val("org.jsoup.nodes.Element$2");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(8, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Rm?_ka3`y=_P", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(8, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("Rm?_ka3`y=_P", document3.location());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      Elements elements1 = document0.nextElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(8, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parse("2+@", "#root");
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "[L>PF");
      assertFalse(boolean0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = document2.createElement("#root");
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(element0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Element element1 = element0.selectFirst("#root");
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNull(element1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements0 = element0.getElementsByIndexEquals(143);
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#root", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      int int0 = document0.childNodeSize();
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertEquals(1, int0);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("Insert position out of bounds.");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Insert position out of bounds.", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.clone();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Tag tag0 = document0.tag();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("#root", tag0.toString());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(document0.equals((Object)document2));
      assertNotNull(tag0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      
      List<DataNode> list0 = document1.dataNodes();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Insert position out of bounds.", document1.location());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertNotNull(list0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      
      Element element0 = document1.getElementById("zOY.mP~l;0cLa8~H`%");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertNull(element0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      
      Document document3 = (Document)document1.appendText("ctHn]x ( hQB0H>");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals("Insert position out of bounds.", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      String string0 = document0.cssSelector();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document2));
      assertNotNull(string0);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      
      Element element1 = document2.appendElement("Insert position out of bounds.");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Insert position out of bounds.", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("insert position out of bounds.", element1.nodeName());
      assertEquals("insert position out of bounds.", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(element1);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      String string1 = document0.nodeName();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document2));
      assertFalse(string1.equals((Object)string0));
      assertEquals("#document", string1);
      assertNotNull(string1);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      
      String string2 = document0.ownText();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document2));
      assertFalse(string2.equals((Object)string1));
      assertFalse(string2.equals((Object)string0));
      assertEquals("ctHn]x ( hQB0H>", string2);
      assertNotNull(string2);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parse("", ":R");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":R", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      String string0 = document0.val();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":R", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Elements elements0 = document0.children();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":R", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      
      boolean boolean0 = document0.hasClass("g(=ePz=Sp=");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":R", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(boolean0);
      
      Elements elements1 = document0.getElementsContainingText("3a}It]>(");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":R", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Element element0 = new Element("|HAie _`E5]");
      assertEquals("|HAie _`E5]", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("|HAie _`E5]", element0.tagName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      String string0 = element0.wholeText();
      assertEquals("|HAie _`E5]", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("|HAie _`E5]", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element1 = element0.prependText("|HAie _`E5]");
      assertEquals(1, element0.childNodeSize());
      assertEquals("|HAie _`E5]", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("|HAie _`E5]", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("|HAie _`E5]", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("|HAie _`E5]", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string1 = element0.ownText();
      assertEquals(1, element0.childNodeSize());
      assertEquals("|HAie _`E5]", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("|HAie _`E5]", element0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(string1.equals((Object)string0));
      assertEquals("|HAie _`E5]", string1);
      assertNotNull(string1);
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("en", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("en_CA", locale0.toString());
      assertEquals("CA", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("hO):y@'V", "org.jsoup.nodes.Element$2");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByTag("org.jsoup.nodes.Element$2");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document1 = new Document("org.jsoup.nodes.Element$2");
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      
      Document document2 = (Document)document0.text("hO):y@'V");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.prepend("org.jsoup.nodes.Element$NodeList");
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document3.location());
      assertFalse(document3.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      
      String string0 = document0.cssSelector();
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertEquals("#root", string0);
      assertNotNull(string0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      
      Document document4 = document0.ownerDocument();
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document4.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertNotNull(document4);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document2);
      
      String string1 = "bll\"n<*hhuk";
      // Undeclared exception!
      try { 
        document2.wrap("bll\"n<*hhuk");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "Insert position out of bounds.";
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Insert position out of bounds.");
      assertFalse(boolean0);
      
      String string1 = "nth-child";
      Document document0 = Parser.parse("Insert position out of bounds.", "nth-child");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("nth-child", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("nth-child", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("nth-child", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("nth-child", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals("nth-child", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("nth-child", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.createElement("nth-child");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("nth-child", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("nth-child", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals("nth-child", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("nth-child", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("nth-child", element0.nodeName());
      assertEquals("nth-child", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("nth-child", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string2 = element0.id();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("nth-child", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("nth-child", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals("nth-child", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("nth-child", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("nth-child", element0.nodeName());
      assertEquals("nth-child", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("nth-child", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("", string2);
      assertNotNull(string2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<TextNode> list0 = document0.textNodes();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("nth-child", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("nth-child", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertSame(document0, document1);
      
      Element element1 = element0.previousElementSibling();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("nth-child", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("nth-child", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals("nth-child", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("nth-child", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("nth-child", element0.nodeName());
      assertEquals("nth-child", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("nth-child", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNull(element1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document1.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "Rm?_ka3`y=_P");
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.createElement("Pattern syntax error: ");
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.clone();
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("Pattern syntax error:", element1.nodeName());
      assertEquals("Rm?_ka3`y=_P", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("Pattern syntax error:", element1.tagName());
      assertFalse(element1.hasParent());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = element0.appendChild(document0);
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Pattern syntax error:", element2.tagName());
      assertEquals("Rm?_ka3`y=_P", element2.baseUri());
      assertEquals("Pattern syntax error:", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertNotNull(element2);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      
      int int0 = element2.elementSiblingIndex();
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Pattern syntax error:", element2.tagName());
      assertEquals("Rm?_ka3`y=_P", element2.baseUri());
      assertEquals("Pattern syntax error:", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals(0, int0);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      
      String string0 = element2.toString();
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Pattern syntax error:", element2.tagName());
      assertEquals("Rm?_ka3`y=_P", element2.baseUri());
      assertEquals("Pattern syntax error:", element2.nodeName());
      assertFalse(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertEquals("<Pattern syntax error:>\n <#root>\n  <html>\n   <head></head>\n   <body>\n    org.jsoup.nodes.Element$2\n   </body>\n  </html>\n </#root>\n</Pattern syntax error:>", string0);
      assertNotNull(string0);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      
      Document document1 = (Document)document0.text("org.jsoup.nodes.Element$2");
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsByAttributeValueContaining("org.jsoup.nodes.Element$2", "qha>yyeUA3N46w");
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element3 = document1.nextElementSibling();
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertNull(element3);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element4 = document1.wrap("org.jsoup.select.Evaluator");
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("Rm?_ka3`y=_P", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Rm?_ka3`y=_P", document1.location());
      assertNull(element4);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.val("org.jsoup.nodes.Element$2");
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals("Rm?_ka3`y=_P", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("Rm?_ka3`y=_P", document2.location());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements1 = document0.nextElementSiblings();
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Tag tag0 = Tag.valueOf("reversed");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("reversed", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("reversed");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "reversed", attributes0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("reversed", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("reversed", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("reversed", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("reversed", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.isBlock());
      assertNotNull(pseudoTextElement0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors((-2480));
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Parser parser2 = parser1.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertNotNull(parser2);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      Document document0 = parser2.parseInput("Children collection to be inserted must not be null.", "#root");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      Document document1 = document0.parser(parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsByAttributeValueMatching("g(=ePz=Sp=", "#root");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.attr("#root", "");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      String string0 = document2.val();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements1 = document1.children();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser2.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(parser1, parser2);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements1, elements0);
      
      // Undeclared exception!
      try { 
        document1.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("Insert position out of bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Comment comment0 = new Comment((String) null, "body");
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertNotNull(comment0);
      
      List<Node> list0 = Parser.parseXmlFragment("body", "rOEg");
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Document document3 = (Document)document0.attr("rOEg", (String) null);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("Insert position out of bounds.", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      String string0 = document3.val();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("Insert position out of bounds.", document3.location());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      Elements elements0 = document0.children();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      
      boolean boolean0 = document1.hasClass("Insert position out of bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("CA", locale0.getCountry());
      assertEquals("en_CA", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("hO):y@'V", "org.jsoup.nodes.Element$2");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByTag("org.jsoup.nodes.Element$2");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string0 = null;
      Comment comment0 = new Comment("hO):y@'V", "");
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertNotNull(comment0);
      
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) comment0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      String string0 = "k";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      String string1 = "T";
      Document document0 = Parser.parse("T", "T");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("T", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("T", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsContainingOwnText("T");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("T", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("T", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      
      int int0 = (-3827);
      // Undeclared exception!
      try { 
        document0.insertChildren((-3827), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "gm88");
      assertEquals("#root", document0.tagName());
      assertEquals("gm88", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("gm88", document0.location());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Elements elements0 = document0.getElementsByAttributeValueEnding("org.jsoup.nodes.Element$2", "gm88");
      assertEquals("#root", document0.tagName());
      assertEquals("gm88", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("gm88", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Element element0 = document0.createElement("org.jsoup.nodes.Element$2");
      assertEquals("#root", document0.tagName());
      assertEquals("gm88", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("gm88", document0.location());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("gm88", element0.baseUri());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Element element1 = element0.attr("*h^[", true);
      assertEquals("#root", document0.tagName());
      assertEquals("gm88", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("gm88", document0.location());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("gm88", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", element1.tagName());
      assertEquals("gm88", element1.baseUri());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag("gm88");
      assertNotNull(evaluator_Tag0);
      
      boolean boolean0 = element1.is((Evaluator) evaluator_Tag0);
      assertEquals("#root", document0.tagName());
      assertEquals("gm88", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("gm88", document0.location());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("gm88", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", element1.tagName());
      assertEquals("gm88", element1.baseUri());
      assertFalse(boolean0);
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "88");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.baseUri());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Elements elements0 = document0.getElementsByAttributeValueEnding("org.jsoup.nodes.Element$2", "88");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document1 = document0.parser(parser0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("88", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("88", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements1 = document1.getElementsByTag("|HAie _`E5]");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("88", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("88", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      
      Document document2 = new Document("|HAie _`E5]");
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("|HAie _`E5]", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("|HAie _`E5]", document2.baseUri());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      
      Document document3 = (Document)document1.text("88");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("88", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("88", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals("88", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("88", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      Document document4 = (Document)document2.prependChild(document3);
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document1.tagName());
      assertEquals("88", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("88", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("|HAie _`E5]", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("|HAie _`E5]", document2.baseUri());
      assertEquals("88", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("88", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("|HAie _`E5]", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("|HAie _`E5]", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertNotNull(document4);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document4);
      assertSame(document3, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document0);
      assertSame(document4, document2);
      assertNotSame(document4, document1);
      
      String string0 = "n)-)*aZ8&f77:>BT\"~5";
      Document document5 = (Document)document2.attr("88", "n)-)*aZ8&f77:>BT\"~5");
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("|HAie _`E5]", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("|HAie _`E5]", document2.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("|HAie _`E5]", document5.location());
      assertFalse(document5.hasParent());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document5.tagName());
      assertEquals("|HAie _`E5]", document5.baseUri());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertNotNull(document5);
      assertSame(document2, document5);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertSame(document5, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertNotSame(document5, document0);
      assertSame(document5, document2);
      
      String string1 = document3.val();
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document1.tagName());
      assertEquals("88", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("88", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("88", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("88", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document5));
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertNotSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document1, document2);
      assertNotSame(document1, document5);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertNotSame(document3, document4);
      assertNotSame(document3, document5);
      assertSame(document3, document0);
      
      // Undeclared exception!
      try { 
        document3.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.createElement("Pattern syntax error: ");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Document document1 = (Document)document0.appendChild(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.toString();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("<html>\n <head></head>\n <body>\n  org.jsoup.nodes.Element$2\n </body>\n</html>\n<Pattern syntax error:></Pattern syntax error:>", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      
      boolean boolean0 = element0.hasAttr("org.jsoup.nodes.Element$2");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(boolean0);
      assertSame(document0, document1);
      
      String string1 = "qha>yyeUA3N46w";
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("!>^Q", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("Insert position out of bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Comment comment0 = new Comment((String) null, "body");
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      Document document3 = (Document)document0.attr("rOEg", (String) null);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("Insert position out of bounds.", document3.location());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      String string0 = document3.val();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("Insert position out of bounds.", document3.location());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Elements elements0 = document0.children();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      
      boolean boolean0 = document1.hasClass("Insert position out of bounds.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      
      Document document4 = (Document)document1.val("html");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals("Insert position out of bounds.", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertEquals("Insert position out of bounds.", document4.location());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertNotNull(document4);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "head");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", document0.baseUri());
      assertEquals("head", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      int int0 = 2463;
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(2463);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      List<Node> list0 = Parser.parseFragment("head", (Element) document0, "head", parseErrorList0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", document0.baseUri());
      assertEquals("head", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document1 = parser1.parseInput("B~(U2FXvudmv? g", "B~(U2FXvudmv? g");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("B~(U2FXvudmv? g", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("B~(U2FXvudmv? g", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element0 = document1.appendElement("B~(U2FXvudmv? g");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("B~(U2FXvudmv? g", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("B~(U2FXvudmv? g", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("B~(U2FXvudmv? g", element0.baseUri());
      assertEquals("B~(U2FXvudmv? g", element0.tagName());
      assertEquals("B~(U2FXvudmv? g", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      List<DataNode> list1 = element0.dataNodes();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("B~(U2FXvudmv? g", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("B~(U2FXvudmv? g", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("B~(U2FXvudmv? g", element0.baseUri());
      assertEquals("B~(U2FXvudmv? g", element0.tagName());
      assertEquals("B~(U2FXvudmv? g", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(list1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      String string0 = "org.jsoup.select.Evaluator";
      Elements elements0 = element0.getElementsByAttributeValueMatching("22FdIU", "org.jsoup.select.Evaluator");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("B~(U2FXvudmv? g", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("B~(U2FXvudmv? g", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("B~(U2FXvudmv? g", element0.baseUri());
      assertEquals("B~(U2FXvudmv? g", element0.tagName());
      assertEquals("B~(U2FXvudmv? g", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(elements0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      
      Element element1 = element0.empty();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("B~(U2FXvudmv? g", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("B~(U2FXvudmv? g", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("B~(U2FXvudmv? g", element0.baseUri());
      assertEquals("B~(U2FXvudmv? g", element0.tagName());
      assertEquals("B~(U2FXvudmv? g", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("B~(U2FXvudmv? g", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("B~(U2FXvudmv? g", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("B~(U2FXvudmv? g", element1.nodeName());
      assertTrue(element1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      List<Node> list2 = element0.siblingNodes();
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("B~(U2FXvudmv? g", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("B~(U2FXvudmv? g", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("B~(U2FXvudmv? g", element0.baseUri());
      assertEquals("B~(U2FXvudmv? g", element0.tagName());
      assertEquals("B~(U2FXvudmv? g", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, list2.size());
      assertFalse(list2.isEmpty());
      assertFalse(document1.equals((Object)document0));
      assertFalse(list2.equals((Object)list0));
      assertNotNull(list2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertSame(element0, element1);
      
      Document document2 = (Document)document1.append("org.jsoup.select.Evaluator");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(3, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("B~(U2FXvudmv? g", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("B~(U2FXvudmv? g", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("B~(U2FXvudmv? g", document2.location());
      assertEquals("B~(U2FXvudmv? g", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      
      Element element2 = document0.head();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", document0.baseUri());
      assertEquals("head", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.baseUri());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertNotNull(element2);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      Element element3 = element2.appendChild(element0);
      assertTrue(element3.hasParent());
      assertEquals("head", element3.baseUri());
      assertTrue(element3.isBlock());
      assertEquals("head", element3.tagName());
      assertEquals(1, element3.childNodeSize());
      assertEquals(0, element3.siblingIndex());
      assertEquals("head", element3.nodeName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", document0.baseUri());
      assertEquals("head", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("B~(U2FXvudmv? g", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("B~(U2FXvudmv? g", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("B~(U2FXvudmv? g", element0.baseUri());
      assertEquals("B~(U2FXvudmv? g", element0.tagName());
      assertEquals("B~(U2FXvudmv? g", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element2.siblingIndex());
      assertEquals("head", element2.baseUri());
      assertEquals("head", element2.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals("head", element2.tagName());
      assertTrue(element2.isBlock());
      assertFalse(element3.equals((Object)element0));
      assertFalse(element3.equals((Object)element1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(element0.equals((Object)element2));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element2.equals((Object)element0));
      assertNotNull(element3);
      assertNotSame(element3, element0);
      assertSame(element3, element2);
      assertNotSame(element3, element1);
      assertSame(parser0, parser1);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(parser1, parser0);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(element0, element1);
      assertNotSame(element0, element3);
      assertNotSame(element0, element2);
      assertSame(element2, element3);
      assertNotSame(element2, element1);
      assertNotSame(element2, element0);
      
      // Undeclared exception!
      try { 
        element3.getElementsByAttributeValue("org.jsoup.select.Evaluator", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$2";
      String string1 = "Rm?_ka3`y=_P";
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "Rm?_ka3`y=_P");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      String string2 = "Pattern syntax error: ";
      Element element0 = document0.createElement("Pattern syntax error: ");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.appendChild(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals("Pattern syntax error:", element1.tagName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("Pattern syntax error:", element1.nodeName());
      assertEquals("Rm?_ka3`y=_P", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string3 = element1.toString();
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("Rm?_ka3`y=_P", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("Rm?_ka3`y=_P", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Pattern syntax error:", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("Pattern syntax error:", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("Rm?_ka3`y=_P", element0.baseUri());
      assertEquals("Pattern syntax error:", element1.tagName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("Pattern syntax error:", element1.nodeName());
      assertEquals("Rm?_ka3`y=_P", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(string3.equals((Object)string1));
      assertFalse(string3.equals((Object)string2));
      assertFalse(string3.equals((Object)string0));
      assertEquals("<Pattern syntax error:>\n <#root>\n  <html>\n   <head></head>\n   <body>\n    org.jsoup.nodes.Element$2\n   </body>\n  </html>\n </#root>\n</Pattern syntax error:>", string3);
      assertNotNull(string3);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      try { 
        element0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      int int0 = 0;
      Comment comment0 = new Comment("TfsHX", "s+2V.W");
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse("", ":R");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(":R", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      String string0 = document0.baseUri();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(":R", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(":R", string0);
      assertNotNull(string0);
      
      Document document1 = (Document)document0.addClass("'*f1");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(":R", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(":R", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(":R", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching(":R", "'*f1");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(":R", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.attr("'*f1", "g(=ePz=Sp=");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(":R", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(":R", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(":R", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document2.isBlock());
      assertEquals(":R", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(":R", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      String string1 = document1.val();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(":R", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals(":R", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(":R", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Elements elements1 = document0.children();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(":R", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      boolean boolean0 = document0.hasClass("g(=ePz=Sp=");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(":R", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Document document3 = (Document)document0.val(":R");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(":R", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(":R", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(":R", document3.location());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parse("M-", "M-");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("M-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("M-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("M-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("M-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("M-", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("M-", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.children();
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("M-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("M-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("M-", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("M-", document1.location());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements1 = document1.getElementsMatchingOwnText("M-");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("M-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("M-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("M-", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("M-", document1.location());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = document0.getElementsMatchingText("org.jsoup.nodes.Element$2");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("M-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("M-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertNotNull(elements2);
      assertSame(document0, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      Document document2 = new Document("8");
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("8", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("8", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      
      boolean boolean0 = document2.hasText();
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("8", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("8", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(boolean0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Elements elements3 = document1.children();
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("M-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("M-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("M-", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("M-", document1.location());
      assertEquals(1, elements3.size());
      assertFalse(elements3.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements1));
      assertNotNull(elements3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      
      Elements elements4 = document0.getElementsByIndexEquals((-1069));
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("M-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("M-", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements4.size());
      assertTrue(elements4.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements4.equals((Object)elements0));
      assertFalse(elements4.equals((Object)elements1));
      assertTrue(elements4.equals((Object)elements2));
      assertFalse(elements4.equals((Object)elements3));
      assertNotNull(elements4);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements3);
      
      Document document3 = (Document)document2.removeClass("org.jsoup.nodes.Element$2");
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("8", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("8", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("8", document3.baseUri());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("8", document3.location());
      assertEquals(0, document3.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "88");
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("88", document0.location());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("88", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.location());
      assertEquals("88", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.addClass("org.jsoup.nodes.Attributes");
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("88", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.location());
      assertEquals("88", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("88", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("88", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Comment comment0 = new Comment("2P':B nX19#\"p:6P", "2P':B nX19#\"p:6P");
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      Pattern pattern0 = Pattern.compile("Children collection to be inserted must not be null.");
      assertEquals("Children collection to be inserted must not be null.", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("Children collection to be inserted must not be null.", pattern0.pattern());
      assertNotNull(pattern0);
      
      String string0 = ";F#(=;<V%o*a@UE";
      Document document3 = (Document)document0.append(";F#(=;<V%o*a@UE");
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("88", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("88", document3.location());
      assertEquals("88", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      Document document4 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.StructuralEvaluator$Parent", "o%ursc");
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("o%ursc", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("o%ursc", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertNotNull(document4);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      
      Elements elements0 = document1.getElementsMatchingOwnText("e");
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("88", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.location());
      assertEquals("88", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document4));
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      
      Parser parser1 = Parser.xmlParser();
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser1.equals((Object)parser0));
      assertNotNull(parser1);
      assertNotSame(parser1, parser0);
      
      Document document5 = parser1.parseInput("-?z+k0m", "di4+$Ra<:s9f0^je/");
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(1, document5.childNodeSize());
      assertEquals("di4+$Ra<:s9f0^je/", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("di4+$Ra<:s9f0^je/", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertFalse(parser1.equals((Object)parser0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertNotNull(document5);
      assertNotSame(parser1, parser0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      
      Elements elements1 = document5.getElementsMatchingText("}>xy>hIf");
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(1, document5.childNodeSize());
      assertEquals("di4+$Ra<:s9f0^je/", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("di4+$Ra<:s9f0^je/", document5.location());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(parser1.equals((Object)parser0));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(parser1, parser0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(elements1, elements0);
      
      Document document6 = new Document(string0);
      assertFalse(document6.hasParent());
      assertEquals(";F#(=;<V%o*a@UE", document6.baseUri());
      assertEquals("#root", document6.tagName());
      assertEquals(";F#(=;<V%o*a@UE", document6.location());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.childNodeSize());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertFalse(document6.isBlock());
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document2));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document5));
      assertNotNull(document6);
      
      boolean boolean0 = document0.hasText();
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("88", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document6));
      assertTrue(boolean0);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document6);
      
      Elements elements2 = document3.children();
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("88", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals("88", document3.location());
      assertEquals("88", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document3.equals((Object)document5));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotNull(elements2);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(document0, document6);
      assertNotSame(document3, document4);
      assertNotSame(document3, document6);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document5);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      int int0 = 1034;
      Elements elements3 = document4.getElementsByIndexEquals(int0);
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("o%ursc", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("o%ursc", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertTrue(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements2));
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document6));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document1));
      assertNotNull(elements3);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document6);
      assertNotSame(document4, document5);
      assertNotSame(document4, document1);
      
      String string1 = ":nth-child(%d)";
      Document document7 = (Document)document0.removeClass(string1);
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("88", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document7.siblingIndex());
      assertFalse(document7.isBlock());
      assertEquals(2, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals("#document", document7.nodeName());
      assertEquals("#root", document7.tagName());
      assertEquals("88", document7.location());
      assertEquals("88", document7.baseUri());
      assertFalse(document7.hasParent());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document6));
      assertFalse(string1.equals((Object)string0));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document5));
      assertNotNull(document7);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document7);
      assertSame(document0, document1);
      assertNotSame(document0, document6);
      assertNotSame(document7, document4);
      assertNotSame(document7, document6);
      assertSame(document7, document1);
      assertSame(document7, document0);
      assertSame(document7, document2);
      assertSame(document7, document3);
      assertNotSame(document7, document5);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldAllThrowIOExceptions();
      assertTrue(boolean0);
      
      Element element0 = new Element("nullChar");
      assertEquals("nullChar", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("nullChar", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Elements elements0 = element0.getElementsContainingOwnText("_1,D~");
      assertEquals("nullChar", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("nullChar", element0.nodeName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Ev_luator", "W]]Mc=");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("W]]Mc=", document0.baseUri());
      assertEquals("W]]Mc=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("W]]Mc=", document0.baseUri());
      assertEquals("W]]Mc=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("W]]Mc=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("W]]Mc=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element1 = document0.body();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("W]]Mc=", document0.baseUri());
      assertEquals("W]]Mc=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("W]]Mc=", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertSame(document0, document1);
      assertNotSame(element1, element0);
      
      String string0 = document1.html();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("W]]Mc=", document0.baseUri());
      assertEquals("W]]Mc=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("W]]Mc=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("W]]Mc=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("<html>\n <head></head>\n <body>\n  org.jsoup.select.Ev_luator\n </body>\n</html>", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = document0.data();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("W]]Mc=", document0.baseUri());
      assertEquals("W]]Mc=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(document0, document1);
      
      Pattern pattern0 = Pattern.compile("nullChar", 52);
      assertEquals("nullChar", pattern0.toString());
      assertEquals(52, pattern0.flags());
      assertEquals("nullChar", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements1 = element1.getElementsByAttributeValueMatching("", pattern0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("W]]Mc=", document0.baseUri());
      assertEquals("W]]Mc=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("W]]Mc=", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("nullChar", pattern0.toString());
      assertEquals(52, pattern0.flags());
      assertEquals("nullChar", pattern0.pattern());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(element1.equals((Object)element0));
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertNotSame(element1, element0);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Document.createShell("(");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("(", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("(", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("(", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("(", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("(", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("(", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.tagName("(");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("(", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("(", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("(", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("(", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("(", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("(", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals("(", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("(", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      assertEquals(0, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Element element0 = document0.nextElementSibling();
      assertEquals(0, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNull(element0);
      
      Document document1 = Parser.parse("html", "Insert position out of bounds.");
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      String string0 = document0.wholeText();
      assertEquals(0, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(document0, document1);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedWriter pipedWriter1 = document0.html(pipedWriter0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertNotNull(pipedWriter1);
      assertNotSame(document0, document1);
      assertSame(pipedWriter0, pipedWriter1);
      assertSame(pipedWriter1, pipedWriter0);
      
      // Undeclared exception!
      try { 
        document1.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Parser parser1 = Parser.htmlParser();
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser1.equals((Object)parser0));
      assertNotNull(parser1);
      assertNotSame(parser1, parser0);
      
      Document document2 = (Document)document0.addClass("Insert position out of bounds.");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Comment comment0 = new Comment((String) null, "^@<o%ursc>");
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertNotNull(comment0);
      
      Pattern pattern0 = Pattern.compile("^@<o%ursc>");
      assertEquals("^@<o%ursc>", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("^@<o%ursc>", pattern0.toString());
      assertNotNull(pattern0);
      
      Document document3 = (Document)document2.append("textarea");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("Insert position out of bounds.", document3.location());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Document document4 = Parser.parseBodyFragmentRelaxed("^@<o%ursc>", "L%5c_V1VX!b3l");
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals("L%5c_V1VX!b3l", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("L%5c_V1VX!b3l", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertNotNull(document4);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      
      Elements elements0 = document2.getElementsMatchingOwnText("Insert position out of bounds.");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertNotNull(elements0);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document4);
      
      Elements elements1 = document4.getElementsMatchingText("textarea");
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals("L%5c_V1VX!b3l", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("L%5c_V1VX!b3l", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = document1.getElementsByIndexLessThan(1731);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertFalse(document0.equals((Object)document4));
      assertFalse(parser0.equals((Object)parser1));
      assertFalse(document1.equals((Object)document4));
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotNull(elements2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(parser0, parser1);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      Document document5 = new Document("=\"");
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("=\"", document5.baseUri());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals("=\"", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(0, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertNotNull(document5);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "^nDPg$&g%");
      assertFalse(boolean0);
      
      boolean boolean1 = document1.hasText();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(parser0.equals((Object)parser1));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertFalse(boolean1 == boolean0);
      assertTrue(boolean1);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document4);
      assertNotSame(document0, document5);
      assertNotSame(parser0, parser1);
      assertSame(document1, document2);
      assertNotSame(document1, document5);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      
      Elements elements3 = document4.children();
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals("L%5c_V1VX!b3l", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("L%5c_V1VX!b3l", document4.location());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.hasParent());
      assertFalse(elements3.isEmpty());
      assertEquals(1, elements3.size());
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(elements3.equals((Object)elements1));
      assertFalse(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements2));
      assertNotNull(elements3);
      assertNotSame(document4, document5);
      assertNotSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements2);
      
      Elements elements4 = document5.getElementsByIndexEquals((-1069));
      assertEquals(0, elements4.size());
      assertTrue(elements4.isEmpty());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#document", document5.nodeName());
      assertEquals("=\"", document5.baseUri());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals("=\"", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(0, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertTrue(elements4.equals((Object)elements1));
      assertTrue(elements4.equals((Object)elements2));
      assertTrue(elements4.equals((Object)elements0));
      assertFalse(elements4.equals((Object)elements3));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertNotNull(elements4);
      assertNotSame(elements4, elements2);
      assertNotSame(elements4, elements0);
      assertNotSame(elements4, elements1);
      assertNotSame(elements4, elements3);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$2";
      String string1 = "k";
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "k");
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("k", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("k", document0.baseUri());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Document document1 = (Document)document0.addClass("");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsContainingOwnText("");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.text("org.jsoup.nodes.Element$2");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document1.attr("org.jsoup.nodes.Element$2", "");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals("", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals("", document3.baseUri());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      Element element0 = document0.nextElementSibling();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNull(element0);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      
      Document document4 = Parser.parse("y '", "y '");
      assertEquals("#root", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("y '", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals("y '", document4.location());
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertNotNull(document4);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      
      String string0 = "eSSvq9D/";
      // Undeclared exception!
      try { 
        document0.insertChildren(11, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parse("Insert position out of bounds.", "Insert position out of bounds.");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.clone();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("Insert position out of bounds.");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document3 = (Document)document0.clone();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      
      Tag tag0 = document0.tag();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("#root", tag0.toString());
      assertEquals("#root", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertNotNull(tag0);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      
      Elements elements0 = document1.getElementsByAttributeValueMatching("ctV,Hn] ( hQB0H>", "Insert position out of bounds.");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document3));
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      
      List<DataNode> list0 = document2.dataNodes();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(list0);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      Element element0 = document2.getElementById("zOY.mP~l;0cLa8~H`%");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertNull(element0);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document4 = (Document)document2.appendText("zOY.mP~l;0cLa8~H`%");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#root", document4.tagName());
      assertEquals(2, document4.childNodeSize());
      assertEquals("Insert position out of bounds.", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("Insert position out of bounds.", document4.baseUri());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertNotNull(document4);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      
      String string0 = document0.cssSelector();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertNotNull(string0);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      
      Document document5 = document4.clone();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#root", document4.tagName());
      assertEquals(2, document4.childNodeSize());
      assertEquals("Insert position out of bounds.", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("Insert position out of bounds.", document4.baseUri());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#document", document5.nodeName());
      assertEquals(2, document5.childNodeSize());
      assertEquals("Insert position out of bounds.", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertNotNull(document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document2, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document4, document5);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      
      boolean boolean0 = document5.hasText();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#root", document4.tagName());
      assertEquals(2, document4.childNodeSize());
      assertEquals("Insert position out of bounds.", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("Insert position out of bounds.", document4.baseUri());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#document", document5.nodeName());
      assertEquals(2, document5.childNodeSize());
      assertEquals("Insert position out of bounds.", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertTrue(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document2, document5);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document1);
      assertNotSame(document4, document5);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      
      Elements elements1 = document1.children();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document5);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = document1.getElementsByIndexEquals(2126);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertNotNull(elements2);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document5);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      boolean boolean1 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      Document document6 = (Document)document2.removeClass(" ");
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals("Insert position out of bounds.", document6.baseUri());
      assertEquals(0, document6.siblingIndex());
      assertEquals("Insert position out of bounds.", document6.location());
      assertFalse(document6.hasParent());
      assertEquals("#root", document6.tagName());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(2, document6.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document5));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document6);
      assertSame(document6, document0);
      assertNotSame(document6, document1);
      assertNotSame(document6, document3);
      assertSame(document6, document2);
      assertSame(document6, document4);
      assertNotSame(document6, document5);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(document0, document5);
      assertNotSame(document2, document5);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document6);
      assertNotSame(document2, document1);
      
      Element element1 = document2.prependElement("#root.java.lang.String@0000000146");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("Insert position out of bounds.", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(element1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertNotSame(document0, document1);
      assertSame(document0, document6);
      assertNotSame(document0, document5);
      assertNotSame(document2, document5);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document6);
      assertNotSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "textarea");
      assertFalse(boolean0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("Insert position out of bounds.");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Map<String, String> map0 = document1.dataset();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      Element element0 = document3.nextElementSibling();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.siblingIndex());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertNull(element0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      Document document4 = document2.quirksMode(document_QuirksMode0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("Insert position out of bounds.", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertNotNull(document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document4, document3);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document0);
      
      Elements elements0 = document1.getElementsByAttributeValueContaining("textarea", "textarea");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Document document5 = (Document)document2.toggleClass("textarea");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#root", document5.tagName());
      assertEquals(0, document5.childNodeSize());
      assertFalse(document5.hasParent());
      assertEquals("Insert position out of bounds.", document5.location());
      assertEquals("Insert position out of bounds.", document5.baseUri());
      assertNotNull(document5);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document4);
      assertSame(document5, document4);
      assertSame(document5, document2);
      assertSame(document5, document1);
      assertSame(document5, document0);
      assertSame(document5, document3);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Element element0 = new Element("!z|n)<Ms$xt4^");
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("!z|n)<Ms$xt4^", element0.nodeName());
      assertEquals("!z|n)<Ms$xt4^", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.text("!z|n)<Ms$xt4^");
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("!z|n)<Ms$xt4^", element0.nodeName());
      assertEquals("!z|n)<Ms$xt4^", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("!z|n)<Ms$xt4^", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("!z|n)<Ms$xt4^", element1.tagName());
      assertFalse(element1.hasParent());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = null;
      try {
        element2 = new Element((Tag) null, "VJax*~Wc5$`++.a");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Locale locale0 = Locale.CANADA;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("CA", locale0.getCountry());
      assertEquals("CAN", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("en", locale0.getLanguage());
      assertEquals("en_CA", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("hO):y@'V", "org.jsoup.nodes.Element$2");
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.body();
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = element0.html();
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("hO):y@'V", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string1 = element0.data();
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("hO):y@'V", (-1724956300));
      assertEquals("hO):y@'V", pattern0.toString());
      assertEquals((-1724956300), pattern0.flags());
      assertEquals("hO):y@'V", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements0 = element0.getElementsByAttributeValueMatching("html", pattern0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("hO):y@'V", pattern0.toString());
      assertEquals((-1724956300), pattern0.flags());
      assertEquals("hO):y@'V", pattern0.pattern());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("zh", locale0.toString());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("*v*zM<5/", "hO):y@'V");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("hO):y@'V", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("hO):y@'V", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("hO):y@'V", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("hO):y@'V", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, int0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("hO):y@'V", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("hO):y@'V", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("hO):y@'V", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("hO):y@'V", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = new Element("*v*zM<5/");
      assertFalse(element0.isBlock());
      assertEquals("*v*zM<5/", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("*v*zM<5/", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      String string0 = element0.html();
      assertFalse(element0.isBlock());
      assertEquals("*v*zM<5/", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("*v*zM<5/", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        document0.before("org.jsoup.select.Evaluator");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "88");
      assertEquals(1, document0.childNodeSize());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("88", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByAttributeValueEnding("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      assertEquals(1, document0.childNodeSize());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("88", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Element element0 = document0.body();
      assertEquals(1, document0.childNodeSize());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("88", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("88", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      int int0 = element0.elementSiblingIndex();
      assertEquals(1, document0.childNodeSize());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("88", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("88", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, int0);
      
      Elements elements1 = element0.getElementsByTag("88");
      assertEquals(1, document0.childNodeSize());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("88", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("88", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      
      Element element1 = new Element("|HAie _`E5]");
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals("|HAie _`E5]", element1.tagName());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("|HAie _`E5]", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      
      Element element2 = element1.text("|HAie _`E5]");
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("|HAie _`E5]", element1.tagName());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("|HAie _`E5]", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("|HAie _`E5]", element2.tagName());
      assertFalse(element2.hasParent());
      assertEquals("", element2.baseUri());
      assertEquals(1, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertEquals("|HAie _`E5]", element2.nodeName());
      assertFalse(element2.isBlock());
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertNotNull(element2);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertNotSame(element2, element0);
      assertSame(element2, element1);
      
      Element element3 = element1.prepend("88");
      assertEquals("", element1.baseUri());
      assertEquals("|HAie _`E5]", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("|HAie _`E5]", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element3.isBlock());
      assertEquals(0, element3.siblingIndex());
      assertEquals("|HAie _`E5]", element3.nodeName());
      assertEquals("", element3.baseUri());
      assertEquals("|HAie _`E5]", element3.tagName());
      assertEquals(2, element3.childNodeSize());
      assertFalse(element3.hasParent());
      assertFalse(element1.equals((Object)element0));
      assertFalse(element3.equals((Object)element0));
      assertNotNull(element3);
      assertSame(element1, element3);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertNotSame(element3, element0);
      assertSame(element3, element1);
      assertSame(element3, element2);
      
      Locale locale0 = Locale.ITALY;
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains("88"));
      
      Element element4 = element3.classNames(set0);
      assertEquals("", element1.baseUri());
      assertEquals("|HAie _`E5]", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("|HAie _`E5]", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element3.isBlock());
      assertEquals(0, element3.siblingIndex());
      assertEquals("|HAie _`E5]", element3.nodeName());
      assertEquals("", element3.baseUri());
      assertEquals("|HAie _`E5]", element3.tagName());
      assertEquals(2, element3.childNodeSize());
      assertFalse(element3.hasParent());
      assertEquals("", locale0.getVariant());
      assertEquals("it", locale0.getLanguage());
      assertEquals("it_IT", locale0.toString());
      assertEquals("IT", locale0.getCountry());
      assertEquals("ita", locale0.getISO3Language());
      assertEquals("ITA", locale0.getISO3Country());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(2, element4.childNodeSize());
      assertEquals("", element4.baseUri());
      assertFalse(element4.hasParent());
      assertEquals("|HAie _`E5]", element4.tagName());
      assertEquals("|HAie _`E5]", element4.nodeName());
      assertFalse(element4.isBlock());
      assertEquals(0, element4.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      assertFalse(element3.equals((Object)element0));
      assertFalse(element4.equals((Object)element0));
      assertNotNull(element4);
      assertSame(element1, element3);
      assertSame(element1, element4);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertNotSame(element3, element0);
      assertSame(element3, element1);
      assertSame(element3, element2);
      assertSame(element3, element4);
      assertSame(element4, element3);
      assertNotSame(element4, element0);
      assertSame(element4, element2);
      assertSame(element4, element1);
      assertFalse(set0.contains("88"));
      
      String string0 = document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("88", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", string0);
      assertNotNull(string0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = parser0.setTrackErrors(529);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Parser parser2 = parser1.settings(parseSettings0);
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertNotNull(parser2);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      Document document1 = document0.parser(parser2);
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("88", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("88", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("88", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(parser0.isTrackErrors());
      assertTrue(parser1.isTrackErrors());
      assertTrue(parser2.isTrackErrors());
      assertNotNull(document1);
      assertSame(document1, document0);
      assertSame(document0, document1);
      assertSame(parser0, parser2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser2);
      assertSame(parser1, parser0);
      assertSame(parser2, parser0);
      assertSame(parser2, parser1);
      
      Elements elements2 = element1.getElementsByAttribute("R.4N:BPC'EaD");
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertEquals("", element1.baseUri());
      assertEquals("|HAie _`E5]", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("|HAie _`E5]", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(element1.equals((Object)element0));
      assertNotNull(elements2);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertSame(element1, element3);
      assertSame(element1, element4);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      
      String string1 = element0.wholeText();
      assertEquals(1, document0.childNodeSize());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("88", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("88", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(string1.equals((Object)string0));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element0.equals((Object)element3));
      assertFalse(element0.equals((Object)element4));
      assertFalse(element0.equals((Object)element2));
      assertEquals("org.jsoup.nodes.Element$2", string1);
      assertNotNull(string1);
      assertSame(document0, document1);
      assertNotSame(element0, element1);
      assertNotSame(element0, element3);
      assertNotSame(element0, element4);
      assertNotSame(element0, element2);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "textarea");
      assertFalse(boolean0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("Insert position out of bounds.");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      List<Node> list0 = Parser.parseXmlFragment("body", "Insert position out of bounds.");
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Comment comment0 = new Comment("Insert position out of bounds.", "body");
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      int int0 = document1.elementSiblingIndex();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, int0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Document document3 = (Document)document1.val("body");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document3.location());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Elements elements0 = document2.getElementsByAttribute("body");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      String string0 = Node.EmptyString;
      assertEquals("", string0);
      assertNotNull(string0);
      
      // Undeclared exception!
      try { 
        document0.child(13);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 13, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Map<String, String> map0 = document0.dataset();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Document document1 = (Document)document0.addClass("");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsContainingOwnText("");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document0.clone();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Tag tag0 = document0.tag();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(tag0.isInline());
      assertEquals("#root", tag0.toString());
      assertEquals("#root", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(document0.equals((Object)document2));
      assertNotNull(tag0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      
      String string0 = "ctHn]x ( hQB0H>";
      Elements elements1 = document0.getElementsByAttributeValueMatching("", "");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(elements1, elements0);
      
      List<DataNode> list0 = document2.dataNodes();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(list0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      // Undeclared exception!
      try { 
        document1.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parse("Insert position out of bounds.", "Insert position out of bounds.");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.clone();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("Insert position out of bounds.");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      String string0 = document1.data();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      
      Document document3 = (Document)document1.prependText("");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("Insert position out of bounds.", document3.location());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document1, document2);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      
      boolean boolean0 = document0.hasAttributes();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertTrue(boolean0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      
      Element element0 = new Element("Insert position out of bounds.");
      assertFalse(element0.isBlock());
      assertEquals("Insert position out of bounds.", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals("Insert position out of bounds.", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Document document4 = document1.ownerDocument();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Insert position out of bounds.", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertFalse(document4.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertNotNull(document4);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertNotSame(document4, document2);
      
      List<Node> list0 = document4.childNodesCopy();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Insert position out of bounds.", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertFalse(document4.isBlock());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertNotNull(list0);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document0);
      assertNotSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertNotSame(document4, document2);
      
      Document document5 = document0.parser(parser0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document5.childNodeSize());
      assertEquals("Insert position out of bounds.", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("Insert position out of bounds.", document5.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertNotNull(document5);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document5, document1);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      
      Document document6 = (Document)document5.text("Insert position out of bounds.");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document5.childNodeSize());
      assertEquals("Insert position out of bounds.", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("Insert position out of bounds.", document5.baseUri());
      assertEquals("Insert position out of bounds.", document6.location());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertFalse(document6.hasParent());
      assertEquals("Insert position out of bounds.", document6.baseUri());
      assertEquals("#root", document6.tagName());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document4));
      assertNotNull(document6);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document5, document1);
      assertSame(document5, document2);
      assertSame(document5, document6);
      assertSame(document5, document0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document6, document1);
      assertNotSame(document6, document3);
      assertNotSame(document6, document4);
      assertSame(document6, document0);
      assertSame(document6, document5);
      assertSame(document6, document2);
      
      List<DataNode> list1 = element0.dataNodes();
      assertFalse(element0.isBlock());
      assertEquals("Insert position out of bounds.", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals("Insert position out of bounds.", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      
      Element element1 = document5.shallowClone();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document5.childNodeSize());
      assertEquals("Insert position out of bounds.", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("Insert position out of bounds.", document5.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("Insert position out of bounds.", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("#root", element1.tagName());
      assertEquals("#root", element1.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document5, document1);
      assertSame(document5, document2);
      assertSame(document5, document6);
      assertSame(document5, document0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(element1, element0);
      
      String string1 = "org.jsoup.select.NodeTraversor";
      Element element2 = element0.prepend("br");
      assertFalse(element0.isBlock());
      assertEquals("Insert position out of bounds.", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals("Insert position out of bounds.", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals("Insert position out of bounds.", element2.nodeName());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals("Insert position out of bounds.", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertNotNull(element2);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      
      Document document7 = (Document)document0.doClone(element0);
      assertEquals(1, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document7.baseUri());
      assertTrue(document7.hasParent());
      assertFalse(document7.isBlock());
      assertEquals("#document", document7.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertEquals("Insert position out of bounds.", document7.location());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#root", document7.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(element0.isBlock());
      assertEquals("Insert position out of bounds.", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals("Insert position out of bounds.", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(element0.equals((Object)element1));
      assertNotNull(document7);
      assertNotSame(document7, document2);
      assertNotSame(document7, document1);
      assertNotSame(document7, document0);
      assertNotSame(document7, document5);
      assertNotSame(document7, document6);
      assertNotSame(document7, document4);
      assertNotSame(document7, document3);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      
      int int0 = document6.elementSiblingIndex();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document5.childNodeSize());
      assertEquals("Insert position out of bounds.", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertFalse(document5.hasParent());
      assertEquals("Insert position out of bounds.", document5.baseUri());
      assertEquals("Insert position out of bounds.", document6.location());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertFalse(document6.hasParent());
      assertEquals("Insert position out of bounds.", document6.baseUri());
      assertEquals("#root", document6.tagName());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(1, document6.childNodeSize());
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document7));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document6.equals((Object)document7));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document4));
      assertEquals(0, int0);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertNotSame(document5, document1);
      assertNotSame(document5, document7);
      assertSame(document5, document2);
      assertSame(document5, document6);
      assertSame(document5, document0);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      assertNotSame(document6, document7);
      assertNotSame(document6, document1);
      assertNotSame(document6, document3);
      assertNotSame(document6, document4);
      assertSame(document6, document0);
      assertSame(document6, document5);
      assertSame(document6, document2);
      
      Document document8 = (Document)document0.val("N_n9'b\"jtQ^*J`F=]X");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document8.hasParent());
      assertEquals("Insert position out of bounds.", document8.baseUri());
      assertEquals(0, document8.siblingIndex());
      assertEquals("Insert position out of bounds.", document8.location());
      assertFalse(document8.updateMetaCharsetElement());
      assertFalse(document8.isBlock());
      assertEquals("#root", document8.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals(1, document8.childNodeSize());
      assertEquals("#document", document8.nodeName());
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document7));
      assertNotNull(document8);
      assertNotSame(document0, document7);
      assertSame(document0, document5);
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document6);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document8);
      assertNotSame(document8, document4);
      assertSame(document8, document0);
      assertSame(document8, document6);
      assertNotSame(document8, document1);
      assertNotSame(document8, document3);
      assertSame(document8, document5);
      assertSame(document8, document2);
      assertNotSame(document8, document7);
      
      // Undeclared exception!
      try { 
        document1.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("Insert position out of bounds.");
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Comment comment0 = new Comment((String) null, "^@<o%ursc>");
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      Pattern pattern0 = Pattern.compile("^@<o%ursc>");
      assertEquals("^@<o%ursc>", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("^@<o%ursc>", pattern0.pattern());
      assertNotNull(pattern0);
      
      Document document3 = (Document)document2.append("textarea");
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Insert position out of bounds.", document3.location());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Document document4 = Parser.parseBodyFragmentRelaxed("^@<o%ursc>", "L%5c_V1VX!b3l");
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("L%5c_V1VX!b3l", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals("L%5c_V1VX!b3l", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertNotNull(document4);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      
      Elements elements0 = document2.getElementsMatchingOwnText("Insert position out of bounds.");
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document2, document1);
      assertNotSame(document2, document4);
      
      Elements elements1 = document4.getElementsMatchingText("textarea");
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("L%5c_V1VX!b3l", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals("L%5c_V1VX!b3l", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(elements1, elements0);
      
      Document document5 = new Document("=\"");
      assertFalse(document5.hasParent());
      assertEquals(0, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("=\"", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertEquals("=\"", document5.baseUri());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertNotNull(document5);
      
      boolean boolean0 = document1.hasText();
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document0.equals((Object)document5));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertTrue(boolean0);
      assertSame(document0, document1);
      assertNotSame(document0, document5);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document5);
      assertNotSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document2);
      
      Elements elements2 = document4.children();
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("L%5c_V1VX!b3l", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals("L%5c_V1VX!b3l", document4.location());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(1, elements2.size());
      assertFalse(elements2.isEmpty());
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertNotNull(elements2);
      assertNotSame(document4, document5);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      Elements elements3 = document5.getElementsByIndexEquals((-1069));
      assertFalse(document5.hasParent());
      assertEquals(0, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("=\"", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertEquals("=\"", document5.baseUri());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertTrue(elements3.equals((Object)elements0));
      assertFalse(elements3.equals((Object)elements2));
      assertTrue(elements3.equals((Object)elements1));
      assertNotNull(elements3);
      assertNotSame(document5, document2);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotSame(elements3, elements0);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$2";
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "88");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals("88", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("88", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.normalise();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals("88", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("88", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("88", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("88", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      List<Node> list0 = Parser.parseFragment("", (Element) document0, "org.jsoup.nodes.Element$2");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Element element0 = (Element)document2.childNode(0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals("88", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("88", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("88", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("88", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("html", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals("88", element0.baseUri());
      assertEquals("html", element0.nodeName());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "88");
      assertFalse(boolean0);
      
      Element element1 = element0.after("org.jsoup.nodes.Element$2");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals("88", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("88", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("88", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("88", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("html", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals("88", element0.baseUri());
      assertEquals("html", element0.nodeName());
      assertEquals("88", element1.baseUri());
      assertEquals("html", element1.tagName());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertNotNull(element1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      int int0 = element1.elementSiblingIndex();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals("88", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("88", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("88", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("88", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("html", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals("88", element0.baseUri());
      assertEquals("html", element0.nodeName());
      assertEquals("88", element1.baseUri());
      assertEquals("html", element1.tagName());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertEquals(0, int0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Elements elements0 = document0.getElementsByIndexLessThan(2856);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Document document3 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "1Cs]*9GIiUO+R-o_l1h");
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("1Cs]*9GIiUO+R-o_l1h", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("1Cs]*9GIiUO+R-o_l1h", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      
      // Undeclared exception!
      try { 
        document2.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parse("", ":R");
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      String string0 = document0.baseUri();
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(":R", string0);
      assertNotNull(string0);
      
      Document document1 = (Document)document0.addClass("'*f1");
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(":R", document1.location());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching(":R", "'*f1");
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.attr("'*f1", "g(=ePz=Sp=");
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(":R", document1.location());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(":R", document2.location());
      assertEquals(":R", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      Document document3 = document1.outputSettings(document_OutputSettings0);
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(":R", document1.location());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document3.hasParent());
      assertEquals(":R", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(":R", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      String string1 = document3.data();
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(":R", document1.location());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document3.hasParent());
      assertEquals(":R", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(":R", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      Document document4 = (Document)document1.prependText("g(=ePz=Sp=");
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(":R", document1.location());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals(":R", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals(":R", document4.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertNotNull(document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      
      boolean boolean0 = document3.hasAttributes();
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(":R", document1.location());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document3.hasParent());
      assertEquals(":R", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(":R", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertTrue(boolean0);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      Element element0 = new Element("head");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      List<Node> list0 = document4.childNodesCopy();
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(":R", document1.location());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals(":R", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals(":R", document4.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document1);
      assertSame(document4, document3);
      
      Document document5 = (Document)document3.text("'*f1");
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(":R", document1.location());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document3.hasParent());
      assertEquals(":R", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(":R", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document5.tagName());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.hasParent());
      assertEquals(":R", document5.location());
      assertEquals(":R", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.isBlock());
      assertNotNull(document5);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document5, document3);
      assertSame(document5, document4);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertSame(document5, document1);
      
      Element element1 = element0.prepend("org.jsoup.select.NodeTraversor");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertFalse(element1.hasParent());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      int int0 = document2.elementSiblingIndex();
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(":R", document1.location());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(":R", document2.location());
      assertEquals(":R", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, int0);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document5);
      assertSame(document2, document0);
      
      Document document6 = (Document)document3.val("head");
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(":R", document1.location());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document3.hasParent());
      assertEquals(":R", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(":R", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document6.childNodeSize());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(0, document6.siblingIndex());
      assertEquals("#document", document6.nodeName());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(":R", document6.baseUri());
      assertFalse(document6.isBlock());
      assertFalse(document6.hasParent());
      assertEquals(":R", document6.location());
      assertNotNull(document6);
      assertSame(document0, document3);
      assertSame(document0, document6);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document6);
      assertSame(document1, document0);
      assertSame(document3, document6);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document6, document3);
      assertSame(document6, document5);
      assertSame(document6, document0);
      assertSame(document6, document4);
      assertSame(document6, document2);
      assertSame(document6, document1);
      
      Elements elements1 = document3.select("noframes");
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(":R", document1.location());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document3.hasParent());
      assertEquals(":R", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals(":R", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      assertSame(document0, document3);
      assertSame(document0, document6);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document1, document6);
      assertSame(document1, document0);
      assertSame(document3, document6);
      assertSame(document3, document2);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      Document document7 = document4.clone();
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(":R", document7.baseUri());
      assertEquals("#document", document7.nodeName());
      assertEquals(0, document7.siblingIndex());
      assertEquals(":R", document7.location());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.isBlock());
      assertEquals("#root", document7.tagName());
      assertFalse(document7.hasParent());
      assertEquals(2, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(":R", document1.location());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals(":R", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals(":R", document4.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document6));
      assertNotNull(document7);
      assertSame(document0, document3);
      assertSame(document0, document6);
      assertNotSame(document0, document7);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(document7, document4);
      assertNotSame(document7, document3);
      assertNotSame(document7, document2);
      assertNotSame(document7, document1);
      assertNotSame(document7, document0);
      assertNotSame(document7, document5);
      assertNotSame(document7, document6);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document7);
      assertSame(document1, document2);
      assertSame(document1, document6);
      assertSame(document1, document0);
      assertSame(document4, document6);
      assertNotSame(document4, document7);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document5);
      assertSame(document4, document1);
      assertSame(document4, document3);
      
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document3;
      CDataNode cDataNode0 = new CDataNode("a'[DZyKvY~");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      nodeArray0[1] = (Node) cDataNode0;
      nodeArray0[2] = (Node) document6;
      Document document8 = (Document)document7.insertChildren(0, nodeArray0);
      assertEquals(3, nodeArray0.length);
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(":R", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(":R", document7.baseUri());
      assertEquals("#document", document7.nodeName());
      assertEquals(0, document7.siblingIndex());
      assertEquals(":R", document7.location());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.isBlock());
      assertEquals("#root", document7.tagName());
      assertFalse(document7.hasParent());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals(4, document7.childNodeSize());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":R", document1.location());
      assertEquals(":R", document1.baseUri());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document8.hasParent());
      assertEquals("#root", document8.tagName());
      assertFalse(document8.isBlock());
      assertEquals(4, document8.childNodeSize());
      assertEquals(0, document8.siblingIndex());
      assertEquals("#document", document8.nodeName());
      assertEquals(":R", document8.location());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals(":R", document8.baseUri());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.siblingIndex());
      assertEquals(":R", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(":R", document4.baseUri());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.isBlock());
      assertFalse(document0.equals((Object)document7));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document1));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document1.equals((Object)document7));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document6));
      assertFalse(document4.equals((Object)document7));
      assertNotNull(document8);
      assertSame(document0, document3);
      assertSame(document0, document6);
      assertNotSame(document0, document7);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document8);
      assertSame(document0, document5);
      assertSame(document7, document8);
      assertNotSame(document7, document4);
      assertNotSame(document7, document3);
      assertNotSame(document7, document2);
      assertNotSame(document7, document1);
      assertNotSame(document7, document0);
      assertNotSame(document7, document5);
      assertNotSame(document7, document6);
      assertSame(document1, document5);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertNotSame(document1, document7);
      assertSame(document1, document2);
      assertNotSame(document1, document8);
      assertSame(document1, document6);
      assertSame(document1, document0);
      assertNotSame(document8, document1);
      assertNotSame(document8, document5);
      assertNotSame(document8, document4);
      assertNotSame(document8, document3);
      assertNotSame(document8, document0);
      assertNotSame(document8, document2);
      assertNotSame(document8, document6);
      assertSame(document8, document7);
      assertSame(document4, document6);
      assertNotSame(document4, document7);
      assertNotSame(document4, document8);
      assertSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document5);
      assertSame(document4, document1);
      assertSame(document4, document3);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        parser0.parseInput(":R", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parse("", ":R");
      assertFalse(document0.hasParent());
      assertEquals(":R", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      String string0 = document0.baseUri();
      assertFalse(document0.hasParent());
      assertEquals(":R", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":R", string0);
      assertNotNull(string0);
      
      Document document1 = (Document)document0.addClass("'*f1");
      assertFalse(document0.hasParent());
      assertEquals(":R", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(":R", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(":R", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching(":R", "'*f1");
      assertFalse(document0.hasParent());
      assertEquals(":R", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.attr("'*f1", "g(=ePz=Sp=");
      assertFalse(document0.hasParent());
      assertEquals(":R", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(":R", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(":R", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(":R", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(":R", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document3 = parser0.parseInput("vo4M", "ct'RiI](7*(d>)Foy");
      assertFalse(parser0.isTrackErrors());
      assertEquals("ct'RiI](7*(d>)Foy", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals("ct'RiI](7*(d>)Foy", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      
      Document document4 = document2.clone();
      assertFalse(document0.hasParent());
      assertEquals(":R", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(":R", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(":R", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(":R", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(":R", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals(":R", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(":R", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertNotNull(document4);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document1, document3);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      
      StringBuilder stringBuilder0 = new StringBuilder(1446);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      document0.outerHtml((Appendable) stringBuilder0);
      assertFalse(document0.hasParent());
      assertEquals(":R", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      
      Document document5 = document1.normalise();
      assertFalse(document0.hasParent());
      assertEquals(":R", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(":R", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(":R", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals(":R", document5.baseUri());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.hasParent());
      assertEquals(":R", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.childNodeSize());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertNotNull(document5);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document5);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document5, document4);
      assertSame(document5, document1);
      assertSame(document5, document0);
      assertNotSame(document5, document3);
      assertSame(document5, document2);
      
      Element element0 = document4.appendElement("Q;=cMv&<ch`0 z");
      assertFalse(document0.hasParent());
      assertEquals(":R", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(":R", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(":R", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(":R", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals(":R", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals(":R", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(":R", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertEquals("q;=cmv&<ch`0 z", element0.nodeName());
      assertEquals(":R", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("q;=cmv&<ch`0 z", element0.tagName());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document5));
      assertFalse(document4.equals((Object)document2));
      assertNotNull(element0);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document4);
      assertSame(document0, document5);
      assertSame(document0, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document5);
      assertNotSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document5);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document4);
      assertNotSame(document2, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document1);
      assertNotSame(document4, document3);
      assertNotSame(document4, document5);
      assertNotSame(document4, document2);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Map<String, String> map0 = document0.dataset();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Document document1 = (Document)document0.addClass("");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document document2 = document1.outputSettings(document_OutputSettings0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      String string0 = document2.data();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document0.prependText("qH<opOB");
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      boolean boolean0 = document3.hasAttributes();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("", document3.baseUri());
      assertEquals("", document3.location());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertTrue(boolean0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Element element0 = new Element("VU:5[3ckjy+)");
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("VU:5[3ckjy+)", element0.nodeName());
      assertEquals("VU:5[3ckjy+)", element0.tagName());
      assertNotNull(element0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document4 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertNotNull(document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      
      List<Node> list0 = document4.childNodesCopy();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      
      Element element1 = element0.doClone(document4);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("VU:5[3ckjy+)", element0.nodeName());
      assertEquals("VU:5[3ckjy+)", element0.tagName());
      assertEquals("#root", document4.tagName());
      assertEquals("", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertEquals("VU:5[3ckjy+)", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("VU:5[3ckjy+)", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertNotSame(element0, element1);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertNotSame(element1, element0);
      
      Element element2 = element0.text("qH<opOB");
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("VU:5[3ckjy+)", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("VU:5[3ckjy+)", element0.tagName());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals("VU:5[3ckjy+)", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("VU:5[3ckjy+)", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertNotNull(element2);
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      
      Element element3 = element2.prepend("");
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("VU:5[3ckjy+)", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("VU:5[3ckjy+)", element0.tagName());
      assertFalse(element2.isBlock());
      assertEquals("", element2.baseUri());
      assertFalse(element2.hasParent());
      assertEquals("VU:5[3ckjy+)", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertEquals("VU:5[3ckjy+)", element2.nodeName());
      assertEquals(0, element2.siblingIndex());
      assertEquals(0, element3.siblingIndex());
      assertFalse(element3.isBlock());
      assertFalse(element3.hasParent());
      assertEquals("VU:5[3ckjy+)", element3.tagName());
      assertEquals("", element3.baseUri());
      assertEquals(1, element3.childNodeSize());
      assertEquals("VU:5[3ckjy+)", element3.nodeName());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element2.equals((Object)element1));
      assertFalse(element3.equals((Object)element1));
      assertNotNull(element3);
      assertSame(element0, element3);
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertSame(element2, element3);
      assertSame(element3, element0);
      assertNotSame(element3, element1);
      assertSame(element3, element2);
      
      int int0 = document4.elementSiblingIndex();
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals(2, document4.childNodeSize());
      assertEquals(Document.QuirksMode.quirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.hasParent());
      assertEquals("", document4.baseUri());
      assertEquals(0, int0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      assertFalse(boolean1 == boolean0);
      assertFalse(boolean1);
      
      // Undeclared exception!
      try { 
        document3.select(",Gdq%X%xZ FXy4");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Gdq%X%xZ': unexpected token at '%X%xZ'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getVariant());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("*v*zM<5/", "hO):y@'V");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("hO):y@'V", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("hO):y@'V", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("hO):y@'V", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("hO):y@'V", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("hO):y@'V", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("hO):y@'V", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.body();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("hO):y@'V", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("hO):y@'V", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("hO):y@'V", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("hO):y@'V", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("hO):y@'V", element0.baseUri());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = element0.html();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("hO):y@'V", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("hO):y@'V", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("hO):y@'V", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("hO):y@'V", document1.baseUri());
      assertEquals(Document.QuirksMode.quirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("hO):y@'V", element0.baseUri());
      assertEquals("*v*zM&lt;5/", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Map<String, String> map0 = document0.dataset();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      Document document1 = (Document)document0.addClass("");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsContainingOwnText("");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      String string1 = document1.data();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.prependText("org.jsoup.nodes.Element$2");
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = document2.hasAttributes();
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertTrue(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parse("", ":R");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      String string0 = document0.baseUri();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(":R", string0);
      assertNotNull(string0);
      
      Document document1 = (Document)document0.addClass("'*f1");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(":R", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching(":R", "'*f1");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.attr("'*f1", "g(=ePz=Sp=");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(":R", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals(":R", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals(":R", document2.location());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document1.prependText("g(=ePz=Sp=");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(":R", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(":R", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(":R", document3.location());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Element element0 = new Element("head");
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      String string1 = element0.text();
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      
      List<Node> list0 = document3.childNodesCopy();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(":R", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(":R", document3.baseUri());
      assertEquals(2, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(":R", document3.location());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertNotNull(list0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Element element1 = element0.prepend("org.jsoup.select.NodeTraversor");
      assertEquals("head", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals("head", element1.tagName());
      assertNotNull(element1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      try { 
        element1.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Element element0 = document1.body();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      List<Node> list0 = document0.childNodesCopy();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotNull(list0);
      assertNotSame(document0, document1);
      
      Element element1 = element0.appendText(":nth-child(%d)");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Document document2 = (Document)document1.text("org.jsoup.nodes.Element$2");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      Element element2 = element1.prepend("org.jsoup.nodes.Element$NodeList");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$2", element2.baseUri());
      assertTrue(element2.hasParent());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.tagName());
      assertEquals(2, element2.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(element2);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
      
      String string0 = document0.cssSelector();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertEquals("#root", string0);
      assertNotNull(string0);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document3 = document1.parser(parser1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document3.location());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document1);
      
      int int0 = 685;
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document2;
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$2");
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("org.jsoup.nodes.Element$2", tag0.getName());
      assertEquals("org.jsoup.nodes.Element$2", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      List<Node> list1 = document1.siblingNodes();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Element$2", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(list1.equals((Object)list0));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(list1);
      assertNotSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      
      String string1 = "LqXhtuqmSRKWMN< ";
      CDataNode cDataNode0 = new CDataNode("NxkJ2K|bim^'Y3l");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      // Undeclared exception!
      try { 
        attributes0.put((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "88");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Elements elements0 = document0.getElementsByAttributeValueEnding("org.jsoup.nodes.Element$2", "88");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      int int0 = document0.elementSiblingIndex();
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, int0);
      
      Elements elements1 = document0.getElementsByTag("|HAie _`E5]");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      
      Element element0 = new Element(">,;Ol");
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(">,;Ol", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">,;Ol", element0.tagName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      List<Node> list0 = element0.childNodesCopy();
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(">,;Ol", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">,;Ol", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Document document1 = (Document)document0.appendText(">,;Ol");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.location());
      assertEquals("88", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.appendText("m~)");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("88", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("88", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document2.text("org.jsoup.nodes.Element$2");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("88", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(3, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("88", document2.baseUri());
      assertEquals("88", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals("88", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      
      Document document4 = (Document)document1.prepend("88");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.location());
      assertEquals("88", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(4, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(4, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("88", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#root", document4.tagName());
      assertEquals("88", document4.location());
      assertNotNull(document4);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      
      Document document5 = parser0.parseInput("m~)", "88");
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document5.tagName());
      assertEquals("88", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals("88", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertNotNull(document5);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertNotSame(document5, document4);
      
      Document document6 = document5.normalise();
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document5.tagName());
      assertEquals("88", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals("88", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals("88", document6.baseUri());
      assertEquals("88", document6.location());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(1, document6.childNodeSize());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.isBlock());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.hasParent());
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document2));
      assertNotNull(document6);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertSame(document5, document6);
      assertNotSame(document5, document4);
      assertNotSame(document6, document1);
      assertNotSame(document6, document4);
      assertNotSame(document6, document3);
      assertNotSame(document6, document0);
      assertSame(document6, document5);
      assertNotSame(document6, document2);
      
      Element element1 = document6.head();
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document5.tagName());
      assertEquals("88", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals("88", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertEquals("#root", document6.tagName());
      assertEquals("88", document6.baseUri());
      assertEquals("88", document6.location());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(1, document6.childNodeSize());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document6.isBlock());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("88", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document6.equals((Object)document1));
      assertFalse(document6.equals((Object)document4));
      assertFalse(document6.equals((Object)document3));
      assertFalse(document6.equals((Object)document0));
      assertFalse(document6.equals((Object)document2));
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertSame(document5, document6);
      assertNotSame(document5, document4);
      assertNotSame(document6, document1);
      assertNotSame(document6, document4);
      assertNotSame(document6, document3);
      assertNotSame(document6, document0);
      assertSame(document6, document5);
      assertNotSame(document6, document2);
      assertNotSame(element1, element0);
      
      Document document7 = document0.clone();
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(4, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("#document", document7.nodeName());
      assertEquals("#root", document7.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.isBlock());
      assertEquals(0, document7.siblingIndex());
      assertEquals("88", document7.location());
      assertFalse(document7.hasParent());
      assertEquals("88", document7.baseUri());
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document1));
      assertNotNull(document7);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document0, document6);
      assertNotSame(document0, document7);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document7, document6);
      assertNotSame(document7, document0);
      assertNotSame(document7, document5);
      assertNotSame(document7, document4);
      assertNotSame(document7, document3);
      assertNotSame(document7, document2);
      assertNotSame(document7, document1);
      
      int int1 = document7.elementSiblingIndex();
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(4, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertEquals("#document", document7.nodeName());
      assertEquals("#root", document7.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.isBlock());
      assertEquals(0, document7.siblingIndex());
      assertEquals("88", document7.location());
      assertFalse(document7.hasParent());
      assertEquals("88", document7.baseUri());
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document7.equals((Object)document6));
      assertFalse(document7.equals((Object)document0));
      assertFalse(document7.equals((Object)document5));
      assertFalse(document7.equals((Object)document4));
      assertFalse(document7.equals((Object)document3));
      assertFalse(document7.equals((Object)document2));
      assertFalse(document7.equals((Object)document1));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document0, document6);
      assertNotSame(document0, document7);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document7, document6);
      assertNotSame(document7, document0);
      assertNotSame(document7, document5);
      assertNotSame(document7, document4);
      assertNotSame(document7, document3);
      assertNotSame(document7, document2);
      assertNotSame(document7, document1);
      
      Document document8 = (Document)document5.val("XW");
      assertEquals("88", document8.baseUri());
      assertFalse(document8.hasParent());
      assertEquals("#root", document8.tagName());
      assertEquals("#document", document8.nodeName());
      assertFalse(document8.isBlock());
      assertEquals(0, document8.siblingIndex());
      assertEquals("88", document8.location());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals(1, document8.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document5.tagName());
      assertEquals("88", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals("88", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document7));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertNotNull(document8);
      assertNotSame(document8, document1);
      assertSame(document8, document6);
      assertNotSame(document8, document3);
      assertNotSame(document8, document4);
      assertNotSame(document8, document2);
      assertSame(document8, document5);
      assertNotSame(document8, document0);
      assertNotSame(document8, document7);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document7);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertSame(document5, document6);
      assertSame(document5, document8);
      assertNotSame(document5, document4);
      
      Elements elements2 = document3.select("88");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertEquals("88", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(4, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("88", document2.baseUri());
      assertEquals("88", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals("88", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals(4, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document5));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertFalse(document2.equals((Object)document8));
      assertFalse(document2.equals((Object)document5));
      assertFalse(document2.equals((Object)document7));
      assertFalse(document2.equals((Object)document6));
      assertFalse(document3.equals((Object)document8));
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document6));
      assertFalse(document3.equals((Object)document7));
      assertNotNull(elements2);
      assertNotSame(document0, document8);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document0, document6);
      assertNotSame(document0, document7);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertNotSame(document2, document8);
      assertSame(document2, document1);
      assertNotSame(document2, document5);
      assertNotSame(document2, document7);
      assertNotSame(document2, document6);
      assertSame(document2, document4);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document8);
      assertSame(document3, document1);
      assertNotSame(document3, document5);
      assertNotSame(document3, document6);
      assertNotSame(document3, document7);
      assertSame(document3, document4);
      
      Elements elements3 = document5.getElementsByAttribute("#root");
      assertFalse(parser0.isTrackErrors());
      assertTrue(elements3.isEmpty());
      assertEquals(0, elements3.size());
      assertEquals("#root", document5.tagName());
      assertEquals("88", document5.baseUri());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals("88", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertTrue(elements3.equals((Object)elements0));
      assertTrue(elements3.equals((Object)elements1));
      assertTrue(elements3.equals((Object)elements2));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document7));
      assertFalse(document5.equals((Object)document1));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertNotNull(elements3);
      assertNotSame(elements3, elements1);
      assertNotSame(elements3, elements2);
      assertNotSame(elements3, elements0);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document7);
      assertNotSame(document5, document1);
      assertNotSame(document5, document3);
      assertSame(document5, document6);
      assertSame(document5, document8);
      assertNotSame(document5, document4);
      
      String string0 = element0.wholeText();
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(">,;Ol", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">,;Ol", element0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(element0.equals((Object)element1));
      assertEquals("", string0);
      assertNotNull(string0);
      assertNotSame(element0, element1);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      Document document9 = document0.clone();
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(4, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document9.quirksMode());
      assertFalse(document9.isBlock());
      assertEquals(0, document9.siblingIndex());
      assertEquals("#document", document9.nodeName());
      assertEquals("#root", document9.tagName());
      assertEquals("88", document9.location());
      assertEquals("88", document9.baseUri());
      assertFalse(document9.updateMetaCharsetElement());
      assertEquals(4, document9.childNodeSize());
      assertFalse(document9.hasParent());
      assertFalse(document0.equals((Object)document8));
      assertFalse(document0.equals((Object)document6));
      assertFalse(document0.equals((Object)document7));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document9.equals((Object)document8));
      assertFalse(document9.equals((Object)document3));
      assertFalse(document9.equals((Object)document6));
      assertFalse(document9.equals((Object)document4));
      assertFalse(document9.equals((Object)document7));
      assertFalse(document9.equals((Object)document0));
      assertFalse(document9.equals((Object)document5));
      assertFalse(document9.equals((Object)document1));
      assertFalse(document9.equals((Object)document2));
      assertNotNull(document9);
      assertNotSame(document0, document8);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document0, document6);
      assertNotSame(document0, document7);
      assertSame(document0, document1);
      assertNotSame(document0, document9);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertNotSame(document9, document8);
      assertNotSame(document9, document3);
      assertNotSame(document9, document6);
      assertNotSame(document9, document4);
      assertNotSame(document9, document7);
      assertNotSame(document9, document0);
      assertNotSame(document9, document5);
      assertNotSame(document9, document1);
      assertNotSame(document9, document2);
      
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.location());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "textarea");
      assertFalse(boolean0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(parser0.isTrackErrors());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("Insert position out of bounds.", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("Insert position out of bounds.");
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      String string0 = "body";
      Comment comment0 = new Comment((String) null, "body");
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertNotNull(comment0);
      
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("a", parseSettings0);
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("a", tag0.getName());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("a", tag0.toString());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("a", "'E[OF8)5my#8\"9h");
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "body", attributes1);
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("a", tag0.getName());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("a", tag0.toString());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("a", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("a", formElement0.tagName());
      assertEquals("body", formElement0.baseUri());
      assertNotNull(formElement0);
      
      Elements elements0 = formElement0.getElementsByClass("4ui+BE!'[#aS");
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("a", tag0.getName());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("a", tag0.toString());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("a", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("a", formElement0.tagName());
      assertEquals("body", formElement0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement1 = formElement0.addElement(document1);
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(parser0.isTrackErrors());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("a", tag0.getName());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("a", tag0.toString());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("a", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("a", formElement0.tagName());
      assertEquals("body", formElement0.baseUri());
      assertFalse(formElement1.hasParent());
      assertEquals("body", formElement1.baseUri());
      assertFalse(formElement1.isBlock());
      assertEquals("a", formElement1.nodeName());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("a", formElement1.tagName());
      assertNotNull(formElement1);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, formElement1);
      assertSame(formElement1, formElement0);
      
      // Undeclared exception!
      try { 
        formElement1.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "textarea");
      assertFalse(boolean0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("Insert position out of bounds.");
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Comment comment0 = new Comment((String) null, "body");
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      Charset charset0 = document0.charset();
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertNotNull(charset0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Set<String> set0 = charset0.aliases();
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertNotNull(set0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(set0.contains("textarea"));
      
      Document document3 = (Document)document0.classNames(set0);
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.name());
      assertTrue(charset0.canEncode());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(0, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Insert position out of bounds.", document3.location());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertFalse(set0.contains("textarea"));
      
      Element element0 = document0.appendElement("s+");
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("s+", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("s+", element0.tagName());
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertNotNull(element0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Set<String> set1 = element0.classNames();
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("s+", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("s+", element0.tagName());
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertTrue(set1.isEmpty());
      assertEquals(0, set1.size());
      assertFalse(set1.equals((Object)set0));
      assertNotNull(set1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(set1.contains("textarea"));
      
      Document document4 = (Document)document0.appendText("body");
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals("Insert position out of bounds.", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(2, document4.childNodeSize());
      assertFalse(document4.hasParent());
      assertEquals("Insert position out of bounds.", document4.baseUri());
      assertNotNull(document4);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document4, document1);
      assertSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Tag tag0 = Tag.valueOf("reversed");
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("reversed", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("reversed");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "reversed", attributes0);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("reversed", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("reversed", pseudoTextElement0.tagName());
      assertEquals("reversed", pseudoTextElement0.baseUri());
      assertEquals("reversed", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertNotNull(pseudoTextElement0);
      
      boolean boolean1 = FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      attributes0.removeIgnoreCase(":");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      Elements elements0 = pseudoTextElement0.nextElementSiblings();
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("reversed", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("reversed", pseudoTextElement0.tagName());
      assertEquals("reversed", pseudoTextElement0.baseUri());
      assertEquals("reversed", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      String string0 = pseudoTextElement0.ownText();
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("reversed", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("reversed", pseudoTextElement0.tagName());
      assertEquals("reversed", pseudoTextElement0.baseUri());
      assertEquals("reversed", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("", string0);
      assertNotNull(string0);
      
      Element element0 = pseudoTextElement0.attr("reversed", false);
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("reversed", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("reversed", pseudoTextElement0.tagName());
      assertEquals("reversed", pseudoTextElement0.baseUri());
      assertEquals("reversed", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("reversed", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("reversed", element0.baseUri());
      assertNotNull(element0);
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, pseudoTextElement0);
      
      Element element1 = pseudoTextElement0.prependElement(":");
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("reversed", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("reversed", pseudoTextElement0.tagName());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals("reversed", pseudoTextElement0.baseUri());
      assertEquals("reversed", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(":", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("reversed", element1.baseUri());
      assertEquals(":", element1.tagName());
      assertNotNull(element1);
      assertSame(pseudoTextElement0, element0);
      
      Element element2 = element1.html("D]n{'");
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("reversed", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("reversed", pseudoTextElement0.tagName());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals("reversed", pseudoTextElement0.baseUri());
      assertEquals("reversed", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(":", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("reversed", element1.baseUri());
      assertEquals(":", element1.tagName());
      assertEquals(":", element2.nodeName());
      assertEquals("reversed", element2.baseUri());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals(":", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertNotNull(element2);
      assertSame(pseudoTextElement0, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      
      String string1 = element0.tagName();
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("reversed", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("reversed", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("reversed", pseudoTextElement0.tagName());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals("reversed", pseudoTextElement0.baseUri());
      assertEquals("reversed", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("reversed", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("reversed", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("reversed", element0.baseUri());
      assertFalse(string1.equals((Object)string0));
      assertEquals("reversed", string1);
      assertNotNull(string1);
      assertSame(pseudoTextElement0, element0);
      assertSame(element0, pseudoTextElement0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "88");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Elements elements0 = document0.getElementsByAttributeValueEnding("org.jsoup.nodes.Element$2", "88");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      int int0 = document0.elementSiblingIndex();
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, int0);
      
      Elements elements1 = document0.getElementsByTag("|HAie _`E5]");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      
      String string0 = ">,;Ol";
      Element element0 = new Element(">,;Ol");
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">,;Ol", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(">,;Ol", element0.tagName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      List<Node> list0 = element0.childNodesCopy();
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">,;Ol", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(">,;Ol", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Document document1 = (Document)document0.appendText(">,;Ol");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("88", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = new Document("|HAie _`E5]");
      assertFalse(document2.hasParent());
      assertEquals("|HAie _`E5]", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("|HAie _`E5]", document2.baseUri());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      
      Document document3 = (Document)document0.prepend("|HAie _`E5]");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("88", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("88", document3.baseUri());
      assertFalse(document3.hasParent());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(document3);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      
      document3.childNodes = null;
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("88", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("88", document3.baseUri());
      assertFalse(document3.hasParent());
      
      Document document4 = (Document)document3.attr("WD+|+n \"(@6z.", true);
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("88", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertEquals("88", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("88", document4.location());
      assertFalse(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals("88", document4.baseUri());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertNotNull(document4);
      assertNotSame(document0, document2);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertNotSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertNotSame(document4, document2);
      assertSame(document4, document1);
      
      // Undeclared exception!
      try { 
        document3.getElementsByIndexGreaterThan((-1012));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("Insert position out of bounds.");
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.clone();
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals("Insert position out of bounds.", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      
      Tag tag0 = document0.tag();
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("#root", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(document0.equals((Object)document3));
      assertNotNull(tag0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      
      Elements elements0 = document1.getElementsByAttributeValueMatching("ctHn]x ( hQB0H>", "Insert position out of bounds.");
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      
      List<DataNode> list0 = document2.dataNodes();
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertNotNull(list0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      
      Element element0 = document2.getElementById("zOY.mP~l;0cLa8~H`%");
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertNull(element0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      
      Document document4 = (Document)document2.appendText("ctHn]x ( hQB0H>");
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document4.location());
      assertFalse(document4.hasParent());
      assertEquals("Insert position out of bounds.", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertNotNull(document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document4, document2);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document1);
      
      Charset charset0 = document3.charset();
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals("Insert position out of bounds.", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document4));
      assertNotNull(charset0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document4);
      
      Set<String> set0 = charset0.aliases();
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals("Insert position out of bounds.", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document4));
      assertNotNull(set0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document4);
      assertFalse(set0.contains("Insert position out of bounds."));
      
      Document document5 = (Document)document1.classNames(set0);
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals("Insert position out of bounds.", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.name());
      assertEquals("UTF-8", charset0.toString());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document5.hasParent());
      assertEquals("Insert position out of bounds.", document5.baseUri());
      assertEquals("#root", document5.tagName());
      assertEquals("Insert position out of bounds.", document5.location());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals("#document", document5.nodeName());
      assertEquals(1, document5.childNodeSize());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertNotNull(document5);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertSame(document1, document2);
      assertSame(document1, document5);
      assertNotSame(document1, document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document4);
      assertNotSame(document3, document5);
      assertSame(document5, document4);
      assertNotSame(document5, document3);
      assertSame(document5, document0);
      assertSame(document5, document2);
      assertSame(document5, document1);
      assertFalse(set0.contains("Insert position out of bounds."));
      
      Element element1 = document2.appendElement("zOY.mP~l;0cLa8~H`%");
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("Insert position out of bounds.", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("zoy.mp~l;0cla8~h`%", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("zoy.mp~l;0cla8~h`%", element1.nodeName());
      assertTrue(element1.hasParent());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertNotNull(element1);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document5);
      
      Set<String> set1 = document3.classNames();
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals("Insert position out of bounds.", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertFalse(set1.isEmpty());
      assertEquals(1, set1.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document3.equals((Object)document5));
      assertFalse(set1.equals((Object)set0));
      assertNotNull(set1);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document4);
      assertNotSame(document3, document5);
      assertFalse(set1.contains("Insert position out of bounds."));
      
      Document document6 = (Document)document0.appendText("tbpuF+");
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document6.hasParent());
      assertEquals("Insert position out of bounds.", document6.baseUri());
      assertEquals("#document", document6.nodeName());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.updateMetaCharsetElement());
      assertFalse(document6.isBlock());
      assertEquals(3, document6.childNodeSize());
      assertEquals("Insert position out of bounds.", document6.location());
      assertEquals("#root", document6.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document6.equals((Object)document3));
      assertNotNull(document6);
      assertSame(document0, document6);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document6, document2);
      assertSame(document6, document4);
      assertNotSame(document6, document3);
      assertSame(document6, document5);
      assertSame(document6, document0);
      assertSame(document6, document1);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parse("", ":R");
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":R", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      String string0 = document0.baseUri();
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":R", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(":R", string0);
      assertNotNull(string0);
      
      Document document1 = (Document)document0.addClass("'*f1");
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":R", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":R", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching(":R", "'*f1");
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":R", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.attr("'*f1", "g(=ePz=Sp=");
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":R", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":R", document1.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(":R", document2.baseUri());
      assertEquals(":R", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document document3 = document1.outputSettings(document_OutputSettings0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":R", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":R", document1.location());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(":R", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(":R", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      String string1 = document3.data();
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":R", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":R", document1.location());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(":R", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(":R", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Document document4 = (Document)document1.prependText("g(=ePz=Sp=");
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":R", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":R", document1.location());
      assertEquals(2, document4.childNodeSize());
      assertEquals(":R", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(":R", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertNotNull(document4);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document2);
      
      boolean boolean0 = document3.hasAttributes();
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":R", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":R", document1.location());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertEquals(":R", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(":R", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertTrue(boolean0);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document4);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Element element0 = new Element("head");
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      List<Node> list0 = document4.childNodesCopy();
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":R", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":R", document1.location());
      assertEquals(2, document4.childNodeSize());
      assertEquals(":R", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(":R", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document4, document0);
      assertSame(document4, document3);
      assertSame(document4, document1);
      assertSame(document4, document2);
      
      Document document5 = (Document)document3.appendText("br");
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":R", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(":R", document1.location());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(":R", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(":R", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(3, document5.childNodeSize());
      assertEquals(":R", document5.baseUri());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.hasParent());
      assertEquals(":R", document5.location());
      assertNotNull(document5);
      assertSame(document0, document5);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document1);
      assertSame(document5, document4);
      assertSame(document5, document0);
      
      Document document6 = (Document)document1.text("");
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":R", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(":R", document1.location());
      assertEquals("#root", document6.tagName());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(":R", document6.baseUri());
      assertEquals(":R", document6.location());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(3, document6.childNodeSize());
      assertFalse(document6.hasParent());
      assertNotNull(document6);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document6);
      assertSame(document1, document0);
      assertSame(document6, document3);
      assertSame(document6, document4);
      assertSame(document6, document5);
      assertSame(document6, document1);
      assertSame(document6, document2);
      assertSame(document6, document0);
      
      Document document7 = (Document)document3.prepend("bJ");
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, document0.childNodeSize());
      assertEquals(":R", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":R", document1.location());
      assertEquals(4, document1.childNodeSize());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(4, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(":R", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(":R", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.hasParent());
      assertFalse(document7.isBlock());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#root", document7.tagName());
      assertEquals(":R", document7.location());
      assertEquals(":R", document7.baseUri());
      assertEquals("#document", document7.nodeName());
      assertEquals(4, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertNotNull(document7);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document6);
      assertSame(document1, document7);
      assertSame(document1, document0);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertSame(document3, document7);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document6);
      assertSame(document3, document2);
      assertSame(document7, document1);
      assertSame(document7, document6);
      assertSame(document7, document2);
      assertSame(document7, document5);
      assertSame(document7, document0);
      assertSame(document7, document4);
      assertSame(document7, document3);
      
      Element element1 = document0.head();
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, document0.childNodeSize());
      assertEquals(":R", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(":R", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(element1, element0);
      
      int int0 = document6.elementSiblingIndex();
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, document0.childNodeSize());
      assertEquals(":R", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":R", document1.location());
      assertEquals(4, document1.childNodeSize());
      assertEquals("#root", document6.tagName());
      assertEquals(0, document6.siblingIndex());
      assertFalse(document6.isBlock());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(":R", document6.baseUri());
      assertEquals(":R", document6.location());
      assertFalse(document6.updateMetaCharsetElement());
      assertEquals(4, document6.childNodeSize());
      assertFalse(document6.hasParent());
      assertEquals(0, int0);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document6);
      assertSame(document1, document7);
      assertSame(document1, document0);
      assertSame(document6, document3);
      assertSame(document6, document4);
      assertSame(document6, document5);
      assertSame(document6, document7);
      assertSame(document6, document1);
      assertSame(document6, document2);
      assertSame(document6, document0);
      
      Element element2 = element1.val(":R");
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, document0.childNodeSize());
      assertEquals(":R", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("head", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals(":R", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("head", element2.tagName());
      assertEquals(":R", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element2.equals((Object)element0));
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element2);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element2, element1);
      assertNotSame(element2, element0);
      assertSame(element1, element2);
      assertNotSame(element1, element0);
      
      Elements elements1 = document3.select("ScriptDataDoubleEscapedDash");
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, document0.childNodeSize());
      assertEquals(":R", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":R", document1.location());
      assertEquals(4, document1.childNodeSize());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(4, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(":R", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(":R", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document6);
      assertSame(document1, document7);
      assertSame(document1, document0);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertSame(document3, document7);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document6);
      assertSame(document3, document2);
      
      Elements elements2 = document7.getElementsByAttribute("g(=ePz=Sp=");
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, document0.childNodeSize());
      assertEquals(":R", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":R", document1.location());
      assertEquals(4, document1.childNodeSize());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(4, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(":R", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(":R", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document7.quirksMode());
      assertFalse(document7.hasParent());
      assertFalse(document7.isBlock());
      assertEquals(0, document7.siblingIndex());
      assertEquals("#root", document7.tagName());
      assertEquals(":R", document7.location());
      assertEquals(":R", document7.baseUri());
      assertEquals("#document", document7.nodeName());
      assertEquals(4, document7.childNodeSize());
      assertFalse(document7.updateMetaCharsetElement());
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotNull(elements2);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document6);
      assertSame(document1, document7);
      assertSame(document1, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      assertSame(document3, document4);
      assertSame(document3, document5);
      assertSame(document3, document7);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document6);
      assertSame(document3, document2);
      assertSame(document7, document1);
      assertSame(document7, document6);
      assertSame(document7, document2);
      assertSame(document7, document5);
      assertSame(document7, document0);
      assertSame(document7, document4);
      assertSame(document7, document3);
      
      String string2 = document2.wholeText();
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, document0.childNodeSize());
      assertEquals(":R", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":R", document1.location());
      assertEquals(4, document1.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals(":R", document2.baseUri());
      assertEquals(":R", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(4, document2.childNodeSize());
      assertFalse(string2.equals((Object)string0));
      assertFalse(string2.equals((Object)string1));
      assertEquals("bJg(=ePz=Sp=br", string2);
      assertNotNull(string2);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document6);
      assertSame(document1, document7);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document7);
      assertSame(document2, document3);
      assertSame(document2, document4);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      Document document8 = document2.clone();
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(4, document0.childNodeSize());
      assertEquals(":R", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":R", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(":R", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":R", document1.location());
      assertEquals(4, document1.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals(":R", document2.baseUri());
      assertEquals(":R", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(4, document2.childNodeSize());
      assertFalse(document8.isBlock());
      assertEquals(":R", document8.baseUri());
      assertEquals("#document", document8.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document8.quirksMode());
      assertEquals(0, document8.siblingIndex());
      assertEquals("#root", document8.tagName());
      assertFalse(document8.hasParent());
      assertEquals(":R", document8.location());
      assertFalse(document8.updateMetaCharsetElement());
      assertEquals(4, document8.childNodeSize());
      assertFalse(document8.equals((Object)document0));
      assertFalse(document8.equals((Object)document4));
      assertFalse(document8.equals((Object)document5));
      assertFalse(document8.equals((Object)document3));
      assertFalse(document8.equals((Object)document7));
      assertFalse(document8.equals((Object)document2));
      assertFalse(document8.equals((Object)document1));
      assertFalse(document8.equals((Object)document6));
      assertNotNull(document8);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document7);
      assertSame(document0, document2);
      assertNotSame(document0, document8);
      assertSame(document0, document1);
      assertNotSame(document1, document8);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document6);
      assertSame(document1, document7);
      assertSame(document1, document0);
      assertNotSame(document2, document8);
      assertSame(document2, document1);
      assertSame(document2, document5);
      assertSame(document2, document6);
      assertSame(document2, document0);
      assertSame(document2, document7);
      assertSame(document2, document3);
      assertSame(document2, document4);
      assertNotSame(document8, document0);
      assertNotSame(document8, document4);
      assertNotSame(document8, document5);
      assertNotSame(document8, document3);
      assertNotSame(document8, document7);
      assertNotSame(document8, document2);
      assertNotSame(document8, document1);
      assertNotSame(document8, document6);
      
      // Undeclared exception!
      try { 
        document8.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "org.jsoup.nodes.Element$2");
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertNotNull(document0);
      
      Document document1 = Parser.parse(" >:", "</");
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("</", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("</", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document1.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = "# /";
      Document document0 = Parser.parseBodyFragmentRelaxed("# /", "# /");
      assertEquals("# /", document0.location());
      assertEquals("# /", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(10);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(10, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(10, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(10, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      
      Document document1 = document0.outputSettings(document_OutputSettings2);
      assertEquals("# /", document0.location());
      assertEquals("# /", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(10, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(10, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(10, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("# /", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("# /", document1.baseUri());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document0);
      
      String string1 = document1.text();
      assertEquals("# /", document0.location());
      assertEquals("# /", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(10, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(10, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(10, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("# /", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("# /", document1.baseUri());
      assertFalse(document1.hasParent());
      assertTrue(string1.equals((Object)string0));
      assertEquals("# /", string1);
      assertNotNull(string1);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.empty();
      assertEquals("# /", document0.location());
      assertEquals("# /", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(10, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(10, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(10, document_OutputSettings2.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("# /", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("# /", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("# /", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("# /", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings2);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      // Undeclared exception!
      try { 
        document1.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(">", parseSettings0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">", tag0.toString());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode(":w>z<Bex");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("n6g7nb<=*Ge$", false);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, ">", attributes1);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">", tag0.toString());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(">", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(">", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(">", formElement0.tagName());
      assertNotNull(formElement0);
      
      Elements elements0 = formElement0.getElementsByClass(":w>z<Bex");
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">", tag0.toString());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(">", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(">", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(">", formElement0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      attributes1.removeIgnoreCase("{|Z>2Uz5&MK|2mWz*O-");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Elements elements1 = formElement0.getElementsMatchingOwnText("");
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">", tag0.toString());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(">", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(">", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(">", formElement0.tagName());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(elements1, elements0);
      
      Pattern pattern0 = Pattern.compile("", 46);
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(46, pattern0.flags());
      assertNotNull(pattern0);
      
      Pattern pattern1 = Pattern.compile(":w>z<Bex", 46);
      assertEquals(":w>z<Bex", pattern1.toString());
      assertEquals(":w>z<Bex", pattern1.pattern());
      assertEquals(46, pattern1.flags());
      assertFalse(pattern1.equals((Object)pattern0));
      assertNotNull(pattern1);
      assertNotSame(pattern1, pattern0);
      
      Elements elements2 = formElement0.getElementsMatchingOwnText(pattern0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">", tag0.toString());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(">", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(">", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(">", formElement0.tagName());
      assertEquals("", pattern0.pattern());
      assertEquals("", pattern0.toString());
      assertEquals(46, pattern0.flags());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      assertFalse(pattern0.equals((Object)pattern1));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotNull(elements2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(pattern0, pattern1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      Locale locale0 = Locale.US;
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      assertFalse(set0.contains(":w>z<Bex"));
      
      Element element0 = formElement0.classNames(set0);
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(">", tag0.toString());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(">", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(">", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(">", formElement0.tagName());
      assertEquals("eng", locale0.getISO3Language());
      assertEquals("en_US", locale0.toString());
      assertEquals("en", locale0.getLanguage());
      assertEquals("USA", locale0.getISO3Country());
      assertEquals("", locale0.getVariant());
      assertEquals("US", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertFalse(element0.hasParent());
      assertEquals(">", element0.baseUri());
      assertEquals(">", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(">", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
      assertFalse(set0.contains(":w>z<Bex"));
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = "Insert position out of bounds.";
      Document document0 = new Document("Insert position out of bounds.");
      assertEquals(0, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "textarea");
      assertFalse(boolean0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("Insert position out of bounds.");
      assertEquals(0, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Comment comment0 = new Comment((String) null, "body");
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      Node[] nodeArray0 = new Node[4];
      nodeArray0[1] = (Node) document2;
      nodeArray0[2] = (Node) document2;
      String string1 = document2.cssSelector();
      assertEquals(0, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertFalse(string1.equals((Object)string0));
      assertNotNull(string1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      nodeArray0[3] = (Node) document2;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(">", parseSettings0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals(">", tag0.toString());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode(":w>z<Bex");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("n6g7nb<=*Ge$", false);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, ">", attributes1);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals(">", tag0.toString());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(">", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(">", formElement0.tagName());
      assertEquals(">", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertNotNull(formElement0);
      
      Elements elements0 = formElement0.getElementsByClass(":w>z<Bex");
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals(">", tag0.toString());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(">", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(">", formElement0.tagName());
      assertEquals(">", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Document document0 = Parser.parseBodyFragment(":w>z<Bex", ":w>z<Bex");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(":w>z<Bex", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(":w>z<Bex", document0.location());
      assertNotNull(document0);
      
      MockFile mockFile0 = new MockFile(">", "kkw%k[L");
      assertNotNull(mockFile0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      assertNotNull(mockFileWriter0);
      
      Object[] objectArray0 = new Object[9];
      objectArray0[0] = (Object) parseSettings0;
      Object object0 = new Object();
      assertNotNull(object0);
      
      objectArray0[1] = object0;
      objectArray0[2] = (Object) ">";
      objectArray0[3] = (Object) parseSettings0;
      Object object1 = new Object();
      assertFalse(object1.equals((Object)object0));
      assertNotNull(object1);
      
      objectArray0[4] = object1;
      objectArray0[5] = (Object) "textarea";
      objectArray0[6] = (Object) tag0;
      objectArray0[7] = (Object) cDataNode0;
      objectArray0[8] = (Object) "kkw%k[L";
      Elements elements1 = document0.nextElementSiblings();
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(":w>z<Bex", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(":w>z<Bex", document0.location());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      
      Document document1 = document0.normalise();
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(":w>z<Bex", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":w>z<Bex", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(":w>z<Bex", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(":w>z<Bex", document0.location());
      assertNotNull(document1);
      assertSame(document1, document0);
      assertSame(document0, document1);
      
      Element element0 = document1.appendElement("0q&H|Rb8vADl'WZR$QN");
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(":w>z<Bex", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(":w>z<Bex", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(":w>z<Bex", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(":w>z<Bex", document0.location());
      assertEquals(":w>z<Bex", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("0q&h|rb8vadl'wzr$qn", element0.nodeName());
      assertEquals("0q&h|rb8vadl'wzr$qn", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      assertSame(document1, document0);
      assertSame(document0, document1);
      
      String string0 = formElement0.ownText();
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals(">", tag0.toString());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(">", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(">", formElement0.tagName());
      assertEquals(">", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("", string0);
      assertNotNull(string0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      List<Node> list0 = formElement0.ensureChildNodes();
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals(">", tag0.toString());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(">", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(">", formElement0.tagName());
      assertEquals(">", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(">", parseSettings0);
      assertEquals(">", tag0.toString());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode(":w>z<Bex");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("n6g7nb<=*Ge$", false);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, ">", attributes1);
      assertEquals(">", tag0.toString());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(">", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(">", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(">", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertNotNull(formElement0);
      
      Elements elements0 = formElement0.getElementsByClass(":w>z<Bex");
      assertEquals(">", tag0.toString());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(">", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(">", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(">", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Elements elements1 = formElement0.getElementsMatchingOwnText("n6g7nb<=*Ge$");
      assertEquals(">", tag0.toString());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(">", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(">", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(">", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(elements1, elements0);
      
      Pattern pattern0 = Pattern.compile(">", 46);
      assertEquals(">", pattern0.pattern());
      assertEquals(46, pattern0.flags());
      assertEquals(">", pattern0.toString());
      assertNotNull(pattern0);
      
      Pattern pattern1 = Pattern.compile(":w>z<Bex", 46);
      assertEquals(":w>z<Bex", pattern1.pattern());
      assertEquals(":w>z<Bex", pattern1.toString());
      assertEquals(46, pattern1.flags());
      assertFalse(pattern1.equals((Object)pattern0));
      assertNotNull(pattern1);
      assertNotSame(pattern1, pattern0);
      
      Elements elements2 = formElement0.getElementsMatchingOwnText(pattern0);
      assertEquals(">", tag0.toString());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(">", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(">", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(">", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals(">", pattern0.pattern());
      assertEquals(46, pattern0.flags());
      assertEquals(">", pattern0.toString());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertFalse(pattern0.equals((Object)pattern1));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotNull(elements2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(pattern0, pattern1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Map<String, String> map0 = document0.dataset();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      
      boolean boolean0 = FileSystemHandling.createFolder((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Element element0 = document0.nextElementSibling();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNull(element0);
      
      Document document1 = (Document)document0.text("lMDV{J");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element1 = document0.appendElement("org.jsoup.nodes.Element$2");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("org.jsoup.nodes.element$2", element1.tagName());
      assertEquals("org.jsoup.nodes.element$2", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertNotNull(element1);
      assertSame(document0, document1);
      
      Element element2 = document0.body();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.siblingIndex());
      assertEquals("body", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals("body", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertFalse(element2.equals((Object)element1));
      assertNotNull(element2);
      assertSame(document0, document1);
      assertNotSame(element2, element1);
      
      Set<String> set0 = element2.classNames();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", element2.baseUri());
      assertTrue(element2.isBlock());
      assertEquals(1, element2.siblingIndex());
      assertEquals("body", element2.tagName());
      assertTrue(element2.hasParent());
      assertEquals("body", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(element2.equals((Object)element1));
      assertNotNull(set0);
      assertSame(document0, document1);
      assertNotSame(element2, element1);
      assertFalse(set0.contains(""));
      
      Document document2 = (Document)document0.appendText("Tag name must not be empty.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(3, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      String string0 = "org.jsoup.nodes.Element";
      String string1 = "org.jsoup.nodes.Attributes";
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Attributes", "#root");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = parser0.parseInput("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      Document document2 = document1.clone();
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.nodes.Element", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Attributes");
      assertEquals(0, pattern0.flags());
      assertEquals("org.jsoup.nodes.Attributes", pattern0.toString());
      assertEquals("org.jsoup.nodes.Attributes", pattern0.pattern());
      assertNotNull(pattern0);
      
      Matcher matcher0 = pattern0.matcher("#root");
      assertEquals(0, pattern0.flags());
      assertEquals("org.jsoup.nodes.Attributes", pattern0.toString());
      assertEquals("org.jsoup.nodes.Attributes", pattern0.pattern());
      assertEquals(0, matcher0.groupCount());
      assertTrue(matcher0.hasAnchoringBounds());
      assertFalse(matcher0.hasTransparentBounds());
      assertEquals("java.util.regex.Matcher[pattern=org.jsoup.nodes.Attributes region=0,5 lastmatch=]", matcher0.toString());
      assertNotNull(matcher0);
      
      Elements elements0 = document2.getElementsByAttributeValueMatching("org.jsoup.nodes.Element", pattern0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.nodes.Element", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, pattern0.flags());
      assertEquals("org.jsoup.nodes.Attributes", pattern0.toString());
      assertEquals("org.jsoup.nodes.Attributes", pattern0.pattern());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      String string2 = "Yui.p,Nqj@>XjO%o2kz";
      Elements elements1 = document2.getElementsByAttributeValueStarting("Yui.p,Nqj@>XjO%o2kz", "zo,+{>Iwl(wXE");
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.nodes.Element", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(elements1, elements0);
      
      Document document3 = (Document)document2.prepend("org.jsoup.nodes.Element");
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.nodes.Element", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(2, document3.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document3.baseUri());
      assertEquals("#document", document3.nodeName());
      assertEquals("org.jsoup.nodes.Element", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(document3);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document2, document3);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document3, document0);
      assertSame(document3, document2);
      assertNotSame(document3, document1);
      
      String string3 = "big";
      // Undeclared exception!
      try { 
        document2.text("big");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      String string0 = ", state=";
      Document document0 = Parser.parse(", state=", ", state=");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(", state=", document0.baseUri());
      assertEquals(", state=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      String string1 = "*";
      int int0 = (-2067947214);
      Pattern pattern0 = Pattern.compile("L:#g", (-2067947214));
      assertEquals("L:#g", pattern0.pattern());
      assertEquals("L:#g", pattern0.toString());
      assertEquals((-2067947150), pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("L:#g", pattern0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(", state=", document0.baseUri());
      assertEquals(", state=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("L:#g", pattern0.pattern());
      assertEquals("L:#g", pattern0.toString());
      assertEquals((-2067947150), pattern0.flags());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document1 = parser0.parseInput("*", "*");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("*", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("*", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      Element element0 = document1.nextElementSibling();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("*", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("*", document1.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertNull(element0);
      assertNotSame(document1, document0);
      
      Elements elements1 = document0.getElementsByClass(", state=");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(", state=", document0.baseUri());
      assertEquals(", state=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      String string2 = "lxY|e%]lQ";
      boolean boolean0 = FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      assertFalse(boolean0);
      
      Elements elements2 = document1.getElementsByAttributeValue("lxY|e%]lQ", "*");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("*", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("*", document1.baseUri());
      assertTrue(elements2.isEmpty());
      assertEquals(0, elements2.size());
      assertFalse(document1.equals((Object)document0));
      assertTrue(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotNull(elements2);
      assertNotSame(document1, document0);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      Document document2 = document1.normalise();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("*", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("*", document1.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("*", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("*", document2.baseUri());
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      
      String string3 = "[jPc>4ZPdX)S";
      // Undeclared exception!
      try { 
        Pattern.compile("[jPc>4ZPdX)S");
        fail("Expecting exception: PatternSyntaxException");
      
      } catch(PatternSyntaxException e) {
         //
         // Unclosed character class near index 11
         // [jPc>4ZPdX)S
         //            ^
         //
         verifyException("java.util.regex.Pattern", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = new Document("textarea");
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = parser0.parseInput("textarea", "textarea");
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("textarea", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document1, document0);
      
      Document document2 = Parser.parseBodyFragment("textarea", "textarea");
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("textarea", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("textarea", document2.baseUri());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Comment comment0 = new Comment((String) null, "body");
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertNotNull(comment0);
      
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document3 = (Document)document0.traverse(nodeVisitor0);
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals("textarea", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("textarea", document3.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(document3);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertSame(document3, document0);
      
      Document document4 = (Document)document0.appendTo(document2);
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("textarea", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("textarea", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("textarea", document4.location());
      assertEquals(1, document4.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertTrue(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals("textarea", document4.baseUri());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertNotNull(document4);
      assertSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document0);
      assertSame(document4, document3);
      
      Elements elements0 = document0.siblingElements();
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document0.equals((Object)document1));
      assertNotNull(elements0);
      assertSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      
      // Undeclared exception!
      try { 
        document1.outerHtml((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$2";
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "88");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("88", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.normalise();
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("88", document1.location());
      assertEquals("88", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("88", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      List<Node> list0 = Parser.parseFragment("", (Element) document0, "org.jsoup.nodes.Element$2");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Element element0 = (Element)document2.childNode(0);
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("88", document1.location());
      assertEquals("88", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("88", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("88", element0.baseUri());
      assertEquals("html", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals("html", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Element element1 = element0.after("org.jsoup.nodes.Element$2");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("88", document1.location());
      assertEquals("88", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("88", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("88", element0.baseUri());
      assertEquals("html", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals("html", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("html", element1.nodeName());
      assertEquals("88", element1.baseUri());
      assertEquals("html", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Document document3 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "1Cs]*9GIiUO+R-o_l1h");
      assertEquals("1Cs]*9GIiUO+R-o_l1h", document3.baseUri());
      assertEquals("1Cs]*9GIiUO+R-o_l1h", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      
      // Undeclared exception!
      try { 
        document2.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "88");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Elements elements0 = document0.getElementsByAttributeValueEnding("org.jsoup.nodes.Element$2", "88");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, int0);
      
      Elements elements1 = document0.getElementsByTag("|HAie _`E5]");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      
      Element element0 = new Element(">,;Ol");
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">,;Ol", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(">,;Ol", element0.tagName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      List<Node> list0 = element0.childNodesCopy();
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(">,;Ol", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(">,;Ol", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Document document1 = (Document)document0.appendText(">,;Ol");
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("88", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("88", document1.location());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.doClone(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("88", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("88", document1.location());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals("88", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("88", document2.baseUri());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Document document3 = (Document)document0.text("88");
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals("88", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals("88", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertNotSame(document3, document2);
      
      Document document4 = (Document)document0.prepend("|HAie _`E5]");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertEquals("88", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("88", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(3, document4.childNodeSize());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertNotNull(document4);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertNotSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      
      int int1 = document1.elementSiblingIndex();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("88", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("88", document1.location());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      
      String string0 = "<7S";
      Document document5 = (Document)document1.val("<7S");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals("88", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("88", document1.location());
      assertFalse(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals("88", document5.location());
      assertEquals("88", document5.baseUri());
      assertFalse(document5.isBlock());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertEquals(0, document5.siblingIndex());
      assertEquals(3, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document5.equals((Object)document2));
      assertNotNull(document5);
      assertSame(document0, document5);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document5);
      assertSame(document1, document3);
      assertNotSame(document1, document2);
      assertSame(document5, document3);
      assertNotSame(document5, document2);
      assertSame(document5, document1);
      assertSame(document5, document0);
      assertSame(document5, document4);
      
      // Undeclared exception!
      try { 
        document4.select("org.jsoup.nodes.Element$2");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.nodes.Element$2': unexpected token at '$2'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parse("", ":R");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":R", document0.baseUri());
      assertNotNull(document0);
      
      String string0 = document0.baseUri();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":R", document0.baseUri());
      assertEquals(":R", string0);
      assertNotNull(string0);
      
      Document document1 = (Document)document0.empty();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(":R", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(":R", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(":R", document1.location());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("'*f1");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(":R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(":R", document2.location());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(":R", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching(":R", "'*f1");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(":R", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Document document3 = (Document)document2.attr("'*f1", "g(=ePz=Sp=");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(":R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals(":R", document2.location());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(":R", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(":R", document3.baseUri());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(":R", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      Document document4 = (Document)document2.prependChild(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(":R", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(":R", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(":R", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertTrue(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(1, document4.childNodeSize());
      assertEquals(":R", document4.baseUri());
      assertFalse(document4.isBlock());
      assertNotNull(document4);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document3);
      
      String string1 = document2.val();
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(":R", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(":R", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(string1.equals((Object)string0));
      assertEquals("", string1);
      assertNotNull(string1);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document3);
      
      Map<String, String> map0 = document3.dataset();
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(":R", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(":R", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(":R", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(":R", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document4);
      
      boolean boolean0 = document3.hasAttr("'*f1");
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(":R", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":R", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(":R", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(":R", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertTrue(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(":R", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(":R", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertTrue(boolean0);
      assertSame(document0, document3);
      assertSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertSame(document2, document0);
      assertSame(document2, document3);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document4);
      
      // Undeclared exception!
      try { 
        document0.select("                ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '                ': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("Insert position out of bounds.");
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document0.clone();
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals("Insert position out of bounds.", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      
      Tag tag0 = document0.tag();
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("#root", tag0.toString());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(document0.equals((Object)document3));
      assertNotNull(tag0);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Elements elements0 = document1.getElementsByAttributeValueMatching("ctHn]x ( hQB0H>", "Insert position out of bounds.");
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertNotNull(elements0);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      
      List<DataNode> list0 = document2.dataNodes();
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertNotNull(list0);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      
      Element element0 = document2.getElementById("zOY.mP~l;0cLa8~H`%");
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertNull(element0);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      
      String string0 = Parser.unescapeEntities("Insert position out of bounds.", false);
      assertEquals("Insert position out of bounds.", string0);
      assertNotNull(string0);
      
      int int0 = document2.elementSiblingIndex();
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertEquals(0, int0);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document1);
      
      Document document4 = (Document)document2.val("");
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals("Insert position out of bounds.", document4.baseUri());
      assertFalse(document4.hasParent());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertNotNull(document4);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document2, document0);
      assertNotSame(document2, document3);
      assertSame(document2, document4);
      assertSame(document2, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      
      // Undeclared exception!
      try { 
        document0.select("Insert position out of bounds.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "88");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Elements elements0 = document0.getElementsByAttributeValueEnding("org.jsoup.nodes.Element$2", "88");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, int0);
      
      Elements elements1 = document0.getElementsByTag("|HAie _`E5]");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      
      String string0 = ">,;Ol";
      Element element0 = new Element(">,;Ol");
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(">,;Ol", element0.tagName());
      assertEquals(">,;Ol", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      List<Node> list0 = element0.childNodesCopy();
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(">,;Ol", element0.tagName());
      assertEquals(">,;Ol", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Document document1 = (Document)document0.appendText(">,;Ol");
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("88", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("88", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = new Document("|HAie _`E5]");
      assertEquals(0, document2.siblingIndex());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("|HAie _`E5]", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("|HAie _`E5]", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      
      Document document3 = (Document)document0.prepend("|HAie _`E5]");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("88", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("88", document3.location());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(document3);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      
      Document document4 = (Document)document3.attr("WD+|+n \"(@6z.", true);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("88", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("88", document3.location());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals("88", document4.location());
      assertFalse(document4.hasParent());
      assertFalse(document4.isBlock());
      assertEquals("88", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(3, document4.childNodeSize());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertNotNull(document4);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertNotSame(document3, document2);
      assertSame(document4, document1);
      assertNotSame(document4, document2);
      assertSame(document4, document3);
      assertSame(document4, document0);
      
      Elements elements2 = document3.getElementsByIndexGreaterThan((-1012));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("88", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("88", document3.location());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertEquals(4, elements2.size());
      assertFalse(elements2.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotNull(elements2);
      assertSame(document0, document3);
      assertNotSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document4);
      assertNotSame(document3, document2);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      // Undeclared exception!
      try { 
        document2.selectFirst("6J]h^61 _~,");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '6J]h^61 _~,': unexpected token at ']h^61 _~,'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      boolean boolean0 = FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      assertFalse(boolean0);
      
      Document document0 = Parser.parse("387tbW2!F", "387tbW2!F");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("387tbW2!F", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("387tbW2!F", document0.location());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("387tbW2!F");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("387tbW2!F", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("387tbW2!F", document0.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("387tbW2!F", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("387tbW2!F", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.previousElementSiblings();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("387tbW2!F", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("387tbW2!F", document0.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("387tbW2!F", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("387tbW2!F", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.toggleClass("org.jsoup.select.Evaluator");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("387tbW2!F", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("387tbW2!F", document0.location());
      assertFalse(document2.hasParent());
      assertEquals("387tbW2!F", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("387tbW2!F", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements1 = document0.children();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("387tbW2!F", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("387tbW2!F", document0.location());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      String string0 = " >:";
      Document document3 = Parser.parseBodyFragment("org.jsoup.select.Evaluator", ">");
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(">", document3.baseUri());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(">", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals(1, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      
      // Undeclared exception!
      try { 
        document1.outerHtml((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "88");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Elements elements0 = document0.getElementsByAttributeValueEnding("org.jsoup.nodes.Element$2", "88");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      int int0 = document0.elementSiblingIndex();
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, int0);
      
      Elements elements1 = document0.getElementsByTag("|HAie _`E5]");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      
      Element element0 = new Element(">,;Ol");
      assertEquals(0, element0.siblingIndex());
      assertEquals(">,;Ol", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(">,;Ol", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      List<Node> list0 = element0.childNodesCopy();
      assertEquals(0, element0.siblingIndex());
      assertEquals(">,;Ol", element0.tagName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(">,;Ol", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Document document1 = (Document)document0.appendText(">,;Ol");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("88", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.text("88");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("88", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("88", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.prepend("|HAie _`E5]");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("88", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(3, document3.childNodeSize());
      assertEquals("88", document3.baseUri());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      
      int int1 = document1.elementSiblingIndex();
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("88", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.baseUri());
      assertTrue(int1 == int0);
      assertEquals(0, int1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      
      String string0 = "<7S";
      Document document4 = (Document)document1.val("<7S");
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("88", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.baseUri());
      assertEquals("88", document4.location());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("88", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.hasParent());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(3, document4.childNodeSize());
      assertNotNull(document4);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertSame(document4, document1);
      assertSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      
      // Undeclared exception!
      try { 
        document3.select("org.jsoup.nodes.Element$2");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.nodes.Element$2': unexpected token at '$2'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      String string0 = "M-";
      Tag tag0 = Tag.valueOf("M-");
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("M-", tag0.toString());
      assertEquals("M-", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "M-");
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("M-", tag0.toString());
      assertEquals("M-", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, element0.childNodeSize());
      assertEquals("M-", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("M-", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("M-", element0.tagName());
      assertNotNull(element0);
      
      element0.setSiblingIndex((-793));
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("M-", tag0.toString());
      assertEquals("M-", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, element0.childNodeSize());
      assertEquals("M-", element0.nodeName());
      assertEquals((-793), element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("M-", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("M-", element0.tagName());
      
      Elements elements0 = element0.getElementsByAttributeValueEnding(":%s(%d)", "M-");
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("M-", tag0.toString());
      assertEquals("M-", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, element0.childNodeSize());
      assertEquals("M-", element0.nodeName());
      assertEquals((-793), element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("M-", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("M-", element0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      int int0 = element0.elementSiblingIndex();
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("M-", tag0.toString());
      assertEquals("M-", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, element0.childNodeSize());
      assertEquals("M-", element0.nodeName());
      assertEquals((-793), element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("M-", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("M-", element0.tagName());
      assertEquals(0, int0);
      
      String string1 = null;
      Elements elements1 = element0.getAllElements();
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("M-", tag0.toString());
      assertEquals("M-", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, element0.childNodeSize());
      assertEquals("M-", element0.nodeName());
      assertEquals((-793), element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("M-", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("M-", element0.tagName());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      
      List<Node> list0 = element0.childNodesCopy();
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("M-", tag0.toString());
      assertEquals("M-", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, element0.childNodeSize());
      assertEquals("M-", element0.nodeName());
      assertEquals((-793), element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("M-", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("M-", element0.tagName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        element0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Element element0 = new Element("Q6S5s=x7");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Q6S5s=x7", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Q6S5s=x7", element0.nodeName());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      element0.setSiblingIndex(697);
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(697, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Q6S5s=x7", element0.tagName());
      assertEquals("Q6S5s=x7", element0.nodeName());
      assertFalse(element0.isBlock());
      
      Elements elements0 = element0.getElementsByAttributeValueEnding("Q6S5s=x7", "Q6S5s=x7");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(697, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Q6S5s=x7", element0.tagName());
      assertEquals("Q6S5s=x7", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      int int0 = element0.elementSiblingIndex();
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(697, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Q6S5s=x7", element0.tagName());
      assertEquals("Q6S5s=x7", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, int0);
      
      Elements elements1 = element0.getElementsByClass("Q6S5s=x7");
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(697, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Q6S5s=x7", element0.tagName());
      assertEquals("Q6S5s=x7", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(elements1, elements0);
      
      Map<String, String> map0 = element0.dataset();
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(697, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Q6S5s=x7", element0.tagName());
      assertEquals("Q6S5s=x7", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "Q6S5s=x7");
      assertFalse(document0.hasParent());
      assertEquals("Q6S5s=x7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Q6S5s=x7", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element1 = document0.createElement("head");
      assertFalse(document0.hasParent());
      assertEquals("Q6S5s=x7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Q6S5s=x7", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("Q6S5s=x7", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(element1, element0);
      
      boolean boolean0 = element1.hasClass("N<OP");
      assertFalse(document0.hasParent());
      assertEquals("Q6S5s=x7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Q6S5s=x7", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("Q6S5s=x7", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.equals((Object)element0));
      assertFalse(boolean0);
      assertNotSame(element1, element0);
      
      Pattern pattern0 = Pattern.compile("v.0~%ih.?s6$[}<%w", 732);
      assertEquals("v.0~%ih.?s6$[}<%w", pattern0.pattern());
      assertEquals(732, pattern0.flags());
      assertEquals("v.0~%ih.?s6$[}<%w", pattern0.toString());
      assertNotNull(pattern0);
      
      String[] stringArray0 = pattern0.split((CharSequence) "org.jsoup.helper.ChangeNotifyingArrayList", 0);
      assertEquals(1, stringArray0.length);
      assertEquals("v.0~%ih.?s6$[}<%w", pattern0.pattern());
      assertEquals(732, pattern0.flags());
      assertEquals("v.0~%ih.?s6$[}<%w", pattern0.toString());
      assertNotNull(stringArray0);
      
      Elements elements2 = document0.getElementsMatchingText(pattern0);
      assertFalse(document0.hasParent());
      assertEquals("Q6S5s=x7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Q6S5s=x7", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("v.0~%ih.?s6$[}<%w", pattern0.pattern());
      assertEquals(732, pattern0.flags());
      assertEquals("v.0~%ih.?s6$[}<%w", pattern0.toString());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertTrue(elements2.equals((Object)elements0));
      assertTrue(elements2.equals((Object)elements1));
      assertNotNull(elements2);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(document0.hasParent());
      assertEquals("Q6S5s=x7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Q6S5s=x7", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        element0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("{", "R%MNd6");
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("R%MNd6", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("R%MNd6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("R%MNd6", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("R%MNd6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("R%MNd6", document1.location());
      assertEquals("R%MNd6", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Tag tag0 = Tag.valueOf("textarea", (ParseSettings) null);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.formatAsBlock());
      assertNotNull(tag0);
      
      Elements elements0 = document0.getElementsByTag("textarea");
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("R%MNd6", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("R%MNd6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      
      CDataNode cDataNode0 = new CDataNode("{");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.formatAsBlock());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("textarea", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.isBlock());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("textarea", pseudoTextElement0.nodeName());
      assertNotNull(pseudoTextElement0);
      
      List<Node> list0 = pseudoTextElement0.childNodesCopy();
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.formatAsBlock());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals("textarea", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.isBlock());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("textarea", pseudoTextElement0.nodeName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      String string0 = "ODpc0ce<N";
      Document document2 = (Document)document0.appendText("ODpc0ce<N");
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("R%MNd6", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("R%MNd6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("R%MNd6", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("R%MNd6", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      
      // Undeclared exception!
      try { 
        document2.text("R%MNd6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`/", "l63o?][t2%O$%??}");
      assertEquals("#root", document0.tagName());
      assertEquals("l63o?][t2%O$%??}", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("l63o?][t2%O$%??}", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Node node0 = document0.nextSibling();
      assertEquals("#root", document0.tagName());
      assertEquals("l63o?][t2%O$%??}", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("l63o?][t2%O$%??}", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNull(node0);
      
      Set<String> set0 = document0.classNames();
      assertEquals("#root", document0.tagName());
      assertEquals("l63o?][t2%O$%??}", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("l63o?][t2%O$%??}", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains("`/"));
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "");
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      String string0 = "org.jsoup.select.Evaluator$AttributeKeyPair";
      String string1 = "org.jsoup.nodes.Attributes$Dataset$DatasetIterator";
      Elements elements0 = document0.getElementsByAttributeValueEnding("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", "org.jsoup.select.Evaluator$AttributeKeyPair");
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      int int0 = document0.elementSiblingIndex();
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, int0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parse("M-", "M-");
      assertFalse(document0.isBlock());
      assertEquals("M-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("M-", document0.baseUri());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("M-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("M-", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("M-", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("M-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsMatchingOwnText("M-");
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("M-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("M-", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("M-", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("M-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements1 = document1.getElementsContainingText("M-");
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("M-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("M-", document0.baseUri());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("M-", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("M-", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(3, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      
      Document document2 = Parser.parseBodyFragment("", "M-");
      assertEquals("M-", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("M-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      CDataNode cDataNode0 = new CDataNode("class");
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Document document3 = Parser.parseBodyFragmentRelaxed("br", "br");
      assertEquals("br", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("br", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document4 = (Document)document0.traverse(nodeVisitor0);
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("M-", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("M-", document0.baseUri());
      assertEquals("M-", document4.location());
      assertFalse(document4.hasParent());
      assertEquals(Document.QuirksMode.limitedQuirks, document4.quirksMode());
      assertFalse(document4.isBlock());
      assertEquals("M-", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("#document", document4.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertNotNull(document4);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertSame(document4, document1);
      assertSame(document4, document0);
      
      Document document5 = (Document)document2.appendTo(document3);
      assertEquals("M-", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("M-", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("br", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("br", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertFalse(document5.isBlock());
      assertEquals("M-", document5.baseUri());
      assertEquals("M-", document5.location());
      assertTrue(document5.hasParent());
      assertEquals("#root", document5.tagName());
      assertEquals(1, document5.siblingIndex());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document1));
      assertNotNull(document5);
      assertNotSame(document2, document1);
      assertSame(document2, document5);
      assertNotSame(document2, document0);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document3, document5);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document4);
      assertNotSame(document5, document3);
      assertSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document0);
      assertNotSame(document5, document1);
      
      Elements elements2 = document3.siblingElements();
      assertEquals("br", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("br", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertNotNull(elements2);
      assertNotSame(document3, document5);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document4);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
      
      String string0 = document3.wholeText();
      assertEquals("br", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals("br", document3.baseUri());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.equals((Object)document5));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document4));
      assertEquals("br", string0);
      assertNotNull(string0);
      assertNotSame(document3, document5);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document1);
      assertNotSame(document3, document4);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "k");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("k", document0.baseUri());
      assertEquals("k", document0.location());
      assertNotNull(document0);
      
      Map<String, String> map0 = document0.dataset();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("k", document0.baseUri());
      assertEquals("k", document0.location());
      assertTrue(map0.isEmpty());
      assertEquals(0, map0.size());
      assertNotNull(map0);
      
      String string0 = document0.text();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("k", document0.baseUri());
      assertEquals("k", document0.location());
      assertEquals("org.jsoup.nodes.Element$2", string0);
      assertNotNull(string0);
      
      Elements elements0 = document0.siblingElements();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("k", document0.baseUri());
      assertEquals("k", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      Document document1 = (Document)document0.appendText("org.jsoup.nodes.Element$2");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("k", document0.baseUri());
      assertEquals("k", document0.location());
      assertEquals("k", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("k", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Locale locale0 = Locale.CHINESE;
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertEquals("zh", locale0.getLanguage());
      assertEquals("", locale0.getISO3Country());
      assertEquals("", locale0.getCountry());
      assertEquals("zh", locale0.toString());
      assertEquals("", locale0.getVariant());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      assertFalse(set0.contains(string0));
      
      Set<String> set1 = document0.classNames();
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("k", document0.baseUri());
      assertEquals("k", document0.location());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertTrue(set1.equals((Object)set0));
      assertNotNull(set1);
      assertSame(document0, document1);
      assertFalse(set1.contains(string0));
      
      Document document2 = (Document)document1.classNames(set1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("k", document0.baseUri());
      assertEquals("k", document0.location());
      assertEquals("k", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("k", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, set1.size());
      assertTrue(set1.isEmpty());
      assertEquals("k", document2.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("k", document2.location());
      assertTrue(set1.equals((Object)set0));
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(set1.contains(string0));
      
      Elements elements1 = document1.getElementsByAttributeValueContaining("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("k", document0.baseUri());
      assertEquals("k", document0.location());
      assertEquals("k", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("k", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, elements1.size());
      assertTrue(elements1.isEmpty());
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(elements1, elements0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parse("387tbW2!F", "XqX`m(w7:;'mG1.^1=");
      assertFalse(document0.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("387tbW2!F");
      assertFalse(document0.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("XqX`m(w7:;'mG1.^1=", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.clone();
      assertFalse(document0.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("XqX`m(w7:;'mG1.^1=", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document3 = document0.parser(parser1);
      assertFalse(document0.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("XqX`m(w7:;'mG1.^1=", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("XqX`m(w7:;'mG1.^1=", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      
      Tag tag0 = document3.tag();
      assertFalse(document0.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("XqX`m(w7:;'mG1.^1=", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("XqX`m(w7:;'mG1.^1=", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertEquals("#root", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.getName());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(tag0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("]mijY5ik8U\"+%dAp:", "q?0^|F_gt=sHHrr");
      assertFalse(document0.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document2));
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      
      List<DataNode> list0 = document0.dataNodes();
      assertFalse(document0.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertNotNull(list0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      
      Element element0 = document0.getElementById("387tbW2!F");
      assertFalse(document0.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertFalse(document0.equals((Object)document2));
      assertNull(element0);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      
      String string0 = Parser.unescapeEntities("br", false);
      assertEquals("br", string0);
      assertNotNull(string0);
      
      Document document4 = (Document)document1.attr("387tbW2!F", true);
      assertFalse(document0.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("XqX`m(w7:;'mG1.^1=", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document4.nodeName());
      assertFalse(document4.isBlock());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("XqX`m(w7:;'mG1.^1=", document4.location());
      assertFalse(document4.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document4.baseUri());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document4.equals((Object)document2));
      assertNotNull(document4);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document1, document4);
      assertSame(document4, document1);
      assertSame(document4, document0);
      assertNotSame(document4, document2);
      assertSame(document4, document3);
      
      Elements elements1 = document3.getElementsByIndexGreaterThan((-1012));
      assertFalse(document0.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("XqX`m(w7:;'mG1.^1=", document3.baseUri());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.hasParent());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("XqX`m(w7:;'mG1.^1=", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertEquals(4, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document2);
      assertSame(document0, document3);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document3, document4);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(elements1, elements0);
      
      // Undeclared exception!
      try { 
        document1.selectFirst("{>{xu?;7s");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '{>{xu?;7s': unexpected token at '{>{xu?;7s'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "88");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals("88", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.normalise();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals("88", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("88", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("88", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      List<Node> list0 = Parser.parseFragment("org.jsoup.nodes.Element$2", (Element) document0, "");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Element element0 = (Element)document1.childNode(0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals("88", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("88", element0.baseUri());
      assertEquals("html", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("html", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      Document document3 = Parser.parseBodyFragmentRelaxed("& >b#v#[%.j`]d", "6J]h^61 _~,");
      assertEquals("6J]h^61 _~,", document3.location());
      assertEquals("6J]h^61 _~,", document3.baseUri());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document4 = (Document)document0.traverse(nodeVisitor0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document4.isBlock());
      assertEquals("#document", document4.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("88", document4.location());
      assertEquals(0, document4.siblingIndex());
      assertEquals("#root", document4.tagName());
      assertEquals("88", document4.baseUri());
      assertFalse(document4.hasParent());
      assertEquals(1, document4.childNodeSize());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertNotNull(document4);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document4, document1);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("6J]h^61 _~,", parseSettings0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertEquals("6J]h^61 _~,", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("6J]h^61 _~,", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Element element1 = new Element(tag0, "body", attributes0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertEquals("6J]h^61 _~,", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("6J]h^61 _~,", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals(0, attributes0.size());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("6J]h^61 _~,", element1.tagName());
      assertEquals("body", element1.baseUri());
      assertEquals("6J]h^61 _~,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      
      Document document5 = (Document)document0.appendTo(element1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertEquals("6J]h^61 _~,", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("6J]h^61 _~,", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals(0, attributes0.size());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("6J]h^61 _~,", element1.tagName());
      assertEquals("body", element1.baseUri());
      assertEquals("6J]h^61 _~,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertTrue(document5.hasParent());
      assertEquals("88", document5.baseUri());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals("88", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document0.equals((Object)document3));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document5.equals((Object)document3));
      assertNotNull(document5);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertNotSame(element1, element0);
      assertNotSame(document5, document3);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertSame(document5, document4);
      assertSame(document5, document1);
      
      Elements elements0 = document2.siblingElements();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals("88", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("88", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("88", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("88", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertSame(document1, document4);
      assertNotSame(document1, document3);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document5);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      
      String string0 = document0.wholeText();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.equals((Object)document3));
      assertEquals("org.jsoup.nodes.Element$2", string0);
      assertNotNull(string0);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document5);
      
      Document document6 = (Document)document5.append("html");
      assertEquals("#root", document6.tagName());
      assertEquals(2, document6.childNodeSize());
      assertEquals("88", document6.baseUri());
      assertFalse(document6.isBlock());
      assertEquals(0, document6.siblingIndex());
      assertEquals("88", document6.location());
      assertFalse(document6.updateMetaCharsetElement());
      assertTrue(document6.hasParent());
      assertEquals("#document", document6.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document6.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertEquals("6J]h^61 _~,", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("6J]h^61 _~,", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertEquals(0, attributes0.size());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("6J]h^61 _~,", element1.tagName());
      assertEquals("body", element1.baseUri());
      assertEquals("6J]h^61 _~,", element1.nodeName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals(2, document5.childNodeSize());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertTrue(document5.hasParent());
      assertEquals("88", document5.baseUri());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals("88", document5.location());
      assertEquals(0, document5.siblingIndex());
      assertFalse(document6.equals((Object)document3));
      assertFalse(document0.equals((Object)document3));
      assertFalse(element1.equals((Object)element0));
      assertFalse(document5.equals((Object)document3));
      assertNotNull(document6);
      assertNotSame(document6, document3);
      assertSame(document6, document1);
      assertSame(document6, document0);
      assertSame(document6, document5);
      assertSame(document6, document4);
      assertSame(document6, document2);
      assertSame(document0, document1);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document5);
      assertSame(document0, document6);
      assertNotSame(element1, element0);
      assertNotSame(document5, document3);
      assertSame(document5, document6);
      assertSame(document5, document2);
      assertSame(document5, document0);
      assertSame(document5, document4);
      assertSame(document5, document1);
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      boolean boolean0 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "M~&");
      assertFalse(boolean0);
      
      String string0 = "org.jsoup.select.Evaluator$MatchesOwn";
      Document document0 = parser0.parseInput("}h8uYw'", "org.jsoup.select.Evaluator$MatchesOwn");
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(8212);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      boolean boolean1 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      assertTrue(boolean1 == boolean0);
      assertFalse(boolean1);
      
      boolean boolean2 = FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "org.jsoup.select.Evaluator$MatchesOwn");
      assertTrue(boolean2 == boolean1);
      assertTrue(boolean2 == boolean0);
      assertFalse(boolean2);
      
      List<Node> list0 = Parser.parseFragment("#root", (Element) document0, "#root", parseErrorList0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertSame(document0, document1);
      
      Elements elements0 = document1.getElementsByAttributeValueNot("html", "#root");
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$MatchesOwn", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document1.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "88");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("88", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.normalise();
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("88", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("88", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("88", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      String string0 = "1Cs]*9GIiUO+R-o_l1h";
      List<Node> list0 = Parser.parseFragment("", (Element) document0, "org.jsoup.nodes.Element$2");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Element element0 = (Element)document2.childNode(0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("88", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("88", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("88", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("88", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals("html", element0.nodeName());
      assertEquals("88", element0.baseUri());
      assertEquals("html", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "1Cs]*9GIiUO+R-o_l1h");
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("1Cs]*9GIiUO+R-o_l1h", document3.baseUri());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("1Cs]*9GIiUO+R-o_l1h", document3.location());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      
      // Undeclared exception!
      try { 
        document2.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = Parser.xmlParser();
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser1.equals((Object)parser0));
      assertNotNull(parser1);
      assertNotSame(parser1, parser0);
      
      Document document1 = document0.parser(parser0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(parser0.equals((Object)parser1));
      assertNotNull(document1);
      assertSame(document0, document1);
      assertNotSame(parser0, parser1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("Insert position out of bounds.");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.clone();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.childNodeSize());
      assertEquals("Insert position out of bounds.", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(document3);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      
      Tag tag0 = document0.tag();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("#root", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(document0.equals((Object)document3));
      assertNotNull(tag0);
      assertSame(document0, document2);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      
      Document document4 = (Document)document2.removeClass("Insert position out of bounds.");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document4.location());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertFalse(document4.hasParent());
      assertEquals("Insert position out of bounds.", document4.baseUri());
      assertEquals("#document", document4.nodeName());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document4.equals((Object)document3));
      assertNotNull(document4);
      assertSame(document0, document2);
      assertSame(document0, document4);
      assertNotSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document4);
      assertNotSame(document2, document3);
      assertSame(document2, document0);
      assertNotSame(document4, document3);
      assertSame(document4, document0);
      assertSame(document4, document2);
      assertSame(document4, document1);
      
      // Undeclared exception!
      try { 
        document2.text("Insert position out of bounds.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parse("387tbW2!F", "XqX`m(w7:;'mG1.^1=");
      assertEquals("#root", document0.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("387tbW2!F");
      assertEquals("#root", document0.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("XqX`m(w7:;'mG1.^1=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Comment comment0 = new Comment((String) null, "br");
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      Elements elements0 = document0.getElementsByAttributeValueNot("tYi(", "XqX`m(w7:;'mG1.^1=");
      assertEquals("#root", document0.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      // Undeclared exception!
      try { 
        comment0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Document.createShell("html");
      assertEquals("html", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("html", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("html", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("html", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("html", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      assertFalse(fileDescriptor0.valid());
      assertNotNull(fileDescriptor0);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
      assertNotNull(mockFileOutputStream0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      CharsetEncoder charsetEncoder0 = document_OutputSettings1.prepareEncoder();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(charsetEncoder0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charsetEncoder0);
      assertFalse(fileDescriptor0.valid());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertNotNull(outputStreamWriter0);
      
      element0.outerHtmlTail(outputStreamWriter0, (-1625949436), document_OutputSettings1);
      assertEquals("html", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("html", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("html", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(fileDescriptor0.valid());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.xhtml, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1.1F, charsetEncoder0.averageBytesPerChar(), 0.01F);
      assertEquals(3.0F, charsetEncoder0.maxBytesPerChar(), 0.01F);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vn9MZq1E&", "vn9MZq1E&");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("vn9MZq1E&", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("vn9MZq1E&", document0.location());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasClass("p.gtxgirP{@t=+=");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("vn9MZq1E&", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("vn9MZq1E&", document0.location());
      assertFalse(boolean0);
      
      Document document1 = document0.normalise();
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("vn9MZq1E&", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("vn9MZq1E&", document0.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("vn9MZq1E&", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("vn9MZq1E&", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      List<Node> list0 = document1.ensureChildNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("vn9MZq1E&", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("vn9MZq1E&", document0.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("vn9MZq1E&", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("vn9MZq1E&", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.appendTo(document1);
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("vn9MZq1E&", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("vn9MZq1E&", document0.location());
      assertEquals("vn9MZq1E&", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("vn9MZq1E&", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("vn9MZq1E&", document2.location());
      assertEquals("vn9MZq1E&", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      document2.removeChild(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("vn9MZq1E&", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("vn9MZq1E&", document0.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("vn9MZq1E&", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("vn9MZq1E&", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("vn9MZq1E&", document2.location());
      assertEquals("vn9MZq1E&", document2.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Element element0 = document0.head();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("vn9MZq1E&", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("vn9MZq1E&", document0.location());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals("vn9MZq1E&", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Element element1 = element0.attr("body", false);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("vn9MZq1E&", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("vn9MZq1E&", document0.location());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals("vn9MZq1E&", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("vn9MZq1E&", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      try { 
        document0.before("vn9MZq1E&");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = "0)Bs2";
      Document document0 = Parser.parse("0)Bs2", "0)Bs2");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("0)Bs2", document0.location());
      assertEquals("0)Bs2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.attr("0)Bs2", false);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("0)Bs2", document0.location());
      assertEquals("0)Bs2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("0)Bs2", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("0)Bs2", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsByAttributeStarting("head");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("0)Bs2", document0.location());
      assertEquals("0)Bs2", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("0)Bs2", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("0)Bs2", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document1.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = new Document("");
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = document0.nextElementSibling();
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertNull(element0);
      
      Comment comment0 = new Comment("", "!_2of");
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertNotNull(comment0);
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      Element element1 = document0.head();
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertNull(element1);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = Parser.parse("!_2of", "!_2of");
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("!_2of", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("!_2of", document2.location());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Attributes attributes0 = document2.attributes();
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertEquals("!_2of", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("!_2of", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(0, attributes0.size());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(attributes0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parse("387tbW2!F", "XqX`m(w7:;'mG1.^1=");
      assertEquals("#root", document0.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("387tbW2!F");
      assertEquals("#root", document0.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.clone();
      assertEquals("#root", document0.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("XqX`m(w7:;'mG1.^1=", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("XqX`m(w7:;'mG1.^1=", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      Document document3 = (Document)document1.text("XqX`m(w7:;'mG1.^1=");
      assertEquals("#root", document0.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("XqX`m(w7:;'mG1.^1=", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertFalse(document3.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document0.equals((Object)document2));
      assertFalse(document1.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document1, document3);
      assertNotSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      // Undeclared exception!
      try { 
        document3.child((-910));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parse("387tbW2!F", "XqX`m(w7:;'mG1.^1=");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = (Document)document0.addClass("387tbW2!F");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("XqX`m(w7:;'mG1.^1=", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("XqX`m(w7:;'mG1.^1=", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Comment comment0 = new Comment((String) null, "387tbW2!F");
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      Document document2 = document0.quirksMode(document_QuirksMode0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("XqX`m(w7:;'mG1.^1=", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("XqX`m(w7:;'mG1.^1=", document2.location());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Attributes attributes0 = document2.attributes();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.quirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("XqX`m(w7:;'mG1.^1=", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.quirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("XqX`m(w7:;'mG1.^1=", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("{", "R%MNd6");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("R%MNd6", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R%MNd6", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("R%MNd6", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R%MNd6", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("R%MNd6", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("R%MNd6", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Tag tag0 = Tag.valueOf("textarea", (ParseSettings) null);
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.preserveWhitespace());
      assertEquals("textarea", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Elements elements0 = document1.getElementsByAttributeStarting("textarea");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("R%MNd6", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R%MNd6", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("R%MNd6", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("R%MNd6", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertNotNull(elements0);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Map<String, String> map0 = document0.dataset();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("R%MNd6", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R%MNd6", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertFalse(document0.equals((Object)document1));
      assertNotNull(map0);
      assertNotSame(document0, document1);
      
      Element element0 = document0.createElement("org.jsoup.helper.ChangeNotifyingArrayList");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("R%MNd6", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R%MNd6", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.helper.ChangeNotifyingArrayList", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.helper.ChangeNotifyingArrayList", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("R%MNd6", element0.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertNotNull(element0);
      assertNotSame(document0, document1);
      
      boolean boolean0 = element0.hasClass("N<OP");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("R%MNd6", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R%MNd6", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.helper.ChangeNotifyingArrayList", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.helper.ChangeNotifyingArrayList", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("R%MNd6", element0.baseUri());
      assertFalse(document0.equals((Object)document1));
      assertFalse(boolean0);
      assertNotSame(document0, document1);
      
      Pattern pattern0 = Pattern.compile("dVisZy.r-:e.tsmR[X", 732);
      assertEquals(732, pattern0.flags());
      assertEquals("dVisZy.r-:e.tsmR[X", pattern0.pattern());
      assertEquals("dVisZy.r-:e.tsmR[X", pattern0.toString());
      assertNotNull(pattern0);
      
      char[] charArray0 = new char[1];
      charArray0[0] = 'K';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(1, charArray0.length);
      assertEquals(1, charBuffer0.limit());
      assertEquals("K", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertArrayEquals(new char[] {'K'}, charArray0);
      assertNotNull(charBuffer0);
      
      String[] stringArray0 = pattern0.split((CharSequence) charBuffer0, (-825));
      assertEquals(1, charArray0.length);
      assertEquals(1, stringArray0.length);
      assertEquals(732, pattern0.flags());
      assertEquals("dVisZy.r-:e.tsmR[X", pattern0.pattern());
      assertEquals("dVisZy.r-:e.tsmR[X", pattern0.toString());
      assertEquals(1, charBuffer0.limit());
      assertEquals("K", charBuffer0.toString());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.arrayOffset());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.remaining());
      assertArrayEquals(new char[] {'K'}, charArray0);
      assertNotNull(stringArray0);
      
      Elements elements1 = document0.getElementsMatchingText(pattern0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("R%MNd6", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R%MNd6", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(732, pattern0.flags());
      assertEquals("dVisZy.r-:e.tsmR[X", pattern0.pattern());
      assertEquals("dVisZy.r-:e.tsmR[X", pattern0.toString());
      assertTrue(elements1.isEmpty());
      assertEquals(0, elements1.size());
      assertFalse(document0.equals((Object)document1));
      assertTrue(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document0, document1);
      assertNotSame(elements1, elements0);
      
      List<TextNode> list0 = document0.textNodes();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("R%MNd6", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R%MNd6", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.equals((Object)document1));
      assertNotNull(list0);
      assertNotSame(document0, document1);
      
      Element element1 = element0.prependElement("textarea");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("R%MNd6", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R%MNd6", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("org.jsoup.helper.ChangeNotifyingArrayList", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.helper.ChangeNotifyingArrayList", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("R%MNd6", element0.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("R%MNd6", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("textarea", element1.tagName());
      assertEquals("textarea", element1.nodeName());
      assertTrue(element1.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(document0, document1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String string0 = element1.tagName();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("R%MNd6", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R%MNd6", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("org.jsoup.helper.ChangeNotifyingArrayList", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.helper.ChangeNotifyingArrayList", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("R%MNd6", element0.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("R%MNd6", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("textarea", element1.tagName());
      assertEquals("textarea", element1.nodeName());
      assertTrue(element1.hasParent());
      assertFalse(document0.equals((Object)document1));
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals("textarea", string0);
      assertNotNull(string0);
      assertNotSame(document0, document1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parse("M-", "M-");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("M-", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("M-", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("M-", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("M-", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("M-", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("M-", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.getElementsMatchingOwnText("M-");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("M-", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("M-", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("M-", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("M-", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements1 = document1.getElementsContainingText("M-");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.limitedQuirks, document0.quirksMode());
      assertEquals("M-", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("M-", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("M-", document1.location());
      assertEquals(Document.QuirksMode.limitedQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("M-", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(elements1.isEmpty());
      assertEquals(3, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotSame(elements1, elements0);
      
      Document document2 = Parser.parseBodyFragment("", "M-");
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals("M-", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals("M-", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotNull(document2);
      assertNotSame(document2, document0);
      assertNotSame(document2, document1);
      
      CDataNode cDataNode0 = new CDataNode("class");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      List<Node> list0 = cDataNode0.siblingNodes();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Node node0 = cDataNode0.clone();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertFalse(node0.hasParent());
      assertEquals("#cdata", node0.nodeName());
      assertFalse(node0.equals((Object)cDataNode0));
      assertNotNull(node0);
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      
      // Undeclared exception!
      try { 
        document2.before(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parse("#root", "html");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("html", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("html", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("XqX`m(w7:;'mG1.^1=");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("html", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("html", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("html", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("html", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Comment comment0 = new Comment(":MCRT[B^S>G$%", "");
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertNotNull(comment0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Parser parser1 = parser0.settings(parseSettings0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertNotNull(parser1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document2 = parser1.parseInput("html", "</");
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals("</", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("</", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.equals((Object)document1));
      assertFalse(document2.equals((Object)document0));
      assertNotNull(document2);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertNotSame(document2, document1);
      assertNotSame(document2, document0);
      
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) comment0;
      nodeArray0[2] = (Node) document2;
      nodeArray0[3] = (Node) comment0;
      // Undeclared exception!
      try { 
        document2.insertChildren((-520), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = new Document("XqX`m(w7:;'mG1.^1=");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = (Document)document0.addClass("387tbW2!F");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document1.location());
      assertEquals("XqX`m(w7:;'mG1.^1=", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document1;
      Comment comment0 = new Comment((String) null, "387tbW2!F");
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      nodeArray0[6] = (Node) comment0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = "Q6S5s=x7";
      Element element0 = new Element("Q6S5s=x7");
      assertEquals("Q6S5s=x7", element0.nodeName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Q6S5s=x7", element0.tagName());
      assertNotNull(element0);
      
      element0.setSiblingIndex(697);
      assertEquals("Q6S5s=x7", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(697, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("Q6S5s=x7", element0.tagName());
      
      Elements elements0 = element0.getElementsByAttributeValueEnding("Q6S5s=x7", "Q6S5s=x7");
      assertEquals("Q6S5s=x7", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(697, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("Q6S5s=x7", element0.tagName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      int int0 = element0.elementSiblingIndex();
      assertEquals("Q6S5s=x7", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(697, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("Q6S5s=x7", element0.tagName());
      assertEquals(0, int0);
      
      String string1 = null;
      // Undeclared exception!
      try { 
        element0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parse("387tbW2!F", "XqX`m(w7:;'mG1.^1=");
      assertFalse(document0.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = (Document)document0.addClass("387tbW2!F");
      assertFalse(document0.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("XqX`m(w7:;'mG1.^1=", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      int int0 = 0;
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document1;
      Comment comment0 = new Comment((String) null, "387tbW2!F");
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueNot((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parse("387tbW2!F", "XqX`m(w7:;'mG1.^1=");
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("387tbW2!F");
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document1.location());
      assertEquals("XqX`m(w7:;'mG1.^1=", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[1] = (Node) document1;
      Document document2 = (Document)document0.toggleClass("org.jsoup.select.Evaluator");
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("XqX`m(w7:;'mG1.^1=", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("XqX`m(w7:;'mG1.^1=", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document0.children();
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      String string0 = " >:";
      Document document3 = Parser.parseBodyFragment("org.jsoup.select.Evaluator", ">");
      assertEquals(">", document3.baseUri());
      assertEquals(">", document3.location());
      assertEquals("#root", document3.tagName());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(document3, document0);
      
      // Undeclared exception!
      try { 
        document1.outerHtml((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("Insert position out of bounds.", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("Insert position out of bounds.");
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Comment comment0 = new Comment((String) null, "body");
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      Pattern pattern0 = Pattern.compile("body");
      assertEquals("body", pattern0.pattern());
      assertEquals(0, pattern0.flags());
      assertEquals("body", pattern0.toString());
      assertNotNull(pattern0);
      
      Document document3 = (Document)document2.append("textarea");
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals("#root", document3.tagName());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Insert position out of bounds.", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertSame(document2, document0);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Document document4 = Parser.parseBodyFragmentRelaxed("body", "L%5c_V1VX!b3l");
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals("L%5c_V1VX!b3l", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals("L%5c_V1VX!b3l", document4.location());
      assertFalse(document4.hasParent());
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertNotNull(document4);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      
      Elements elements0 = document2.getElementsMatchingOwnText("Insert position out of bounds.");
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document2.equals((Object)document4));
      assertNotNull(elements0);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document3);
      assertNotSame(document2, document4);
      assertSame(document2, document0);
      
      Document document5 = new Document("=\"");
      assertEquals("=\"", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("=\"", document5.location());
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertNotNull(document5);
      
      boolean boolean0 = document1.hasText();
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document0.equals((Object)document4));
      assertFalse(document0.equals((Object)document5));
      assertFalse(document1.equals((Object)document5));
      assertFalse(document1.equals((Object)document4));
      assertTrue(boolean0);
      assertSame(document0, document1);
      assertSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document2);
      assertNotSame(document0, document5);
      assertSame(document1, document0);
      assertNotSame(document1, document5);
      assertSame(document1, document3);
      assertSame(document1, document2);
      assertNotSame(document1, document4);
      
      Elements elements1 = document4.children();
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals("#document", document4.nodeName());
      assertEquals("L%5c_V1VX!b3l", document4.baseUri());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document4.isBlock());
      assertEquals("L%5c_V1VX!b3l", document4.location());
      assertFalse(document4.hasParent());
      assertEquals(1, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document5));
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertNotSame(document4, document1);
      assertNotSame(document4, document0);
      assertNotSame(document4, document2);
      assertNotSame(document4, document3);
      assertNotSame(document4, document5);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = document5.getElementsByIndexEquals((-1069));
      assertEquals("=\"", document5.baseUri());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(0, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertEquals("#root", document5.tagName());
      assertFalse(document5.isBlock());
      assertEquals(0, document5.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertFalse(document5.hasParent());
      assertEquals("=\"", document5.location());
      assertEquals(0, elements2.size());
      assertTrue(elements2.isEmpty());
      assertFalse(document5.equals((Object)document0));
      assertFalse(document5.equals((Object)document2));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertFalse(document5.equals((Object)document1));
      assertFalse(elements2.equals((Object)elements1));
      assertTrue(elements2.equals((Object)elements0));
      assertNotNull(elements2);
      assertNotSame(document5, document0);
      assertNotSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertNotSame(document5, document1);
      assertNotSame(elements2, elements1);
      assertNotSame(elements2, elements0);
      
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "88");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("88", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.normalise();
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("88", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("88", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("88", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Node node0 = document1.nextSibling();
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("88", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.baseUri());
      assertNull(node0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      
      List<Node> list0 = Parser.parseFragment("", (Element) document0, "org.jsoup.nodes.Element$2");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      
      Element element0 = (Element)document2.childNode(0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("88", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("88", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("88", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals("html", element0.nodeName());
      assertEquals("88", element0.baseUri());
      assertEquals("html", element0.tagName());
      assertNotNull(element0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "1Cs]*9GIiUO+R-o_l1h");
      assertFalse(document3.hasParent());
      assertEquals("1Cs]*9GIiUO+R-o_l1h", document3.baseUri());
      assertEquals("1Cs]*9GIiUO+R-o_l1h", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertNotNull(document3);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Elements elements0 = document2.getElementsMatchingOwnText("88");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("88", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("88", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("88", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertNotNull(elements0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      
      boolean boolean0 = document2.hasText();
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("88", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("88", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("88", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertTrue(boolean0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      
      Elements elements1 = element0.children();
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("88", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("88", document0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("88", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("88", document1.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("88", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("88", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals("html", element0.nodeName());
      assertEquals("88", element0.baseUri());
      assertEquals("html", element0.tagName());
      assertEquals(2, elements1.size());
      assertFalse(elements1.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document2.equals((Object)document3));
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertNotSame(document0, document3);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document3);
      assertNotSame(elements1, elements0);
      
      Elements elements2 = document3.getElementsByIndexEquals(0);
      assertFalse(document3.hasParent());
      assertEquals("1Cs]*9GIiUO+R-o_l1h", document3.baseUri());
      assertEquals("1Cs]*9GIiUO+R-o_l1h", document3.location());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(3, elements2.size());
      assertFalse(elements2.isEmpty());
      assertFalse(document3.equals((Object)document0));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
      assertFalse(elements2.equals((Object)elements0));
      assertFalse(elements2.equals((Object)elements1));
      assertNotNull(elements2);
      assertNotSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = "Insert position out of bounds.";
      Document document0 = new Document("Insert position out of bounds.");
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.attr("Tag name must not be empty.", (String) null);
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Insert position out of bounds.", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("Insert position out of bounds.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Parser parser1 = Parser.xmlParser();
      assertFalse(parser1.isTrackErrors());
      assertFalse(parser1.equals((Object)parser0));
      assertNotNull(parser1);
      assertNotSame(parser1, parser0);
      
      Document document2 = document0.parser(parser0);
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals("Insert position out of bounds.", document2.baseUri());
      assertEquals(0, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("Insert position out of bounds.", document2.location());
      assertFalse(document2.isBlock());
      assertFalse(parser0.equals((Object)parser1));
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(parser0, parser1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document0.addClass("Insert position out of bounds.");
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("Insert position out of bounds.", document3.location());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("Insert position out of bounds.", document3.baseUri());
      assertFalse(document3.hasParent());
      assertFalse(document3.updateMetaCharsetElement());
      assertNotNull(document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      
      Document document4 = (Document)document0.clone();
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document4.nodeName());
      assertEquals("Insert position out of bounds.", document4.baseUri());
      assertFalse(document4.isBlock());
      assertEquals(0, document4.siblingIndex());
      assertEquals("Insert position out of bounds.", document4.location());
      assertFalse(document4.hasParent());
      assertEquals("#root", document4.tagName());
      assertFalse(document4.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertEquals(0, document4.childNodeSize());
      assertFalse(document4.equals((Object)document0));
      assertFalse(document4.equals((Object)document3));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document1));
      assertNotNull(document4);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertNotSame(document4, document0);
      assertNotSame(document4, document3);
      assertNotSame(document4, document2);
      assertNotSame(document4, document1);
      
      Tag tag0 = document0.tag();
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(tag0.isSelfClosing());
      assertEquals("#root", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(document0.equals((Object)document4));
      assertNotNull(tag0);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      
      // Undeclared exception!
      try { 
        document2.replaceChild(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      String string0 = document0.baseUri();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", string0);
      assertNotNull(string0);
      
      String string1 = "'*f1";
      Document document1 = (Document)document0.addClass("'*f1");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("", "'*f1");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(document0, document1);
      
      Document document2 = (Document)document1.attr("'*f1", "g(=ePz=Sp=");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertNotNull(document2);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document1.prependChild(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertEquals("", document3.baseUri());
      assertEquals("", document3.location());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("#document", document3.nodeName());
      assertEquals(2, document3.childNodeSize());
      assertTrue(document3.hasParent());
      assertNotNull(document3);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document3, document2);
      assertSame(document3, document1);
      assertSame(document3, document0);
      
      String string2 = document1.val();
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(string2.equals((Object)string1));
      assertTrue(string2.equals((Object)string0));
      assertEquals("", string2);
      assertNotNull(string2);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      
      Map<String, String> map0 = document2.dataset();
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertEquals(0, map0.size());
      assertTrue(map0.isEmpty());
      assertNotNull(map0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      
      boolean boolean0 = document2.hasAttr("'*f1");
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("", document2.location());
      assertTrue(boolean0);
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document3);
      assertSame(document1, document0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertSame(document2, document3);
      
      // Undeclared exception!
      try { 
        document0.select("                ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '                ': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = new Document("");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.nextElementSibling();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNull(element0);
      
      // Undeclared exception!
      try { 
        document0.text("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parse("387tbW2!F", "XqX`m(w7:;'mG1.^1=");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = (Document)document0.addClass("387tbW2!F");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.location());
      assertEquals("XqX`m(w7:;'mG1.^1=", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("XqX`m(w7:;'mG1.^1=", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("XqX`m(w7:;'mG1.^1=", document1.baseUri());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document1;
      Comment comment0 = new Comment((String) null, "387tbW2!F");
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertNotNull(comment0);
      
      nodeArray0[6] = (Node) comment0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(">", parseSettings0);
      assertFalse(tag0.isData());
      assertEquals(">", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode(":w>z<Bex");
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Attributes attributes1 = attributes0.put("n6g7nb<=*Ge$", false);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, ">", attributes1);
      assertFalse(tag0.isData());
      assertEquals(">", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.isBlock());
      assertEquals(">", formElement0.nodeName());
      assertEquals(">", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(">", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertNotNull(formElement0);
      
      Elements elements0 = formElement0.getElementsByClass(":w>z<Bex");
      assertFalse(tag0.isData());
      assertEquals(">", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.isBlock());
      assertEquals(">", formElement0.nodeName());
      assertEquals(">", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(">", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Elements elements1 = formElement0.getElementsMatchingOwnText("");
      assertFalse(tag0.isData());
      assertEquals(">", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.isBlock());
      assertEquals(">", formElement0.nodeName());
      assertEquals(">", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(">", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(elements1.isEmpty());
      assertEquals(1, elements1.size());
      assertFalse(elements1.equals((Object)elements0));
      assertNotNull(elements1);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(elements1, elements0);
      
      Pattern pattern0 = Pattern.compile("", 46);
      assertEquals("", pattern0.pattern());
      assertEquals(46, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertNotNull(pattern0);
      
      Pattern pattern1 = Pattern.compile(":w>z<Bex", 46);
      assertEquals(46, pattern1.flags());
      assertEquals(":w>z<Bex", pattern1.pattern());
      assertEquals(":w>z<Bex", pattern1.toString());
      assertFalse(pattern1.equals((Object)pattern0));
      assertNotNull(pattern1);
      assertNotSame(pattern1, pattern0);
      
      Elements elements2 = formElement0.getElementsMatchingOwnText(pattern0);
      assertFalse(tag0.isData());
      assertEquals(">", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals(">", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertFalse(formElement0.isBlock());
      assertEquals(">", formElement0.nodeName());
      assertEquals(">", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(">", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("", pattern0.pattern());
      assertEquals(46, pattern0.flags());
      assertEquals("", pattern0.toString());
      assertFalse(elements2.isEmpty());
      assertEquals(1, elements2.size());
      assertFalse(pattern0.equals((Object)pattern1));
      assertTrue(elements2.equals((Object)elements1));
      assertFalse(elements2.equals((Object)elements0));
      assertNotNull(elements2);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertNotSame(pattern0, pattern1);
      assertNotSame(elements2, elements0);
      assertNotSame(elements2, elements1);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      assertNotNull(fileSystemHandling0);
      
      Document document0 = Parser.parse("#", "#");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("#");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("#", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#", element0.nodeName());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.lastElementSibling();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("#", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#", element0.nodeName());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("#", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("html", element1.nodeName());
      assertEquals("html", element1.tagName());
      assertFalse(element1.equals((Object)element0));
      assertNotNull(element1);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Elements elements0 = element0.siblingElements();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("#", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#", element0.nodeName());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertFalse(element0.equals((Object)element1));
      assertNotNull(elements0);
      assertNotSame(element0, element1);
      
      FileSystemHandling fileSystemHandling1 = new FileSystemHandling();
      assertFalse(fileSystemHandling1.equals((Object)fileSystemHandling0));
      assertNotNull(fileSystemHandling1);
      
      Element element2 = document0.createElement(" > ");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertEquals(0, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals(">", element2.tagName());
      assertEquals(">", element2.nodeName());
      assertFalse(element2.hasParent());
      assertFalse(element2.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotNull(element2);
      assertNotSame(element2, element0);
      assertNotSame(element2, element1);
      
      List<DataNode> list0 = element0.dataNodes();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("#", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#", element0.nodeName());
      assertEquals("#", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertFalse(element0.equals((Object)element1));
      assertFalse(element0.equals((Object)element2));
      assertNotNull(list0);
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "88");
      assertEquals("88", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document1 = document0.parser(parser0);
      assertEquals("88", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("88", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("88", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = document1.normalise();
      assertEquals("88", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("88", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("88", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("88", document2.location());
      assertEquals("88", document2.baseUri());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      List<Node> list0 = Parser.parseFragment("", (Element) document0, "org.jsoup.nodes.Element$2");
      assertEquals("88", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      
      Element element0 = (Element)document2.childNode(0);
      assertEquals("88", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("88", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("88", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("88", document2.location());
      assertEquals("88", document2.baseUri());
      assertFalse(document2.hasParent());
      assertTrue(element0.hasParent());
      assertEquals("html", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals("88", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "1Cs]*9GIiUO+R-o_l1h");
      assertEquals("1Cs]*9GIiUO+R-o_l1h", document3.baseUri());
      assertEquals("1Cs]*9GIiUO+R-o_l1h", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertNotNull(document3);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document4 = (Document)document3.traverse(nodeVisitor0);
      assertEquals("1Cs]*9GIiUO+R-o_l1h", document3.baseUri());
      assertEquals("1Cs]*9GIiUO+R-o_l1h", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertEquals(1, document4.childNodeSize());
      assertEquals("#root", document4.tagName());
      assertEquals(0, document4.siblingIndex());
      assertFalse(document4.isBlock());
      assertEquals("1Cs]*9GIiUO+R-o_l1h", document4.location());
      assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
      assertFalse(document4.hasParent());
      assertEquals("#document", document4.nodeName());
      assertEquals("1Cs]*9GIiUO+R-o_l1h", document4.baseUri());
      assertFalse(document4.updateMetaCharsetElement());
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document4.equals((Object)document1));
      assertFalse(document4.equals((Object)document2));
      assertFalse(document4.equals((Object)document0));
      assertNotNull(document4);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertSame(document4, document3);
      assertNotSame(document4, document1);
      assertNotSame(document4, document2);
      assertNotSame(document4, document0);
      
      Document document5 = (Document)document2.appendTo(document3);
      assertEquals("88", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("88", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("88", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals(1, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals("88", document2.location());
      assertEquals("88", document2.baseUri());
      assertEquals("1Cs]*9GIiUO+R-o_l1h", document3.baseUri());
      assertEquals("1Cs]*9GIiUO+R-o_l1h", document3.location());
      assertFalse(document3.hasParent());
      assertEquals(0, document3.siblingIndex());
      assertEquals(2, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertFalse(document3.isBlock());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document5.updateMetaCharsetElement());
      assertEquals(1, document5.childNodeSize());
      assertEquals("#document", document5.nodeName());
      assertFalse(document5.isBlock());
      assertEquals("#root", document5.tagName());
      assertEquals("88", document5.baseUri());
      assertEquals(1, document5.siblingIndex());
      assertEquals("88", document5.location());
      assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
      assertTrue(document5.hasParent());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertFalse(document2.equals((Object)document3));
      assertFalse(document2.equals((Object)document4));
      assertFalse(document3.equals((Object)document1));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document0));
      assertFalse(document5.equals((Object)document4));
      assertFalse(document5.equals((Object)document3));
      assertNotNull(document5);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertSame(document2, document5);
      assertNotSame(document2, document3);
      assertNotSame(document2, document4);
      assertNotSame(document3, document1);
      assertNotSame(document3, document2);
      assertNotSame(document3, document0);
      assertSame(document3, document4);
      assertNotSame(document3, document5);
      assertSame(document5, document1);
      assertSame(document5, document2);
      assertNotSame(document5, document4);
      assertNotSame(document5, document3);
      assertSame(document5, document0);
      
      Elements elements0 = document1.siblingElements();
      assertEquals("88", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(parser0.isTrackErrors());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("88", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("88", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertFalse(document1.equals((Object)document3));
      assertFalse(document1.equals((Object)document4));
      assertNotNull(elements0);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertNotSame(document1, document3);
      assertSame(document1, document5);
      assertSame(document1, document0);
      assertNotSame(document1, document4);
      
      String string0 = document0.wholeText();
      assertEquals("88", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("88", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.equals((Object)document3));
      assertFalse(document0.equals((Object)document4));
      assertEquals("org.jsoup.nodes.Element$2", string0);
      assertNotNull(string0);
      assertSame(document0, document5);
      assertNotSame(document0, document3);
      assertNotSame(document0, document4);
      assertSame(document0, document1);
      assertSame(document0, document2);
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("{", "R%MNd6");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("R%MNd6", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R%MNd6", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("R%MNd6", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R%MNd6", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("R%MNd6", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("R%MNd6", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.equals((Object)document0));
      assertNotNull(document1);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      String string0 = document0.wholeText();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("R%MNd6", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("R%MNd6", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.equals((Object)document1));
      assertEquals("{", string0);
      assertNotNull(string0);
      assertNotSame(document0, document1);
      
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("R%MNd6");
      assertNotNull(mockFileOutputStream0);
      
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      assertNotNull(filterOutputStream0);
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      assertNotNull(outputStreamWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings0.indentAmount(2);
      assertEquals(2, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(2, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertNotNull(document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(false);
      assertEquals(2, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings2.prettyPrint());
      assertEquals(2, document_OutputSettings2.indentAmount());
      assertFalse(document_OutputSettings2.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings2.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings3.syntax());
      assertEquals(2, document_OutputSettings3.indentAmount());
      assertFalse(document_OutputSettings3.outline());
      assertTrue(document_OutputSettings3.prettyPrint());
      assertNotNull(document_OutputSettings3);
      assertSame(document_OutputSettings0, document_OutputSettings2);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings3);
      assertSame(document_OutputSettings2, document_OutputSettings1);
      assertSame(document_OutputSettings2, document_OutputSettings0);
      assertSame(document_OutputSettings2, document_OutputSettings3);
      assertSame(document_OutputSettings3, document_OutputSettings1);
      assertSame(document_OutputSettings3, document_OutputSettings0);
      assertSame(document_OutputSettings3, document_OutputSettings2);
      
      Charset charset0 = Charset.defaultCharset();
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.toString());
      assertNotNull(charset0);
      
      // Undeclared exception!
      try { 
        Charset.forName("body");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // body
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("C4=.\"B#dP`?PL<M\"v)", parseSettings0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("C4=.\"B#dP`?PL<M\"v)");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Tag tag1 = Tag.valueOf("C4=.\"B#dP`?PL<M\"v)");
      assertFalse(tag1.preserveWhitespace());
      assertFalse(tag1.isEmpty());
      assertFalse(tag1.isBlock());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", tag1.toString());
      assertTrue(tag1.formatAsBlock());
      assertFalse(tag1.isKnownTag());
      assertFalse(tag1.canContainBlock());
      assertFalse(tag1.isSelfClosing());
      assertFalse(tag1.isFormSubmittable());
      assertFalse(tag1.isFormListed());
      assertFalse(tag1.isData());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", tag1.getName());
      assertTrue(tag1.isInline());
      assertTrue(tag1.equals((Object)tag0));
      assertNotNull(tag1);
      assertNotSame(tag1, tag0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      String string0 = "@8A)*0tfC=l_o(E23v";
      boolean boolean0 = attributes0.hasKeyIgnoreCase("@8A)*0tfC=l_o(E23v");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertFalse(boolean0);
      
      Element element0 = new Element(tag0, "C4=.\"B#dP`?PL<M\"v)", attributes0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertFalse(element0.isBlock());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", element0.nodeName());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", element0.baseUri());
      assertFalse(element0.hasParent());
      assertTrue(tag0.equals((Object)tag1));
      assertNotNull(element0);
      
      Element element1 = element0.html("             ");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertFalse(element0.isBlock());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element1.hasParent());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", element1.nodeName());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertTrue(tag0.equals((Object)tag1));
      assertNotNull(element1);
      assertNotSame(tag0, tag1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = element0.appendTo(element1);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertFalse(element0.isBlock());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", element0.baseUri());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", element1.nodeName());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", element2.nodeName());
      assertEquals(2, element2.childNodeSize());
      assertEquals(1, element2.siblingIndex());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", element2.tagName());
      assertTrue(element2.hasParent());
      assertFalse(element2.isBlock());
      assertEquals("C4=.\"B#dP`?PL<M\"v)", element2.baseUri());
      assertTrue(tag0.equals((Object)tag1));
      assertNotNull(element2);
      assertNotSame(tag0, tag1);
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element2, element0);
      assertSame(element2, element1);
      
      // Undeclared exception!
      try { 
        element2.getElementsByAttributeValueMatching("             ", "^PNCidaa{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ^PNCidaa{
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parse("Insert position out of bounds.", "Insert position out of bounds.");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      DataNode dataNode0 = DataNode.createFromEncoded("Insert position out of bounds.", "qW");
      StringWriter stringWriter0 = new StringWriter(896);
      document0.getElementsByClass("Insert position out of bounds.");
      dataNode0.html(stringWriter0);
      nodeArray0[5] = (Node) dataNode0;
      document0.addChildren(nodeArray0);
      document0.ensureChildNodes();
      document0.parents();
      // Undeclared exception!
      document0.after("O|%b@mJ-PqW$ldf!");
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5{c}~|0AjP4", ",*G2fB_d*|J%b");
      document0.nextSibling();
      document0.id();
      document0.isBlock();
      // Undeclared exception!
      try { 
        document0.is(",*G2fB_d*|J%b");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '*G2fB_d*|J%b': unexpected token at '%b'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      String string0 = "c8m";
      Document document0 = Document.createShell("c8m");
      document0.dataNodes();
      DataNode dataNode0 = new DataNode("c8m");
      String string1 = null;
      // Undeclared exception!
      try { 
        Tag.valueOf((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      String string0 = "F";
      Document document0 = Parser.parseBodyFragment("F", "F");
      document0.prepend("F");
      Document document1 = document0.clone();
      String string1 = "/C-DBO";
      document1.html("/C-DBO");
      document1.getElementsMatchingOwnText("F");
      document1.getElementsByTag("F");
      Element.preserveWhitespace(document1);
      StringBuilder stringBuilder0 = new StringBuilder("F");
      int int0 = 0;
      // Undeclared exception!
      try { 
        stringBuilder0.replace(0, (-676), "/C-DBO");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // start > end
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      String string0 = "{";
      Document document0 = parser0.parseInput("{", "R%MNd6");
      Document document1 = document0.clone();
      // Undeclared exception!
      try { 
        document1.outerHtml((Appendable) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("# /", "# /");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      int int0 = 10;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(10);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      // Undeclared exception!
      try { 
        document1.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("class", "class");
      Element element0 = document0.body();
      element0.doClone(document0);
      element0.hasSameValue(document0);
      // Undeclared exception!
      try { 
        document0.before((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parse("+\"-0YNTki5[22+v", "+\"-0YNTki5[22+v");
      document0.doSetBaseUri(" > ");
      assertEquals(" > ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$2";
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "");
      document0.dataset();
      document0.addClass("org.jsoup.select.Evaluator$AttributeKeyPair");
      document0.getElementsContainingOwnText("Ed@.");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Document document0 = Parser.parse("M-", "M-");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Elements elements0 = document1.getElementsMatchingOwnText("M-");
      assertEquals(1, elements0.size());
      
      boolean boolean0 = document1.hasText();
      assertEquals("M-", document1.baseUri());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("I pXBFkk&C}#)", "I pXBFkk&C}#)");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      Document document2 = document1.ownerDocument();
      assertEquals(1, document2.childNodeSize());
      
      Document document3 = document2.normalise();
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors(0);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser2 = parser1.settings(parseSettings0);
      Document document4 = document3.parser(parser2);
      boolean boolean0 = document4.hasAttributes();
      assertFalse(boolean0);
      assertEquals("I pXBFkk&C}#)", document4.baseUri());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      String string0 = "Q6S5s=x7";
      Element element0 = new Element("Q6S5s=x7");
      element0.setSiblingIndex(697);
      // Undeclared exception!
      try { 
        element0.select("Q6S5s=x7");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Q6S5s=x7': unexpected token at '=x7'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.head();
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueEnding("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Document document0 = new Document("Insert position out of bounds.");
      Parser parser0 = Parser.htmlParser();
      Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      Element element0 = document0.addClass("Insert position out of bounds.");
      document0.clone();
      document0.tag();
      document1.parents();
      document1.getElementsByAttributeValueMatching("ctHn]x ( hQB0H>", "Insert position out of bounds.");
      element0.dataNodes();
      element0.getElementById("zOY.mP~l;0cLa8~H`%");
      Parser.unescapeEntities("Insert position out of bounds.", false);
      element0.attr("WD+|+n>E= \"Y(@6z.", true);
      document1.getElementsByIndexGreaterThan((-1012));
      // Undeclared exception!
      try { 
        document1.selectFirst("Insert position out of bounds.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Document document0 = Parser.parse("", ":R");
      document0.baseUri();
      String string0 = "'*f1";
      Element element0 = document0.addClass("'*f1");
      document0.getElementsByAttributeValueMatching(":R", "'*f1");
      Element element1 = element0.attr("'*f1", "g(=ePz=Sp=");
      element0.prependChild(document0);
      element0.val();
      element1.dataset();
      element1.hasAttr("'*f1");
      // Undeclared exception!
      try { 
        document0.select("                ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '                ': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      String string0 = "allowfullscreen";
      Document document0 = Parser.parseBodyFragment("Mw-%+XB", "allowfullscreen");
      Document document1 = document0.clone();
      document1.className();
      Document document2 = document1.normalise();
      Parser parser0 = Parser.htmlParser();
      document2.parser(parser0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      try { 
        pipedReader0.connect(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = "thead";
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("thead", parseSettings0);
      String string1 = "3Ss\"IB";
      String string2 = "";
      parseSettings0.normalizeAttribute("");
      Tag.valueOf("3Ss\"IB");
      Element element0 = new Element(tag0, "thead");
      element0.parent();
      element0.nextElementSiblings();
      element0.getElementsContainingOwnText("");
      String string3 = "           ";
      Tag.valueOf("@HC:j\"<[i!s", parseSettings0);
      element0.prepend("           ");
      String string4 = null;
      // Undeclared exception!
      try { 
        parseSettings0.normalizeAttribute((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      String string0 = "checkbox";
      Document document0 = Parser.parseBodyFragment("checkbox", "checkbox");
      Document document1 = Parser.parseBodyFragmentRelaxed("checkbox", "");
      document0.parentNode = (Node) document1;
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      PipedReader pipedReader0 = new PipedReader(63);
      document0.after("");
      long long0 = 0L;
      pipedReader0.skip(0L);
      pipedReader0.close();
      PipedWriter pipedWriter0 = null;
      try {
        pipedWriter0 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Pipe closed
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("d6St;mA", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("d6St;mA", "d6St;mA");
      Element element0 = new Element(tag0, "d6St;mA", attributes1);
      String string0 = "sZ:ouCfnG4[R|w:'G8{";
      Tag.valueOf("!W{ESLS]X");
      element0.getElementsByAttributeValueContaining("sZ:ouCfnG4[R|w:'G8{", "{0O'>Y\",SbQ");
      attributes1.asList();
      // Undeclared exception!
      try { 
        element0.after("d6St;mA");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      String string0 = "S";
      Document document0 = Parser.parseBodyFragmentRelaxed("S", "");
      Element element0 = document0.prependElement("S");
      element0.nodelistChanged();
      Document document1 = document0.clone();
      String string1 = null;
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueMatching("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = "Insert position out of bounds.";
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Insert position out of bounds.", parseSettings0);
      String string1 = ">!CDBu2(";
      Element element0 = new Element(tag0, ">!CDBu2(");
      int int0 = (-1455);
      LinkedHashSet<PseudoTextElement> linkedHashSet0 = new LinkedHashSet<PseudoTextElement>();
      // Undeclared exception!
      try { 
        element0.insertChildren((-1455), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Document document0 = Parser.parse("X!GLMGV", "X!GLMGV");
      document0.childNodes();
      document0.getElementsByAttributeStarting("X!GLMGV");
      Pattern pattern0 = Pattern.compile("X!GLMGV", (-3396));
      document0.getElementsByAttributeValueMatching("X!GLMGV", pattern0);
      document0.getElementsByIndexLessThan(4170);
      document0.selectFirst("org.jsoup.nodes.Entities");
      Element element0 = document0.attr("F-eAXV", "textarea");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) null;
      nodeArray0[4] = (Node) element0;
      // Undeclared exception!
      try { 
        element0.insertChildren(4, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
