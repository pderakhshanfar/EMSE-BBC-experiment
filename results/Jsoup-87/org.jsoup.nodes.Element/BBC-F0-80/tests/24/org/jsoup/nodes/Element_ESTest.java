/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:47:42 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",,Hj>Nwec:", ",,Hj>Nwec:");
      document0.toggleClass("\"n4:$");
      document0.getElementsByClass(",,Hj>Nwec:");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      document0.toggleClass(":containsData(text) query must not be empty");
      document0.toggleClass(":containsData(text) query must not be empty");
      document0.hasClass("bNQQ9U8N-[{xxP,69ne");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parse("n4:$", "n4:$");
      Element element0 = document0.toggleClass("n4:$");
      Element element1 = element0.toggleClass("n4:$");
      element0.appendChild(element1);
      document0.hasClass("java.lang.string@0000000108");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parse("n4:$", "n4:$");
      document0.getElementsByAttributeValueEnding("java.lang.string@0000000108", "class");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Tag tag0 = Tag.valueOf("L-&X^");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "L-&X^", attributes0);
      Document document0 = Parser.parseBodyFragment("L-&X^", "L-&X^");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.parentNode = (Node) formElement0;
      formElement1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Tag tag0 = Tag.valueOf("java.lang.string@0000000097");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, ")", attributes0);
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        element0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parse("acronym", "acronym");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("wPUxKN", "wPUxKN");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "wPUxKN");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(stringBuilder0, 3534, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = new Document("U<|U~VvDAN");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Document.createShell("/}?&[");
      document0.doSetBaseUri("org.jsoup.select.Evaluator$IsOnlyOfType");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, ".", attributes0);
      formElement0.getElementsMatchingText("l;\"H;,U");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("open", "");
      Document document1 = (Document)document0.doClone(document0);
      document1.wrap("open");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parse("wPUxKN", "wPUxKN");
      Element element0 = document0.head();
      element0.wrap("wPUxKN");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a`", "version");
      Element element0 = document0.body();
      element0.wrap(" />");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Element element0 = new Element("IeSelect");
      element0.setSiblingIndex((-1722320336));
      element0.val("IeSelect");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.body();
      element0.val("");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Document.createShell("/}?&[");
      document0.siblingIndex = (-3725);
      document0.toggleClass("");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse("\"n4:$", ".g{[b:Y$Q=Vl");
      Element element0 = document0.body();
      element0.toggleClass(".g{[b:Y$Q=Vl");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Element element0 = new Element("IeSelect");
      element0.setSiblingIndex((-1722320336));
      element0.text("IeSelect");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.body();
      element0.text("L 0vxj{cRrq@wfTn2t<");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Tag tag0 = Tag.valueOf("=j[IIM85mxuN~`8+w@d");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "=j[IIM85mxuN~`8+w@d", attributes0);
      Document document0 = Document.createShell("=j[IIM85mxuN~`8+w@d");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.parentNode = (Node) formElement0;
      formElement0.text("uK&<~Wq`&HF,");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Am]c-&/:|%<;!`:yMA ", "#txbu}(Dh.YT8T");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parse("n4:$", "n4:$");
      Document document1 = document0.clone();
      Element element0 = document0.toggleClass("n4:$");
      document1.appendTo(element0);
      document1.tagName("n4:$");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("P L:*u/E,N}*Ds\"Pz@");
      Document document0 = parser0.parseInput((Reader) stringReader0, "P L:*u/E,N}*Ds\"Pz@");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Document.createShell("[Se4t");
      Element element0 = document0.appendElement("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Element element0 = new Element("body");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("width must be > 0", "g7/Ifh260J]ZfZ#eB6");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("L-&X^", "L-&X^");
      document0.selectFirst("ScriptDataDoubleEscapedDash");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("PU9E", "PU9E");
      document0.selectFirst("html");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parse(" > ", "IeSelect");
      document0.appendElement("K1");
      document0.selectFirst("K1");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("E ?U`", "igm1JlfR-1RTuk");
      Element element0 = document0.createElement("igm1JlfR-1RTuk");
      element0.appendElement("asTV,");
      element0.selectFirst("igm1JlfR-1RTuk");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#root");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "open", attributes0);
      formElement0.select("open");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("t{ 5]kyye!~w", "Fd#yI1`,9D~8");
      document0.select("head");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Am]c-&/:|%<;!`:yMA ", "#txbu}(Dh.YT8T");
      Element element0 = document0.doClone(document0);
      element0.after((Node) document0);
      document0.removeClass("FpD*&cV3CuVB+5JtO");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.StructuralEvaluator$Root", "kCY\u0006pZy4");
      Element element0 = document0.head();
      element0.removeClass("java.lang.string@0000000084");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = new Document("U<|U~VvDAN");
      Document document1 = Parser.parse("head", "head");
      document0.appendTo(document1);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a`", "a`");
      document0.prependElement("a`");
      Element element0 = document0.appendElement("a`");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      Element.preserveWhitespace(formElement0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse("\"n4:$", ".g{[b:Y$Q=Vl");
      Element element0 = document0.body();
      element0.prependText(":has(");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("tbody", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#K", attributes0);
      pseudoTextElement0.prependElement("fieldset");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Element element0 = new Element("menuitem");
      element0.siblingIndex = (-5175);
      CDataNode cDataNode0 = new CDataNode("menuitem");
      element0.prependChild(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("CommentStart", "CommentStart");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Evaluator$ContainsData");
      Document document0 = parser0.parseInput((Reader) stringReader0, "java.lang.string@0000000053");
      Element element0 = document0.body();
      element0.prepend("Zg|");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Element element0 = new Element("IeSelect");
      element0.prepend("<x");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Q?$l%f+cq(", "Q?$l%f+cq(");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parse("\"n4:$", "\"n4:$");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Q?$l%f+cq(", "Q?$l%f+cq(");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Element element0 = new Element("InSelect");
      Element element1 = element0.appendElement("f");
      element1.parent();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.select.CombiningEvaluator");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.CombiningEvaluator", attributes0);
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvaluator", "org.jsoup.select.CombiningEvaluator");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.parentNode = (Node) formElement0;
      formElement1.parent();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("4", "4");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      element1.parent();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parse("\"n4:$", ".g{[b:Y$Q=Vl");
      Element element0 = document0.body();
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ja$a.;ang.string@0000000 76", "ja$a.;ang.string@0000000 76");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"n4:$", ".g{[b:Y$Q=Vl");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parse("\"n4:$", ".g{[b:Y$Q=Vl");
      Element element0 = document0.appendElement("vg@w@u;e`czhb1");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Element element0 = new Element("body");
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("acronym", "acronym");
      Evaluator.AttributeWithValue evaluator_AttributeWithValue0 = new Evaluator.AttributeWithValue("body", "java.lang.string@0000000111");
      document0.is((Evaluator) evaluator_AttributeWithValue0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("      ", "");
      document0.is("center");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("WYPgg[h&t", "n4#:$");
      Document document1 = document0.clone();
      Element element0 = document0.clone();
      Element element1 = document0.appendChild(document1);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) element1;
      nodeArray0[1] = (Node) document1;
      element0.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("WYPgg[h&t", "n4#:$");
      Document document1 = document0.clone();
      Parser parser0 = Parser.xmlParser();
      Document document2 = document1.parser(parser0);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document2;
      document2.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("t{ 5]kyye!~w", "details");
      Elements elements0 = document0.getElementsByClass("t{ 5]kyye!~w");
      Tag tag0 = Tag.valueOf("details");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "to0L>Qo}eK", attributes0);
      formElement0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Tag tag0 = Tag.valueOf("L-&X^");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "L-&X^", attributes0);
      Document document0 = Parser.parseBodyFragment("L-&X^", "L-&X^");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.parentNode = (Node) formElement0;
      List<DataNode> list0 = formElement0.dataNodes();
      formElement0.insertChildren(0, (Collection<? extends Node>) list0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("t{ 5]kyye!~w", "Fd#yI1`,9D~8");
      Elements elements0 = document0.getElementsByClass("t{ 5]kyye!~w");
      document0.insertChildren(1, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "Pattern syntax error: ");
      Element element0 = document0.body();
      element0.html(", state=");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parse("\"n4:$", ".g{[b:Y$Q=Vl");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("L-&X^", "L-&X^");
      StringWriter stringWriter0 = new StringWriter();
      document0.html(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = new Document("br");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Document.createShell("/}?&[");
      document0.getElementsByAttributeValueContaining("/}?&[", "/}?&[");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("P L:*u/E,N}*Ds\"Pz@");
      Document document0 = parser0.parseInput((Reader) stringReader0, "P L:*u/E,N}*Ds\"Pz@");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<G}F5o%hXv", "sZ}mA>A6d=MX");
      Element element0 = document0.append("body");
      element0.getElementsMatchingText("body");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Document.createShell("6(;+V#");
      Pattern pattern0 = Pattern.compile("details", (-1436010313));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.getElementsMatchingOwnText("");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parse("wPUxK", "wPUxK");
      document0.getElementsContainingText("wPUxK");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("wPU9*", "wPU9*");
      document0.getElementsByTag("wv");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell("IeSelect");
      document0.appendElement("br");
      document0.getElementsByTag("br");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Element element0 = new Element("body");
      element0.getElementsByIndexLessThan(3);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Tag tag0 = Tag.valueOf(",VG{W");
      Element element0 = new Element(tag0, ",VG{W");
      element0.getElementsByIndexGreaterThan((-1041));
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      document0.getElementsByIndexEquals(1);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Tag tag0 = Tag.valueOf("L&v >xR_k1I");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "L&v >xR_k1I", attributes0);
      Element element0 = formElement0.attr("javaDlangstrin@00000R0138", ":not");
      element0.getElementsByAttributeValueMatching("javaDlangstrin@00000R0138", ":not");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#root");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("open", true);
      FormElement formElement0 = new FormElement(tag0, "open", attributes1);
      formElement0.getElementsByAttribute("open");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Tag tag0 = Tag.valueOf("menuitem");
      FormElement formElement0 = new FormElement(tag0, "menuitem", (Attributes) null);
      Document document0 = Parser.parseBodyFragmentRelaxed("menuitem", "menuitem");
      document0.prependChild(formElement0);
      formElement0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parse("/PU9a", "/PU9a");
      Element element0 = document0.appendElement("Kv");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "=0Q.K}Y43[UQ`7&");
      document0.siblingIndex = (-2249);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("WqCAFx", "");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.selec.CombiningEvaluator");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.selec.CombiningEvaluator", attributes0);
      Document document0 = Document.createShell("org.jsoup.selec.CombiningEvaluator");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.parentNode = (Node) formElement1;
      formElement1.empty();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = new Document("U<|U~VvDAN");
      Document document1 = Parser.parse("head", "head");
      document0.appendTo(document1);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("acronym", "acronym");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"n4:$", ".g{[b:Y$Q=Vl");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      element1.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yz9^ 6</i~X8", "Yz9^ 6</i~X8");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("b*k*", "b*k*");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Q8~L]mY7R#", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("SKIP_CHILDREN");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "=jRbx_X01DN$J#mP\"", attributes0);
      formElement0.clone();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("wPUxKN", "wPUxKN");
      Element element0 = document0.body();
      Locale locale0 = Locale.CHINA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":nth-last-child(");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ":nth-last-child(", attributes0);
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      formElement0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = new Document("6(;+yV#A");
      Element element0 = document0.toggleClass("details");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = new Document("omentSart");
      Element element0 = document0.toggleClass("omentSart");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, ".", attributes0);
      formElement0.children();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parse("acronym", "acronym");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#root");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "open", attributes0);
      formElement0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Document.createShell("6(;+yV#A");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.selec.CombiningEvaluator", "s+");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("Vqx-6Zd7dwA", "Vqx-6Zd7dwA");
      Element element0 = document0.body();
      Element element1 = document0.head();
      element0.before((Node) element1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parse("wPU9E", "wPU9E");
      Element element0 = document0.appendElement("Q");
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Document.createShell(".g{[:Y$Q=VOl");
      Element element0 = document0.body();
      element0.before(".g{[:Y$Q=VOl");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/PU9a", "O120}{Xp");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("wyAJ3v\"lg{l|Ccc:[E", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("U3");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "/PU9a", attributes0);
      document0.setParentNode(formElement0);
      document0.before("U3");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parse("wPU9E", "wPU9E");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("t{ 5]kyye!~w", "Fd#yI1`,9D~8");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]!\"k=!*XXy_(", "]!\"k=!*XXy_(");
      document0.appendTo(document0);
      document0.attr("head", false);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("/}?&[");
      document0.siblingIndex = (-3725);
      document0.attr("org.jsoup.select.Evaluator$IsOnlyOfType", false);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      CDataNode cDataNode0 = new CDataNode(" q;hG@w`+$");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, " q;hG@w`+$", attributes0);
      formElement0.attr(" q;hG@w`+$", true);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000108", "8FK?G4Hh[I");
      document0.siblingIndex = (-3123);
      document0.attr("8FK?G4Hh[I", "java.lang.string@0000000108");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("CommentStart", "CommentStart");
      Element element0 = document0.body();
      element0.attr("org.jsoup.nodes.Element$2", "f");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.selec.CombiningEvaluator");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.selec.CombiningEvaluator", attributes0);
      formElement0.attr("org.jsoup.selec.CombiningEvaluator", "org.jsoup.selec.CombiningEvaluator");
      formElement0.getElementsByAttributeValueStarting("org.jsoup.selec.CombiningEvaluator", "org.jsoup.selec.CombiningEvaluator");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parse("RZ$", "RZ$");
      Element element0 = document0.head();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "Pattern syntax error: ");
      Element element0 = document0.body();
      element0.appendText("; filename=\"");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Document.createShell("IeSelect");
      Element element0 = document0.appendElement("br");
      element0.appendText("IeSelect");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Document.createShell("6(;+V#");
      document0.appendElement("details");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parse("\"n4:$", ".g{[b:Y$Q=Vl");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Document.createShell("/}?&[");
      document0.siblingIndex = (-3725);
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = new Document("");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("wPU9*", "wPU9*");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("body", "th 5]kyye!~w");
      Document document0 = Parser.parse("#root", "body");
      Element element0 = document0.head();
      element0.after((Node) textNode0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"n4:$", ".g{[b:Y$Q=Vl");
      Element element0 = document0.body();
      element0.after(".g{[b:Y$Q=Vl");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("wPU9E", "wPU9E");
      Element element0 = document0.appendElement("wv");
      Element element1 = element0.previousElementSibling();
      element1.after("_ndW1L%FhZ*h}r`DA");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Element element0 = new Element("IeSelect");
      element0.setSiblingIndex((-1722320336));
      element0.addClass("textarea");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parse("javaDlangstrin@00000R0138", "javaDlangstrin@00000R0138");
      Element element0 = document0.body();
      element0.addClass("javaDlangstrin@00000R0138");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Element element0 = new Element("IeSelect");
      element0.addClass("textarea");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.select.CombiningEvaluator");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.CombiningEvaluator", attributes0);
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvaluator", "org.jsoup.select.CombiningEvaluator");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.parentNode = (Node) formElement0;
      // Undeclared exception!
      formElement1.wrap("M;H&vmg]3\"2<Fz?R");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("$O");
      FormElement formElement0 = new FormElement(tag0, "-}9$qh", attributes0);
      // Undeclared exception!
      try { 
        formElement0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("textarea", "vZ\"'%#p102W\"$");
      Comment comment0 = new Comment("vZ\"'%#p102W\"$");
      Element element0 = document0.doClone(comment0);
      element0.prependChild(document0);
      // Undeclared exception!
      try { 
        document0.wrap("MGj?2");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("acronym", "acronym");
      Element element0 = document0.doClone(document0);
      document0.prependChild(element0);
      // Undeclared exception!
      try { 
        document0.wholeText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("}ws92g/6p", "th 5]kyye!~w");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.val("}ws92g/6p");
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput("", "P+Qj'q:#$-v?a{I#H");
      // Undeclared exception!
      try { 
        document0.val("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("java.lang.string@0000000111", "java.lang.string@0000000111");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("t{ 5]kyye!~w", "Fd#yI1`,9D~8");
      Element element0 = document0.html("DE1o}u*z$JD&Bx;PJlA");
      // Undeclared exception!
      try { 
        element0.text((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Element element0 = new Element("IeSelect");
      // Undeclared exception!
      try { 
        element0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = new Document("wPUxKN");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.tagName("+PVt6f");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("1#eV{qeVG -", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "g,", attributes0);
      // Undeclared exception!
      try { 
        formElement0.tagName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<G}F5o%hXv", "sZ}mA>A6d=MX");
      TextNode textNode0 = TextNode.createFromEncoded("body", "th 5]kyye!~w");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("}ws92g/6p", "}ws92g/6p");
      // Undeclared exception!
      try { 
        document0.selectFirst("}ws92g/6p");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '}ws92g/6p': unexpected token at '}ws92g/6p'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("q3n8n\"<", "q3n8n\"<");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("title", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "}ws92g/6p", attributes0);
      // Undeclared exception!
      try { 
        formElement0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Document.createShell("body");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Document.createShell("P'.`;zK36U4*P");
      Comment comment0 = new Comment((String) null, (String) null);
      Element element0 = document0.doClone(comment0);
      // Undeclared exception!
      try { 
        element0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parse("wPUxKN", "wPUxKN");
      Comment comment0 = new Comment("wPUxKN", "wPUxKN");
      Element element0 = document0.doClone(comment0);
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(element0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Tag tag0 = Tag.valueOf("L-&X^");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "L-&X^", attributes0);
      Document document0 = Parser.parseBodyFragment("L-&X^", "L-&X^");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.parentNode = (Node) formElement0;
      // Undeclared exception!
      formElement0.prependElement("L-&X^");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Element element0 = new Element("03bI3$vXLCs`Nx=");
      Element element1 = element0.toggleClass("03bI3$vXLCs`Nx=");
      List<Node> list0 = Parser.parseXmlFragment("java.lang.string@0000000111", ".");
      element1.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.prependElement("03bI3$vXLCs`Nx=");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      Element element0 = new Element(tag0, "bdi");
      // Undeclared exception!
      try { 
        element0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.select.CombiningEvaluator");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.CombiningEvaluator", attributes0);
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvaluator", "org.jsoup.select.CombiningEvaluator");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.parentNode = (Node) formElement0;
      // Undeclared exception!
      try { 
        formElement1.prependChild(formElement1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("wPUxKN", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "ISO-8859-1", attributes0);
      // Undeclared exception!
      try { 
        formElement0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("n4:$", "n4:$");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prepend("QC]x?ox*");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":contains(");
      Element element0 = new Element(tag0, ":contains(");
      List<Node> list0 = Parser.parseXmlFragment("java.lang.string@0000000076", ":contains(");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.prepend("vfqP8.(3FiWCLw7}");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell("wPUxKN");
      Comment comment0 = new Comment("wPUxKN", "wPUxKN");
      Element element0 = document0.doClone(comment0);
      // Undeclared exception!
      try { 
        element0.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(3717);
      // Undeclared exception!
      document0.outerHtmlTail(stringBuilder0, 30, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(">%=J,)", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "iOCo=q6r91SH", (Attributes) null);
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "iOCo=q6r91SH");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        formElement0.outerHtmlTail(charBuffer0, 46, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("l-&x^", "l-&x^");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("0Qi_eir?SZ!");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintWriter0, (-1568), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Document.createShell("Request must be executed (with .execute(), .get(), or .post() before parsing response");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, 14, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("IeSelect", "IeSelect");
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.jsoup.nodes.Element$2");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(124);
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintStream0, 2024, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Document.createShell("n4:$");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "n4:$");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 337, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf(";@`72DCA}-rs$S_-H", parseSettings0);
      Element element0 = new Element(tag0, ";@`72DCA}-rs$S_-H", (Attributes) null);
      CharBuffer charBuffer0 = CharBuffer.allocate(13);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(charBuffer0, 71, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("6(;+yV#A", "6(;+yV#A");
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, (-1887), (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = new Document("CharacterReferenceInRcdata");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream(3342);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintWriter0, (-1110026255), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("P L:*u/E,N}*Ds\"Pz@");
      Document document0 = parser0.parseInput((Reader) stringReader0, "P L:*u/E,N}*Ds\"Pz@");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<G}F5o%hXv", "sZ}mA>A6d=MX");
      TextNode textNode0 = TextNode.createFromEncoded("body", "th 5]kyye!~w");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wPxK", "wPxK");
      document0.reparentChild(document0);
      Evaluator.IsNthOfType evaluator_IsNthOfType0 = new Evaluator.IsNthOfType(4, 4);
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IsNthOfType0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("}ws92g/6p", "}ws92g/6p");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Yz9^ 6</i~X8", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Yz9^ 6</i~X8", attributes0);
      // Undeclared exception!
      try { 
        formElement0.is("Yz9^ 6</i~X8");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Yz9^ 6</i~X8': unexpected token at '^ 6</i~X8'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.select.CombiningEvaluator");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.CombiningEvaluator", attributes0);
      Document document0 = Document.createShell("org.jsoup.select.CombiningEvaluator");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.parentNode = (Node) formElement0;
      // Undeclared exception!
      formElement1.is("BeforeDoctypeName");
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parse("wPxK", "wPxK");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Tag tag0 = Tag.valueOf("L-&X^");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "L-&X^", attributes0);
      Document document0 = Parser.parseBodyFragment("L-&X^", "L-&X^");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.parentNode = (Node) formElement0;
      // Undeclared exception!
      formElement1.html("L-&X^");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yz9^ 6</i~X8", "Yz9^ 6</i~X8");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<G}F5o%hXv", "sZ}mA>A6d=MX");
      TextNode textNode0 = TextNode.createFromEncoded("body", "th 5]kyye!~w");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.html("body");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("acronym", "acronym");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("~", "~");
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parse("0w|.unliC<jd#+z@GQ", "M=#L");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("aRz#*JoK?>F", "fi9b{l}q>4>luo}iz}t", true);
      document0.parentNode = (Node) xmlDeclaration0;
      MockFileWriter mockFileWriter0 = new MockFileWriter("M=#L", false);
      // Undeclared exception!
      try { 
        document0.html((OutputStreamWriter) mockFileWriter0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.select.CombiningEvaluator");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.CombiningEvaluator", attributes0);
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.CombiningEvaluator", "org.jsoup.select.CombiningEvaluator");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.parentNode = (Node) formElement0;
      // Undeclared exception!
      formElement0.html();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.appendElement("br");
      element0.siblingIndex = (-418);
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parse("ja$a.;ang.string@0000000 76", "ja$a.;ang.string@0000000 76");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.hasText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = new Document("6(;+yV#A");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("j;je/qTV5", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "?", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("&");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("marquee");
      FormElement formElement0 = new FormElement(tag0, " `", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "open");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#root");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "head", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsMatchingOwnText("PSIW{ZDuYd");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: PSIW{ZDuYd
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parse("RZ$", "RZ$");
      Element element0 = document0.appendElement("RZ$");
      element0.siblingIndex = 0;
      // Undeclared exception!
      document0.getElementsContainingText("wv");
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parse("RZ$", "RZ$");
      Element element0 = document0.appendElement("RZ$");
      element0.siblingIndex = 10;
      element0.siblingIndex = (-9);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("wv");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("AS[", "=j[IIM85mxuN~`8+w@d");
      CDataNode cDataNode0 = new CDataNode("7@5c~fjQgw\"n");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("<OF$8PTi%SR");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".<Uj$b]qe}x&>5", ".<Uj$b]qe}x&>5");
      Element element0 = document0.appendElement(".<Uj$b]qe}x&>5");
      element0.setSiblingIndex((-570));
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText(".<Uj$b]qe}x&>5");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "qzbwj");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Document.createShell("wPUxKN");
      Comment comment0 = new Comment("wPUxKN", "wPUxKN");
      Element element0 = document0.doClone(comment0);
      // Undeclared exception!
      try { 
        element0.getElementsByIndexEquals(1355);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = new Document("p>9");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Selector$SelectorParseException", "org.jsoup.select.Selector$SelectorParseException");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("\"", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Tag tag0 = Tag.valueOf(",VG{W");
      Element element0 = new Element(tag0, ",VG{W");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueStarting("", "gVAJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = new Document("p>9");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("acronym", "acronym");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("nav", "}{,B,~9/34uP~6V2I");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: }{,B,~9/34uP~6V2I
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Tag tag0 = Tag.valueOf(",VG{W");
      Element element0 = new Element(tag0, ",VG{W");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueEnding("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("X+\"", "X+\"");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "X+\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parse("acronym", "acronym");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Tag tag0 = Tag.valueOf("L-&X^");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "L-&X^", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a`", "a`");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementById("a`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("acronym", "acronym");
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("t{ 5]kyye!~w", "details");
      DocumentType documentType0 = new DocumentType("aHV#$<[a", "Insert position out of bounds.", "Y/;v+C");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.selec.CombiningEvaluator");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.selec.CombiningEvaluator", attributes0);
      Document document0 = Document.createShell("org.jsoup.selec.CombiningEvaluator");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.childNodes = null;
      // Undeclared exception!
      try { 
        formElement1.empty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<G}F5o%hXv", "sZ}mA>A6d=MX");
      document0.childNodes = null;
      TextNode textNode0 = TextNode.createFromEncoded("body", "th %]kyyH!~w");
      // Undeclared exception!
      try { 
        document0.doClone(textNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7fET4I", "7fET4I");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Tag tag0 = Tag.valueOf("^9mE?'Y96cpj");
      Element element0 = new Element(tag0, "wv");
      Element element1 = element0.appendElement("RZ$");
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'rz$': unexpected token at '$'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "org.jsoup.selec.CombiningEvaluator";
      Tag tag0 = Tag.valueOf("org.jsoup.selec.CombiningEvaluator");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.selec.CombiningEvaluator", attributes0);
      Document document0 = new Document("org.jsoup.selec.CombiningEvaluator");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.parentNode = (Node) formElement0;
      formElement0.cssSelector();
      document0.wrap(string0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("IeSelect", "IeSelect");
      Element element0 = document0.head();
      DocumentType documentType0 = new DocumentType("org.jsoup.nodes.Element$1", "!Lehq^>Ocbq{LC85G", "IeSelect", "radio", "!Lehq^>Ocbq{LC85G");
      element0.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "/K G|");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fMut$q<eWLEBa.", "fMut$q<eWLEBa.");
      // Undeclared exception!
      try { 
        document0.child(586);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 586, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("t{ 5]kyye!~w", "Fd#yI1`,9D~8");
      // Undeclared exception!
      try { 
        document0.child((-3722));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Document.createShell("wPUxKN");
      Comment comment0 = new Comment("wPUxKN", "wPUxKN");
      Element element0 = document0.doClone(comment0);
      // Undeclared exception!
      try { 
        element0.before((Node) comment0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Tag tag0 = Tag.valueOf("L-&X^");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "L-&X^", attributes0);
      Document document0 = Parser.parseBodyFragment("L-&X^", "L-&X^");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.parentNode = (Node) formElement0;
      // Undeclared exception!
      try { 
        formElement1.before((Node) formElement0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Tag tag0 = Tag.valueOf("=j[IIM85mxuN~`8+w@d");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "=j[IIM85mxuN~`8+w@d", attributes0);
      Document document0 = Document.createShell("=j[IIM85mxuN~`8+w@d");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.parentNode = (Node) formElement0;
      // Undeclared exception!
      formElement1.before("=j[IIM85mxuN~`8+w@d");
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      TextNode textNode0 = TextNode.createFromEncoded("$O1O@0'Ai^", "org.jsoup.nodes.Element");
      Document document0 = new Document("org.jsoup.nodes.Element");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.before("LjR& qQ&B8E");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("}ws92g/6p", "}ws92g/6p");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Document.createShell("tag name muit not be empty.");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.attr("^!fa", "br");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Yz9^ 6</i~X8", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("body");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "Yz9^ 6</i~X8", attributes0);
      // Undeclared exception!
      try { 
        formElement0.attr((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = new Document("InTable");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("InTable", false);
      Element element0 = document0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element0.appendTo(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.doClone(document0);
      // Undeclared exception!
      try { 
        element0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#root");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "open", attributes0);
      // Undeclared exception!
      try { 
        formElement0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("wPUxKN", "wPUxKN");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":nth-last-child(");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ":nth-last-child(", attributes0);
      Document document0 = Parser.parseBodyFragment(":nth-last-child(", ":nth-last-child(");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.parentNode = (Node) formElement0;
      // Undeclared exception!
      formElement1.appendElement("value");
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Document.createShell("");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement("q");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = new Document("2^}DK9QQ]4D=9V");
      Parser parser0 = Parser.xmlParser();
      document0.parser(parser0);
      parser0.settings((ParseSettings) null);
      // Undeclared exception!
      try { 
        document0.appendElement("java.lang.string@0000000118");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("acronym", "acronym");
      // Undeclared exception!
      try { 
        document0.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ja$a.;ang.string@0000000 76", "ja$a.;ang.string@0000000 76");
      Comment comment0 = new Comment("ja$a.;ang.string@0000000 76");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      xmlDeclaration0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.appendChild(xmlDeclaration0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Tag tag0 = Tag.valueOf("=j[cIM8QmxuC~`8+wd");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "=j[cIM8QmxuC~`8+wd", attributes0);
      Document document0 = Parser.parse("=j[cIM8QmxuC~`8+wd", "=j[cIM8QmxuC~`8+wd");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.parentNode = (Node) formElement1;
      // Undeclared exception!
      try { 
        formElement1.appendChild(formElement0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("t{ 5]kyye!~w", "t{ 5]kyye!~w");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Document.createShell("/}?&[");
      document0.siblingIndex = (-3725);
      Element element0 = document0.doClone(document0);
      // Undeclared exception!
      try { 
        document0.appendChild(element0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Tag tag0 = Tag.valueOf("=j[IIM85mxuN~`8+w@d");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "=j[IIM85mxuN~`8+w@d", attributes0);
      Document document0 = Document.createShell("=j[IIM85mxuN~`8+w@d");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.parentNode = (Node) formElement0;
      // Undeclared exception!
      formElement0.append("=j[IIM85mxuN~`8+w@d");
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Document.createShell("/}?&[");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<G}F5o%hXv", "sZ}mA>A6d=MX");
      TextNode textNode0 = TextNode.createFromEncoded("body", "th 5]kyye!~w");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.append("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":nth-last-child(");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ":nth-last-child(", attributes0);
      Document document0 = Parser.parseBodyFragment(":nth-last-child(", ":nth-last-child(");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.parentNode = (Node) formElement0;
      // Undeclared exception!
      try { 
        formElement1.after((Node) formElement0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("aL1>s$Y0N>", "ScriptDataEscapedDashDash");
      Element element0 = document0.head();
      element0.before((Node) document0);
      // Undeclared exception!
      element0.after("org.jsoup.selec.CombiningEvaluator");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Tag tag0 = Tag.valueOf("VW~8}(.c&P6");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "VW~8}(.c&P6", attributes0);
      // Undeclared exception!
      try { 
        formElement0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Fd#yI1`,9D~8");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("title");
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "Yz9^ 6</i~X8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.select.CombiningEvaluator");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.CombiningEvaluator", attributes0);
      formElement0.html((MockFileWriter) null);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("%22", "F0?wLrF,");
      document0.toggleClass("QcsP9NyiG");
      document0.toggleClass("textarea");
      document0.hasClass("textarea");
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parse("acronym", "acronym");
      document0.toggleClass(",L=Lp6RAu~S`");
      document0.hasClass("java.lang.string@0000000108");
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parse("\"n4:$", ".g{[b:Y$Q=Vl");
      document0.hasClass("</");
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("acronym", "acronym");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Document.createShell("/}?&[");
      document0.append("c");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("t{ 5]kyye!~w", "Fd#yI1`,9D~8");
      document0.html("DE1o}u*z$JD&Bx;PJlA");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parse("\"n4:$", ".g{[b:Y$Q=Vl");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = new Document("U<|U~VvDAN");
      document0.appendTo(document0);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Am]c-&/:|%<;!`:yMA ", "#txbu}(Dh.YT8T");
      Element element0 = document0.doClone(document0);
      element0.after((Node) document0);
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Am]c-&/:|%<;!`:yMA ", "#txbu}(Dh.YT8T");
      Element element0 = document0.doClone(document0);
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parse("wPU9E", "wPU9E");
      Element element0 = document0.appendElement("wv");
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parse("jaba.lan0.s5rine@0000000138", "jaba.lan0.s5rine@0000000138");
      Element element0 = document0.body();
      element0.append("g!/,0kbQH");
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = new Document("omentSart");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=cb@-Zls]qL39", "title");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Element element0 = new Element("IeSelect");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parse("\"n4:$", ".g{[b:Y$Q=Vl");
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("\"n4:$", "\"n4:$");
      document0.is((Evaluator) evaluator_AttributeWithValueNot0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = "wPU9\\E";
      Document document0 = Parser.parse("wPU9E", "wPU9E");
      Pattern pattern0 = Pattern.compile("wPU9E");
      document0.getElementsByAttributeValueMatching(string0, pattern0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      // Undeclared exception!
      try { 
        document0.select("<html>\n <head></head>\n <body>\n  br\n </body>\n</html><br>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '<html>
         //  <head></head>
         //  <body>
         //   br
         //  </body>
         // </html><br>': unexpected token at '<html>
         //  <head></head>
         //  <body>
         //   br
         //  </body>
         // </html><br>'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"n4:$", ".Kg{[b:Y$==Vl");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = new Document("6(;+yV#A");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Element element0 = new Element("menuitem");
      MockFile mockFile0 = new MockFile("menuitem");
      CDataNode cDataNode0 = new CDataNode("menuitem");
      element0.prependChild(cDataNode0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      element0.outerHtml((Appendable) mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ja$a.lang.string@0000000 76", "ja$a.lang.string@0000000 76");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 9, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      document0.appendElement("br");
      document0.tagName("br");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$ContainsData", "org.jsoup.select.Evaluator$ContainsData");
      // Undeclared exception!
      try { 
        document0.html((PipedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("class", "3Krb");
      StringBuffer stringBuffer0 = new StringBuffer("3Krb");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuffer0, (-1069), document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parse("jaba.lan0.s5rine@0000000138", "jaba.lan0.s5rine@0000000138");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse("n4:$", "n4:$");
      Element element0 = document0.toggleClass("n4:$");
      element0.addClass("n4:$");
      element0.toggleClass("n4:$");
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parse("n4:$", "n4:$");
      Element element0 = document0.toggleClass("n4:$");
      element0.toggleClass("n4:$");
      document0.getElementsByClass("n4:$");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("wPU9E", "wPU9E");
      document0.head();
      Pattern pattern0 = Pattern.compile("Ha!u", 13);
      document0.getElementsMatchingText(pattern0);
      Element element0 = document0.toggleClass("wPU9E");
      element0.toggleClass("Ha!u");
      document0.hasClass("java.lang.string@0000000118");
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parse("n4:$", "n4:$");
      document0.toggleClass("n4:$");
      document0.toggleClass(" ");
      document0.hasClass("class");
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parse("wPUxK", "wPUxK");
      Element element0 = document0.toggleClass("wPUxK");
      element0.hasClass("org.jsoup.nodes.PseudoTextElement");
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("([+-])?(d+)", "([+-])?(d+)");
      CDataNode cDataNode0 = new CDataNode("([+-])?(d+)");
      document0.prependChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7fET4I", "7fET4I");
      Comment comment0 = new Comment("7fET4I", "oR`2UsMk?`[>~qZ_f4");
      document0.appendChild(comment0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Document.createShell("'}3Rl*H\",hM3UB  S");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("ef", "Gmv<sqq+{FMZ&", true);
      document0.prependChild(xmlDeclaration0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Document.createShell("InSelect");
      document0.prependText("               ");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".g{[b:Y$Q=VOl", ".g{[b:Y$Q=VOl");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Tag tag0 = Tag.valueOf("=j[IIM85mxuN~`8+w@d");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "=j[IIM85mxuN~`8+w@d", attributes0);
      Document document0 = Document.createShell("=j[IIM85mxuN~`8+w@d");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.parentNode = (Node) formElement0;
      Element.preserveWhitespace(formElement0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Document.createShell("IeSelect");
      document0.appendElement("br");
      document0.getElementsContainingOwnText("Kv");
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ja$a.;ang.string@0000000 76", "ja$a.;ang.string@0000000 76");
      CDataNode cDataNode0 = new CDataNode("D>+");
      document0.prependChild(cDataNode0);
      document0.getElementsContainingOwnText("ja$a.;ang.string@0000000 76");
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("<!--", "<!--");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("acronym", "acronym");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.title("E>");
      Element element0 = document0.append("body");
      element0.getElementsMatchingText("EMh^2O");
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("");
      Document document0 = Parser.parse("}Tb55", "");
      document0.title(": ");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parse("wPU9E", "wPU9E");
      document0.appendElement("wv");
      document0.getElementsContainingText("wv");
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4X4QG13DWop,", "4X4QG13DWop,");
      document0.appendElement("br");
      Pattern pattern0 = Pattern.compile("br");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Element element0 = new Element("menuitem");
      Comment comment0 = new Comment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element1 = element0.appendChild(comment0);
      element1.text();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = new Document("omentSart");
      document0.getElementById("omentSart");
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parse("\"n4:$", ".g{[b:Y$Q=Vl");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = new Document("6(;+yV#A");
      Element element0 = document0.doClone(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<G}RF5o%hXv", "sZ}mA>A6d=M#X");
      Element element0 = document0.doClone(document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Tag tag0 = Tag.valueOf("tag name must not be empty.");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "tag name must not be empty.", attributes0);
      Document document0 = Parser.parseBodyFragment("tag name must not be empty.", "tag name must not be empty.");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.parentNode = (Node) formElement0;
      formElement1.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parse("wPU9E", "wPU9E");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("CommentStart", "CommentStart");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parse("wPU9E", "wPU9E");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("wPU9E", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      document0.siblingElements();
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.selec.CombiningEvaluator");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.selec.CombiningEvaluator", attributes0);
      Document document0 = Document.createShell("org.jsoup.selec.CombiningEvaluator");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.parentNode = (Node) formElement1;
      // Undeclared exception!
      try { 
        formElement1.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "body");
      Element element0 = document0.head();
      element0.tagName("body");
      String string0 = element0.cssSelector();
      assertEquals("html > body:nth-child(1)", string0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parse("\"n4:$", "\"n4:$");
      document0.toggleClass("\"n4:$");
      document0.cssSelector();
      assertEquals("\"n4:$", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Tag name must not be empty.", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("id", "PUYi");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "MarkupDeclarationOpen", attributes1);
      String string0 = formElement0.cssSelector();
      assertEquals("MarkupDeclarationOpen", formElement0.baseUri());
      assertEquals("#PUYi", string0);
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Yz9^ 6</i~X8", "Yz9^ 6</i~X8");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.insertChildren(2, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "[T");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.insertChildren((-49), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        document0.insertChildren((-2), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "Pattern syntax error: ");
      LinkedHashSet<TextNode> linkedHashSet0 = new LinkedHashSet<TextNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-88), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"n4:$", "\"n4:$");
      Pattern pattern0 = Pattern.compile("}Tb55");
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      // Undeclared exception!
      try { 
        document0.insertChildren(62, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a`", "a`");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      DataNode dataNode0 = new DataNode("a`", "a`");
      nodeArray0[3] = (Node) dataNode0;
      document0.addChildren(nodeArray0);
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, list0.size());
      assertEquals("a`", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.prependText("x*<wb!cT,=uP");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parse("wPU9E", "wPU9E");
      Element element0 = document0.appendElement("wv");
      element0.before("Insert position out of bounds.");
      Element element1 = element0.previousElementSibling();
      assertEquals(3, document0.childNodeSize());
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parse("n4:$", "n4:$");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      Element element0 = document0.toggleClass("n4:$");
      document1.reparentChild(document0);
      element0.toggleClass("n4:$");
      document1.getElementsByIndexEquals((-3713));
      document0.dataNodes();
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.hasClass("java.lang.string@0000000108");
      document0.textNodes();
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Element element0 = new Element("BeforeAttributeName");
      Elements elements0 = element0.getElementsByIndexGreaterThan(1);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parse("wPUxKN", "wPUxKN");
      Elements elements0 = document0.getAllElements();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.StructuralEvaluator$Root", "kCY\u0006pZy4");
      Element element0 = document0.removeClass("java.lang.string@0000000084");
      assertEquals(1, element0.childNodeSize());
      assertEquals("kCY\u0006pZy4", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Element element0 = new Element("IeSelect");
      // Undeclared exception!
      try { 
        element0.before("IeSelect");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#root");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "open", attributes0);
      formElement0.getElementsByAttribute("open");
      assertEquals("open", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=cb@-Zls]qL39", "title");
      document0.getElementsByAttributeValueNot("=cb@-Zls]qL39", "Y=75>PGiMVxva7)t");
      assertEquals("title", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.shallowClone();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("wPU9*", "wPU9*");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Element element0 = new Element("InSelect");
      Elements elements0 = element0.getElementsByAttributeValueMatching("InSelect", "InSelect");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Element element0 = new Element("InSelect");
      boolean boolean0 = element0.is("InSelect");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parse("wPUxKN", "tM\"/*DL&qz^B");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("tM\"/*DL&qz^B", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Element element0 = new Element("IeSelect");
      element0.val("IeSelect");
      Attributes attributes0 = element0.attributes();
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parse(" > ", "IeSelect");
      Elements elements0 = document0.getElementsMatchingOwnText("IeSelect");
      assertEquals("IeSelect", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a`", "a`");
      document0.getElementsByAttributeStarting("a`");
      assertEquals("a`", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qt<..iVIPFw%4gEp", "qt<..iVIPFw%4gEp");
      Element element0 = document0.prependElement("[%s^=%s]");
      element0.after("org.jsoup.select.Evaluator$IndexGreaterThan");
      assertEquals(3, document0.childNodeSize());
      assertEquals("qt<..iVIPFw%4gEp", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Document.createShell("R-O");
      Elements elements0 = document0.getElementsByIndexLessThan(2);
      assertEquals("R-O", document0.baseUri());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qt<..iVIPFw%4gEp", "qt<..iVIPFw%4gEp");
      // Undeclared exception!
      try { 
        document0.after("org.jsoup.select.Evaluator$IndexGreaterThan");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("6(;+yV#A", "6KK");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("q3n8n\"<", "q3n8n\"<");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Yz9^ 6</i~X8", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("A");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "Yz9^ 6</i~X8", attributes0);
      formElement0.getElementsByAttributeValueStarting("A", "Yz9^ 6</i~X8");
      assertEquals("Yz9^ 6</i~X8", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Element element0 = new Element("IeSelect");
      Elements elements0 = element0.getElementsByAttributeValue("IeSelect", "IeSelect");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Yz9^ 6</i~X8", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("body");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "Yz9^ 6</i~X8", attributes0);
      formElement0.wholeText();
      assertEquals("Yz9^ 6</i~X8", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parse("Vqx-6Zd7dwA", "Vqx-6Zd7dwA");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parse("jaba.lan0.s5rine@0000000138", "jaba.lan0.s5rine@0000000138");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".g{[b:Y$Q=VOl", ".g{[b:Y$Q=VOl");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=j[IIM8QmmxuC~`8+wd", "=j[IIM8QmmxuC~`8+wd");
      DataNode dataNode0 = new DataNode("=j[IIM8QmmxuC~`8+wd", "=j[IIM8QmmxuC~`8+wd");
      document0.prependChild(dataNode0);
      document0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.appendText("textarea");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Parser.parse("wPUxKN", "wPUxKN");
      // Undeclared exception!
      try { 
        document0.wrap("wPUxKN");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Document document0 = Parser.parse("wPU9E", "wPU9E");
      document0.nextElementSiblings();
  }
}
