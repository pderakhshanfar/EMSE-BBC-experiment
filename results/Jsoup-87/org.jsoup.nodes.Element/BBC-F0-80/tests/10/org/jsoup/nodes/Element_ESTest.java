/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:28:21 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Document document1 = Parser.parseBodyFragment("", "");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      document0.addChildren(nodeArray0);
      document1.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta3B12b3Z,m", "DoctSp$PublicIdentifier_doubleQuoted");
      Element element0 = document0.head();
      Element element1 = document0.doClone(element0);
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = new Document("");
      StringBuffer stringBuffer0 = new StringBuffer("  ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(stringBuffer0, 31, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = new Document("]$, CKv!py");
      MockFileWriter mockFileWriter0 = new MockFileWriter("]$, CKv!py");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(mockFileWriter0, 60, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parse("o8x&M<PLkxr<8r", "o8x&M<PLkxr<8r");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("rg.jsup.nodes.Entities", "rg.jsup.nodes.Entities");
      Document document1 = Document.createShell("uPZO");
      document0.reparentChild(document1);
      document1.wrap("uPZO");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta3B12b3Z,m", "DoctypePublicIdentifier_doubleQuoted");
      Element element0 = document0.head();
      element0.wrap("body");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta3B12b3Z,m", "DoctSp$PublicIdentifier_doubleQuoted");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      element1.wrap("Wg%,z>Y");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Element element0 = new Element("listing");
      element0.wholeText();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parse("0I7 !<BC[fQw?LE", "");
      document0.siblingIndex = 1997;
      document0.val((String) null);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parse("o8'MA<PLr<@!8E", "o8'MA<PLr<@!8E");
      document0.siblingIndex = (-1436010313);
      document0.val("o8'MA<PLr<@!8E");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parse("Ta3B12b3Z,m", "Ta3B12b3Z,m");
      Element element0 = document0.head();
      element0.val((String) null);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parse("head", " {S");
      document0.empty();
      document0.val("head");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      document0.val("textarea");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("OQXIvjac]", "OQXIvjac]");
      document0.siblingIndex = 518;
      document0.toggleClass("Ws85^E2q#fzRU");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("java.lang.string@0000000038");
      Document document0 = parser0.parseInput((Reader) stringReader0, "java.lang.string@0000000038");
      document0.setSiblingIndex((-1656));
      document0.toggleClass("pr@");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta3B12b3Z,m", "DoctSp$PublicIdentifier_doubleQuoted");
      Element element0 = document0.head();
      element0.toggleClass("DoctSp$PublicIdentifier_doubleQuoted");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("acronym", "acronym");
      document0.siblingIndex = (-787);
      document0.text("");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.text("Hz~qQ%fci\"%T1t)Zw");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Element element0 = new Element("InSelectInTable");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.setSiblingIndex(6);
      document0.tagName("reversed");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("revelsed", "revelsed");
      document0.siblingIndex = (-20569767);
      document0.tagName("revelsed");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.tagName("head");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",", ",");
      Element element0 = document0.doClone(document0);
      element0.tagName("textarea");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("DoctypePublicIdentifier_doubleQuoted", "org.jsoup.nodes.Entities");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta3B12b3Z,m", "Ta3B12b3Z,m");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = new Document("");
      document0.selectFirst("head");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Tag tag0 = Tag.valueOf("oX");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "oX", (Attributes) null);
      pseudoTextElement0.selectFirst("oX");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.select("br");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("body", "</");
      document0.setSiblingIndex(2147483645);
      document0.removeClass("body");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta3B12b3Z,m", "DoctypePublicIdentifier_doubleQuoted");
      Element element0 = document0.head();
      element0.removeClass("Ta3B12b3Z,m");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("\n * ", parseSettings0);
      Element element0 = new Element(tag0, "");
      element0.removeClass("class");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta3B12b3Z,m", "DoctSpePublicIdentifier_doubleQuoted");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      element1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Tag tag0 = Tag.valueOf("title");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "tfoot", attributes0);
      Element.preserveWhitespace(element0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta3B12b3Z,m", "DoctSp$PublicIdentifier_doubleQuoted");
      Element element0 = document0.head();
      element0.prependText(";RsnAzr*y");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parse("head", " {S");
      document0.prependElement("head");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("iDZWxN1>", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Element element0 = new Element("body");
      element0.prependChild(element0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse("value", "value");
      document0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Document.createShell("o8x2M<Pk<8r");
      Element element0 = document0.body();
      element0.prepend("o8x2M<Pk<8r");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("@i&(bUdx=P~PdNK((", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "@i&(bUdx=P~PdNK((", attributes0);
      formElement0.prepend("");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("\n * ", parseSettings0);
      Element element0 = new Element(tag0, "");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7mj\"@|XkTG", "7mj\"@|XkTG");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("OQa7|hi_{%}>l", "Tag name must not be empty.");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = new Document("u");
      Document document1 = (Document)document0.doClone(document0);
      document1.parent();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta3B12b3Z,m", "DoctSp$PublicIdentifier_doubleQuoted");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      element1.ownText();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Tag tag0 = Tag.valueOf("~~&z>Bsj6r}!UJ]k");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "~~&z>Bsj6r}!UJ]k", attributes0);
      formElement0.nodeName();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a9[!'", "a9[!'");
      Element element0 = document0.head();
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("6M,", "             ");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("D~]4Q5=wq!%7[4wi", "&Azvl`+(HBv#yaRrg");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.safety.Cleaner$CleaningVisitor");
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan((-438));
      document0.is((Evaluator) evaluator_IndexGreaterThan0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.is("muted");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = new Document("&007ho7au&<");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      Node[] nodeArray0 = new Node[0];
      element0.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parse("]$, CKv!py", "]$, CKv!py");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      Element element0 = document0.insertChildren(1, nodeArray0);
      element0.prependText("]$, CKv!py");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = new Document("Q");
      document0.setParentNode(document0);
      Elements elements0 = document0.previousElementSiblings();
      document0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parse("x;(>:a|^:Nx\"Bn3", "x;(>:a|^:Nx\"Bn3");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      document0.insertChildren(1, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parse("o8'MA<PLr<@!8E", "o8'MA<PLr<@!8E");
      document0.siblingIndex = (-1436010313);
      document0.html("org.jsoup.select.Evaluator$AllElements");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("\n * ", parseSettings0);
      Element element0 = new Element(tag0, "");
      element0.html("");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("2d(TIAZ}#@", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "j.va.lang.stri5g@0000000038", attributes0);
      formElement0.html((BufferedWriter) null);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document("$rX}9DgB9y$o5");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = new Document("");
      document0.hasClass("menuitem");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("\n * ", parseSettings0);
      Element element0 = new Element(tag0, "");
      element0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "br");
      Pattern pattern0 = Pattern.compile("br");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("I", "I");
      document0.getElementsMatchingText("I");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", "body");
      Pattern pattern0 = Pattern.compile(".");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.getElementsContainingText("");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = new Document("revelse<");
      document0.getElementsContainingOwnText(":prev*%s");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.getElementsByTag("iRsD>lTt");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Element element0 = new Element("head");
      element0.getElementsByTag("head");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.getElementsByIndexGreaterThan(0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000038");
      document0.toggleClass("java.lang.string@0000000038");
      document0.getElementsByClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta3B12b3Z,m", "DoctSp$PublicIdentifier_doubleQuoted");
      document0.getElementsByAttributeValueStarting("DoctSp$PublicIdentifier_doubleQuoted", "DoctSp$PublicIdentifier_doubleQuoted");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parse(".5D7Pk}sJZR>,#", ".5D7Pk}sJZR>,#");
      document0.getElementsByAttributeValueNot("#root", "KSv/'");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse("o8'&M<PLkr<8E", "o8'&M<PLkr<8E");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("o8'&M<PLkr<8E", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("Insert position out of bounds.", "o8'&M<PLkr<8E");
      FormElement formElement0 = new FormElement(tag0, "java.lang.string@0000000104 java.lang.string@0000000104", attributes1);
      document0.prependChild(formElement0);
      document0.getElementsByAttributeValue("Insert position out of bounds.", "o8'&M<PLkr<8E");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta3B12b3Z,m", "DoctSp$PublicIdentifier_doubleQuoted");
      Element element0 = document0.head();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = new Document("Ta3B12b3Z,m");
      document0.childNodes = null;
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("java.lang.string@0000000038");
      Document document0 = parser0.parseInput((Reader) stringReader0, "java.lang.string@0000000038");
      document0.setSiblingIndex((-1656));
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7mj\"@|XkTG", "7mj\"@|XkTG");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parse("a9[!'", "a9[!'");
      document0.siblingIndex = (-1110026255);
      document0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("j_qm}ck|ragd-_sz7", "j_qm}ck|ragd-_sz7");
      Element element0 = document0.head();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parse("s+", "s+");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Document.createShell("pakxrq");
      Element element0 = document0.empty();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".", "!JF%(SyGH");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parse("#", "QJ8&)HC<XWO7).Vf");
      document0.setSiblingIndex(40);
      Set<String> set0 = document0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Element element0 = new Element("head");
      Locale locale0 = new Locale("head");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "s+");
      TextNode textNode0 = new TextNode("");
      Element element0 = document0.doClone(textNode0);
      Locale locale0 = Locale.forLanguageTag("br");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = new Document("plkxrq");
      document0.addClass("plkxrq");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.toggleClass("T>l./");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = new Document("body");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a9[!'", "a9[!'");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.doClone(document0);
      element0.before("");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.strin}@0800000038", "java.lang.strin}@0800000038");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a9[!'", "a9[!'");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("OQXIvjac]", "OQXIvjac]");
      document0.setSiblingIndex(2494);
      document0.attr("D;UZY", true);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Document.createShell("ktl'qi\"2)gn5%~-Kp!");
      document0.setSiblingIndex((-1099));
      document0.attr("<html>\n <head>\n  <title>ktl'qi\"2)gn5%~-Kp!</title>\n </head>\n <body></body>\n</html>", true);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("TadB12b3m", "DoctypePublicIdentifier_doubleQuoted");
      Element element0 = document0.head();
      Element element1 = element0.html("TadB12b3m");
      element1.attr("DoctypePublicIdentifier_doubleQuoted", false);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = new Document("");
      document0.attr("bTIS5Bb.-OM%B", false);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.body();
      element0.attr("java.lang.string@0000000035 java.lang.string@0000000070", "Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Document document1 = (Document)document0.doClone(document0);
      document1.attr("", "");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$ContainsData");
      document0.attr("", "");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta3B12b3Z,m", "DoctSp$PublicIdentifier_doubleQuoted");
      Element element0 = document0.head();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta3B12b3Z,m", "Ta3B12b3Z,m");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      element1.appendText("nth-child");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.doClone(document0);
      element0.appendText("");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("OQXIvjac]", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "7s}2", attributes0);
      pseudoTextElement0.appendElement("7s}2");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parse(":has(", ":has(");
      document0.appendElement("html");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parse("}M'MU<L6br<@!A", "}M'MU<L6br<@!A");
      document0.setSiblingIndex((-377));
      Comment comment0 = new Comment("}M'MU<L6br<@!A", "}M'MU<L6br<@!A");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      document0.appendChild(xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("}=nd0^mCV'EO", "Insert position out of bounds.");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("}=nd0^mCV'EO", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("#declaration");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "#declaration", attributes0);
      element1.appendChild(formElement0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Document document1 = document0.clone();
      Element element0 = document1.appendTo(document0);
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a9[!'", "a9[!'");
      Element element0 = document0.head();
      element0.append("</");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = new Document("/Q@A4+a{_/T:5-p](");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a9[!'", "a9[!'");
      Element element0 = document0.body();
      Comment comment0 = new Comment("uExXFyk/at%oX?0", "uExXFyk/at%oX?0");
      element0.after((Node) comment0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta3B12b3Z,m", "DoctypePublicIdentifier_doubleQuoted");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta3B12b3Z,m", "Ta3B12b3Z,m");
      Element element0 = document0.head();
      element0.after("html > head");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("o'MC*A<fr<@!8", "o'MC*A<fr<@!8");
      Element element0 = document0.appendElement("http");
      element0.after("lNcZD1>C");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse("ScriptDataLessthanSign", "ScriptDataLessthanSign");
      Element element0 = document0.doClone(document0);
      element0.after("gykszrpv}");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("a9[!'", "a9[!'");
      document0.siblingIndex = (-1110026255);
      document0.addClass("a9;~Ave#2!G80jpCVQ");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("o8x&M<PLkxrQ<8r", "o8x&M<PLkxrQ<8r");
      Element element0 = document0.head();
      element0.addClass("br");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Element element0 = new Element("listing");
      Document document0 = Document.createShell("listing");
      Element element1 = element0.appendTo(document0);
      element1.addClass("deO8BcX/oC");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = new Document("revelsed");
      document0.addClass("body");
      document0.toggleClass("Children collection to be inserted must not be null.");
      document0.hasClass("body");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("o8x&M<PLkxr<8r", "o8x&M<PLkxr<8r");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.wrap("o8x&M<PLkxr<8r");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.val("br");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(";SXPfZoe1:.rf{;", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "s+", attributes0);
      // Undeclared exception!
      try { 
        formElement0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = new Document("]$, CKv!py");
      // Undeclared exception!
      try { 
        document0.text("]$, CKv!py");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Element element0 = new Element("#root");
      // Undeclared exception!
      try { 
        element0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("o8x&M<PLkxr<8r", "o8x&M<PLkxr<8r");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.tagName("o8x&M<PLkxr<8r");
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parse("2d*D@t2n", "bgsound");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Element element0 = new Element("head");
      // Undeclared exception!
      try { 
        element0.selectFirst("v\":uilh2 :;R^@7a");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'v\":uilh2 :;R^@7a': unexpected token at '\":uilh2 :;R^@7a'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Document.createShell("Y");
      // Undeclared exception!
      try { 
        document0.select("6M!%Z[s?p^>`uj5nXJr");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '6M!%Z[s?p^>`uj5nXJr': unexpected token at '!%Z[s?p^>`uj5nXJr'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("o8x&M<PLkxrQ<8r", "o8x&M<PLkxrQ<8r");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("o8x&M<PLkxrQ<8r", "o8x&M<PLkxrQ<8r");
      DataNode dataNode0 = new DataNode("j|([[", "j|([[");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("javS.lang.strin}@08000000#8", "javS.lang.strin}@08000000#8");
      DataNode dataNode0 = new DataNode("javS.lang.strin}@08000000#8");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(document0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse("z,1", "id");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.doClone(document0);
      element0.after((Node) document0);
      // Undeclared exception!
      element0.prependElement("o~ !6cCbxu*l':J'F29");
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput(":matchesOwn", ":matchesOwn");
      // Undeclared exception!
      try { 
        document0.prependElement(":matchesOwn");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.safety.Cleaner$CleaningVisitor");
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".pi", ".pi");
      DataNode dataNode0 = new DataNode(".pi", "java.lang.string@0000000035");
      dataNode0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.prependChild(dataNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("#root", "script");
      document0.setSiblingIndex(132);
      Element element0 = document0.doClone(document0);
      // Undeclared exception!
      try { 
        document0.prependChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 132, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parse("OIxq\"9m%h`:!kiXM", "0!z");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = new Document("Q");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prepend("Q");
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("yk8CN;BMX5\"ZY!d", "yk8CN;BMX5\"ZY!d");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("yk8CN;BMX5\"ZY!d", document0, "yk8CN;BMX5\"ZY!d");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prepend("yk8CN;BMX5\"ZY!d");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parse("x;(>:a|^:Nx\"Bn3", "x;(>:a|^:Nx\"Bn3");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "s+");
      TextNode textNode0 = new TextNode("");
      Document document1 = (Document)document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        document1.parent();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parse("plkxrq", "plkxrq");
      MockPrintStream mockPrintStream0 = new MockPrintStream("plkxrq");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(2070);
      // Undeclared exception!
      document0.outerHtmlTail(mockPrintStream0, 3664, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document0 = new Document("4`L");
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 12, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = new Document("nav");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 14, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      StringBuffer stringBuffer0 = new StringBuffer("class");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("hgroup", "id");
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuffer0, (-2984), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("revMlsed", "revMlsed");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, 0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      MockFile mockFile0 = new MockFile("org.jsoup.nodes.Element$1", "#declaration");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintStream0, 98688, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000078", "java.lang.string@0000000078");
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 60, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&?", "&?");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 46, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",=c)Ld*f#R", "");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringBuffer0, (-1432352094), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parse("dl", ".pi");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, 125, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta3B12b3Z,m", "DoctSp$PublicIdentifier_doubleQuoted");
      Document document1 = new Document("Ta3B12b3Z,m");
      document0.appendTo(document1);
      document1.childNodes = null;
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000078", "java.lang.string@0000000078");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = new Document("revelse<");
      Comment comment0 = new Comment("org.jsoup.nodes.Element$2");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p", "p");
      document0.setParentNode(document0);
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild(13, 13);
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IsNthChild0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cod4e", "                   ");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Document.createShell("Tf~5|ka=c3\"!");
      // Undeclared exception!
      try { 
        document0.is("org.jsoup.nodes.Element$2");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.nodes.Element$2': unexpected token at '$2'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", " ");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.is("textarea");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Node[] nodeArray0 = new Node[9];
      DataNode dataNode0 = new DataNode("");
      nodeArray0[0] = (Node) dataNode0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) dataNode0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      dataNode0.reparentChild(dataNode0);
      nodeArray0[8] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = new Document("Ta3B12b3Z,m");
      document0.childNodes = null;
      Node[] nodeArray0 = new Node[8];
      // Undeclared exception!
      try { 
        document0.insertChildren(4906, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parse("}=nd0^mCV'EO", "}=nd0^mCV'EO");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.html("}=nd0^mCV'EO");
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000038");
      Element element0 = document0.addClass("java.lang.string@0000000038");
      List<Node> list0 = Parser.parseXmlFragment("java.lang.string@0000000038", "java.lang.string@0000000038");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.html("java.lang.string@0000000038");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = new Document("Ta3B12b3Z,m");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.html("org.jsoup.select.evaluator$containsdata");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Document.createShell("o8x2M<Pk<8r");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("o8x2M<Pk<8r", "o8x2M<Pk<8r", false);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.html(".4;Z5Xm'");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("plr", "plr");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("o8x&S<PLkxr<8r", "o8x&S<PLkxr<8r");
      document0.setParentNode(document0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("o8x&S<PLkxr<8r");
      // Undeclared exception!
      document0.html(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("             ", "|){_O");
      // Undeclared exception!
      try { 
        document0.html((BufferedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse("o8x2M<Pk<8r", "o8x2M<Pk<8r");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.charset((Charset) null);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      // Undeclared exception!
      try { 
        document1.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("g`&5uv", "g`&5uv");
      CDataNode cDataNode0 = new CDataNode(";qo?6ZQFQBi(L'7F*<#");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parse("j|#ARuz=?~IM", "j|#ARuz=?~IM");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("sco-");
      Document document0 = parser0.parseInput((Reader) stringReader0, "bSj#N\"\"(H%0J6vy$-m*");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("Array must not contain any null objects", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("up*X.dtf$vw[`j;yCf", "DoctSp$PublicVdentifier_doubleQuoted");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("6eXAY,&N][");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 6eXAY,&N][
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      DocumentType documentType0 = new DocumentType("Children collection to be inserted must not be null.", "], ckv!p", "7fY |", "7fY |", ".+.49");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("Children collection to be inserted must not be null.");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t\"6Ro]", "\"uN");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("Hz~qQ%fci\"%T1t)Zw");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: Hz~qQ%fci\"%T1t)Zw
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parse("ScriptDataLessthanSign", "ScriptDataLessthanSign");
      CDataNode cDataNode0 = new CDataNode("ScriptDataLessthanSign");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("ScriptDataLessthanSign");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000038", "java.lang.string@0000000038");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("afterhead");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":nth-child(%d)", ":nth-child(%d)");
      DataNode dataNode0 = new DataNode(":nth-child(%d)");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText(":nth-child(%d)");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = new Document("Ta3B12b3Z,m");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByTag("input");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("class", parseSettings0);
      Element element0 = new Element(tag0, "class");
      // Undeclared exception!
      try { 
        element0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("I@OU+F)Cr9?62?^=D7", parseSettings0);
      Element element0 = new Element(tag0, "GAN']+&K?]IAqk");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        element0.getElementsByIndexGreaterThan((-80773204));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parse("}=nd0^mCV'EO", "}=nd0^mCV'EO");
      TextNode textNode0 = new TextNode("}=nd0^mCV'EO");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.getElementsByIndexGreaterThan(40);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = new Document("Ta3B12b3Z,m");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals(71);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", ":last-of-type");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = new Document("up*X.dtf$vw[`j;yCf");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("Nz,{tf$", "up*X.dtf$vw[`j;yCf");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("class", parseSettings0);
      Element element0 = new Element(tag0, "class");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueStarting("", "Wsj@+yu1='yzJ6(Tp+V");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", ">O9n\".$%&%TP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = new Document("Ta3B12b3Z,m");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("XUC%&`%jsS\"ED/", "Ta3B12b3Z,m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching(" ", ".w5}{GZ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: .w5}{GZ
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = new Document("Ta3B12b3Z,m");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("Ta3B12b3Z,m", "plkxrq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("@i&(bUdx=P~PdNK((", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "@i&(bUdx=P~PdNK((", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueContaining("", "head");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Document.createShell("2f");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue(" > ", "t*9");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("2BF~", "org.jsoup.select.Evaluator$Attribute");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EVN0Of.kdQ", ".");
      Element element0 = document0.appendElement("org.jsoup.parser.Token");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("?]hG\"a|4w");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("$,", "$,");
      Element element0 = document0.prependElement("#");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        element0.getElementsByAttribute(">FN2h9&X~%N45~");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$ContainsData");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parse("</", "Xm>ny6%pr>N%)vCXhlL");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementById("</");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parse("</", "Xm>ny6%pr>N%)vCXhlL");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getAllElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta3B12b3Z,m", "DoctypePublicIdentifier_doubleQuoted");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      CDataNode cDataNode0 = new CDataNode("");
      cDataNode0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.dataNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("</", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "</", attributes0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) formElement0;
      nodeArray0[2] = (Node) formElement0;
      formElement0.addChildren(nodeArray0);
      // Undeclared exception!
      try { 
        formElement0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '</': unexpected token at '</'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta3B12b3Z,m", "DoctSp$PublicIdentifier_doubleQuoted");
      Element element0 = document0.head();
      Document document1 = document0.ownerDocument();
      document1.childNodes = null;
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parse(".", ".");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.child(28);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 28, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "br");
      // Undeclared exception!
      try { 
        document0.child((-2191));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = new Document("revelsed");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.before("   ");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Document document1 = (Document)document0.doClone(document0);
      document1.setSiblingIndex(8221);
      // Undeclared exception!
      try { 
        document1.before("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8221, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000038", "/(Mem)b~DR(e6_a");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.attr("/(Mem)b~DR(e6_a", "v{Nbi8`zLw");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$ContainsData");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "rp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000038", "java.lang.string@0000000038");
      CDataNode cDataNode0 = new CDataNode("java.lang.string@0000000038");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.appendTo(element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = new Document("\"y4nIx^E<<up!7*M I");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&?", "&?");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("K3H~", "K3H~");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.doClone(document0);
      element0.before((Node) document0);
      // Undeclared exception!
      document0.appendElement("section");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$ContainsData");
      // Undeclared exception!
      try { 
        document0.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parse("o8'&M<PLkr<8E", "o8'&M<PLkr<8E");
      DataNode dataNode0 = DataNode.createFromEncoded("RawtextEndTagOpen", "o8'&M<PLkr<8E");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.appendChild(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parse("o8'&M<PLkr<8E", "MUyL=Wc[V`Mk&");
      Tag tag0 = Tag.valueOf("footer");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "J%40d&v|", attributes0);
      CDataNode cDataNode0 = new CDataNode("footer");
      Node node0 = cDataNode0.doClone(formElement0);
      // Undeclared exception!
      try { 
        document0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Tag tag0 = Tag.valueOf("-06:A)P!\"9+a");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "&#xa0;", attributes0);
      // Undeclared exception!
      try { 
        element0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2", "2");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.append("org.jsoup.select.evaluator$containsdata");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IsNthLastOfType");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      try { 
        element0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parse("h?I.1E,lb7U8_AMX", "h?I.1E,lb7U8_AMX");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.after("<;Oj+=O!jO");
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse(" ,H+/^JJTAa5J\"`QZ", " ,H+/^JJTAa5J\"`QZ");
      Element element0 = document0.body();
      element0.siblingIndex = (-1280);
      // Undeclared exception!
      try { 
        element0.after("java.lang.string@0000000039");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -1279, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Esc5YdeU#sK;OS", "Esc5YdeU#sK;OS");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("ScriptDataEscaped");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "AfterFrameset", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "org.jsoup.nodes.Element$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "s+");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("#");
      Document document0 = parser0.parseInput((Reader) stringReader0, "#");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parse("Ta3B12b3Z,m", "Ta3B12b3Z,m");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      element1.hasText();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = new Document("Q");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EVN0Of.kdQ", ".");
      Element element0 = document0.head();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.doClone(document0);
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Esc5YdeU#sK;OS", "Esc5YdeU#sK;OS");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Element element0 = new Element("body");
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Element element0 = new Element("head");
      Pattern pattern0 = Pattern.compile("v\":uilh2 :;R^@7a", 46);
      element0.getElementsByAttributeValueMatching("v\":uilh2 :;R^@7a", pattern0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$ContainsData");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parse("ScriptDataLessthanSign", "ScriptDataLessthanSign");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      document0.outputSettings(document_OutputSettings1);
      document0.title("ScriptDataLessthanSign");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("2", "SG#p r[;L\" ");
      Charset charset0 = document0.charset();
      document0.charset(charset0);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(812);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      document0.html(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Document.createShell("ktl'qi\"2)gn5%~-Kp!");
      document0.title("ktl'qi\"2)gn5%~-Kp!");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.tagName("textarea");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("java.lang.string@0000000038");
      Document document0 = parser0.parseInput((Reader) stringReader0, "java.lang.string@0000000038");
      Element element0 = document0.addClass("java.lang.string@0000000038");
      element0.addClass("java.lang.string@0000000038");
      document0.toggleClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Document.createShell("plkxrq");
      document0.addClass("plkxrq");
      document0.toggleClass("a9;~Av#E2!G80yjpCVQ");
      document0.hasClass("a9;~Av#E2!G80yjpCVQ");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("java.lang.string@0000000038");
      Document document0 = parser0.parseInput((Reader) stringReader0, "java.lang.string@0000000038");
      document0.addClass("pr@");
      document0.previousElementSiblings();
      document0.parents();
      document0.children();
      document0.toggleClass("pr@");
      document0.hasClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "org.jsoup.select.Evaluator$Class");
      document0.addClass("beforehtml");
      document0.toggleClass("org.jsoup.nodes.Element");
      document0.hasClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("]$, CKv!py");
      Document document0 = parser0.parseInput((Reader) stringReader0, "org.jsoup.nodes.Element$2");
      document0.addClass("]$, CKv!py");
      document0.toggleClass(" > ");
      document0.hasClass("BMF*");
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000038");
      document0.toggleClass("java.lang.string@0000000038");
      document0.hasClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element");
      document0.addClass("X6mep#G-%{\"wz+6");
      document0.hasClass("org.jsoup.select.Evaluator$AttributeWithValueEnding");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*yr1Tt>=<?Z=bVZ", "pY125T xO)c[T*");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000038 ht<l", "s+");
      DataNode dataNode0 = new DataNode("s+");
      document0.prependChild(dataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parse("o8x&M<PLkxr<8r", "o8x&M<PLkxr<8r");
      DataNode dataNode0 = new DataNode("o8x&M<PLkxr<8r");
      document0.prependChild(dataNode0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("o8x&M<PLkxrQ<8r", "o8x&M<PLkxrQ<8r");
      Document document1 = document0.clone();
      document1.setParentNode(document0);
      document1.appendChild(document0);
      document0.getElementsMatchingOwnText("o8x&M<PLkxrQ<8r");
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("\n * ", "I1?qM/,F1yhTCo", false);
      Element.preserveWhitespace(xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Class", "org.jsoup.select.Evaluator$Class");
      CDataNode cDataNode0 = new CDataNode("D2");
      document0.prependChild(cDataNode0);
      document0.getElementsMatchingText("org.jsoup.select.Evaluator$Class");
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      DataNode dataNode0 = DataNode.createFromEncoded("of/Cbs{", "Y?lL1 5 {}je4c[B");
      document0.appendChild(dataNode0);
      document0.getElementsMatchingOwnText("<");
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Document.createShell("PFw6$c JkvD");
      document0.title(",");
      document0.appendText(",");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parse("8HH\"jQq:nrZVi", "8HH\"jQq:nrZVi");
      document0.appendText("8HH\"jQq:nrZVi");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("o8'&M<PLkr<8E", "o8'&M<PLkr<8E");
      Comment comment0 = new Comment("o8'&M<PLkr<8E", "o8'&M<PLkr<8E");
      document0.appendChild(comment0);
      document0.getElementsMatchingText("java.lang.string@0000000047 pr*");
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      Element element0 = document0.appendElement("id");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.doClone(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Element element0 = new Element("listing");
      Document document0 = Document.createShell("listing");
      element0.appendTo(document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.doClone(document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("o8x&M<PLkxrQ<8r", "o8x&M<PLkxrQ<8r");
      document0.appendChild(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parse("x;(>:a|^:Nx\"Bn3", "x;(>:a|^:Nx\"Bn3");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",", ",");
      Element element0 = document0.appendElement("#");
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(2, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("revelsed", "revelsed");
      document0.siblingElements();
      assertEquals("revelsed", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = new Document("2");
      Element element0 = document0.doClone(document0);
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a9[!'", "a9[!'");
      Element element0 = document0.head();
      element0.before("&=sj)8FJ>j{#}!}!f7");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(3)", string0);
      assertEquals("a9[!'", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a9[!'", "a9[!'");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals("a9[!'", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Document.createShell("plkxrq");
      document0.addClass("plkxrq");
      document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("plkxrq", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Tag tag0 = Tag.valueOf("-06:A)P!\"9+a");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "&#xa0;", attributes0);
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        element0.insertChildren(973, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$ContainsData");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-3696), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = new Document("&007ho7au&<");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren((-1), nodeArray0);
      assertEquals("&007ho7au&<", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hHrCJ[7", "hHrCJ[7");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren(2069, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("class", 1523);
      Document document0 = Parser.parseBodyFragmentRelaxed("", "id");
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      // Undeclared exception!
      try { 
        document0.insertChildren((-4744), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("plr", "plr");
      DataNode dataNode0 = DataNode.createFromEncoded("plr", "ROKL=s$\"s?2pR");
      document0.appendChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("em", "em");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("em", document0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("o8x&M<PLkxrQ<8r", "o8x&M<PLkxrQ<8r");
      Elements elements0 = document0.getElementsByIndexLessThan((-1170));
      assertTrue(elements0.isEmpty());
      assertEquals("o8x&M<PLkxrQ<8r", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parse("}=nd0^mCV'EO", "}=nd0^mCV'EO");
      Elements elements0 = document0.getElementsByIndexGreaterThan(40);
      assertTrue(elements0.isEmpty());
      assertEquals("}=nd0^mCV'EO", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parse("OQXIvjac]", "OQXIvjac]");
      Element element0 = document0.selectFirst("html");
      assertEquals("OQXIvjac]", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Element element0 = new Element("InSelectInTable");
      boolean boolean0 = element0.is("InSelectInTable");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a9[!'", "a9[!'");
      // Undeclared exception!
      try { 
        document0.before("&=sj)8FJ>j{#}!}!f7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("j_qm}ck|ragd-_sz7", "j_qm}ck|ragd-_sz7");
      document0.getElementsByAttribute("j_qm}ck|ragd-_sz7");
      assertEquals("j_qm}ck|ragd-_sz7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000078", "java.lang.string@0000000078");
      Elements elements0 = document0.getElementsByAttributeValueNot("java.lang.string@0000000078", " ");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ta3B12b3Z,m", "Ta3B12b3Z,m");
      Element element0 = document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ta3B12b3Z,m", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("I", "I");
      document0.doSetBaseUri("I");
      assertEquals("I", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$IsNthLastOfType");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("e+U'+", "textarea");
      document0.tagName("textarea");
      Element element0 = document0.val("e+U'+");
      assertEquals(1, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("$,", "$,");
      document0.getElementsByAttributeValueContaining("#", "body");
      assertEquals("$,", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000038");
      Elements elements0 = document0.getElementsContainingText("java.lang.string@0000000038");
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000038");
      Elements elements0 = document0.getElementsByClass("java.lang.string@0000000038");
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("\n * ", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "\n * ", attributes0);
      pseudoTextElement0.getElementsByAttributeValueEnding("org.jsoup.nodes.Element$NodeList", "\n * ");
      assertEquals("\n * ", pseudoTextElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      document0.is((Evaluator) evaluator_IsLastOfType0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("o8x&M<PLkxrQ<8r", "o8x&M<PLkxrQ<8r");
      document0.getElementsByAttributeValueMatching("o8x&M<PLkxrQ<8r", "o8x&M<PLkxrQ<8r");
      assertEquals("o8x&M<PLkxrQ<8r", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a9[!'", "L]+&8R_m9hC3,I/");
      document0.val("L]+&8R_m9hC3,I/");
      Attributes attributes0 = document0.attributes();
      assertEquals("L]+&8R_m9hC3,I/", document0.baseUri());
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("o8x&M<PLkxr<8r", "o8x&M<PLkxr<8r");
      // Undeclared exception!
      try { 
        document0.wrap("o8x&M<PLkxr<8r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.getElementsByIndexEquals(61);
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      document0.getElementsByAttributeStarting("textarea");
      assertEquals("head", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = new Document("");
      document0.normalise();
      document0.text("Hz~qQ%fci\"%T1t)Zw");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Entities", "s{Mco-");
      Elements elements0 = document0.getElementsByIndexLessThan(32);
      assertEquals(3, elements0.size());
      assertEquals("s{Mco-", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("o'MC*A<fr<@!8", "o'MC*A<fr<@!8");
      // Undeclared exception!
      try { 
        document0.after("lNcZD1>C");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertEquals(4, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "body");
      Elements elements0 = document0.select("body");
      assertEquals("body", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'", "'");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("br", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'", "'");
      document0.getElementsByAttributeValue("Array must not contain any null objects", "</");
      assertEquals("'", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".", "!JF%(SyGH");
      String string0 = document0.wholeText();
      assertEquals(".", string0);
      assertEquals("!JF%(SyGH", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = new Document("revelsed");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.addClass("");
      boolean boolean0 = document0.hasClass("Y|gnb_'0YB[DC(");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":nth-child(%d)", ":nth-child(%d)");
      Elements elements0 = document0.getElementsContainingOwnText(":nth-child(%d)");
      assertEquals(":nth-child(%d)", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Element element0 = new Element("SRE");
      Map<String, String> map0 = element0.dataset();
      assertTrue(map0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Document document0 = new Document("s.)89H@&,?s}@");
      document0.tagName("textarea");
      // Undeclared exception!
      try { 
        document0.val("body");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Ele$ent$1", "org.jsoup.nodes.Ele$ent$1");
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.child(0);
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      assertEquals("org.jsoup.nodes.Ele$ent$1", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.prependText("");
      boolean boolean0 = element0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("e+U'+", "textarea");
      document0.getElementById("@`a_hd-}");
  }
}
