/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:47:31 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.MissingFormatArgumentException;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("VGI9cqJ1JWxs)CJ", "org.jsoup.nodes.Element$1");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.addClass("XX");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$1", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("Tag name must not be empty.");
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$1", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document2.location());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document0.getElementsByClass("|okg");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertSame(document0, document2);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Tag tag0 = Tag.valueOf("mjE4]\"");
      assertNotNull(tag0);
      assertEquals("mjE4]\"", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertEquals("mjE4]\"", tag0.toString());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "InTableText", attributes0);
      assertNotNull(pseudoTextElement0);
      assertEquals("mjE4]\"", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertEquals("mjE4]\"", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals("InTableText", pseudoTextElement0.baseUri());
      assertEquals("mjE4]\"", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("mjE4]\"", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      
      Elements elements0 = pseudoTextElement0.getElementsByAttributeValueMatching("39c0g^&LGdOkm[", "Jhsb@UjYh?");
      assertNotNull(elements0);
      assertEquals("mjE4]\"", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertEquals("mjE4]\"", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals("InTableText", pseudoTextElement0.baseUri());
      assertEquals("mjE4]\"", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("mjE4]\"", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parse("@", "@");
      assertNotNull(document0);
      assertEquals("@", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document0.getElementsByAttributeValueContaining("Yb", "br");
      assertNotNull(elements0);
      assertEquals("@", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      StringBuilder stringBuilder0 = new StringBuilder(1362);
      assertNotNull(stringBuilder0);
      assertEquals("", stringBuilder0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      document0.outerHtmlTail(stringBuilder0, 1362, document_OutputSettings0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = new Document("uaMf,nXtu/");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("uaMf,nXtu/", document0.baseUri());
      assertEquals("uaMf,nXtu/", document0.location());
      assertFalse(document0.hasParent());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Tag name must not be empty.");
      assertNotNull(mockPrintWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      document0.outerHtmlHead(mockPrintWriter0, (-2473), document_OutputSettings0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("uaMf,nXtu/", document0.baseUri());
      assertEquals("uaMf,nXtu/", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parse("@", "@");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("@", document0.location());
      
      document0.nodelistChanged();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("@", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("@", document0.location());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ZR", "ZR");
      assertNotNull(document0);
      assertEquals("ZR", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("ZR", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      
      List<Node> list0 = document0.ensureChildNodes();
      assertNotNull(list0);
      assertEquals("ZR", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("ZR", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("", "F6e~o}^I^SWyHRoO]Z");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("F6e~o}^I^SWyHRoO]Z", document0.location());
      assertEquals("F6e~o}^I^SWyHRoO]Z", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      
      document0.doSetBaseUri("F6e~o}^I^SWyHRoO]Z");
      assertFalse(document0.hasParent());
      assertEquals("F6e~o}^I^SWyHRoO]Z", document0.location());
      assertEquals("F6e~o}^I^SWyHRoO]Z", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "EIFrTW`BC8xd6");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsMatchingOwnText("X.JgN2&Kw&6K");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("\"'C^;s*|0M I`:)>A");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "#root");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.wrap("%");
      assertNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("AttributeValue_doubleQuoted", "AttributeValue_doubleQuoted");
      assertNotNull(document0);
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertEquals("AttributeValue_doubleQuoted", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = element0.wrap("CR(Yx%G_\"[:W");
      assertNotNull(element1);
      assertEquals("AttributeValue_doubleQuoted", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("AttributeValue_doubleQuoted", document0.location());
      assertEquals("AttributeValue_doubleQuoted", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("AttributeValue_doubleQuoted", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = new Document("eoFOW)L>iJZmVyu1^");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("eoFOW)L>iJZmVyu1^", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("eoFOW)L>iJZmVyu1^", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      document0.setSiblingIndex((-1852));
      assertEquals((-1852), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("eoFOW)L>iJZmVyu1^", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("eoFOW)L>iJZmVyu1^", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.val("eoFOW)L>iJZmVyu1^");
      assertNotNull(document1);
      assertEquals((-1852), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("eoFOW)L>iJZmVyu1^", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("eoFOW)L>iJZmVyu1^", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-1852), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("eoFOW)L>iJZmVyu1^", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("eoFOW)L>iJZmVyu1^", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[jfUUHG", "org.jsoup.select.Evaluator$Class");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$Class", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.Evaluator$Class", document0.location());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$Class", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.Evaluator$Class", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("org.jsoup.select.Evaluator$Class", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      
      Element element1 = element0.val("PLAINTEXT");
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$Class", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.Evaluator$Class", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("org.jsoup.select.Evaluator$Class", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$Class", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Document.createShell(".gwV%XMz']gx\"");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".gwV%XMz']gx\"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(".gwV%XMz']gx\"", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".gwV%XMz']gx\"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(".gwV%XMz']gx\"", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(".gwV%XMz']gx\"", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.text(".gwV%XMz']gx\"");
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".gwV%XMz']gx\"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(".gwV%XMz']gx\"", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(".gwV%XMz']gx\"", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(".gwV%XMz']gx\"", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell(".gwV%XMz']gx\"");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(".gwV%XMz']gx\"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(".gwV%XMz']gx\"", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.text(".gwV%XMz']gx\"");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(".gwV%XMz']gx\"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(".gwV%XMz']gx\"", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".gwV%XMz']gx\"", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(".gwV%XMz']gx\"", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = new Document("Oe\"");
      assertNotNull(document0);
      assertEquals("Oe\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Oe\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("Oe\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Oe\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      document0.setSiblingIndex((-1029));
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals((-1029), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      
      Document document1 = (Document)document0.tagName("h'0X'i]1Yo$cl_[HX");
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals((-1029), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("h'0x'i]1yo$cl_[hx", document0.tagName());
      assertEquals((-1029), document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("h'0x'i]1yo$cl_[hx", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.tagName("body");
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("body", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.isBlock());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parse("ZW", "ZW");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ZW", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ZW", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.appendElement("textarea");
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ZW", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ZW", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("textarea", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("ZW", element0.baseUri());
      assertFalse(element0.isBlock());
      
      Element element1 = element0.tagName("menuitem");
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("ZW", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ZW", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("menuitem", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("menuitem", element0.nodeName());
      assertEquals("ZW", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("menuitem", element1.tagName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("ZW", element1.baseUri());
      assertEquals("menuitem", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      String string0 = document0.tagName();
      assertNotNull(string0);
      assertEquals("#root", string0);
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Of-@sC2*N+]{", "textarea");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.createElement("textarea");
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      
      Tag tag0 = element0.tag();
      assertNotNull(tag0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.baseUri());
      assertEquals("textarea", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.formatAsBlock());
      assertEquals("textarea", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.prependElement("br");
      assertNotNull(element0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      
      Tag tag0 = element0.tag();
      assertNotNull(tag0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("br", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.formatAsBlock());
      assertEquals("br", tag0.getName());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Element element0 = new Element("head");
      assertNotNull(element0);
      assertEquals("", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      
      Tag tag0 = element0.tag();
      assertNotNull(tag0);
      assertEquals("", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertEquals("head", tag0.toString());
      assertEquals("head", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormListed());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Tag tag0 = document0.tag();
      assertNotNull(tag0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.getName());
      assertTrue(tag0.isInline());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      
      Element element0 = new Element(tag0, "br");
      assertNotNull(element0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("body", element0.nodeName());
      
      Element element1 = element0.shallowClone();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.canContainBlock());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("br", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-b?", "-b?");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("-b?", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("-b?", document0.location());
      
      Element element0 = document0.selectFirst("ScriptDataDoubleEscapedLessthanSign");
      assertNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("-b?", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("-b?", document0.location());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parse("mjE4]\"", "mjE4]\"");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.appendElement("i");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("i", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("i", element0.nodeName());
      
      Element element1 = element0.selectFirst("i");
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("i", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("i", element0.nodeName());
      assertEquals("mjE4]\"", element1.baseUri());
      assertEquals("i", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("i", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.prependElement("Gr");
      assertNotNull(element0);
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("gr", element0.nodeName());
      assertEquals("gr", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.selectFirst("Gr");
      assertNotNull(element1);
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("gr", element0.nodeName());
      assertEquals("gr", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("gr", element1.tagName());
      assertEquals("gr", element1.nodeName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("reversed", "reversed");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("reversed", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("reversed", document0.location());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.tagName("reversed");
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("reversed", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("reversed", document0.location());
      assertEquals("reversed", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("reversed", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("reversed", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("reversed", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.selectFirst("reversed");
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("reversed", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("reversed", document0.location());
      assertEquals("reversed", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("reversed", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("reversed", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("reversed", document1.location());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals("reversed", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("reversed", document2.tagName());
      assertEquals(1, document2.childNodeSize());
      assertEquals("reversed", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-b?", "-b?");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("-b?", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("-b?", document0.location());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.tagName("menuitem");
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("-b?", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("menuitem", document0.tagName());
      assertEquals("-b?", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("-b?", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("-b?", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("menuitem", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document1.select("menuitem");
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("-b?", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("menuitem", document0.tagName());
      assertEquals("-b?", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("-b?", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("-b?", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("menuitem", document1.tagName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      
      document0.setSiblingIndex((-1029));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals((-1029), document0.siblingIndex());
      
      Document document1 = (Document)document0.removeClass("#document");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals((-1029), document0.siblingIndex());
      assertEquals((-1029), document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parse("lbo+<?-:h&o1", "^?)|km)=qj@cf");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.appendElement("(>#HWk>8");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("(>#hwk>8", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("(>#hwk>8", element0.nodeName());
      assertFalse(element0.isBlock());
      
      Element element1 = element0.removeClass("#x`qqjZel}");
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("(>#hwk>8", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("(>#hwk>8", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("(>#hwk>8", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("(>#hwk>8", element1.tagName());
      assertFalse(element1.isBlock());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      assertNotNull(tag0);
      assertTrue(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isInline());
      
      Element element0 = new Element(tag0, "br");
      assertNotNull(element0);
      assertTrue(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isInline());
      assertEquals("br", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = element0.removeClass("_GI)=W/7<Gy6*@!");
      assertNotNull(element1);
      assertTrue(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.canContainBlock());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isInline());
      assertEquals("br", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("br", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertFalse(element1.hasParent());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      
      Element element0 = document0.appendElement("$VALUES");
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("$values", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("$values", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.before((Node) document0);
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("mjE4]\"", document0.location());
      assertEquals(2, element0.siblingIndex());
      assertEquals("$values", element0.nodeName());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("$values", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("mjE4]\"", element1.baseUri());
      assertEquals(2, element1.siblingIndex());
      assertEquals("$values", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("$values", element1.tagName());
      assertFalse(element1.isBlock());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Document document1 = (Document)element1.previousElementSibling();
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("mjE4]\"", document0.location());
      assertEquals(2, element0.siblingIndex());
      assertEquals("$values", element0.nodeName());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("$values", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("mjE4]\"", element1.baseUri());
      assertEquals(2, element1.siblingIndex());
      assertEquals("$values", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("$values", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("mjE4]\"", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("mjE4]\"", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      assertNotNull(tag0);
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isEmpty());
      
      CDataNode cDataNode0 = new CDataNode("java.lang.string@0000000081");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      Element element0 = new Element(tag0, "ZVf /hA'X?YySsIUzh", attributes0);
      assertNotNull(element0);
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertFalse(element0.isBlock());
      assertEquals("ZVf /hA'X?YySsIUzh", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.tagName());
      
      boolean boolean0 = Element.preserveWhitespace(element0);
      assertTrue(boolean0);
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isFormSubmittable());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", tag0.getName());
      assertTrue(tag0.isInline());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertFalse(element0.isBlock());
      assertEquals("ZVf /hA'X?YySsIUzh", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("textarea", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Document.createShell("BQ");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("BQ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("BQ", document0.location());
      assertEquals("#root", document0.tagName());
      
      document0.setSiblingIndex((-2252));
      assertFalse(document0.isBlock());
      assertEquals((-2252), document0.siblingIndex());
      assertEquals("BQ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("BQ", document0.location());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.prependText("GSh{wPGne?Lq60hPX ");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals((-2252), document0.siblingIndex());
      assertEquals("BQ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("BQ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("BQ", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-2252), document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("BQ", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parse("mjE4]\"", "mjE4]\"");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.appendElement("i");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("i", element0.nodeName());
      assertEquals("i", element0.tagName());
      
      Element element1 = element0.prependChild(document0);
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("i", element0.nodeName());
      assertEquals("i", element0.tagName());
      assertFalse(element1.isBlock());
      assertEquals("i", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("i", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("mjE4]\"", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      assertNotNull(tag0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isInline());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      
      Element element0 = new Element(tag0, "body");
      assertNotNull(element0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isInline());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("body", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      
      Element element1 = element0.prependChild(element0);
      assertNotNull(element1);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isInline());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isBlock());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("body", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("body", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Document.createShell("|)#?iqs");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("|)#?iqs", document0.location());
      assertEquals("|)#?iqs", document0.baseUri());
      
      Element element0 = document0.appendElement("|)#?iqs");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("|)#?iqs", document0.location());
      assertEquals("|)#?iqs", document0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("|)#?iqs", element0.nodeName());
      assertEquals("|)#?iqs", element0.baseUri());
      assertEquals("|)#?iqs", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.prepend("java.lang.string@0000000079 java.lang.string@0000000079");
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("|)#?iqs", document0.location());
      assertEquals("|)#?iqs", document0.baseUri());
      assertEquals("|)#?iqs", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("|)#?iqs", element0.baseUri());
      assertEquals("|)#?iqs", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("|)#?iqs", element1.baseUri());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("|)#?iqs", element1.tagName());
      assertEquals("|)#?iqs", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Document.createShell("BQ");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("BQ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("BQ", document0.location());
      assertFalse(document0.isBlock());
      
      document0.setSiblingIndex((-2252));
      assertFalse(document0.hasParent());
      assertEquals("BQ", document0.baseUri());
      assertEquals((-2252), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("BQ", document0.location());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.prepend("GSh{wPGne?Lq60hPX ");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("BQ", document0.baseUri());
      assertEquals((-2252), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("BQ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("BQ", document1.baseUri());
      assertEquals("BQ", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals((-2252), document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("*|", ")[c");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(")[c", document0.baseUri());
      assertEquals(")[c", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(")[c", document0.baseUri());
      assertEquals(")[c", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(")[c", element0.baseUri());
      
      Element element1 = element0.prepend("value");
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(")[c", document0.baseUri());
      assertEquals(")[c", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(")[c", element0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals(")[c", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.empty();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("mjE4]\"", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.prepend("");
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("mjE4]\"", document2.location());
      assertEquals("mjE4]\"", document2.baseUri());
      assertEquals(0, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      assertNotNull(document0);
      assertEquals("html", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document0.parents();
      assertNotNull(elements0);
      assertEquals("html", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      assertNotNull(document0);
      assertEquals("html", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("html", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("html", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      
      Elements elements0 = element0.parents();
      assertNotNull(elements0);
      assertEquals("html", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("html", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("html", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Document.createShell("Tag name mus[ notJ%e empty.");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name mus[ notJ%e empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Tag name mus[ notJ%e empty.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.parent();
      assertNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name mus[ notJ%e empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Tag name mus[ notJ%e empty.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.appendElement("$VALUES");
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("$values", element0.nodeName());
      assertEquals("$values", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.toggleClass("$VALUES");
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("$values", element0.nodeName());
      assertEquals("$values", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mjE4]\"", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("$values", element1.nodeName());
      assertEquals("$values", element1.tagName());
      assertFalse(element1.isBlock());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = element1.before((Node) document0);
      assertNotNull(element2);
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("$values", element0.nodeName());
      assertEquals("$values", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mjE4]\"", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("$values", element1.nodeName());
      assertEquals(2, element1.siblingIndex());
      assertEquals("$values", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("mjE4]\"", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals(2, element2.siblingIndex());
      assertEquals("$values", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals("$values", element2.nodeName());
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element2, element1);
      assertSame(element2, element0);
      
      Document document1 = (Document)document0.parent();
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("mjE4]\"", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parse("b*", "br");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Tag tag0 = Tag.valueOf("b*");
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertEquals("b*", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("b*", tag0.toString());
      
      Element element0 = new Element(tag0, "org.jsoup.nodes.NodeUtils");
      assertNotNull(element0);
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertEquals("b*", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("b*", tag0.toString());
      assertEquals("b*", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("b*", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.nodes.NodeUtils", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      
      document0.reparentChild(element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertEquals("b*", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("b*", tag0.toString());
      assertEquals("b*", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("b*", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.nodes.NodeUtils", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      Document document1 = (Document)element0.parent();
      assertNotNull(document1);
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertEquals("b*", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("b*", tag0.toString());
      assertEquals("b*", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("b*", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.nodes.NodeUtils", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("br", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "EIFrTW`BC8xd6");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      
      document0.parentNode = (Node) document0;
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertTrue(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      Document document1 = (Document)document0.empty();
      assertNotNull(document1);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertEquals("EIFrTW`BC8xd6", document1.baseUri());
      assertEquals("EIFrTW`BC8xd6", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.parent();
      assertNotNull(document2);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertEquals("EIFrTW`BC8xd6", document2.location());
      assertEquals("EIFrTW`BC8xd6", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("STOP", "STOP");
      assertNotNull(document0);
      assertEquals("STOP", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("STOP", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("STOP", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("STOP", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("STOP", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.parent();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals("STOP", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("STOP", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("STOP", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("STOP", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("html", element1.tagName());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("@", "@");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("@", document0.baseUri());
      assertEquals("@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.prependText("@");
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("@", document0.baseUri());
      assertEquals("@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("@", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("@", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.ownText();
      assertNotNull(string0);
      assertEquals("@", string0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("@", document0.baseUri());
      assertEquals("@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("@", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("@", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = new Document("#root");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      String string0 = document0.nodeName();
      assertNotNull(string0);
      assertEquals("#document", string0);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.appendElement("$VALUES");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("$values", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("$values", element0.tagName());
      assertFalse(element0.isBlock());
      
      Element element1 = element0.before((Node) document0);
      assertNotNull(element1);
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, element0.siblingIndex());
      assertEquals("$values", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("$values", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("$values", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(2, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("mjE4]\"", element1.baseUri());
      assertEquals("$values", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Elements elements0 = document0.nextElementSiblings();
      assertNotNull(elements0);
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("XLb?<?:>", "XLb?<?:>");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("XLb?<?:>", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("XLb?<?:>", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.appendElement("dl");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("XLb?<?:>", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("XLb?<?:>", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("dl", element0.nodeName());
      assertEquals("dl", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("XLb?<?:>", element0.baseUri());
      
      Element element1 = element0.before((Node) document0);
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertEquals("XLb?<?:>", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("XLb?<?:>", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("dl", element0.nodeName());
      assertEquals("dl", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("XLb?<?:>", element0.baseUri());
      assertEquals("dl", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("XLb?<?:>", element1.baseUri());
      assertEquals(2, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("dl", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = document0.nextElementSibling();
      assertNotNull(element2);
      assertEquals("#root", document0.tagName());
      assertEquals("XLb?<?:>", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("XLb?<?:>", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(2, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals("dl", element2.nodeName());
      assertEquals(0, element2.childNodeSize());
      assertEquals("dl", element2.tagName());
      assertEquals("XLb?<?:>", element2.baseUri());
      assertTrue(element2.isBlock());
      assertSame(element2, element0);
      assertSame(element2, element1);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.appendElement("$VALUES");
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mjE4]\"", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("$values", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("$values", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mjE4]\"", element0.baseUri());
      
      Element element1 = element0.prependText("$VALUES");
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mjE4]\"", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("$values", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("$values", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("$values", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("$values", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("mjE4]\"", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = element0.before((Node) document0);
      assertNotNull(element2);
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mjE4]\"", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("$values", element0.nodeName());
      assertEquals("$values", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("mjE4]\"", element2.baseUri());
      assertEquals(1, element2.childNodeSize());
      assertEquals(2, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertTrue(element2.hasParent());
      assertEquals("$values", element2.tagName());
      assertEquals("$values", element2.nodeName());
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      
      Element element3 = document0.nextElementSibling();
      assertNotNull(element3);
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mjE4]\"", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("$values", element3.nodeName());
      assertEquals("mjE4]\"", element3.baseUri());
      assertEquals(2, element3.siblingIndex());
      assertEquals(1, element3.childNodeSize());
      assertTrue(element3.hasParent());
      assertEquals("$values", element3.tagName());
      assertFalse(element3.isBlock());
      assertSame(element3, element0);
      assertSame(element3, element1);
      assertSame(element3, element2);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.appendElement(".YmSOc|{");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals(".ymsoc|{", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(".ymsoc|{", element0.tagName());
      
      Element element1 = element0.lastElementSibling();
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals(".ymsoc|{", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(".ymsoc|{", element0.tagName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(".ymsoc|{", element1.tagName());
      assertEquals("mjE4]\"", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(".ymsoc|{", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tag name must not be empty.", "tag name must not be empty.");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tag name must not be empty.", document0.baseUri());
      assertEquals("tag name must not be empty.", document0.location());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tag name must not be empty.", document0.baseUri());
      assertEquals("tag name must not be empty.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals("tag name must not be empty.", element0.baseUri());
      
      boolean boolean0 = element0.isBlock();
      assertTrue(boolean0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("tag name must not be empty.", document0.baseUri());
      assertEquals("tag name must not be empty.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals("tag name must not be empty.", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      assertNotNull(tag0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("body", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      
      Element element0 = new Element(tag0, "body");
      assertNotNull(element0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("body", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.baseUri());
      assertTrue(element0.isBlock());
      
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      assertNotNull(evaluator_IsRoot0);
      assertEquals(":root", evaluator_IsRoot0.toString());
      
      boolean boolean0 = element0.is((Evaluator) evaluator_IsRoot0);
      assertTrue(boolean0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals("body", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(":root", evaluator_IsRoot0.toString());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", document0.location());
      
      Evaluator.MatchText evaluator_MatchText0 = new Evaluator.MatchText();
      assertNotNull(evaluator_MatchText0);
      assertEquals(":matchText", evaluator_MatchText0.toString());
      
      boolean boolean0 = document0.is((Evaluator) evaluator_MatchText0);
      assertFalse(boolean0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", document0.location());
      assertEquals(":matchText", evaluator_MatchText0.toString());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Document.createShell("r3nxog<u_tm|7j?(");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("r3nxog<u_tm|7j?(", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("r3nxog<u_tm|7j?(", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.createElement("menuitem");
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("r3nxog<u_tm|7j?(", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("r3nxog<u_tm|7j?(", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("r3nxog<u_tm|7j?(", element0.baseUri());
      assertEquals("menuitem", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("menuitem", element0.nodeName());
      
      boolean boolean0 = element0.is("menuitem");
      assertTrue(boolean0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("r3nxog<u_tm|7j?(", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("r3nxog<u_tm|7j?(", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("r3nxog<u_tm|7j?(", element0.baseUri());
      assertEquals("menuitem", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("menuitem", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Document.createShell("BQ");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("BQ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("BQ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      document0.setSiblingIndex((-2252));
      assertFalse(document0.isBlock());
      assertEquals((-2252), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("BQ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("BQ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Node[] nodeArray0 = new Node[0];
      Document document1 = (Document)document0.insertChildren(1, nodeArray0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals((-2252), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("BQ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("BQ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("BQ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-2252), document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("BQ", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, nodeArray0.length);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parse("gN", "gN");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("gN", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("gN", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      Document document1 = (Document)document0.insertChildren(1, nodeArray0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("gN", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("gN", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("gN", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("gN", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, nodeArray0.length);
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(Tw;<wpTZw", "(Tw;<wpTZw");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("(Tw;<wpTZw", document0.location());
      assertEquals("(Tw;<wpTZw", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.appendElement("|nCXZH(X#c<u6");
      assertNotNull(element0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("(Tw;<wpTZw", document0.location());
      assertEquals("(Tw;<wpTZw", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("|ncxzh(x#c<u6", element0.nodeName());
      assertEquals("|ncxzh(x#c<u6", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("(Tw;<wpTZw", element0.baseUri());
      
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertNotNull(element1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("(Tw;<wpTZw", document0.location());
      assertEquals("(Tw;<wpTZw", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("|ncxzh(x#c<u6", element0.nodeName());
      assertEquals("|ncxzh(x#c<u6", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("(Tw;<wpTZw", element0.baseUri());
      assertEquals(0, linkedList0.size());
      assertEquals("|ncxzh(x#c<u6", element1.tagName());
      assertEquals("(Tw;<wpTZw", element1.baseUri());
      assertEquals("|ncxzh(x#c<u6", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(Tw;<wpTZw", "(Tw;<wpTZw");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("(Tw;<wpTZw", document0.baseUri());
      assertEquals("(Tw;<wpTZw", document0.location());
      
      Element element0 = document0.prependElement("h4");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("(Tw;<wpTZw", document0.baseUri());
      assertEquals("(Tw;<wpTZw", document0.location());
      assertEquals("h4", element0.nodeName());
      assertEquals("(Tw;<wpTZw", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("h4", element0.tagName());
      
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("(Tw;<wpTZw", document0.baseUri());
      assertEquals("(Tw;<wpTZw", document0.location());
      assertEquals("h4", element0.nodeName());
      assertEquals("(Tw;<wpTZw", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("h4", element0.tagName());
      assertEquals(0, linkedList0.size());
      assertEquals("(Tw;<wpTZw", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("h4", element1.tagName());
      assertEquals("h4", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.appendElement("$VALUES");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("$values", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("$values", element0.tagName());
      assertFalse(element0.isBlock());
      
      Element element1 = element0.html("54+0 g");
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("$values", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("$values", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("$values", element1.nodeName());
      assertEquals("mjE4]\"", element1.baseUri());
      assertEquals("$values", element1.tagName());
      assertFalse(element1.isBlock());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parse("mjE4]\"", "mjE4]\"");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.html("");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("mjE4]\"", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("mjE4]\"", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parse("mjE4]\"", "mjE4]\"");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.appendElement(".YmSOc|{");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(".ymsoc|{", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals(".ymsoc|{", element0.nodeName());
      
      BufferedWriter bufferedWriter0 = element0.html((BufferedWriter) null);
      assertNull(bufferedWriter0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(".ymsoc|{", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals(".ymsoc|{", element0.nodeName());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = new Document("6EI^khTCj0b#Vuy5RO");
      assertNotNull(document0);
      assertEquals("6EI^khTCj0b#Vuy5RO", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("6EI^khTCj0b#Vuy5RO", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("6EI^khTCj0b#Vuy5RO", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("6EI^khTCj0b#Vuy5RO", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parse("Q{GyC 6", "Q{GyC 6");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Q{GyC 6", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Q{GyC 6", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.toggleClass("jcag%97Zk`tac!G^0u");
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Q{GyC 6", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Q{GyC 6", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Q{GyC 6", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("Q{GyC 6", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document1.hasAttributes();
      assertTrue(boolean0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Q{GyC 6", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Q{GyC 6", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Q{GyC 6", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("Q{GyC 6", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      boolean boolean0 = document0.hasAttributes();
      assertFalse(boolean0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      StringReader stringReader0 = new StringReader("org.jsoup.nodes.LeafNode");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "org.jsoup.nodes.LeafNode");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.LeafNode", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.LeafNode", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.LeafNode", (-906));
      assertNotNull(pattern0);
      assertEquals("org.jsoup.nodes.LeafNode", pattern0.pattern());
      assertEquals("org.jsoup.nodes.LeafNode", pattern0.toString());
      assertEquals((-906), pattern0.flags());
      
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertNotNull(elements0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.LeafNode", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.LeafNode", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.LeafNode", pattern0.pattern());
      assertEquals("org.jsoup.nodes.LeafNode", pattern0.toString());
      assertEquals((-906), pattern0.flags());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XLb?<?:>", "XLb?<?:>");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("XLb?<?:>", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("XLb?<?:>", document0.baseUri());
      
      Elements elements0 = document0.getElementsMatchingText("s^xT");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("XLb?<?:>", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("XLb?<?:>", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parse("", "br");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Pattern pattern0 = Pattern.compile("$VALUES");
      assertNotNull(pattern0);
      assertEquals(0, pattern0.flags());
      assertEquals("$VALUES", pattern0.toString());
      assertEquals("$VALUES", pattern0.pattern());
      
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("br", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, pattern0.flags());
      assertEquals("$VALUES", pattern0.toString());
      assertEquals("$VALUES", pattern0.pattern());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parse("@", "@");
      assertNotNull(document0);
      assertEquals("@", document0.location());
      assertEquals("@", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertNotNull(elements0);
      assertEquals("@", document0.location());
      assertEquals("@", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parse("ZW", "ZW");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("ZW", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("ZW", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document0.getElementsContainingOwnText("ZW");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("ZW", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("ZW", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse("*|", ")[c");
      assertNotNull(document0);
      assertEquals(")[c", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")[c", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsByTag(")[c");
      assertNotNull(elements0);
      assertEquals(")[c", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")[c", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parse("Q{GyC 6", "Q{GyC 6");
      assertNotNull(document0);
      assertEquals("Q{GyC 6", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Q{GyC 6", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.tagName("q3ZHN26l");
      assertNotNull(document1);
      assertEquals("Q{GyC 6", document0.baseUri());
      assertEquals("q3zhn26l", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Q{GyC 6", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Q{GyC 6", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("q3zhn26l", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("Q{GyC 6", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByTag("q3ZHN26l");
      assertNotNull(elements0);
      assertEquals("Q{GyC 6", document0.baseUri());
      assertEquals("q3zhn26l", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Q{GyC 6", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "EIFrTW`BC8xd6");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.empty();
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("EIFrTW`BC8xd6", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("EIFrTW`BC8xd6", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByIndexLessThan(1586);
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      
      Elements elements0 = document0.getElementsByIndexGreaterThan((-368));
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parse("figure", "figure");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("figure", document0.location());
      assertEquals("figure", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      
      Elements elements0 = document0.getElementsByIndexEquals(0);
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("figure", document0.location());
      assertEquals("figure", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse("reversed", "reversed");
      assertNotNull(document0);
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("reversed", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Elements elements0 = document0.getElementsByAttributeValueStarting("reversed", "AfterDoctypeSystemKeyword");
      assertNotNull(elements0);
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("reversed", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("head", parseSettings0);
      assertNotNull(tag0);
      assertEquals("head", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("head", tag0.toString());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      
      CDataNode cDataNode0 = new CDataNode("head");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      Attributes attributes1 = attributes0.put("head", "head");
      assertNotNull(attributes1);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "head", attributes1);
      assertNotNull(pseudoTextElement0);
      assertEquals("head", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("head", tag0.toString());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("head", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertTrue(pseudoTextElement0.isBlock());
      assertEquals("head", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("head", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      
      Elements elements0 = pseudoTextElement0.getElementsByAttributeValueStarting("head", "head");
      assertNotNull(elements0);
      assertEquals("head", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("head", tag0.toString());
      assertFalse(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(2, attributes0.size());
      assertEquals(2, attributes1.size());
      assertEquals("head", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertTrue(pseudoTextElement0.isBlock());
      assertEquals("head", pseudoTextElement0.baseUri());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("head", pseudoTextElement0.tagName());
      assertFalse(pseudoTextElement0.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("@", "@");
      assertNotNull(document0);
      assertEquals("@", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document0.getElementsByAttributeValueNot("Tag name must not be empty.", "Attributes incorrectly present on end tag");
      assertNotNull(elements0);
      assertEquals("@", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "EIFrTW`BC8xd6");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      
      Elements elements0 = document0.getElementsByAttributeValueEnding("aNtxNgdy`%:k}SCC]f", "textarea");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parse("X", "X");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("X", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("X", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.attr("X", ">|D{tpRACf:B4$zc#i");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("X", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("X", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("X", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByAttributeValueEnding("X", ">|D{tpRACf:B4$zc#i");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("X", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("X", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parse("reversed", "reversed");
      assertNotNull(document0);
      assertEquals("reversed", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("reversed", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document0.getElementsByAttributeValue("reversed", "aside");
      assertNotNull(elements0);
      assertEquals("reversed", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("reversed", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parse("reversed", "reversed");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("reversed", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.val("reversed");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("reversed", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("reversed", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("reversed", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsByAttributeStarting("value");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("reversed", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("reversed", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Insert position out of bounds.", element0.baseUri());
      
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertEquals("Insert position out of bounds.", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Document.createShell("|)#?iqs");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("|)#?iqs", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("|)#?iqs", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.appendElement("|)#?iqs");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("|)#?iqs", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("|)#?iqs", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|)#?iqs", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("|)#?iqs", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("|)#?iqs", element0.nodeName());
      
      Element element1 = element0.empty();
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("|)#?iqs", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("|)#?iqs", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|)#?iqs", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("|)#?iqs", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("|)#?iqs", element0.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("|)#?iqs", element1.nodeName());
      assertEquals("|)#?iqs", element1.baseUri());
      assertEquals("|)#?iqs", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Lg/(^x_7#Y?|w{/", "Lg/(^x_7#Y?|w{/");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.location());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      
      document0.setSiblingIndex((-2527));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals((-2527), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.location());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.empty();
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals((-2527), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.location());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Lg/(^x_7#Y?|w{/", document1.baseUri());
      assertEquals("Lg/(^x_7#Y?|w{/", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals((-2527), document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Lg/(^x_7#Y?|w{/", "Lg/(^x_7#Y?|w{/");
      assertNotNull(document0);
      assertEquals("Lg/(^x_7#Y?|w{/", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("Lg/(^x_7#Y?|w{/", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("Lg/(^x_7#Y?|w{/", element0.baseUri());
      
      Element element1 = element0.empty();
      assertNotNull(element1);
      assertEquals("Lg/(^x_7#Y?|w{/", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("Lg/(^x_7#Y?|w{/", element0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertEquals("Lg/(^x_7#Y?|w{/", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("42/tCs", "42/tCs");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("42/tCs", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("42/tCs", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("42/tCs", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("42/tCs", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("42/tCs", element0.baseUri());
      
      Element element1 = element0.doClone(document0);
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("42/tCs", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("42/tCs", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("42/tCs", element0.baseUri());
      assertEquals("42/tCs", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = new Document("OKWT0!S_r>I3x9");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("OKWT0!S_r>I3x9", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("OKWT0!S_r>I3x9", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.doClone((Node) null);
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("OKWT0!S_r>I3x9", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("OKWT0!S_r>I3x9", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("OKWT0!S_r>I3x9", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("OKWT0!S_r>I3x9", document1.location());
      assertFalse(document1.hasParent());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "=F;'c+O");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("=F;'c+O", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("=F;'c+O", document0.location());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("=F;'c+O", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("=F;'c+O", document0.location());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("=F;'c+O", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = element0.clone();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("=F;'c+O", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("=F;'c+O", document0.location());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("=F;'c+O", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals("=F;'c+O", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.hasParent());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals("mjE4]\"", document0.location());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.clone();
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals("mjE4]\"", document0.location());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("mjE4]\"", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document1.location());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Document.createShell("tvL:J^[<zJWV");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("tvL:J^[<zJWV", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tvL:J^[<zJWV", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("tvL:J^[<zJWV", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tvL:J^[<zJWV", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals("tvL:J^[<zJWV", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      
      Locale locale0 = Locale.PRC;
      assertNotNull(locale0);
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      assertNotNull(set0);
      assertFalse(set0.contains("tvL:J^[<zJWV"));
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      
      Element element1 = element0.classNames(set0);
      assertNotNull(element1);
      assertFalse(set0.contains("tvL:J^[<zJWV"));
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("tvL:J^[<zJWV", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tvL:J^[<zJWV", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals("tvL:J^[<zJWV", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("CHN", locale0.getISO3Country());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("CN", locale0.getCountry());
      assertEquals("zh_CN", locale0.toString());
      assertEquals("zh", locale0.getLanguage());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("tvL:J^[<zJWV", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.appendElement("$VALUES");
      assertNotNull(element0);
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("$values", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("$values", element0.nodeName());
      
      Element element1 = element0.before((Node) document0);
      assertNotNull(element1);
      assertEquals("mjE4]\"", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("$values", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("$values", element0.nodeName());
      assertEquals(2, element0.siblingIndex());
      assertEquals("$values", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("mjE4]\"", element1.baseUri());
      assertEquals("$values", element1.tagName());
      assertFalse(element1.isBlock());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Set<String> set0 = element0.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains("$VALUES"));
      assertEquals("mjE4]\"", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("$values", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("$values", element0.nodeName());
      assertEquals(2, element0.siblingIndex());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertSame(element0, element1);
      
      Document document1 = (Document)document0.classNames(set0);
      assertNotNull(document1);
      assertFalse(set0.contains("$VALUES"));
      assertEquals("mjE4]\"", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("$values", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("$values", element0.nodeName());
      assertEquals(2, element0.siblingIndex());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("mjE4]\"", document1.baseUri());
      assertEquals("mjE4]\"", document1.location());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = new Document("1@-]u;Xa=ta;<$");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("1@-]u;Xa=ta;<$", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("1@-]u;Xa=ta;<$", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains("1@-]u;Xa=ta;<$"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Document document1 = (Document)document0.classNames((Set<String>) linkedHashSet0);
      assertNotNull(document1);
      assertFalse(linkedHashSet0.contains("1@-]u;Xa=ta;<$"));
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("1@-]u;Xa=ta;<$", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("1@-]u;Xa=ta;<$", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals("1@-]u;Xa=ta;<$", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("1@-]u;Xa=ta;<$", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parse("XLb?<?:>", "XLb?<?:>");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("XLb?<?:>", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("XLb?<?:>", document0.baseUri());
      
      Document document1 = (Document)document0.addClass("class");
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("XLb?<?:>", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("XLb?<?:>", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("XLb?<?:>", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("XLb?<?:>", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Set<String> set0 = document1.classNames();
      assertNotNull(set0);
      assertFalse(set0.contains("XLb?<?:>"));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("XLb?<?:>", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("XLb?<?:>", document0.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("XLb?<?:>", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("XLb?<?:>", document1.baseUri());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Document.createShell("Q{GyC 6");
      assertNotNull(document0);
      assertEquals("Q{GyC 6", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Q{GyC 6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.addClass("java.lang.string@0000000129");
      assertNotNull(document1);
      assertEquals("Q{GyC 6", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Q{GyC 6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("Q{GyC 6", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Q{GyC 6", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.className();
      assertNotNull(string0);
      assertEquals("Q{GyC 6", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Q{GyC 6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Element element0 = new Element("java.lang.string@0000000013");
      assertNotNull(element0);
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      
      Elements elements0 = element0.children();
      assertNotNull(elements0);
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals("mjE4]\"", document0.location());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.appendElement("$VALUES");
      assertNotNull(element0);
      assertEquals("mjE4]\"", document0.location());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("$values", element0.nodeName());
      assertEquals("$values", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      int int0 = element0.childNodeSize();
      assertEquals(0, int0);
      assertEquals("mjE4]\"", document0.location());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("$values", element0.nodeName());
      assertEquals("$values", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("gN", "gN");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("gN", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("gN", document0.location());
      assertFalse(document0.hasParent());
      
      int int0 = document0.childNodeSize();
      assertEquals(1, int0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("gN", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("gN", document0.location());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("@", "@");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("@", document0.baseUri());
      assertEquals("@", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.prependText("@");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("@", document0.baseUri());
      assertEquals("@", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("@", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("@", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.child(0);
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("@", document0.baseUri());
      assertEquals("@", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("@", element0.baseUri());
      assertEquals("html", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = new Document("Oa<");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Oa<", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Oa<", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.appendElement(".YmSOc|{");
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Oa<", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Oa<", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(".ymsoc|{", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("Oa<", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(".ymsoc|{", element0.nodeName());
      
      Element element1 = document0.child(0);
      assertNotNull(element1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Oa<", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("Oa<", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("Oa<", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(".ymsoc|{", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals(".ymsoc|{", element1.tagName());
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.appendElement("HAc'%=su");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("hac'%=su", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("hac'%=su", element0.nodeName());
      assertEquals("", element0.baseUri());
      
      Element element1 = element0.before((Node) element0);
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("hac'%=su", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("hac'%=su", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals("hac'%=su", element1.nodeName());
      assertEquals("hac'%=su", element1.tagName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parse("body", "body");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.appendElement("body");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      
      Element element1 = element0.prependText("mjE4]\"");
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = element1.before((Node) element0);
      assertNotNull(element2);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element2.baseUri());
      assertEquals(1, element2.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("body", element2.tagName());
      assertTrue(element2.isBlock());
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element0);
      assertSame(element2, element1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.doClone(document0);
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document1.before("");
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("", document1.location());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("", document2.baseUri());
      assertFalse(document2.isBlock());
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parse("Tag <ame mst not be empty.", "Tag <ame mst not be empty.");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag <ame mst not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("Tag <ame mst not be empty.", document0.baseUri());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag <ame mst not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("Tag <ame mst not be empty.", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("Tag <ame mst not be empty.", element0.baseUri());
      
      Element element1 = element0.before("java.lang.string@0000000079 java.lang.string@0000000079");
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag <ame mst not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("Tag <ame mst not be empty.", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(3, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("Tag <ame mst not be empty.", element0.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertEquals("Tag <ame mst not be empty.", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(3, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      String string0 = document0.baseUri();
      assertNotNull(string0);
      assertEquals("Insert position out of bounds.", string0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      
      String string0 = document0.baseUri();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|K+gKlevHqj;@3DRG", "|K+gKlevHqj;@3DRG");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("|K+gKlevHqj;@3DRG", document0.location());
      assertEquals("|K+gKlevHqj;@3DRG", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("|K+gKlevHqj;@3DRG", document0.location());
      assertEquals("|K+gKlevHqj;@3DRG", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parse("@", "@");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("@", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("@", document0.baseUri());
      
      Document document1 = (Document)document0.val("@");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("@", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("@", document0.baseUri());
      assertEquals("@", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("@", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Attributes attributes0 = document1.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.isBlock());
      assertEquals("@", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("@", document0.baseUri());
      assertEquals("@", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("@", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, attributes0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("body", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertEquals("body", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      
      Element element0 = new Element(tag0, "body");
      assertNotNull(element0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("body", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertEquals("body", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = element0.attr(":has(%s)", true);
      assertNotNull(element1);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("body", tag0.getName());
      assertFalse(tag0.isFormListed());
      assertEquals("body", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.appendElement("$VALUES");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("$values", element0.nodeName());
      assertEquals("$values", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.prependText("$VALUES");
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("$values", element0.nodeName());
      assertEquals("$values", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("mjE4]\"", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("$values", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("$values", element1.nodeName());
      assertFalse(element1.isBlock());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = element1.before((Node) document0);
      assertNotNull(element2);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("$values", element0.nodeName());
      assertEquals("$values", element0.tagName());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("mjE4]\"", element1.baseUri());
      assertEquals(2, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("$values", element1.tagName());
      assertEquals("$values", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("$values", element2.tagName());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals("$values", element2.nodeName());
      assertEquals("mjE4]\"", element2.baseUri());
      assertEquals(2, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertSame(element0, element2);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertSame(element2, element0);
      
      Document document1 = (Document)document0.attr("</", true);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertEquals("mjE4]\"", document1.baseUri());
      assertEquals(1, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("mjE4]\"", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Document.createShell("BQ");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("BQ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("BQ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      document0.setSiblingIndex((-2252));
      assertEquals("#root", document0.tagName());
      assertEquals("BQ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("BQ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals((-2252), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.attr("GSh{wPGne?Lq60hPX ", "java.lang.string@0000000095");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals("BQ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("BQ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals((-2252), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("BQ", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("BQ", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals((-2252), document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("42/tCs", "42/tCs");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("42/tCs", document0.baseUri());
      assertEquals("42/tCs", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("42/tCs", document0.baseUri());
      assertEquals("42/tCs", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("42/tCs", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.attr("QQ=Q", "org.jsoup.nodes.Element");
      assertNotNull(element1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("42/tCs", document0.baseUri());
      assertEquals("42/tCs", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("42/tCs", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("42/tCs", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = new Document("Oe\"");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Oe\"", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Oe\"", document0.location());
      assertFalse(document0.hasParent());
      
      Tag tag0 = Tag.valueOf("c:\"R340\"G*)k>n0h");
      assertNotNull(tag0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("c:\"R340\"G*)k>n0h", tag0.toString());
      assertEquals("c:\"R340\"G*)k>n0h", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      
      CDataNode cDataNode0 = new CDataNode("Oe\"");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "4}D}:,J", attributes0);
      assertNotNull(formElement0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("c:\"R340\"G*)k>n0h", tag0.toString());
      assertEquals("c:\"R340\"G*)k>n0h", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("4}D}:,J", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("c:\"R340\"G*)k>n0h", formElement0.tagName());
      assertEquals("c:\"R340\"G*)k>n0h", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      
      Document document1 = (Document)document0.appendTo(formElement0);
      assertNotNull(document1);
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Oe\"", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Oe\"", document0.location());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("c:\"R340\"G*)k>n0h", tag0.toString());
      assertEquals("c:\"R340\"G*)k>n0h", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("4}D}:,J", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("c:\"R340\"G*)k>n0h", formElement0.tagName());
      assertEquals("c:\"R340\"G*)k>n0h", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("Oe\"", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("Oe\"", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.createElement("body");
      assertNotNull(element0);
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("mjE4]\"", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.appendTo(document0);
      assertNotNull(element1);
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("mjE4]\"", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("mjE4]\"", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parse("figure", "figure");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("figure", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("figure", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("figure", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("figure", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("figure", document1.location());
      assertEquals("figure", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Document.createShell(".gwV%XMz']gx\"");
      assertNotNull(document0);
      assertEquals(".gwV%XMz']gx\"", document0.location());
      assertEquals(".gwV%XMz']gx\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(".gwV%XMz']gx\"", document0.location());
      assertEquals(".gwV%XMz']gx\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(".gwV%XMz']gx\"", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      
      Element element1 = element0.appendText("ovPW9pF");
      assertNotNull(element1);
      assertEquals(".gwV%XMz']gx\"", document0.location());
      assertEquals(".gwV%XMz']gx\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(".gwV%XMz']gx\"", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(".gwV%XMz']gx\"", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?", "?");
      assertNotNull(document0);
      assertEquals("?", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("?", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("?", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("?", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("?", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.appendChild(document0);
      assertNotNull(element1);
      assertEquals("?", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("?", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("?", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("?", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("html", document0.location());
      assertFalse(document0.isBlock());
      
      Document document1 = Document.createShell("html");
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("html", document1.baseUri());
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document0.appendChild(document1);
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertFalse(document0.hasParent());
      assertEquals("html", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("html", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("html", document1.location());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("html", document1.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("html", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("html", document2.location());
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Lg/(^x_7#Y?|w{/", "Lg/(^x_7#Y?|w{/");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      
      document0.setSiblingIndex((-2527));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-2527), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.append("Lg/(^x_7#Y?|w{/");
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-2527), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals((-2527), document1.siblingIndex());
      assertEquals("Lg/(^x_7#Y?|w{/", document1.baseUri());
      assertEquals("Lg/(^x_7#Y?|w{/", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Lg/(^x_7#Y?|w{/", "Lg/(^x_7#Y?|w{/");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.location());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.location());
      assertEquals("Lg/(^x_7#Y?|w{/", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.append("Lg/(^x_7#Y?|w{/");
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.location());
      assertEquals("Lg/(^x_7#Y?|w{/", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("Lg/(^x_7#Y?|w{/", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals("mjE4]\"", document0.location());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.appendElement(".YmSOc|{");
      assertNotNull(element0);
      assertEquals("mjE4]\"", document0.location());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(".ymsoc|{", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("mjE4]\"", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(".ymsoc|{", element0.nodeName());
      
      Element element1 = element0.append("");
      assertNotNull(element1);
      assertEquals("mjE4]\"", document0.location());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(".ymsoc|{", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("mjE4]\"", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(".ymsoc|{", element0.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("mjE4]\"", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals(".ymsoc|{", element1.tagName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(".ymsoc|{", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell(".gwV%XMz']gx\"");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".gwV%XMz']gx\"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(".gwV%XMz']gx\"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".gwV%XMz']gx\"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(".gwV%XMz']gx\"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(".gwV%XMz']gx\"", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      
      Element element1 = element0.after((Node) document0);
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(".gwV%XMz']gx\"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(".gwV%XMz']gx\"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(".gwV%XMz']gx\"", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(".gwV%XMz']gx\"", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parse("Lb?<?:&o>", "Lb?<?:&o>");
      assertNotNull(document0);
      assertEquals("Lb?<?:&o>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Lb?<?:&o>", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      document0.reparentChild(document0);
      assertEquals("Lb?<?:&o>", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Lb?<?:&o>", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      DocumentType documentType0 = new DocumentType(",", (String) null, "tag name must not be empty.", "nZ", (String) null);
      assertNotNull(documentType0);
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertFalse(documentType0.hasParent());
      
      Document document1 = (Document)document0.after((Node) documentType0);
      assertNotNull(document1);
      assertEquals("Lb?<?:&o>", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("Lb?<?:&o>", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertTrue(documentType0.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Lb?<?:&o>", document1.location());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Lb?<?:&o>", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.appendElement(".YmSOc|{");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(".ymsoc|{", element0.nodeName());
      assertEquals(".ymsoc|{", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("mjE4]\"", element0.baseUri());
      
      Element element1 = element0.after("");
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(".ymsoc|{", element0.nodeName());
      assertEquals(".ymsoc|{", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("mjE4]\"", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals(".ymsoc|{", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(".ymsoc|{", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parse("mjE4]\"", "mjE4]\"");
      assertNotNull(document0);
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.appendElement("i");
      assertNotNull(element0);
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("i", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("mjE4]\"", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("i", element0.nodeName());
      
      Element element1 = element0.previousElementSibling();
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("i", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("mjE4]\"", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("i", element0.nodeName());
      assertEquals("mjE4]\"", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertEquals("html", element1.tagName());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.nodeName());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      Element element2 = element1.after("<html>\n <head></head>\n <body>\n  mjE4]\"\n </body>\n</html>\n<i></i>");
      assertNotNull(element2);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element0));
      assertEquals("mjE4]\"", document0.location());
      assertEquals(8, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("i", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mjE4]\"", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(7, element0.siblingIndex());
      assertEquals("i", element0.nodeName());
      assertEquals("mjE4]\"", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, element1.childNodeSize());
      assertEquals("html", element1.tagName());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.nodeName());
      assertEquals("mjE4]\"", element2.baseUri());
      assertEquals(2, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertEquals(0, element2.siblingIndex());
      assertTrue(element2.isBlock());
      assertEquals("html", element2.nodeName());
      assertEquals("html", element2.tagName());
      assertNotSame(element0, element1);
      assertNotSame(element0, element2);
      assertNotSame(element1, element0);
      assertSame(element1, element2);
      assertSame(element2, element1);
      assertNotSame(element2, element0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      
      document0.setSiblingIndex((-1433506051));
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-1433506051), document0.siblingIndex());
      
      Document document1 = (Document)document0.addClass("org.jsoup.internal.Normalizer");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals((-1433506051), document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals((-1433506051), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.appendElement("html");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("html", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("html", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.addClass("org.jsoup.select.Evaluator$IndexGreaterThan");
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("html", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("html", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.nodeName());
      assertEquals("html", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("mjE4]\"", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "EIFrTW`BC8xd6");
      assertNotNull(document0);
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      document0.parentNode = (Node) document0;
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertTrue(document0.parentNode.hasParent());
      
      // Undeclared exception!
      document0.wrap("M#6pxl.");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", " />");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" />", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(" />", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.wrap(" />");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals("mjE4]\"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.appendElement("$VALUES");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("$values", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("$values", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.before((Node) document0);
      assertNotNull(element1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals("mjE4]\"", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("$values", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("$values", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mjE4]\"", element1.baseUri());
      assertEquals("$values", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("$values", element1.nodeName());
      assertEquals(2, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      document0.val("mjE4]\"");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = new Document("textarea");
      assertNotNull(document0);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.tagName("textarea");
      assertNotNull(document1);
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("textarea", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("textarea", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document0.val("A$H\"/S5]Az:_#,@!#z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parse("`Au2U/7", ":f7]U");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(":f7]U", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":f7]U", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "EIFrTW`BC8xd6");
      assertNotNull(document0);
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.empty();
      assertNotNull(document1);
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("EIFrTW`BC8xd6", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("EIFrTW`BC8xd6", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document0.text("c`L-W5Eh/M#pu&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("TagAnamV ,us[ notJbe empty.", "TagAnamV ,us[ notJbe empty.");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TagAnamV ,us[ notJbe empty.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TagAnamV ,us[ notJbe empty.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("TagAnamV ,us[ notJbe empty.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("TagAnamV ,us[ notJbe empty.", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("TagAnamV ,us[ notJbe empty.", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("TagAnamV ,us[ notJbe empty.", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document1.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.appendElement("$VALUES");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("$values", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("$values", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mjE4]\"", element0.baseUri());
      
      Element element1 = element0.before((Node) document0);
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("$values", element0.nodeName());
      assertEquals("$values", element0.tagName());
      assertEquals(2, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("mjE4]\"", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("$values", element1.nodeName());
      assertEquals("$values", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      element0.tagName("E15laTr|");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".ymso=|{", "java.lang.string@0000000129");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.settings((ParseSettings) null);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document1 = document0.parser(parser1);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document1.tagName("lbo<?-:h&o1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parse("@", "@");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("@", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("@", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parse("XLb?<?:>", "XLb?<?:>");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("XLb?<?:>", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("XLb?<?:>", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.selectFirst("b!#^wA EDj;|YvvD");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'b!#^wA EDj;|YvvD': unexpected token at '!#^wA EDj;|YvvD'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Document.createShell("Tag name mus[ not %e empty.");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Tag name mus[ not %e empty.", document0.location());
      assertEquals("Tag name mus[ not %e empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.selectFirst("Tag name mus[ not %e empty.");
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%e'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse("@", "@");
      assertNotNull(document0);
      assertEquals("@", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("@", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.select("RH7a.9Y");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'RH7a.9Y': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parse("", "F6e~o}^I^SWyHRoO]Z");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("F6e~o}^I^SWyHRoO]Z", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("F6e~o}^I^SWyHRoO]Z", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse("Lb?<?:&o>", "Lb?<?:&o>");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Lb?<?:&o>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Lb?<?:&o>", document0.location());
      
      document0.reparentChild(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Lb?<?:&o>", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Lb?<?:&o>", document0.location());
      assertTrue(document0.hasParent());
      
      // Undeclared exception!
      document0.prependElement("ni5<C94ou?-&A;dC");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parse("ZW", "ZW");
      assertNotNull(document0);
      assertEquals("ZW", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("ZW", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      List<Node> list0 = Parser.parseFragment("ZW", (Element) document0, "ZW");
      assertNotNull(list0);
      assertEquals("ZW", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("ZW", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      document0.childNodes = list0;
      assertEquals("ZW", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("ZW", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.childNodes.isEmpty());
      assertEquals(1, document0.childNodes.size());
      
      // Undeclared exception!
      try { 
        document0.prependElement("ZW");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parse("@", " ");
      assertNotNull(document0);
      assertEquals(" ", document0.baseUri());
      assertEquals(" ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.prependElement(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.parentNode = (Node) document0;
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.prependChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("Lb?<?:&o>", "Lb?<?:&o>");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Lb?<?:&o>", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("Lb?<?:&o>", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "EIFrTW`BC8xd6");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      document0.parentNode = (Node) document0;
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      // Undeclared exception!
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[7vo?0eZ8");
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("[7vo?0eZ8", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("[7vo?0eZ8", tag0.getName());
      assertFalse(tag0.isBlock());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "[7vo?0eZ8", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals("[7vo?0eZ8", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("[7vo?0eZ8", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertEquals("[7vo?0eZ8", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("[7vo?0eZ8", formElement0.baseUri());
      assertEquals("[7vo?0eZ8", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      
      // Undeclared exception!
      try { 
        formElement0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Document.createShell("s?/-z93U~");
      assertNotNull(document0);
      assertEquals("s?/-z93U~", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("s?/-z93U~", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      char[] charArray0 = new char[9];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertFalse(charBuffer0.isDirect());
      assertEquals(9, charBuffer0.remaining());
      assertEquals(0, charBuffer0.position());
      assertEquals(9, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(9, charBuffer0.capacity());
      assertEquals(9, charBuffer0.length());
      assertTrue(charBuffer0.hasArray());
      assertEquals(9, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(576);
      assertNotNull(document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(576, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(576, document_OutputSettings1.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      // Undeclared exception!
      document0.outerHtmlTail(charBuffer0, 576, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("menuitem", "!");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("!", document0.location());
      assertEquals("!", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "!");
      assertNotNull(stringBuilder0);
      assertEquals("!", stringBuilder0.toString());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) stringBuilder0);
      assertNotNull(charBuffer0);
      assertEquals("!", stringBuilder0.toString());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(1, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("!", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(1, charBuffer0.limit());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 6, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parse("Q{GyC 6", "Q{GyC 6");
      assertNotNull(document0);
      assertEquals("Q{GyC 6", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Q{GyC 6", document0.location());
      assertEquals("#document", document0.nodeName());
      
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(4, charBuffer0.limit());
      assertEquals(0, charBuffer0.position());
      assertEquals(4, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(4, charBuffer0.length());
      assertEquals("\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertTrue(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      assertEquals(4, charBuffer0.remaining());
      assertEquals(4, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 700, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Element element0 = new Element("2 c");
      assertNotNull(element0);
      assertEquals("2 c", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("2 c", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      // Undeclared exception!
      try { 
        element0.outerHtmlTail((Appendable) null, 1, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("P%GUI", "v4h-;=[+mdly#`xi(");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("v4h-;=[+mdly#`xi(", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("v4h-;=[+mdly#`xi(", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      
      StringBuffer stringBuffer0 = new StringBuffer(".)4poda&");
      assertNotNull(stringBuffer0);
      assertEquals(8, stringBuffer0.length());
      assertEquals(".)4poda&", stringBuffer0.toString());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuffer0, (-1853), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", "&c=b");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("&c=b", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("&c=b", document0.baseUri());
      assertFalse(document0.hasParent());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      assertNotNull(mockPrintWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(3299);
      assertNotNull(document_OutputSettings1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(3299, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(3299, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintWriter0, 62, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("WV%chg9", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isBlock());
      assertEquals("WV%chg9", tag0.getName());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("WV%chg9", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "WV%chg9", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isBlock());
      assertEquals("WV%chg9", tag0.getName());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertEquals("WV%chg9", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("WV%chg9", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("WV%chg9", formElement0.nodeName());
      assertEquals("WV%chg9", formElement0.baseUri());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "WV%chg9");
      assertNotNull(charBuffer0);
      assertFalse(charBuffer0.isDirect());
      assertEquals(8, charBuffer0.limit());
      assertEquals(8, charBuffer0.capacity());
      assertEquals(8, charBuffer0.remaining());
      assertFalse(charBuffer0.hasArray());
      assertEquals("WV%chg9", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(8, charBuffer0.length());
      assertTrue(charBuffer0.hasRemaining());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      
      // Undeclared exception!
      try { 
        formElement0.outerHtmlHead(charBuffer0, (-2398), document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Document.createShell("val.us");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("val.us", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("val.us", document0.location());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 40, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parse("Q{GyC 6", "Q{GyC 6");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Q{GyC 6", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Q{GyC 6", document0.baseUri());
      assertFalse(document0.isBlock());
      
      MockFile mockFile0 = new MockFile("textarea", "");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintWriter0, (-2173), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      document0.parentNode = (Node) document0;
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertTrue(document0.parentNode.hasParent());
      
      // Undeclared exception!
      document0.is((Evaluator) null);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      CDataNode cDataNode0 = new CDataNode("");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      document0.setParentNode(cDataNode0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText("");
      assertNotNull(evaluator_ContainsText0);
      
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_ContainsText0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.CDataNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parse("@", "@");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("@", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Document.createShell("Tag name mus[ notJ%e empty.");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("Tag name mus[ notJ%e empty.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("Tag name mus[ notJ%e empty.", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.is("Tag name mus[ notJ%e empty.");
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%e'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("DU`Nu&ZlM", "DU`Nu&ZlM");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("DU`Nu&ZlM", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("DU`Nu&ZlM", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      document0.reparentChild(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("DU`Nu&ZlM", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("DU`Nu&ZlM", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      document0.html("class");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "EIFrTW`BC8xd6");
      assertNotNull(document0);
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", document0.baseUri());
      
      Element element0 = document0.appendElement("$VALUES");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mjE4]\"", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("mjE4]\"", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("$values", element0.tagName());
      assertEquals("$values", element0.nodeName());
      
      Element element1 = element0.before((Node) document0);
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("mjE4]\"", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("$values", element0.tagName());
      assertEquals("$values", element0.nodeName());
      assertEquals("mjE4]\"", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(2, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("$values", element1.tagName());
      assertEquals("$values", element1.nodeName());
      assertFalse(element1.isBlock());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      document0.html((CharArrayWriter) null);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ZR", "ZR");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ZR", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ZR", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      CharBuffer charBuffer0 = CharBuffer.allocate(44);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(44, charBuffer0.limit());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(44, charBuffer0.capacity());
      assertEquals(44, charBuffer0.length());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasArray());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(44, charBuffer0.remaining());
      
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("VGI9cqJ1JWxs)CJ", "VGI9cqJ1JWxs)CJ");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("VGI9cqJ1JWxs)CJ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("VGI9cqJ1JWxs)CJ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.html((CharArrayWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "EIFrTW`BC8xd6");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      document0.parentNode = (Node) document0;
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("LbO/<?-:H&H1", "LbO/<?-:H&H1");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("LbO/<?-:H&H1", document0.baseUri());
      assertEquals("LbO/<?-:H&H1", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      
      TextNode textNode0 = new TextNode((String) null);
      assertNotNull(textNode0);
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      
      document0.parentNode = (Node) textNode0;
      assertEquals("LbO/<?-:H&H1", document0.baseUri());
      assertEquals("LbO/<?-:H&H1", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("VGIYcqJ1JWxsmCJ", "VGIYcqJ1JWxsmCJ");
      assertNotNull(document0);
      assertEquals("VGIYcqJ1JWxsmCJ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("VGIYcqJ1JWxsmCJ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.appendElement("menuitem");
      assertNotNull(element0);
      assertEquals(2, document0.childNodeSize());
      assertEquals("VGIYcqJ1JWxsmCJ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("VGIYcqJ1JWxsmCJ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("menuitem", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("VGIYcqJ1JWxsmCJ", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("menuitem", element0.tagName());
      
      element0.setSiblingIndex((-1841712117));
      assertEquals(2, document0.childNodeSize());
      assertEquals("VGIYcqJ1JWxsmCJ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("VGIYcqJ1JWxsmCJ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("menuitem", element0.nodeName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals((-1841712117), element0.siblingIndex());
      assertEquals("VGIYcqJ1JWxsmCJ", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("menuitem", element0.tagName());
      
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag <ame mst not be empty.", "Tag <ame mst not be empty.");
      assertNotNull(document0);
      assertEquals("Tag <ame mst not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag <ame mst not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Element element0 = new Element("P$6");
      assertNotNull(element0);
      assertEquals("P$6", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("P$6", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parse("@", "@");
      assertNotNull(document0);
      assertEquals("@", document0.baseUri());
      assertEquals("@", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("@", "@");
      assertNotNull(document0);
      assertEquals("@", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("@", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText(".YmSOc|{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: .YmSOc|{
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ZR", "ZR");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ZR", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ZR", document0.baseUri());
      
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("bm#fzdnn_^9_5l}.q7", true);
      assertNotNull(xmlDeclaration0);
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      
      document0.setParentNode(xmlDeclaration0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ZR", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ZR", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("ZR");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Lg/(^x_7#Y?|w{/", "Lg/(^x_7#Y?|w{/");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.baseUri());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.baseUri());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("Lg/(^x_7#Y?|w{/", element0.baseUri());
      
      element0.setSiblingIndex((-2527));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.baseUri());
      assertEquals("Lg/(^x_7#Y?|w{/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals((-2527), element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("Lg/(^x_7#Y?|w{/", element0.baseUri());
      
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText("hac'%=su");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Document.createShell("A~K+@aB>Tf=ez;^UI");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("LbO<?-:H&o1", "LbO<?-:H&o1");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("LbO<?-:H&o1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("LbO<?-:H&o1", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.prependElement("br");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("LbO<?-:H&o1", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("LbO<?-:H&o1", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("LbO<?-:H&o1", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.nodeName());
      
      List<Node> list0 = element0.siblingNodes();
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("LbO<?-:H&o1", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("LbO<?-:H&o1", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("LbO<?-:H&o1", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.nodeName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      element0.childNodes = list0;
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("LbO<?-:H&o1", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("LbO<?-:H&o1", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("LbO<?-:H&o1", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.nodeName());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(element0.childNodes.isEmpty());
      assertEquals(1, element0.childNodes.size());
      
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("br");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parse("[t\")hr),Xmt^vSty53", "[t\")hr),Xmt^vSty53");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("[t\")hr),Xmt^vSty53", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("[t\")hr),Xmt^vSty53", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = new Document("1@-]u;Xa=ta;<$");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("1@-]u;Xa=ta;<$", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("1@-]u;Xa=ta;<$", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      TextNode textNode0 = new TextNode("AttributeValue_unquoted", "1@-]u;Xa=ta;<$");
      assertNotNull(textNode0);
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      document0.setParentNode(textNode0);
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("1@-]u;Xa=ta;<$", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("1@-]u;Xa=ta;<$", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan(668);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(0, document0.childNodeSize());
      
      Element element0 = document0.prependElement("Gr");
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("gr", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("gr", element0.nodeName());
      
      element0.siblingIndex = (-620);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals((-620), element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("gr", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("gr", element0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan(14);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "mjE4]\"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XLb?<?:>", "XLb?<?:>");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("XLb?<?:>", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("XLb?<?:>", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      assertNotNull(tag0);
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
      
      Element element0 = new Element(tag0, "br");
      assertNotNull(element0);
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("br", element0.baseUri());
      
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("html", "_GI)=W/7<Gy6*@!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: _GI)=W/7<Gy6*@!
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parse("'", "'");
      assertNotNull(document0);
      assertEquals("'", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("'", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("xmp", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parse("@", "@");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("@", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("@", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = new Document("9M79m`XGPUb&9");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("9M79m`XGPUb&9", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("9M79m`XGPUb&9", document0.location());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("cEi%Ae", "cEi%Ae");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("cEi%Ae", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("cEi%Ae", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.doClone(document0);
      assertNotNull(document1);
      assertFalse(document1.equals((Object)document0));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("cEi%Ae", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("cEi%Ae", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("cEi%Ae", document1.location());
      assertEquals("cEi%Ae", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)document0.prependChild(document1);
      assertNotNull(document2);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("cEi%Ae", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("cEi%Ae", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("cEi%Ae", document1.location());
      assertEquals("cEi%Ae", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertEquals("cEi%Ae", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("cEi%Ae", document2.baseUri());
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      
      // Undeclared exception!
      try { 
        document2.getElementById("-PTfX`LEptWvyW!.x_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parse("mjE4]\"", "mjE4]\"");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      
      Element element1 = element0.toggleClass("mjE4]\"");
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("mjE4]\"", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'body.java.lang.String@0000000051': unexpected token at '@0000000051'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Document.createShell("8!Zyu@F");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("8!Zyu@F", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("8!Zyu@F", document0.location());
      assertEquals("#document", document0.nodeName());
      
      DocumentType documentType0 = new DocumentType("hac'%=su", "hac'%=su", "bw=2!", "BeforeHead", "bw=2!");
      assertNotNull(documentType0);
      assertFalse(documentType0.hasParent());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      
      document0.setParentNode(documentType0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("8!Zyu@F", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals("8!Zyu@F", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(documentType0.hasParent());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Document.createShell("A~K+@aB>Tf=ez;^UI");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.child((-4758));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parse("html", "mjE4]\"");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.appendElement(".YmSOc|{");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(".ymsoc|{", element0.nodeName());
      assertEquals(".ymsoc|{", element0.tagName());
      
      element0.reparentChild(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(".ymsoc|{", element0.nodeName());
      assertEquals(".ymsoc|{", element0.tagName());
      
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.appendElement("$VALUES");
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("mjE4]\"", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("$values", element0.tagName());
      assertEquals("$values", element0.nodeName());
      
      Element element1 = element0.before((Node) document0);
      assertNotNull(element1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#root", document0.tagName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("$values", element0.tagName());
      assertEquals("$values", element0.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("$values", element1.tagName());
      assertEquals("mjE4]\"", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(2, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("$values", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      document0.before(",CD.q4|?dnb@{J(r");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parse("@", "#root");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "EIFrTW`BC8xd6");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      
      document0.parentNode = (Node) document0;
      assertEquals("#root", document0.tagName());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertTrue(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      // Undeclared exception!
      document0.attr("CvZrW5Yf+.D]r:Z", "G");
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XLb?<?:>", "XLb?<?:>");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("XLb?<?:>", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("XLb?<?:>", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        document0.attr((String) null, "XLb?<?:>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "EIFrTW`BC8xd6");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      
      document0.parentNode = (Node) document0;
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertTrue(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      Document document1 = (Document)document0.empty();
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document0.childNodeSize());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertEquals("EIFrTW`BC8xd6", document1.location());
      assertEquals("EIFrTW`BC8xd6", document1.baseUri());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mjE4]\"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.appendElement("$VALUES");
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("$values", element0.tagName());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("$values", element0.nodeName());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.before((Node) document0);
      assertNotNull(element1);
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(2, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("$values", element0.tagName());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("$values", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("mjE4]\"", element1.baseUri());
      assertEquals(2, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("$values", element1.nodeName());
      assertEquals("$values", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      document0.appendElement(" ");
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Document.createShell("tagaaamv ,us[ notjbe empry.");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tagaaamv ,us[ notjbe empry.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("tagaaamv ,us[ notjbe empry.", document0.baseUri());
      
      List<Node> list0 = document0.childNodes();
      assertNotNull(list0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tagaaamv ,us[ notjbe empry.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("tagaaamv ,us[ notjbe empry.", document0.baseUri());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      document0.childNodes = list0;
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tagaaamv ,us[ notjbe empry.", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("tagaaamv ,us[ notjbe empry.", document0.baseUri());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.childNodes.isEmpty());
      assertEquals(1, document0.childNodes.size());
      
      // Undeclared exception!
      try { 
        document0.appendElement("tagaaamv ,us[ notjbe empry.");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6z'@v_m:W-tM{", "#");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#", document0.location());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Element element0 = new Element("tag name must not be empty.");
      assertNotNull(element0);
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tag name must not be empty.", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("tag name must not be empty.", element0.tagName());
      assertFalse(element0.isBlock());
      
      CDataNode cDataNode0 = new CDataNode("akh<");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      
      Node node0 = cDataNode0.doClone(element0);
      assertNotNull(node0);
      assertFalse(node0.equals((Object)cDataNode0));
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tag name must not be empty.", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("tag name must not be empty.", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", node0.nodeName());
      assertTrue(node0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      
      // Undeclared exception!
      try { 
        element0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Document.createShell("1");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("1", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("1", document0.baseUri());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("@", "@");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("@", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("@", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      TextNode textNode0 = new TextNode(".YmSOc|{", "@");
      assertNotNull(textNode0);
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      
      nodeArray0[2] = (Node) textNode0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("@", document0.baseUri());
      assertEquals("@", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(7, nodeArray0.length);
      
      // Undeclared exception!
      document0.append("kSP)O5L7_y");
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", " ");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ", document0.baseUri());
      
      Document document1 = (Document)document0.tagName(")K&alkIR6,=%Uh=|");
      assertNotNull(document1);
      assertEquals(")k&alkir6,=%uh=|", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ", document0.baseUri());
      assertEquals(")k&alkir6,=%uh=|", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(" ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(" ", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.childNodes = null;
      assertEquals(")k&alkir6,=%uh=|", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ", document0.baseUri());
      assertEquals(")k&alkir6,=%uh=|", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(" ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(" ", document1.baseUri());
      
      // Undeclared exception!
      try { 
        document1.append(")K&alkIR6,=%Uh=|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parse("@", "@");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("@", document0.baseUri());
      assertEquals("@", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("LbO/<?-:H&H1", "LbO/<?-:H&H1");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("LbO/<?-:H&H1", document0.location());
      assertEquals("LbO/<?-:H&H1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      
      DocumentType documentType0 = new DocumentType("LbO/<?-:H&H1", "", "\"_Jxc", "JJ2v9 7-D[KK:Tjo6Gw", "JJ2v9 7-D[KK:Tjo6Gw");
      assertNotNull(documentType0);
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertFalse(documentType0.hasParent());
      
      document0.parentNode = (Node) documentType0;
      assertEquals("LbO/<?-:H&H1", document0.location());
      assertEquals("LbO/<?-:H&H1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertFalse(documentType0.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      
      // Undeclared exception!
      try { 
        document0.append("{~.,\"LGQ");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("42/tCs", "42/tCs");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("42/tCs", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("42/tCs", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("42/tCs", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("42/tCs", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals("42/tCs", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      
      Element element1 = element0.lastElementSibling();
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("42/tCs", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("42/tCs", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals("42/tCs", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("42/tCs", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      try { 
        element1.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parse("L|?<?:&o>", "L|?<?:&o>");
      assertNotNull(document0);
      assertEquals("L|?<?:&o>", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("L|?<?:&o>", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.appendChild(document0);
      assertNotNull(document1);
      assertEquals("L|?<?:&o>", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("L|?<?:&o>", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertEquals("L|?<?:&o>", document1.location());
      assertEquals("L|?<?:&o>", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      document1.after("lbd?<?:&o>");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("Q{GyC 6", "Q{GyC 6");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("Q{GyC 6", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Q{GyC 6", document0.location());
      assertEquals("#document", document0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("F2-9*#");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "btv&l\\}B<`Vi@+~X{[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parse("`Au2U/7", ":f7]U");
      assertNotNull(document0);
      assertEquals(":f7]U", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":f7]U", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(":f7]U");
      assertNotNull(mockPrintWriter0);
      
      MockPrintWriter mockPrintWriter1 = document0.html(mockPrintWriter0);
      assertNotNull(mockPrintWriter1);
      assertEquals(":f7]U", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":f7]U", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertSame(mockPrintWriter0, mockPrintWriter1);
      assertSame(mockPrintWriter1, mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parse("VG<qJ1JWxU)CJ", "VGI9cqJ1JWxs)CJ");
      assertNotNull(document0);
      assertEquals("VGI9cqJ1JWxs)CJ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("VGI9cqJ1JWxs)CJ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.addClass("VGI9cqJ1JWxs)CJ");
      assertNotNull(document1);
      assertEquals("VGI9cqJ1JWxs)CJ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("VGI9cqJ1JWxs)CJ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("VGI9cqJ1JWxs)CJ", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("VGI9cqJ1JWxs)CJ", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.addClass("java.lang.string@0000000079");
      assertNotNull(document2);
      assertEquals("VGI9cqJ1JWxs)CJ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("VGI9cqJ1JWxs)CJ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("VGI9cqJ1JWxs)CJ", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("VGI9cqJ1JWxs)CJ", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("VGI9cqJ1JWxs)CJ", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("VGI9cqJ1JWxs)CJ", document2.location());
      assertEquals("#root", document2.tagName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = document1.hasClass("java.lang.string@0000000079");
      assertTrue(boolean0);
      assertEquals("VGI9cqJ1JWxs)CJ", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("VGI9cqJ1JWxs)CJ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("VGI9cqJ1JWxs)CJ", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("VGI9cqJ1JWxs)CJ", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.addClass("3`Q]zQ");
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("Insert position out of bounds.");
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("Tag name must not be empty.", document2.location());
      assertEquals("Tag name must not be empty.", document2.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = document0.hasClass("Tag name must not be empty.");
      assertFalse(boolean0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertSame(document0, document2);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag <ame mst not be empty.", "Tag <ame mst not be empty.");
      assertNotNull(document0);
      assertEquals("Tag <ame mst not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag <ame mst not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.addClass("Tag <ame mst not be empty.");
      assertNotNull(document1);
      assertEquals("Tag <ame mst not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag <ame mst not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag <ame mst not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Tag <ame mst not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.addClass(" > ");
      assertNotNull(document2);
      assertEquals("Tag <ame mst not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag <ame mst not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag <ame mst not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Tag <ame mst not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("Tag <ame mst not be empty.", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Tag <ame mst not be empty.", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = document1.hasClass("Tag <ame mst not be empty.");
      assertFalse(boolean0);
      assertEquals("Tag <ame mst not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag <ame mst not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag <ame mst not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("Tag <ame mst not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      assertNotNull(document0);
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.addClass("org.jsoup.internal.Normalizer");
      assertNotNull(document1);
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document1.hasClass("8Q*Dgqk`~>O/O8DM");
      assertFalse(boolean0);
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.addClass("Tag name must not be empty.");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasClass("java.lang.s$rQng@0000000048");
      assertFalse(boolean0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      boolean boolean0 = document0.hasClass("Jj");
      assertFalse(boolean0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parse("Q{GyC 6", ".YmSOc|{");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(".YmSOc|{", document0.baseUri());
      assertEquals(".YmSOc|{", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertNotNull(linkedHashSet0);
      assertFalse(linkedHashSet0.contains(".YmSOc|{"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      
      boolean boolean0 = linkedHashSet0.add("Q{GyC 6");
      assertFalse(linkedHashSet0.contains(".YmSOc|{"));
      assertTrue(linkedHashSet0.contains("Q{GyC 6"));
      assertTrue(boolean0);
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      
      Document document1 = (Document)document0.classNames((Set<String>) linkedHashSet0);
      assertNotNull(document1);
      assertFalse(linkedHashSet0.contains(".YmSOc|{"));
      assertTrue(linkedHashSet0.contains("Q{GyC 6"));
      assertFalse(document0.hasParent());
      assertEquals(".YmSOc|{", document0.baseUri());
      assertEquals(".YmSOc|{", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(".YmSOc|{", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(".YmSOc|{", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.appendText("");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasText();
      assertFalse(boolean0);
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("9M79m`XGPUb&9", "9M79m`XGPUb&9");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("9M79m`XGPUb&9", document0.baseUri());
      assertEquals("9M79m`XGPUb&9", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("9M79m`XGPUb&9", document0.baseUri());
      assertEquals("9M79m`XGPUb&9", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parse("s?/-z93U~", "s?/-z93U~");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s?/-z93U~", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("s?/-z93U~", document0.location());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.appendElement(")^QFxe");
      assertNotNull(element0);
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s?/-z93U~", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("s?/-z93U~", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(")^qfxe", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(")^qfxe", element0.nodeName());
      assertEquals("s?/-z93U~", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      
      Elements elements0 = document0.getElementsContainingText("sPT>M{{OsW8");
      assertNotNull(elements0);
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s?/-z93U~", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("s?/-z93U~", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parse("Q{GyC 6", ".YmSOc|{");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(".YmSOc|{", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(".YmSOc|{", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(0, int0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(".YmSOc|{", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(".YmSOc|{", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      
      Element element0 = document0.appendElement("$VALUES");
      assertNotNull(element0);
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("$values", element0.nodeName());
      assertEquals("$values", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.before((Node) document0);
      assertNotNull(element1);
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals("$values", element0.nodeName());
      assertEquals("$values", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("mjE4]\"", element1.baseUri());
      assertEquals("$values", element1.nodeName());
      assertEquals(2, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("$values", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(1, int0);
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("mjE4]\"", document0.location());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("42/tCs", "42/tCs");
      assertNotNull(document0);
      assertEquals("42/tCs", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("42/tCs", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("42/tCs", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("42/tCs", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("42/tCs", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
      assertEquals("42/tCs", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("42/tCs", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("42/tCs", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.appendElement("$VALUES");
      assertNotNull(element0);
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, element0.siblingIndex());
      assertEquals("$values", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("$values", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("mjE4]\"", element0.baseUri());
      
      Element element1 = element0.prependText("$VALUES");
      assertNotNull(element1);
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, element0.siblingIndex());
      assertEquals("$values", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("$values", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("$values", element1.tagName());
      assertEquals("mjE4]\"", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("$values", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = element1.cssSelector();
      assertNotNull(string0);
      assertEquals("$values", string0);
      assertEquals("mjE4]\"", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("mjE4]\"", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, element0.siblingIndex());
      assertEquals("$values", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("$values", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("$values", element1.tagName());
      assertEquals("mjE4]\"", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("$values", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[jfUUHG", "org.jsoup.select.Evaluator$Class");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$Class", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$Class", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$Class", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$Class", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$Class", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      
      Element element1 = element0.html("</");
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.select.Evaluator$Class", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$Class", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$Class", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$Class", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Document.createShell("NXOp;feo5U@");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("NXOp;feo5U@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("NXOp;feo5U@", document0.location());
      assertFalse(document0.hasParent());
      
      String string0 = document0.className();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.isBlock());
      assertEquals("NXOp;feo5U@", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("NXOp;feo5U@", document0.location());
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      String string0 = document0.ownText();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Element element0 = new Element("\"");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("\"", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("\"", element0.tagName());
      
      Element element1 = element0.attr("\"", "7I@q`z@xbSG]8~");
      assertNotNull(element1);
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("\"", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("\"", element0.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("\"", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("\"", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("m}", "NM`s60+iH5I2*%A");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("NM`s60+iH5I2*%A", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("NM`s60+iH5I2*%A", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      boolean boolean0 = document0.isBlock();
      assertFalse(boolean0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("NM`s60+iH5I2*%A", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("NM`s60+iH5I2*%A", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("L;O<?-Ho1", "L;O<?-Ho1");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("L;O<?-Ho1", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("L;O<?-Ho1", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.append("L;O<?-Ho1");
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("L;O<?-Ho1", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("L;O<?-Ho1", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("L;O<?-Ho1", document1.location());
      assertEquals(3, document1.childNodeSize());
      assertEquals("L;O<?-Ho1", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertEquals("?-Ho1?-Ho1", string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("L;O<?-Ho1", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("L;O<?-Ho1", document0.baseUri());
      assertFalse(document0.hasParent());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      assertNotNull(document0);
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      String string0 = document0.id();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals("mjE4]\"", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("mjE4]\"", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      assertNotNull(document0);
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("LbO<?-:H&o1", "LbO<?-:H&o1");
      assertNotNull(document0);
      assertEquals("LbO<?-:H&o1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("LbO<?-:H&o1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.prependElement("br");
      assertNotNull(element0);
      assertEquals("LbO<?-:H&o1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("LbO<?-:H&o1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("LbO<?-:H&o1", element0.baseUri());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.nodeName());
      
      Element element1 = element0.appendElement("br");
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals("LbO<?-:H&o1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("LbO<?-:H&o1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("LbO<?-:H&o1", element0.baseUri());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("LbO<?-:H&o1", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("br", element1.nodeName());
      assertEquals("br", element1.tagName());
      assertFalse(element1.isBlock());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertEquals("<br><br></br>\n<html>\n <head></head>\n <body>\n  LbO\n  <!--?-:H&o1-->\n </body>\n</html>", string0);
      assertEquals("LbO<?-:H&o1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("LbO<?-:H&o1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Document.createShell("r3nxog<u_tm|7j?(");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("r3nxog<u_tm|7j?(", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("r3nxog<u_tm|7j?(", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.createElement("menuitem");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("r3nxog<u_tm|7j?(", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("r3nxog<u_tm|7j?(", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("menuitem", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("r3nxog<u_tm|7j?(", element0.baseUri());
      assertEquals("menuitem", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      String string0 = element0.outerHtml();
      assertNotNull(string0);
      assertEquals("<menuitem>", string0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("r3nxog<u_tm|7j?(", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("r3nxog<u_tm|7j?(", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("menuitem", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("r3nxog<u_tm|7j?(", element0.baseUri());
      assertEquals("menuitem", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = new Document("ScriptDataEscaped");
      assertNotNull(document0);
      assertEquals("ScriptDataEscaped", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("ScriptDataEscaped", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals("ScriptDataEscaped", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ScriptDataEscaped", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ScriptDataEscaped", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("ScriptDataEscaped", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertNotNull(document_OutputSettings1);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      Document document2 = document1.outputSettings(document_OutputSettings1);
      assertNotNull(document2);
      assertEquals("ScriptDataEscaped", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ScriptDataEscaped", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ScriptDataEscaped", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("ScriptDataEscaped", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertEquals(1, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#root", document2.tagName());
      assertEquals("ScriptDataEscaped", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertEquals("ScriptDataEscaped", document2.baseUri());
      assertFalse(document2.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      String string0 = document1.html();
      assertNotNull(string0);
      assertEquals("<html><head></head><body></body></html>", string0);
      assertEquals("ScriptDataEscaped", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("ScriptDataEscaped", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("ScriptDataEscaped", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals("ScriptDataEscaped", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document2);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parse("'", "'");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("'", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      String string0 = document0.val();
      assertNotNull(string0);
      assertEquals("", string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("'", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Document.createShell("ismap");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ismap", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("ismap", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.addClass("ismap");
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ismap", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("ismap", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("ismap", document1.location());
      assertEquals("ismap", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.toggleClass(")^QFxe");
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ismap", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("ismap", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("ismap", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.hasParent());
      assertEquals("ismap", document2.location());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Elements elements0 = document1.getElementsByClass(")^QFxe");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("ismap", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("ismap", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("ismap", document1.location());
      assertEquals("ismap", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      //  // Unstable assertion: assertNotNull(document0);
      //  // Unstable assertion: assertEquals("", document0.location());
      //  // Unstable assertion: assertFalse(document0.hasParent());
      //  // Unstable assertion: assertEquals("#root", document0.tagName());
      //  // Unstable assertion: assertEquals(1, document0.childNodeSize());
      //  // Unstable assertion: assertFalse(document0.updateMetaCharsetElement());
      //  // Unstable assertion: assertEquals(0, document0.siblingIndex());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      //  // Unstable assertion: assertEquals("#document", document0.nodeName());
      //  // Unstable assertion: assertFalse(document0.isBlock());
      //  // Unstable assertion: assertEquals("", document0.baseUri());
      
      Document document1 = (Document)document0.addClass("");
      //  // Unstable assertion: assertNotNull(document1);
      //  // Unstable assertion: assertEquals("", document0.location());
      //  // Unstable assertion: assertFalse(document0.hasParent());
      //  // Unstable assertion: assertEquals("#root", document0.tagName());
      //  // Unstable assertion: assertEquals(1, document0.childNodeSize());
      //  // Unstable assertion: assertFalse(document0.updateMetaCharsetElement());
      //  // Unstable assertion: assertEquals(0, document0.siblingIndex());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      //  // Unstable assertion: assertEquals("#document", document0.nodeName());
      //  // Unstable assertion: assertFalse(document0.isBlock());
      //  // Unstable assertion: assertEquals("", document0.baseUri());
      //  // Unstable assertion: assertFalse(document1.updateMetaCharsetElement());
      //  // Unstable assertion: assertEquals(0, document1.siblingIndex());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      //  // Unstable assertion: assertEquals("#root", document1.tagName());
      //  // Unstable assertion: assertEquals(1, document1.childNodeSize());
      //  // Unstable assertion: assertEquals("#document", document1.nodeName());
      //  // Unstable assertion: assertEquals("", document1.location());
      //  // Unstable assertion: assertEquals("", document1.baseUri());
      //  // Unstable assertion: assertFalse(document1.isBlock());
      //  // Unstable assertion: assertFalse(document1.hasParent());
      //  // Unstable assertion: assertSame(document0, document1);
      //  // Unstable assertion: assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("}]e{T3!=B^");
      //  // Unstable assertion: assertNotNull(document2);
      //  // Unstable assertion: assertEquals("", document0.location());
      //  // Unstable assertion: assertFalse(document0.hasParent());
      //  // Unstable assertion: assertEquals("#root", document0.tagName());
      //  // Unstable assertion: assertEquals(1, document0.childNodeSize());
      //  // Unstable assertion: assertFalse(document0.updateMetaCharsetElement());
      //  // Unstable assertion: assertEquals(0, document0.siblingIndex());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      //  // Unstable assertion: assertEquals("#document", document0.nodeName());
      //  // Unstable assertion: assertFalse(document0.isBlock());
      //  // Unstable assertion: assertEquals("", document0.baseUri());
      //  // Unstable assertion: assertEquals("", document2.location());
      //  // Unstable assertion: assertEquals("", document2.baseUri());
      //  // Unstable assertion: assertFalse(document2.hasParent());
      //  // Unstable assertion: assertFalse(document2.updateMetaCharsetElement());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      //  // Unstable assertion: assertEquals(1, document2.childNodeSize());
      //  // Unstable assertion: assertFalse(document2.isBlock());
      //  // Unstable assertion: assertEquals("#document", document2.nodeName());
      //  // Unstable assertion: assertEquals(0, document2.siblingIndex());
      //  // Unstable assertion: assertEquals("#root", document2.tagName());
      //  // Unstable assertion: assertSame(document0, document1);
      //  // Unstable assertion: assertSame(document0, document2);
      //  // Unstable assertion: assertSame(document2, document1);
      //  // Unstable assertion: assertSame(document2, document0);
      
      boolean boolean0 = document0.hasClass("java.lang.string@0000000079");
      //  // Unstable assertion: assertTrue(boolean0);
      //  // Unstable assertion: assertEquals("", document0.location());
      //  // Unstable assertion: assertFalse(document0.hasParent());
      //  // Unstable assertion: assertEquals("#root", document0.tagName());
      //  // Unstable assertion: assertEquals(1, document0.childNodeSize());
      //  // Unstable assertion: assertFalse(document0.updateMetaCharsetElement());
      //  // Unstable assertion: assertEquals(0, document0.siblingIndex());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      //  // Unstable assertion: assertEquals("#document", document0.nodeName());
      //  // Unstable assertion: assertFalse(document0.isBlock());
      //  // Unstable assertion: assertEquals("", document0.baseUri());
      //  // Unstable assertion: assertSame(document0, document1);
      //  // Unstable assertion: assertSame(document0, document2);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.addClass("org.jsoup.interal.Normalizer");
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Tag name must not be empty.", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasClass("Insert position out of bounds.");
      assertFalse(boolean0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parse("`Au2U/7", ":f7]U");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":f7]U", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(":f7]U", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      document0.title("    ");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":f7]U", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(":f7]U", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = document0.hasText();
      assertTrue(boolean0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":f7]U", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(":f7]U", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("Lb?<?:&o>", "Lb?<?:&o>");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Lb?<?:&o>", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Lb?<?:&o>", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      document0.reparentChild(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Lb?<?:&o>", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Lb?<?:&o>", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsContainingText("Lb?<?:&o>");
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("Lb?<?:&o>", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Lb?<?:&o>", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Comment comment0 = new Comment("tag name must not be empty. tag name must not be empty.");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertNotNull(xmlDeclaration0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      
      boolean boolean0 = Element.preserveWhitespace(xmlDeclaration0);
      assertFalse(boolean0);
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("LbO/<?-:H&H1", "LbO/<?-:H&H1");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("LbO/<?-:H&H1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("LbO/<?-:H&H1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.prependElement("br");
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("LbO/<?-:H&H1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("LbO/<?-:H&H1", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("LbO/<?-:H&H1", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.nodeName());
      
      Element element1 = document0.prependElement("br");
      assertNotNull(element1);
      assertFalse(element1.equals((Object)element0));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("LbO/<?-:H&H1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("LbO/<?-:H&H1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("br", element1.tagName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("br", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("LbO/<?-:H&H1", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertNotSame(element1, element0);
      
      Elements elements0 = document0.getElementsContainingOwnText("br");
      assertNotNull(elements0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("LbO/<?-:H&H1", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("LbO/<?-:H&H1", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parse("", "br");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.prependText("body");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals("br", document1.location());
      assertEquals("br", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.wholeText();
      assertNotNull(string0);
      assertEquals("body", string0);
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parse("XLb?<?:>", "XLb?<?:>");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("XLb?<?:>", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("XLb?<?:>", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.appendElement("dl");
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("XLb?<?:>", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("XLb?<?:>", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("dl", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("dl", element0.nodeName());
      assertEquals("XLb?<?:>", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      
      Document document1 = (Document)document0.appendText("X5zm'v5b0U1fs:");
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("XLb?<?:>", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("XLb?<?:>", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(3, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("XLb?<?:>", document1.baseUri());
      assertEquals("XLb?<?:>", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals("XLb? X5zm'v5b0U1fs:", string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("XLb?<?:>", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("XLb?<?:>", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parse("XLb?<?:>", "XLb?<?:>");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("XLb?<?:>", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("XLb?<?:>", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.appendText("X5zm'v5b0U1fs:");
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("XLb?<?:>", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("XLb?<?:>", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("XLb?<?:>", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("XLb?<?:>", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals("XLb? X5zm'v5b0U1fs:", string0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("XLb?<?:>", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("XLb?<?:>", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parse("@", "@");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("@", document0.location());
      
      Document document1 = (Document)document0.prependText("@");
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("@", document0.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("@", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals("@", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsContainingText("");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("@", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals("@", document0.location());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parse("s?/-z93U~", "s?/-z93U~");
      assertNotNull(document0);
      assertEquals("s?/-z93U~", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s?/-z93U~", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.appendElement("br");
      assertNotNull(element0);
      assertEquals("s?/-z93U~", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s?/-z93U~", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals("s?/-z93U~", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      
      Elements elements0 = document0.getElementsContainingText("sPT>M{{OsW8");
      assertNotNull(elements0);
      assertEquals("s?/-z93U~", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s?/-z93U~", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parse("LbO<?-:H&o1", "LbO<?-:H&o1");
      assertNotNull(document0);
      assertEquals("LbO<?-:H&o1", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("LbO<?-:H&o1", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.tagName("textarea");
      assertNotNull(document1);
      assertEquals("LbO<?-:H&o1", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("LbO<?-:H&o1", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("LbO<?-:H&o1", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("textarea", document1.tagName());
      assertEquals("LbO<?-:H&o1", document1.location());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.val();
      assertNotNull(string0);
      assertEquals("LbO", string0);
      assertEquals("LbO<?-:H&o1", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("LbO<?-:H&o1", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("textarea", document0.tagName());
      assertFalse(document0.hasParent());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("TagAnamV ,us[ notJbe empty.", "TagAnamV ,us[ notJbe empty.");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("TagAnamV ,us[ notJbe empty.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("TagAnamV ,us[ notJbe empty.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.getElementById("TagAnamV ,us[ notJbe empty.");
      assertNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("TagAnamV ,us[ notJbe empty.", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("TagAnamV ,us[ notJbe empty.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parse("Lb?<?:&o>", "Lb?<?:&o>");
      assertNotNull(document0);
      assertEquals("Lb?<?:&o>", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Lb?<?:&o>", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      document0.reparentChild(document0);
      assertEquals("Lb?<?:&o>", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Lb?<?:&o>", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.lastElementSibling();
      assertNull(element0);
      assertEquals("Lb?<?:&o>", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Lb?<?:&o>", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|K+gKlevHqj;@3DRG", "|K+gKlevHqj;@3DRG");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|K+gKlevHqj;@3DRG", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("|K+gKlevHqj;@3DRG", document0.location());
      
      Document document1 = (Document)document0.prependChild(document0);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|K+gKlevHqj;@3DRG", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("|K+gKlevHqj;@3DRG", document0.location());
      assertEquals("|K+gKlevHqj;@3DRG", document1.baseUri());
      assertEquals("|K+gKlevHqj;@3DRG", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.firstElementSibling();
      assertNotNull(document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("|K+gKlevHqj;@3DRG", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("|K+gKlevHqj;@3DRG", document0.location());
      assertFalse(document2.isBlock());
      assertEquals("|K+gKlevHqj;@3DRG", document2.location());
      assertEquals("|K+gKlevHqj;@3DRG", document2.baseUri());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertTrue(document2.hasParent());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "EIFrTW`BC8xd6");
      assertNotNull(document0);
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      
      document0.parentNode = (Node) document0;
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertTrue(document0.parentNode.hasParent());
      
      Element element0 = document0.firstElementSibling();
      assertNull(element0);
      assertEquals("EIFrTW`BC8xd6", document0.baseUri());
      assertEquals("EIFrTW`BC8xd6", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      Element element0 = document0.appendElement("$VALUES");
      Elements elements0 = element0.previousElementSiblings();
      assertEquals("mjE4]\"", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tag name must not be empty.", "tag name must not be empty.");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      assertEquals("tag name must not be empty.", element1.baseUri());
      assertNotNull(element1);
      assertEquals("head", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parse("b*", "br");
      document0.previousElementSibling();
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("DU`Nu&ZlM", "DU`Nu&ZlM");
      document0.reparentChild(document0);
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertEquals("DU`Nu&ZlM", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parse("[t\")hr),Xmt^vSty53", "[t\")hr),Xmt^vSty53");
      document0.nextElementSibling();
      assertEquals("[t\")hr),Xmt^vSty53", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = new Document("Lb?<?:&o>");
      document0.reparentChild(document0);
      document0.nextElementSiblings();
      assertEquals("Lb?<?:&o>", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("AttributeValue_doubleQuoted", "AttributeValue_doubleQuoted");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals("AttributeValue_doubleQuoted", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parse("VG<qJ1JWxU)CJ", "VGI9cqJ1JWxs)CJ");
      document0.siblingElements();
      assertEquals("VGI9cqJ1JWxs)CJ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = new Document("");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tag name must not be empty.", "tag name must not be empty.");
      Element element0 = document0.body();
      element0.wrap("tag name must not be empty.");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(2) > body:nth-child(1)", string0);
      assertEquals("tag name must not be empty.", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tag name must not be empty.", "tag name must not be empty.");
      Element element0 = document0.body();
      assertNotNull(element0);
      
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertEquals("tag name must not be empty.", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parse("LbO<?-:H&o1", "LbO<?-:H&o1");
      document0.addClass(";KEg.01lyxDSi8+");
      document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("LbO<?-:H&o1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        document0.insertChildren(21, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parse("", "mj4]\"");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren((-142), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Document.createShell("NXOp;feo5U@");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren((-1), nodeArray0);
      assertEquals("NXOp;feo5U@", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("42/tCs", "42/tCs");
      Pattern pattern0 = Pattern.compile("42/tCs");
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      // Undeclared exception!
      try { 
        document0.insertChildren(67, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parse("@", "@");
      List<DataNode> list0 = document0.dataNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren((-2958), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Document.createShell("mjE4]\"");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      Element element0 = document0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("mjE4]\"", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parse("?", "?");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      assertEquals("?", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Document.createShell("|)#?iqs");
      Element element0 = document0.appendElement("|)#?iqs");
      element0.before("fhb$J6G39xOl[");
      document0.textNodes();
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parse("VGI9cqJ1JWxs)CJ", "VGI9cqJ1JWxs)CJ");
      document0.prepend("org.jsoup.internal.Normalizer");
      document0.children();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByIndexGreaterThan(14);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parse("=(uI", "");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ZR", "ZR");
      Elements elements0 = document0.getElementsMatchingText("ZR");
      assertEquals(3, elements0.size());
      assertEquals("ZR", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parse("@", "@");
      Elements elements0 = document0.getAllElements();
      assertEquals(4, elements0.size());
      assertEquals("@", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parse("Tag <ame mst not be empty.", "Tag <ame mst not be empty.");
      // Undeclared exception!
      try { 
        document0.before("java.lang.string@0000000079 java.lang.string@0000000079");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parse("*|", ")[c");
      document0.getElementsByAttribute(")[c");
      assertEquals(")[c", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parse("'", "'");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("'", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Element element0 = new Element("\"");
      // Undeclared exception!
      try { 
        element0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parse("s?/-z93U~", "s?/-z93U~");
      Element element0 = document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("s?/-z93U~", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = new Document("\"");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("\"", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = new Document("42/tC");
      Pattern pattern0 = Pattern.compile("42/tC");
      document0.getElementsByAttributeValueMatching("42/tC", pattern0);
      assertEquals("42/tC", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = new Document("Lb?<?:&o>");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("Lb?<?:&o>", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Document.createShell("r3nxog<u_tm|7j?(");
      document0.is("menuitem");
      assertEquals("r3nxog<u_tm|7j?(", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Document.createShell("Tag name mus[ notJ%e empty.");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("Tag name mus[ notJ%e empty.", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parse("Lb7<d-NH1", "Lb7<d-NH1");
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Document.createShell(".gwV%XMz']gx\"");
      Elements elements0 = document0.getElementsByIndexEquals(3450);
      assertEquals(1, document0.childNodeSize());
      assertEquals(".gwV%XMz']gx\"", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parse("reversed", "reversed");
      document0.getElementsByAttributeStarting("value");
      assertEquals("reversed", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6z'@v_m:W-tM{", "#");
      Elements elements0 = document0.getElementsByIndexLessThan(67);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#", document0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      // Undeclared exception!
      try { 
        document0.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Document.createShell("\"");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-b?", "-b?");
      document0.select("menuitem");
      assertEquals(1, document0.childNodeSize());
      assertEquals("-b?", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parse("'", "'");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("br", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Document.createShell("h'bZ:*2BnDk:>5`");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("'", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Document.createShell("}^Y|7_YMb");
      document0.wholeText();
      assertEquals("}^Y|7_YMb", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parse("", "mjE4]\"");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      Element element0 = new Element(tag0, "body");
      element0.dataset();
      assertEquals("body", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parse("ZW", "ZW");
      Element element0 = document0.appendElement("textarea");
      element0.val("menuitem");
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Document.createShell("i");
      // Undeclared exception!
      try { 
        document0.child(75);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 75, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$IndexGreaterThan");
      document0.previousElementSiblings();
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Document.createShell("\"");
      Pattern pattern0 = Pattern.compile("\"", (-1108));
      document0.getElementsMatchingText(pattern0);
      assertEquals("\"", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }
}
