/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:41:04 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[> ", "[> ");
      Element element0 = document0.body();
      element0.html();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      Element element0 = document0.addClass("Children collection to be inserted must not be null.");
      element0.toggleClass("Children collection to be inserted must not be null.");
      document0.hasClass("menuitem");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      document0.toggleClass("Tag name must not be empty.");
      document0.addClass("Tag name must not be empty.");
      document0.hasClass("mq/'uh!o[9x_");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.body();
      element0.before(" />");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qv}avm");
      Element element0 = new Element(tag0, "");
      Element element1 = element0.removeClass("o~:zQS kt{38");
      element1.parentNode = (Node) element0;
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      File file0 = MockFile.createTempFile(" />", " />", (File) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      Charset charset0 = document0.charset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(outputStreamWriter0, 915, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*A-FMxR6[iLzI", "*A-FMxR6[iLzI");
      StringBuilder stringBuilder0 = new StringBuilder("*A-FMxR6[iLzI");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(stringBuilder0, 4, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Document.createShell("tag name must not be empty. tj");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("h>Z?bjbzaxmY", "=\"");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell("{G#LLQ?r#+Om3z{me");
      Document document1 = Parser.parse("G", "R>=1vUtIj[c#-wM");
      document0.appendTo(document1);
      document0.wrap("G");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[cQ]z$VL=}jfWF/%", "[cQ]z$VL=}jfWF/%");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      element1.wrap("[cQ]z$VL=}jfWF/%");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.body();
      element0.wrap(" />");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("9(>)X4ti6z=n`BN", parseSettings0);
      Element element0 = new Element(tag0, "p");
      element0.wholeText();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Tag tag0 = Tag.valueOf("noframes", (ParseSettings) null);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "noframes", (Attributes) null);
      pseudoTextElement0.setSiblingIndex((-1469));
      pseudoTextElement0.val("");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[cQ]z$VL=}jfWF/%", "[cQ]z$VL=}jfWF/%");
      Element element0 = document0.body();
      Element element1 = element0.toggleClass("[cQ]z$VL=}jfWF/%");
      element1.val("title");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Tag tag0 = Tag.valueOf("noframes", (ParseSettings) null);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "noframes", (Attributes) null);
      pseudoTextElement0.val(">");
      pseudoTextElement0.val();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.empty();
      element0.siblingIndex = (-906);
      document0.toggleClass("");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "UUKkL'gTfR%^{CC/Z}");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      document0.siblingIndex = (-2311);
      document0.tagName("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse("T4)vF", "T4)vF");
      Element element0 = document0.body();
      element0.tagName("CFa!=E9uH");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = new Document(" />");
      document0.tagName(" />");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|", "|");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element$2", attributes0);
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[cQ]z$VL=}jfWF/%", "[cQ]z$VL=}jfWF/%");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = new Document("#root");
      document0.selectFirst("#root");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse(">4<rV>}:|$3", ">4<rV>}:|$3");
      document0.selectFirst("html");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parse("_P:FY\"", "org.jsoup.nodes.Element$1");
      document0.select("title");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      document0.select("body");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.body();
      element0.removeClass(" />");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      document0.siblingIndex = (-127);
      document0.removeClass("id");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      document0.appendTo(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C.U|5//!X-G^[Nzi'", "C.U|5//!X-G^[Nzi'");
      document0.setSiblingIndex((-648));
      document0.prependText("C.U|5//!X-G^[Nzi'");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      Element element0 = document0.body();
      element0.prependText(" />");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      document0.prependElement("details");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      Document document1 = document0.clone();
      document0.appendTo(document0);
      document0.prependChild(document1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parse(":eq(", ":eq(");
      Element element0 = document0.createElement("html");
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse("8mv}avm", "8mv}avm");
      document0.setSiblingIndex((-750));
      document0.prepend("{|%qYy-dIup$Gk");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.body();
      element0.prepend(" />");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Tag tag0 = Tag.valueOf("oframes");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "oframes", (Attributes) null);
      pseudoTextElement0.prepend("");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.body();
      Document document1 = (Document)document0.doClone(element0);
      document1.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("8mv}am", "8mv}am");
      Document document1 = Document.createShell("8mv}am");
      document1.parentNode = (Node) document0;
      document1.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Element element0 = new Element("8mv}avm");
      Element element1 = element0.removeClass("8mv}avm");
      element1.parentNode = (Node) element0;
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.nodeName();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Document.createShell("{G#LLQ?r#+Om3z{me");
      Element element0 = document0.appendTo(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[cQ]z$VL=}jfWF/%");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "[cQ]z$VL=}jfWF/%", (Attributes) null);
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      pseudoTextElement0.is((Evaluator) evaluator_AllElements0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Tag tag0 = Tag.valueOf("noframes");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "noframes", (Attributes) null);
      pseudoTextElement0.is("noframes");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parse("4<rV>|$3", "4<rV>|$3");
      Element element0 = document0.body();
      Node[] nodeArray0 = new Node[0];
      element0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parse("javalan.xtri-g0*00000053", "javalan.xtri-g0*00000053");
      document0.parentNode = (Node) document0;
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      document0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Tag tag0 = Tag.valueOf("T4)vF");
      Element element0 = new Element(tag0, "T4)vF");
      Elements elements0 = element0.nextElementSiblings();
      element0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^|[n7\"nk(Xo6", "^|[n7\"nk(Xo6");
      Element element0 = document0.addClass("^|[n7\"nk(Xo6");
      element0.siblingIndex = (-1484);
      element0.html("^|[n7\"nk(Xo6");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[> ", "[> ");
      Element element0 = document0.body();
      element0.html("java.lang.string@0000000081");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(4);
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0, 4);
      document0.html(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3ycW[Q/sL>KXFV[iXE", "3ycW[Q/sL>KXFV[iXE");
      Element element0 = document0.head();
      element0.html();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.cssSelector();
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Document.createShell("id");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("V7w;IDY~)oPMV", "</");
      Element element0 = document0.prependText("noframes");
      Pattern pattern0 = Pattern.compile("N", 143);
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.getElementsMatchingText("");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", " />");
      Pattern pattern0 = Pattern.compile("#root", (int) (byte) (-80));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Element element0 = new Element("T43|vF");
      element0.text("T43|vF");
      element0.getElementsMatchingOwnText("T43|vF");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/>", "/>");
      document0.getElementsContainingText("/>");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsByTag("&@d)_E\u0004r)M");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Document.createShell("i[cQz$VL=}jfWF%");
      document0.getElementsByTag("head");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|", "|");
      document0.getElementsByIndexLessThan((-738));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parse("rLT", "rLT");
      document0.getElementsByIndexGreaterThan((-90));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Document.createShell("[N^Z#gL_6-");
      document0.getElementsByIndexEquals(1);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"6z;y12MEZIT", "|4n'Ph");
      document0.getElementsByAttributeValueNot("%DsC^NoI.", "%DsC^NoI.");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Tag tag0 = Tag.valueOf("4<kv>j}|$3");
      CDataNode cDataNode0 = new CDataNode("4<kv>j}|$3");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = Attribute.createFromEncoded("limitedQuirks", "</");
      Attributes attributes1 = attributes0.put(attribute0);
      Element element0 = new Element(tag0, "4<kv>j}|$3", attributes1);
      element0.getElementsByAttributeValueMatching("limitedQuirks", "</");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(",u 5%:esC+;Nc-", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded(",u 5%:esC+;Nc-", "&a)tMO@{;8o");
      attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, ",u 5%:esC+;Nc-", attributes0);
      formElement0.getElementsByAttributeValueEnding(",u 5%:esC+;Nc-", "&a)tMO@{;8o");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      document0.getElementsByAttributeValueContaining("head", "#root");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("id", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("id", "id");
      FormElement formElement0 = new FormElement(tag0, "id", attributes1);
      formElement0.getElementsByAttributeStarting("id");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse("script", ":nth-child(%d)");
      Element element0 = document0.prependElement(".");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      document0.appendTo(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      document0.siblingIndex = (-214);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("i[cQz$VL=}jfWF/%", "i[cQz$VL=}jfWF/%");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/{VHTHrjKxg<mv7`(b", "b");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.body();
      Element element1 = element0.text(" />");
      element1.clone();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.createElement(" />");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.empty();
      element0.siblingIndex = (-906);
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{V", "{V");
      Element element0 = document0.body();
      Locale locale0 = Locale.ITALY;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.empty();
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("c ", "c ");
      document0.toggleClass("RCDATAEndTagName");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^|[n7\"nk(Xo6", "^|[n7\"nk(Xo6");
      document0.addClass("^|[n7\"nk(Xo6");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.body();
      element0.children();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("/>", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "/>", (Attributes) null);
      pseudoTextElement0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("_P:FY\"9", "org.jsoup.nodes.Element$1");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8mv}avm", "8mv}avm");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("i[cQz$VL=}jfWF/%", "Wl[exQ~cM :>zJ");
      Element element0 = document0.body();
      Element element1 = document0.head();
      element0.before((Node) element1);
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Element element0 = new Element("[N^Z#gL_6-");
      Document document0 = Parser.parseBodyFragmentRelaxed("[N^Z#gL_6-", "[N^Z#gL_6-");
      element0.appendTo(document0);
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Document.createShell("{G#LLQ?r#+Om3z{me");
      Document document1 = Parser.parse("G", "R>=1vUtIj[c#-wM");
      document0.appendTo(document1);
      document0.before("{G#LLQ?r#+Om3z{me");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", " > ");
      Element element0 = document0.head();
      element0.before(" ");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("javalan.xtri-g0*00000053", "javalan.xtri-g0*00000053");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qv}avm");
      Element element0 = new Element(tag0, "");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Tag tag0 = Tag.valueOf("UszfMFVx43C(96K>");
      CDataNode cDataNode0 = new CDataNode("UszfMFVx43C(96K>");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "UszfMFVx43C(96K>", attributes0);
      pseudoTextElement0.attributes();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.body();
      element0.attr("^{6r", false);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      document0.attr("^{6r", false);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.body();
      element0.attr("T43|vF", "#root");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Element element0 = new Element("T43|vF");
      element0.attr("T43|vF", "T43|vF");
      element0.getElementsByAttribute("T43|vF");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell("'WKya!CDG`");
      document0.siblingIndex = (-1937563198);
      document0.appendText("'WKya!CDG`");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.body();
      element0.appendText(" />");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Tag tag0 = Tag.valueOf("G=Xs>{!>6^r cVVtb");
      CDataNode cDataNode0 = new CDataNode("kt6=]W3LFzD)@d@\"u$");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "T43|vF", attributes0);
      element0.appendElement("title");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      document0.appendElement("title");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.appendElement("1f-]Lj,&(\"");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      document0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Tag tag0 = Tag.valueOf("UszfMFVx43C(96K>");
      CDataNode cDataNode0 = new CDataNode("UszfMFVx43C(96K>");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "UszfMFVx43C(96K>", attributes0);
      pseudoTextElement0.append("");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Element element0 = new Element("code");
      Tag tag0 = Tag.valueOf("code");
      FormElement formElement0 = new FormElement(tag0, "4II", (Attributes) null);
      Element element1 = element0.appendTo(formElement0);
      element1.after((Node) formElement0);
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.body();
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("Pattern syntax error: ", "b%M&':#boQ;;aE>0R", true);
      element0.after((Node) xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Document.createShell("{G#LLQ?r#+Om3z{me");
      Document document1 = Parser.parse("G", "R>=1vUtIj[c#-wM");
      Document document2 = (Document)document0.appendTo(document1);
      document2.after("R>=1vUtIj[c#-wM");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{>", "{>");
      Element element0 = document0.body();
      element0.after("#doctype");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.body();
      element0.addClass(",q~_pi9LrGIdTz");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = new Document("class");
      document0.addClass("class");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qb@>]3");
      Element element0 = new Element(tag0, "qb@>]3");
      Element element1 = element0.removeClass("qb@>]3");
      element1.parentNode = (Node) element0;
      // Undeclared exception!
      element0.wrap("qb@>]3");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = new Document("/#gm HG;I:t4g");
      DataNode dataNode0 = new DataNode("Ui.)");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.wrap("org.jsoup.nodes.Element");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8Eo+xh+", "8Eo+xh+");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.wholeText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = new Document("#root");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      document1.val("#root");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "</", (Attributes) null);
      // Undeclared exception!
      try { 
        pseudoTextElement0.val((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Tag tag0 = Tag.valueOf("*");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "^2B7XtJwm^]RW=^", attributes0);
      String[] stringArray0 = new String[1];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        pseudoTextElement0.val("uf9$M(kh}% R7");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Tag tag0 = Tag.valueOf("4<kV>J}|$3");
      CDataNode cDataNode0 = new CDataNode("kv");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      String[] stringArray0 = new String[0];
      attributes1.keys = stringArray0;
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "kv", attributes1);
      // Undeclared exception!
      try { 
        pseudoTextElement0.val();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parse("[H6Z%OPE;}5", "8zv}`d");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.textNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Tag tag0 = Tag.valueOf("noframes");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "noframes", (Attributes) null);
      List<Node> list0 = pseudoTextElement0.childNodes();
      pseudoTextElement0.childNodes = list0;
      // Undeclared exception!
      try { 
        pseudoTextElement0.text("");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("_P:FY\"9", "h;sxU^Hbb+=]!");
      // Undeclared exception!
      try { 
        document0.text("br");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{", "{");
      Element element0 = document0.addClass("{");
      List<Node> list0 = element0.childNodesCopy();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parse("FE-Nynv", ":#T52");
      CDataNode cDataNode0 = new CDataNode((String) null);
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parse("8mv}avm", "8mv}avm");
      Document document1 = Parser.parse("8mv}avm", "8mv}avm");
      document1.setSiblingIndex((-750));
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document1.text();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("</");
      Element element0 = document0.body();
      Element element1 = element0.after((Node) document0);
      // Undeclared exception!
      element1.tagName("</");
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qt}avm");
      Element element0 = new Element(tag0, "qt}avm");
      Element element1 = element0.removeClass("qt}avm");
      element1.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        element1.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[cQ]z$VL=}jfWF/%", "[cQ]z$VL=}jfWF/%");
      // Undeclared exception!
      try { 
        document0.selectFirst("[cQ]z$VL=}jfWF/%");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '[cQ]z$VL=}jfWF/%': unexpected token at '[cQ]z$VL=}jfWF/%'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("2aMWc", "ScriptDataDoubleEscapeStart");
      // Undeclared exception!
      try { 
        document0.select(".");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[cQ]z$VL=}jfWF/%", "[cQ]z$VL=}jfWF/%");
      // Undeclared exception!
      try { 
        document0.select(",Y(PR%8R,ns");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'R'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<$gqO2r'", "<$gqO2r'");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qv}avm");
      Element element0 = new Element(tag0, "qv}avm");
      Element element1 = element0.removeClass("qv}avm");
      element1.parentNode = (Node) element0;
      // Undeclared exception!
      element1.prependElement("@E--LSf6x+REu(1 eF");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qv}avm");
      Element element0 = new Element(tag0, "qv}avm");
      Element element1 = element0.removeClass("qv}avm");
      element1.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        element0.prependChild(element1.parentNode);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("lg@hu.qZ!+2$l", "lg@hu.qZ!+2$l");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Element element0 = new Element("qt}a]3");
      Element element1 = element0.removeClass("qt}a]3");
      element1.parentNode = (Node) element0;
      // Undeclared exception!
      element0.prepend("wS]d");
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[cQ]z$VL=}jfWF/%", "[cQ]z$VL=}jfWF/%");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      CDataNode cDataNode0 = new CDataNode("Tag name must not be empty.");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.prepend("Tag name must not be empty.");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3hF!kE+Pj!", "");
      DataNode dataNode0 = DataNode.createFromEncoded("org.jsoup.nodes.Element$2", "");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000085", "java.lang.string@0000000085");
      MockFileWriter mockFileWriter0 = new MockFileWriter("audio");
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(17);
      // Undeclared exception!
      document0.outerHtmlTail(bufferedWriter0, 1330, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parse("java.lan.xtri-g@0*00000053", "java.lan.xtri-g@0*00000053");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "java.lan.xtri-g@0*00000053");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 36, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("4<kV>J}|$3", "4<kV>J}|$3");
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(62);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 62, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/{VHTHrjKxg<mv7`(b", "b");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, (-1953555632), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("T4)vF", "T4)vF");
      File file0 = MockFile.createTempFile("3R/_H#K9Th", "3R/_H#K9Th");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(file0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintWriter0, (-1486), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">4<rV>}:|$3", ">4<rV>}:|$3");
      MockPrintStream mockPrintStream0 = new MockPrintStream("ICS");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(27);
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintWriter0, 2825, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8Em+}h", "8Em+}h");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "8Em+}h");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 760, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4<rV>}:|$3", "4<rV>}:|$3");
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 8230, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse("i[cQz$VL=}jfF%", "i[cQz$VL=}jfF%");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "i[cQz$VL=}jfF%");
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 6957, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      StringWriter stringWriter0 = new StringWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(stringWriter0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintWriter0, (-2040997802), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        document0.outerHtmlHead(pipedWriter0, 67, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_=GJm3iq", "_=GJm3iq");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Document.createShell("*zUuJ");
      CDataNode cDataNode0 = new CDataNode(">4<rV>]E");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.appendTo(document0);
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag("class");
      // Undeclared exception!
      element0.is((Evaluator) evaluator_Tag0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Document.createShell("rLT");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Tag tag0 = Tag.valueOf("A|\"FyYZ=)9|J");
      Element element0 = new Element(tag0, "A|\"FyYZ=)9|J");
      // Undeclared exception!
      try { 
        element0.is("A|\"FyYZ=)9|J");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'A|\"FyYZ=)9|J': unexpected token at '\"FyYZ=)9|J'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lan.xtri-g@0*00000053", "java.lan.xtri-g@0*00000053");
      Element element0 = document0.removeClass("java.lan.xtri-g@0*00000053");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      element0.is("head");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parse("_P:FY\"9", "org.jsoup.nodes.Element$1");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("rv", false);
      document0.setParentNode(xmlDeclaration0);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parse("noframes", "noframes");
      document0.childNodes = null;
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren(1132, nodeArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      CDataNode cDataNode0 = new CDataNode("P");
      nodeArray0[1] = (Node) cDataNode0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Document.createShell("?^kXq_y<fd8!Y8");
      Element element0 = document0.attr("n'r3[Z_I62[#G", "?^kXq_y<fd8!Y8");
      element0.siblingIndex = (-1625949436);
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) element0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", "java.lang.string@0000000127");
      Elements elements0 = document0.getElementsByIndexLessThan(1195);
      // Undeclared exception!
      try { 
        document0.insertChildren(1, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qv}avm");
      Element element0 = new Element(tag0, "qv}avm");
      Element element1 = element0.removeClass("qv}avm");
      element1.parentNode = (Node) element0;
      // Undeclared exception!
      element1.html("qv}avm");
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Document.createShell("html");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parse("8mv}am", "8mv}am");
      Element element0 = document0.removeClass("8mv}am");
      element0.parentNode = (Node) document0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      element0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.html((OutputStreamWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qt}avm");
      Element element0 = new Element(tag0, "qt}avm");
      Element element1 = element0.removeClass("qt}avm");
      element1.parentNode = (Node) element0;
      // Undeclared exception!
      element0.html();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">4<rV>}:|$3", ">4<rV>}:|$3");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("J$]>S=S]\"Yy}3", false);
      document0.parentNode = (Node) xmlDeclaration0;
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("T43|vF", "T43|vF");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Document.createShell("{>");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("D@3g[E[", "D@3g[E[");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("VcUHnI/}[q>{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: VcUHnI/}[q>{
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "#");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("H4h(B8nlii`mqFY%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: H4h(B8nlii`mqFY%
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">4<rV>}:'E3", ">4<rV>}:'E3");
      CDataNode cDataNode0 = new CDataNode(">4<rV>}:'E3");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText(">4<rV>}:'E3");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parse("java.lan.xtri-g@0*00000053", "java.lan.xtri-g@0*00000053");
      Document document1 = document0.normalise();
      document1.siblingIndex = (-377);
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document1.getElementsMatchingOwnText("java.lan.xtri-g@0*00000053");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{", "{");
      Element element0 = document0.addClass("{");
      List<Node> list0 = element0.childNodesCopy();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.getElementsContainingOwnText("ScriptDataDoubleEscapedDash");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{", "{");
      Element element0 = document0.addClass("{");
      List<Node> list0 = element0.childNodesCopy();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.getElementsByTag("#root.java.lang.String@0000000128.{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">4<rV>}'E", ">4<rV>}'E");
      CDataNode cDataNode0 = new CDataNode("!sbh");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.getElementsByIndexGreaterThan(1628);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{", "{");
      Element element0 = document0.addClass("{");
      List<Node> list0 = element0.childNodesCopy();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByClass("Npn2O[G-VV5CWsXo8:_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("h>Z?bjbzaxmY", "h>Z?bjbzaxmY");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Tag tag0 = Tag.valueOf("t");
      Element element0 = new Element(tag0, "t");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueStarting("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4<rV>}:|$3", "4<rV>}:|$3");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("dd", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("0WF+#=#G#_|jht");
      Document document0 = parser0.parseInput((Reader) stringReader0, " > ");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("RawtextEndTagName", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parse("@{@,a%n|:M4a=O", "@{@,a%n|:M4a=O");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("@{@,a%n|:M4a=O", (Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching((String) null, "x%{F1vLHK+_l4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: x%{F1vLHK+_l4
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "9Bk?Wg!G@nxR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "IN?JB4#l/)%6XVuiL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/>", "/>");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"6z;y12MEZIT", "|4n'Ph");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("RX5", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("RX5", true);
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "RX5", attributes1);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttribute("RX5");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{", "{");
      Element element0 = document0.addClass("{");
      List<Node> list0 = element0.childNodesCopy();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.getElementById("br");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("i[cQz$VL=}jfWF/%", "i[cQz$VL=}jfWF/%");
      Element element0 = document0.body();
      element0.toggleClass("i[cQz$VL=}jfWF/%");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'body.java.lang.String@0000000054': unexpected token at '@0000000054'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">4<rV>}'E3", ">4<rV>}'E3");
      CDataNode cDataNode0 = new CDataNode(">4<rV>}'E3");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("h>Z?bjbzaxmY", "=\"");
      // Undeclared exception!
      try { 
        document0.child((-1110026255));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = new Document("#root");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.before((Node) document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("8mv}am", "8mv}am");
      Document document1 = (Document)document0.removeClass("8mv}am");
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      document1.before("8mv}am");
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Document.createShell("tag name must not be empty. tj");
      CDataNode cDataNode0 = new CDataNode("F\"8|y@]-'e^");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.before("not");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Document.createShell("T43|vF");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qt}a]3");
      Element element0 = new Element(tag0, "qt}a]3");
      Element element1 = element0.removeClass("qt}a]3");
      element1.parentNode = (Node) element0;
      // Undeclared exception!
      element0.attr("qt}a]3", "98gShspM%L");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Document.createShell("{>");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "br");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = new Document("noframes");
      DataNode dataNode0 = new DataNode("~<jA/1", "noframes");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.appendTo(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qv}avm");
      Element element0 = new Element(tag0, "qv}avm");
      Element element1 = element0.removeClass("qv}avm");
      element1.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        element0.appendTo(element1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("");
      Document document0 = parser0.parseInput((Reader) stringReader0, "");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Document.createShell("+|(");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.appendElement("1f-]Lj,&(\"");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      document0.parser(parser1);
      // Undeclared exception!
      try { 
        document0.appendElement("#root");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/{VHTHrjKxg<mv7`(b", "/{VHTHrjKxg<mv7`(b");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("}L'0QRY", "lZxepzh}~l[");
      List<Node> list0 = Parser.parseXmlFragment("body", "body");
      document0.childNodes = list0;
      TextNode textNode0 = new TextNode("-7d@(@<qY!-Tf$", "body");
      // Undeclared exception!
      try { 
        document0.appendChild(textNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = new Document("8mv}avm");
      CDataNode cDataNode0 = new CDataNode("4a3ovt\"4-0");
      Node node0 = cDataNode0.doClone(document0);
      // Undeclared exception!
      try { 
        document0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = new Document("8mv}avm");
      Element element0 = document0.removeClass("8mv}avm");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      element0.append("org.jsoup.nodes.PseudoTextElement");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = new Document("f>n_");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[cQ]z$VL=}jfWF/%", "[cQ]z$VL=}jfWF/%");
      Element element0 = document0.body();
      // Undeclared exception!
      try { 
        element0.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parse("head", "head");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.after("p");
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Tag tag0 = Tag.valueOf("nQfraes");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "noframes", (Attributes) null);
      TextNode textNode0 = TextNode.createFromEncoded("nQfraes", "EG2}aYj~1Z=Vh");
      pseudoTextElement0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.after("&^uOe`%.)Z");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "h4", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "#root");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      document0.html((OutputStreamWriter) null);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parse("h>Z?bjbzaxmY", "h>Z?bjbzaxmY");
      document0.toggleClass("$4");
      document0.addClass("h>Z?bjbzaxmY");
      document0.hasClass("h>Z?bjbzaxmY");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Element element0 = new Element("7$9pnh0tHENdHM@0V|");
      Element element1 = element0.text("T43|vF");
      element1.data();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[N^Z#gL_6-", ":matchText");
      Element element0 = document0.body();
      Element element1 = document0.appendTo(element0);
      element1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{>", "{>");
      Element element0 = document0.body();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{V", "{V");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".", ".");
      Element element0 = document0.body();
      element0.append("KaN:Q3#G");
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C.U|5//!X-G^[Nzi'", "C.U|5//!X-G^[Nzi'");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^|[n7\"nk(Xo6", "^|[n7\"nk(Xo6");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = new Document("");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Document.createShell("");
      Pattern pattern0 = Pattern.compile("cv2*2g+");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[cQ]z$VL=}jfWF/%", "[cQ]z$VL=}jfWF/%");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("title", "title");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qt}a]3");
      Element element0 = new Element(tag0, "qt}a]3");
      Pattern pattern0 = Pattern.compile("qt}a]3", 53);
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("c ", "c ");
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      document0.is((Evaluator) evaluator_IsFirstChild0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parse("@{@,a%n|:M4a=O", "@{@,a%n|:M4a=O");
      document0.getElementsByAttributeValueMatching("@{@,a%n|:M4a=O", (Pattern) null);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "MT");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Tag tag0 = Tag.valueOf("noframes", (ParseSettings) null);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "noframes", (Attributes) null);
      pseudoTextElement0.id();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Element element0 = new Element("T43|vF");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = new Document("noframes");
      document0.hasClass("noframes");
      DataNode dataNode0 = new DataNode("~<jA/1", "noframes");
      document0.doClone(dataNode0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parse(">4<rV>}:|$3", ">4<rV>}:|$3");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ">4<rV>}:|$3");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("K,8od!F#:1D", "G[d}u.rrbkC");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      StringWriter stringWriter0 = new StringWriter(994);
      document1.outerHtml((Appendable) stringWriter0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "body", (Attributes) null);
      pseudoTextElement0.val("body");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Hz", attributes0);
      pseudoTextElement0.val();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{", "{");
      Element element0 = document0.addClass("{");
      element0.toggleClass("{");
      document0.toggleClass("{");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parse("h>Z?bjbzaxmY", "h>Z?bjbzaxmY");
      Element element0 = document0.toggleClass("$4");
      element0.addClass("Character");
      element0.getElementsByClass("Character");
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.toggleClass("");
      document0.addClass("");
      document0.hasClass("[cQ]z$VL=}jfWF/%");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{", "{");
      Element element0 = document0.addClass("{");
      document0.toggleClass("{");
      element0.hasClass("java.lang.string@0000000085");
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^|[n7\"nk(Xo6", "^|[n7\"nk(Xo6");
      Element element0 = document0.addClass("^|[n7\"nk(Xo6");
      document0.toggleClass(" />");
      element0.hasClass(" />");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{", "{");
      document0.toggleClass("{");
      document0.hasClass("ScriptDataDoubleEscapedDash");
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{", "{");
      document0.toggleClass("{");
      document0.hasClass("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("4<kV>J}|$3", "4<kV>J}|$3");
      CDataNode cDataNode0 = new CDataNode("4<kV>J}|$3");
      document0.appendChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_=GJm3iq", "_=GJm3iq");
      DataNode dataNode0 = new DataNode("_=GJm3iq");
      document0.prependChild(dataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      DocumentType documentType0 = new DocumentType(" />", "zM\"}Tr{c_fQ{A", "", "id");
      document0.prependChild(documentType0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C.U|5//!X-G^[Nzi'", "C.U|5//!X-G^[Nzi'");
      Element element0 = document0.prependText(" ");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Document.createShell("rLT");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lan.xtri-g@0*00000053", "java.lan.xtri-g@0*00000053");
      Element element0 = document0.removeClass("java.lan.xtri-g@0*00000053");
      element0.parentNode = (Node) document0;
      element0.getElementsMatchingOwnText("java.lan.xtri-g@0*00000053");
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("value");
      Element.preserveWhitespace(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("REMOVE", "REMOVE");
      LinkedHashSet<CDataNode> linkedHashSet0 = new LinkedHashSet<CDataNode>();
      CDataNode cDataNode0 = new CDataNode("REMOVE");
      linkedHashSet0.add(cDataNode0);
      document0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.title("%W? ]rZq-F");
      document0.getElementsMatchingOwnText("%W? ]rZq-F");
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{>", "{>");
      LinkedHashSet<XmlDeclaration> linkedHashSet0 = new LinkedHashSet<XmlDeclaration>();
      Comment comment0 = new Comment("Vf>~#F.@#oZ", "Vf>~#F.@#oZ");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      linkedHashSet0.add(xmlDeclaration0);
      Element element0 = document0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
      element0.getElementsContainingOwnText("{>");
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Document.createShell("{G#LLQ?r#+Om3z{me");
      Element element0 = document0.appendText("{G#LLQ?r#+Om3z{me");
      Document document1 = Parser.parse("G", "R>=1v3e5UfIjc#-M");
      element0.appendTo(document1);
      document1.text();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parse(">4<rV>}:|$3", ">4<rV>}:|$3");
      document0.append("html");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("98?", "98?");
      Comment comment0 = new Comment("98?");
      document0.prependChild(comment0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = new Document("/#gm HG;I:t4g");
      document0.getElementById("/#gm HG;I:t4g");
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parse("@{@,a%n|:M4a=O", "@{@,a%n|:M4a=O");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "class");
      document0.setParentNode(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[cQ]z$VL=}jfWF/%", "[cQ]z$VL=}jfWF/%");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      element1.isBlock();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Tag tag0 = Tag.valueOf("v@D)ak,X");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "v@D)ak,X", (Attributes) null);
      pseudoTextElement0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{V", "{V");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, elements0.size());
      assertEquals("{V", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{>", "{>");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("{>", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = new Document("|mz}|bFbjHJ");
      DataNode dataNode0 = DataNode.createFromEncoded("x!|Q{Zy^`cQp qt", "java.lang.string@0000000085");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parse("T4)vF", "T4)vF");
      Element element0 = document0.head();
      element0.after("java.lang.string@0000000085 s");
      String string0 = element0.cssSelector();
      assertEquals("T4)vF", element0.baseUri());
      assertEquals("html > head:nth-child(1)", string0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Tag tag0 = Tag.valueOf("title");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("id", "title", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, " ", attributes1);
      String string0 = formElement0.cssSelector();
      assertEquals("#title", string0);
      assertEquals(" ", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(829, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1534), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Element element0 = new Element("T43|vF");
      List<Node> list0 = element0.childNodesCopy();
      Document document0 = Parser.parseBodyFragmentRelaxed("", "org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.insertChildren((-1534), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{>", "{>");
      List<DataNode> list0 = document0.dataNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren(493, (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">4<rV>}:|$3", ">4<rV>}:|$3");
      DataNode dataNode0 = DataNode.createFromEncoded(">4<rV>}:|$3", ">4<rV>}:|$3");
      document0.appendChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      Element element0 = document0.body();
      Element element1 = element0.appendTo(document0);
      element1.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"6z;y12MEZIT", "|4n'Ph");
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
      assertEquals(1, document0.childNodeSize());
      assertEquals("|4n'Ph", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("98?", "98?");
      Comment comment0 = new Comment("98?");
      document0.prependChild(comment0);
      document0.children();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{", "{");
      Elements elements0 = document0.getElementsByIndexGreaterThan(1);
      assertEquals(0, elements0.size());
      assertEquals("{", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Character");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Character", (Attributes) null);
      Element element0 = pseudoTextElement0.selectFirst("Character");
      assertEquals("Character", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C.U|5//!X-G^[Nzi'", "C.U|5//!X-G^[Nzi'");
      document0.getAllElements();
      assertEquals("C.U|5//!X-G^[Nzi'", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Tag tag0 = Tag.valueOf("&-LIJFWRrD1y");
      Element element0 = new Element(tag0, "");
      Element element1 = element0.removeClass("o~:zQS kt{38");
      element1.parentNode = (Node) element0;
      Element element2 = element0.firstElementSibling();
      assertNull(element2);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", " > ");
      // Undeclared exception!
      try { 
        document0.before(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Elements elements0 = document0.getElementsByAttributeValueNot("Tag name must not be empty.", "                   ");
      assertTrue(elements0.isEmpty());
      assertEquals("Tag name must not be empty.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("0WF+#=#G#_|jht");
      Document document0 = parser0.parseInput((Reader) stringReader0, " > ");
      document0.doSetBaseUri("t");
      assertEquals("t", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<Sdtg0d*aV", "<Sdtg0d*aV");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/{VHTHrjKxg<mv7`(b", "b");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining((String) null, "b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getElementsByAttributeValueMatching("1f-]Lj,&(\"", "");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<Sdtg0d*aV", "<Sdtg0d*aV");
      Elements elements0 = document0.getElementsContainingText("!\"]mPbm$*[^+Z");
      assertEquals("<Sdtg0d*aV", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{>", "{>");
      Elements elements0 = document0.getElementsByClass("{>");
      assertEquals("{>", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("h>Z?bjbzaxmY", "=\"");
      document0.getElementsByAttributeValueEnding("*ho}q\"*\"U$Y*Ky", "=\"");
      assertEquals("=\"", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lan.xtri-g@0*00000053", "java.lan.xtri-g@0*00000053");
      boolean boolean0 = document0.is("head");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("Z3", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parse("8mv}avm", "8mv}avm");
      Elements elements0 = document0.getElementsByIndexEquals(1906);
      assertEquals("8mv}avm", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      document0.getElementsByAttributeStarting(" />");
      assertEquals(" />", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", " />");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parse("T4)vF", "T4)vF");
      // Undeclared exception!
      try { 
        document0.after("java.lang.string@0000000085 s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">4<rV>}'E3", ">4<rV>}'E3");
      Elements elements0 = document0.getElementsMatchingOwnText(">4<rV>}'E3");
      Element element0 = document0.insertChildren((-2), (Collection<? extends Node>) elements0);
      assertEquals(1, element0.childNodeSize());
      assertEquals(">4<rV>}'E3", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parse("T4)vF", "T4)vF");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals("T4)vF", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Document.createShell("textrea");
      document0.getElementsByAttributeValueStarting("html", "Attributes incorrectly present on end tag");
      assertEquals("textrea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      document0.getElementsByAttributeValue("textarea", "textarea");
      assertEquals("textarea", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.attr("tr", true);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8Eo+xh+", "8Eo+xh+");
      document0.wholeText();
      assertEquals("8Eo+xh+", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Element element0 = new Element("T43|vF");
      Elements elements0 = element0.getElementsByAttribute("T43|vF");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("T4)vF", "T4)vF");
      Elements elements0 = document0.getElementsContainingOwnText("/>");
      assertEquals("T4)vF", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qv}avm");
      Element element0 = new Element(tag0, "");
      Map<String, String> map0 = element0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Document.createShell("head");
      document0.title("head");
      String string0 = document0.html();
      assertEquals("head", document0.baseUri());
      assertEquals("<html>\n <head>\n  <title>head</title>\n </head>\n <body></body>\n</html>", string0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("T4)vF", "T4)vF");
      Element element0 = document0.tagName("body");
      assertEquals(1, element0.childNodeSize());
      assertEquals("T4)vF", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parse("_P:FY\"9", "org.jsoup.nodes.Element$1");
      // Undeclared exception!
      try { 
        document0.child(76);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 76, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C.U|5//!X-G^[Nzi'", "C.U|5//!X-G^[Nzi'");
      document0.prependText("C.U|5//!X-G^[Nzi'");
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qb@>]3");
      Element element0 = new Element(tag0, "qb@>]3");
      Elements elements0 = element0.getElementsMatchingText("qb@>]3");
      assertEquals("qb@>]3", element0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[cQ]z$VL=}jfWF/%", "[cQ]z$VL=}jfWF/%");
      // Undeclared exception!
      try { 
        document0.wrap("[cQ]z$VL=}jfWF/%");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }
}
