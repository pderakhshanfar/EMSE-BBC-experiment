/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 02:30:27 GMT 2020
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      document0.getElementsByAttributeValueMatching("org.jsoup.nodes.Element$2", "6IU");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      document0.getElementsByAttributeValue("z<V", "org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "th");
      document0.appendElement("06");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("org.jsoup.nodes.Element$2");
      document0.outerHtmlHead(mockPrintWriter0, 8220, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(",frdM%5UWgVZ", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("head");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "head", attributes0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Jo5gcF^LJvT!_0v", "Jo5gcF^LJvT!_0v");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parse("AzXN", "AzXN");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Dc?fy3V*>SU_~rRDLd+", ":matchText");
      document0.doSetBaseUri(":matchText");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Tag tag0 = Tag.valueOf("6}KP1$w{");
      CDataNode cDataNode0 = new CDataNode("66>hZRq4gR0N6ppcIyou");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "textarea", attributes0);
      pseudoTextElement0.getElementsMatchingText("|-$,`kcZAm]&'q");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      Element element0 = document0.body();
      element0.wrap("org.jsoup.nodes.Element$2");
      element0.wrap("Z]@pTBIV9mpxH");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$Matches", "org.jsoup.select.Evaluator$Matches");
      Element element0 = document0.head();
      element0.wrap("uJ{+^:b:KwT8");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parse("\"j^PF)0aP", "\"j^PF)0aP");
      Element element0 = document0.head();
      element0.val("]r fN54n1x$");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      Element element0 = document0.body();
      element0.toggleClass("value");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      Element element0 = document0.appendTo(document0);
      element0.toggleClass("textarea");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      Element element0 = document0.body();
      element0.text("%=0S");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      document0.text("%=0S");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "th");
      document0.tagName("th");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Element element0 = new Element("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(j^P)0a", "(j^P)0a");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = new Document("Children collection to be inserted must not be null.");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("\"^PF)0aP");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Element element0 = new Element("N");
      element0.selectFirst("N");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "th");
      document0.appendElement("06");
      document0.select("06");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|-$,`kcZAm]&'q", "\"j^PF)0aP");
      Element element0 = document0.body();
      element0.removeClass("}LOvMgU3N3(IGQd ");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      document0.appendTo(document0);
      document0.removeClass("Q+)D<olI");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Dc?fy3V*>SU_~rRDLd+", ":matchText");
      Element element0 = document0.createElement("Dc?fy3V*>SU_~rRDLd+");
      element0.removeClass(":matchText");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      document0.appendTo(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      Element element0 = document0.body();
      element0.prependText("html");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("}|<Rkz", "");
      document0.prependElement("Jk~");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parse("RX1I", "RX1I");
      document0.prependElement("html");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      Element element0 = document0.body();
      element0.prepend("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("b?*");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("th", (ParseSettings) null);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      pseudoTextElement0.parents();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse("|<Rkz", "");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|-$,`kcZAm]&'q", "\"j^PF)0aP");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ju)-0f$", "ju)-0f$");
      Element element0 = document0.body();
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Element element0 = new Element("ew2q4");
      element0.nodeName();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Document.createShell("\"^PF)0aP");
      Element element0 = document0.body();
      element0.tagName("\"^PF)0aP");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Document.createShell("");
      Pattern pattern0 = Pattern.compile("", 0);
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
      document0.is((Evaluator) evaluator_MatchesOwn0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "th");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren(1, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$Matches", "org.jsoup.select.Evaluator$Matches");
      Element element0 = document0.body();
      Elements elements0 = document0.getElementsByIndexGreaterThan(26);
      element0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$Matches", "org.jsoup.select.Evaluator$Matches");
      Element element0 = document0.body();
      Element element1 = element0.wrap("head");
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      element1.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Document.createShell("`m");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("|<Rkz", "}w0H-IEtE0!)e*/-F[");
      document0.val("|<Rkz");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = new Document("nullChar");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      Pattern pattern0 = Pattern.compile("Z]@pTBIV9mpxH");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = new Document("M+l=Ry:m)7?HkOpk]*");
      Pattern pattern0 = Pattern.compile("%A.tG#H;F~iN", 124);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Jo5gcF^LJ!_0v", "Jo5gcF^LJ!_0v");
      document0.getElementsMatchingOwnText("");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      document0.getElementsContainingText("\"(RQd?");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parse("\"j^F)0P", "\"j^F)0P");
      document0.getElementsContainingOwnText("\"j^F)0P");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Document.createShell(";l-_8-%f");
      document0.getElementsByTag("{rm{[SgjOIyl|\"-U");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$Matches", "org.jsoup.select.Evaluator$Matches");
      document0.getElementsByTag("#root");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      document0.getElementsByIndexLessThan(680);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsByIndexGreaterThan((-1956603585));
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("\"j^PF)0aP", "\"j^PF)0aP");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = new Document("\"j^PF)0aP");
      document0.getElementsByAttributeValueEnding("#root", "head");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      Element element0 = document0.body();
      document0.title("Z]@pTBIV9mpxH");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("\"j^PF)0aP", "\"j^PF)0aP");
      Element element0 = document0.head();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "th");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      Element element0 = document0.appendElement(";l-_8-%f");
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parse("\"j^F)0P", "\"j^F)0P");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Dc?fy3V*>SU_~rRDLd+", ":matchText");
      Element element0 = document0.createElement("Dc?fy3V*>SU_~rRDLd+");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|-$,`kcZAm]&'q", "\"j^PF)0aP");
      Element element0 = document0.body();
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parse("RX1I", "RX1I");
      Set<String> set0 = document0.classNames();
      Element element0 = document0.html("");
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Element element0 = new Element("class");
      element0.toggleClass(".");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("u", ":matches(regex) query must not be empty");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(=#N(,m5P/vW=.mL", "(=#N(,m5P/vW=.mL");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      Element element0 = document0.head();
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "th");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.prependChild(document0);
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse("\"^P0F)0aP", "\"^P0F)0aP");
      Element element0 = document0.body();
      element0.before(")8f^nJ");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":nth-child(", "}bQQ>15%BYZ!");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("|<Rkz", "");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Document.createShell("\"^PF)0aP");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Document.createShell("`m");
      document0.val(":nth-child(%d)");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parse("nullChar", "nullChar");
      Element element0 = document0.body();
      element0.attr("nullChar", false);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parse("\"j^F)0P", "\"j^F)0P");
      Element element0 = document0.head();
      element0.attr("\"j^F)0P", false);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      Element element0 = document0.body();
      element0.attr("Z]@pTBIV9mpxH", "applet");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Element element0 = new Element("\"j^PF)0aP");
      element0.attr("", "");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      Element element0 = new Element("textarea");
      Element element1 = document0.appendTo(element0);
      Element.preserveWhitespace(element1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      Element element0 = document0.head();
      Element element1 = element0.firstElementSibling();
      element1.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Selector$SelectorParseException");
      Element element0 = document0.body();
      element0.appendText("Doctype");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = new Document("\"j^PF)0aP");
      document0.appendElement("\"j^PF)0aP");
      document0.tagName("\"j^PF)0aP");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "body");
      document0.appendElement("head");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Document.createShell(";l-_8-%f");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Document.createShell("\"^PF)0aP");
      document0.prependChild(document0);
      document0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      Element element0 = document0.head();
      Element element1 = element0.append("--!");
      element1.after((Node) element0);
      element0.append("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Selector$SelectorParseException");
      Element element0 = document0.body();
      element0.after("org.jsoup.select.Selector$SelectorParseException");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      Element element0 = document0.body();
      element0.after("");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parse("eKAYW@k92Pmg_d@;0@", "=7b.Yp");
      Element element0 = document0.body();
      element0.addClass("org.jsoup.select.Evaluator");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$And", "textarea");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.wrap("br");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("#root", parseSettings0);
      Element element0 = new Element(tag0, "br");
      // Undeclared exception!
      try { 
        element0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.val("");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      document0.html("radio");
      // Undeclared exception!
      try { 
        document0.text("head");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parse("RX1I", "RX1I");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.tagName("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Jo5gcF^LJ!_0v", "Jo5gcF^LJ!_0v");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|-$,`kcZAm]&'q", "\"j^PF)0aP");
      // Undeclared exception!
      try { 
        document0.selectFirst("}LOvMgU3N3(IGQd ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '}LOvMgU3N3(IGQd ': unexpected token at '}LOvMgU3N3(IGQd '
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parse("Z]KIz9mpx9H", "Z]KIz9mpx9H");
      // Undeclared exception!
      try { 
        document0.select(" ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ' ': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "th");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      // Undeclared exception!
      try { 
        formElement0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Document.createShell(";l-_8-%f");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.prependElement("area");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$Matches", "org.jsoup.select.Evaluator$Matches");
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = new Document("html");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.prepend("Cpl'Z0db7UBp)%");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parse("|<Rkz", "}w0H-IEtE0!)e*/-F[");
      List<Node> list0 = Parser.parseFragment("^OY<-YD}?:]X1B\"c[", (Element) document0, "}w0H-IEtE0!)e*/-F[");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prepend("}w0H-IEtE0!)e*/-F[");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      StringBuffer stringBuffer0 = new StringBuffer("Children collection to be inserted must not be null.");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(1593);
      // Undeclared exception!
      document0.outerHtmlTail(stringBuffer0, 1593, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "th");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 2892, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "th");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "06");
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuilder0, (-1451), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, (-1756), (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, (-4829), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Document.createShell("br");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse("|<Rkz", "");
      // Undeclared exception!
      try { 
        document0.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(".?<f  ", parseSettings0);
      Element element0 = new Element(tag0, ".?<f  ");
      Document document0 = Parser.parseBodyFragment("p36P1R>g 8@U)ppcNl", ".?<f  ");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) element0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) element0;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parse("|<Rkz", "");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.html(";i3)`,$UTql+");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Document.createShell("d*By+{GoN*eV");
      // Undeclared exception!
      try { 
        document0.html((MockPrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("]oaZ9</c", parseSettings0);
      Element element0 = new Element(tag0, "{");
      element0.appendChild(element0);
      // Undeclared exception!
      element0.html();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to&be inserted must not be null.");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parse("|<Rkz", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Document.createShell("e!FTdBY.1:");
      DataNode dataNode0 = DataNode.createFromEncoded("e!FTdBY.1:", "e!FTdBY.1:");
      document0.parentNode = (Node) dataNode0;
      Pattern pattern0 = Pattern.compile("textarea");
      TextNode textNode0 = TextNode.createFromEncoded("0;+\"pNRNW", "e!FTdBY.1:");
      document0.appendChild(textNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText(pattern0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(=#N(,m5P/vW=.mL", "(=#N(,m5P/vW=.mL");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("(=#N(,m5P/vW=.mL");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: (=#N(,m5P/vW=.mL
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Document.createShell("\"^PF)0aP");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Document.createShell("listing");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("textarea", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parse("|<Rkz", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "|<Rkz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = new Document("Children collection to be inserted must not be null.");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("Children collection to be inserted must not be null.", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(=#N(,m5P/vW=.mL", "(=#N(,m5P/vW=.mL");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "org.jsoup.nodes.Entities");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("J", "J");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parse("RX1I", "RX1I");
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      Element element0 = document0.head();
      Element element1 = element0.addClass("m8a'K)C9xv6");
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'head.java.lang.String@0000000052': unexpected token at '@0000000052'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("`m", parseSettings0);
      Element element0 = new Element(tag0, "`m");
      // Undeclared exception!
      try { 
        element0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = new Document(".?<f  ");
      // Undeclared exception!
      try { 
        document0.child((-1110026255));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = new Document("M+l=Ry:m)7?HkOpk]*");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parse("\"j^F)0P", "\"j^F)0P");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Re<s$6%}\"|5f @", "Re<s$6%}\"|5f @");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nullChar", "nullChar");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nowrap", "nowrap");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.appendElement("s+");
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Element element0 = new Element("66ZRq4gR0N6ppcIyou");
      // Undeclared exception!
      try { 
        element0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Document.createShell("Z]@pTBIV9mpxH");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.append("Ci\"{HR6kF KXT5x4P2");
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Document.createShell("\"j^PF)0aP");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.after("Z]@pTBIV9mpxH");
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Tag tag0 = Tag.valueOf("%=0S");
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "%=0S", attributes0);
      // Undeclared exception!
      try { 
        formElement0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "Z]@pTBIV9mpxH", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "9V*l]2|Df{^6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "|<Rkz");
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      document0.html(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      document0.hasClass("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(=#N(,m5P/vW=.mL", "(=#N(,m5P/vW=.mL");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("org.jsoup.nodes.Element$1", "|qLIxvpq.)I?u");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nullChar", "nullChar");
      Element element0 = document0.body();
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Document.createShell("\"^PF)0aP");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "th");
      Element element0 = document0.appendElement("06");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "th");
      document0.prependChild(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|-$,`kcZAm]&'q", "\"j^PF)0aP");
      Element element0 = document0.body();
      element0.wrap("\"j^PF)0aP");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|-$,`kcZAm]&'q", "\"j^PF)0aP");
      Element element0 = document0.body();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator$And", "textarea");
      document0.appendTo(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parse("AzXN", "AzXN");
      Element element0 = document0.body();
      element0.html("AzXN");
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = new Document("\"j^PF)0aP");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Dc?fy3V*>SU_~rRDLd+", ":matchText");
      Pattern pattern0 = Pattern.compile("", 124);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ju)-0f$", "ju)-0f$");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parse("|<Rkz", "");
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      document0.is((Evaluator) evaluator_IsFirstChild0);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      document0.append("Ci\"{HR6kF KXT5x4P2");
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parse("nullChar", "nullChar");
      document0.select("id");
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Dc?fy3V*>SU_~rRDLd+", ":matchText");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      StringBuffer stringBuffer0 = new StringBuffer(3047);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuffer0, 1593, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("(q", "(q");
      document0.title("nowrap");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      document0.val("Z]@pTBIV9mpxH");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      document0.toggleClass("Z]@pTBIV9mpxH");
      document0.hasClass("Z]@pTBIV9mpxH");
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ju)-0f$", "ju)-0f$");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<html>\n <head></head>\n <body>\n  JorgcF^LJ!_0v\n </body>\n</html>", "");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      document0.appendTo(document0);
      Element.preserveWhitespace(document0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.prependChild(cDataNode0);
      element0.getElementsMatchingOwnText("Jk@GFz%");
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Document.createShell("e!FTdBY.1:");
      Pattern pattern0 = Pattern.compile("textarea");
      TextNode textNode0 = TextNode.createFromEncoded("0;+\"pNRNW", "e!FTdBY.1:");
      document0.appendChild(textNode0);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      document0.title("Z]@pTBIV9mpxH");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|-$,`kcZAm]&'q", "\"j^PF)0aP");
      document0.getElementById("66>hZRq4gR0N6ppcIyou");
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = new Document("nullChar");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Selector$SelectorParseException");
      Element element0 = document0.body();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Document.createShell("\"^PF)0aP");
      document0.prependChild(document0);
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Document.createShell("\"^PF)0aP");
      Element element0 = document0.body();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("\"^PF)0aP", element0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = new Document("html");
      document0.siblingElements();
      assertEquals("html", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals("Z]@pTBIV9mpxH", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      Element element0 = document0.addClass("m8a'K)C9xv6");
      element0.cssSelector();
      assertEquals("Children collection to be inserted must not be null.", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Dc?fy3V*>SU_~rRDLd+", ":matchText");
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        document0.insertChildren(58, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parse("|<Rkz", "");
      Node[] nodeArray0 = new Node[6];
      // Undeclared exception!
      try { 
        document0.insertChildren((-685), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = new Document("html");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(0, nodeArray0);
      assertEquals("html", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parse("MW+A]x3@7$%sM^9eg;", "head");
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      // Undeclared exception!
      try { 
        document0.insertChildren(26, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parse("|<Rkz", "");
      Pattern pattern0 = Pattern.compile(":prev*%s");
      Elements elements0 = document0.getElementsByAttributeValueMatching("ScriptDataEscapeStartDash", pattern0);
      // Undeclared exception!
      try { 
        document0.insertChildren((-683), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$Matches", "org.jsoup.select.Evaluator$Matches");
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      assertEquals("org.jsoup.select.Evaluator$Matches", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("textarea", document0.baseUri());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("org.jsoup.select.Evaluator$IsEmpty", "1.0");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("1.0", document0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("|<Rkz", "");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      Element element0 = document0.body();
      document0.appendTo(element0);
      assertEquals(2, element0.childNodeSize());
      
      document0.lastElementSibling();
      assertEquals("textarea", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      document0.selectFirst("h4");
      assertEquals("Z]@pTBIV9mpxH", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Tag tag0 = Tag.valueOf("\"j^PF)0aP");
      CDataNode cDataNode0 = new CDataNode("6Fm");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "06", attributes0);
      Elements elements0 = pseudoTextElement0.getElementsMatchingText("66ZRq4gR0N6ppcIyou");
      Element element0 = pseudoTextElement0.insertChildren(0, (Collection<? extends Node>) elements0);
      assertEquals("06", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      document0.getAllElements();
      assertEquals("Z]@pTBIV9mpxH", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parse("\"^P0F)0aP", "\"^P0F)0aP");
      // Undeclared exception!
      try { 
        document0.before(")8f^nJ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = new Document("html");
      document0.getElementsByAttribute("textarea");
      assertEquals("html", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$Matches", "org.jsoup.select.Evaluator$Matches");
      document0.getElementsByAttributeValueNot("U", "<|:\"$,o()slDM^");
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.is("textarea");
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Document.createShell("\"^PF)0aP");
      Element element0 = document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("\"^PF)0aP", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      document0.getElementsByAttributeValueContaining("sHEwT#j;H$@", "textarea");
      assertEquals("Z]@pTBIV9mpxH", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$Matches", "org.jsoup.select.Evaluator$Matches");
      Elements elements0 = document0.getElementsContainingText("org.jsoup.select.Evaluator$Matches");
      assertEquals(3, elements0.size());
      assertEquals("org.jsoup.select.Evaluator$Matches", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Document.createShell(";l-_8-%f");
      Elements elements0 = document0.getElementsByClass("kT:54");
      assertEquals(1, document0.childNodeSize());
      assertEquals(";l-_8-%f", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = new Document("\"j^PF)0aP");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "\"j^PF)0aP");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      document0.is("textarea");
      assertEquals("textarea", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "zmd");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("SmDLL4uNF", "Pkb{/fc;X\"9F2a2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: Pkb{/fc;X\"9F2a2
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      Elements elements0 = document0.getElementsByIndexEquals((-904));
      assertEquals(0, elements0.size());
      assertEquals("Z]@pTBIV9mpxH", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parse("|<Rkz", "");
      Elements elements0 = document0.getElementsByAttributeStarting(":parent%s");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = new Document("html");
      document0.getElementsByIndexLessThan(0);
      assertEquals("html", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Selector$SelectorParseException");
      // Undeclared exception!
      try { 
        document0.after("org.jsoup.select.Selector$SelectorParseException");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("]oaZ9</c", parseSettings0);
      Element element0 = new Element(tag0, "{");
      Element element1 = element0.prepend("]oaZ9</c");
      String string0 = element1.html();
      assertEquals(2, element0.childNodeSize());
      assertEquals("]oaZ9\n<!--c-->", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parse("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      Element element0 = document0.head();
      assertNotNull(element0);
      
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      
      String string0 = element1.cssSelector();
      assertEquals(0, element1.siblingIndex());
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
      assertEquals("html > head", string0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Dc?fy3V*>SU_~rRDLd+", ":matchText");
      document0.getElementsByAttributeValueStarting("kf^T_-`=7{l]dnN", "kf^T_-`=7{l]dnN");
      assertEquals(1, document0.childNodeSize());
      assertEquals(":matchText", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Element element0 = new Element("\"j^PF)0aP");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValue((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parse("nullChar", "nullChar");
      Element element0 = document0.attr("nullChar", false);
      assertEquals(1, element0.childNodeSize());
      assertEquals("nullChar", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Element element0 = new Element("textarea");
      String string0 = element0.wholeText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parse("\"j^F)0P", "\"j^F)0P");
      Elements elements0 = document0.getElementsContainingOwnText("%=0S");
      assertEquals("\"j^F)0P", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Document.createShell(";l-_8-%f");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals(";l-_8-%f", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parse("|<Rkz", "}w0H-IEtE0!)e*/-F[");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parse("|<Rkz", "");
      // Undeclared exception!
      try { 
        document0.child(75);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 75, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Selector$SelectorParseException");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.Selector$SelectorParseException", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Element element0 = new Element("%=0S");
      element0.prependText("%=0S");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Selector$SelectorParseException");
      document0.appendText("Doctype");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parse("Z]@pTBIV9mpxH", "Z]@pTBIV9mpxH");
      // Undeclared exception!
      try { 
        document0.wrap("Z]@pTBIV9mpxH");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }
}
