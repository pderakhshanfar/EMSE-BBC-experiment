/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 02:25:10 GMT 2020
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.jsoup.select.NodeVisitor;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("u$ttern syntax error: ", "u$ttern syntax error: ");
      Document document1 = document0.clone();
      Element element0 = document1.head();
      Element element1 = element0.prependChild(document0);
      element1.prependText("!'PkD/xGk|{XG~@");
      document1.nextElementSiblings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parse("kE`|@2~hw/}^", "cZUa");
      document0.selectFirst("br");
      Parser.parse("cZUa", "-ml!l5N8%4i/2>Z");
      document0.dataNodes();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qay", "?9Z \u0000");
      Document document1 = document0.clone();
      Element element0 = document1.appendElement("thead");
      Element element1 = document1.head();
      Element element2 = element1.after("Tag name must not be empty.");
      document0.previousElementSiblings();
      element2.appendTo(document1);
      element0.children();
      document1.ownText();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      Element element0 = document0.body();
      element0.getElementsByAttributeStarting("3mi-9c_,~V=)Xcb&\u0002");
      Tag tag0 = Tag.valueOf("textarea");
      CDataNode cDataNode0 = new CDataNode("pubsyskey");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      FormElement formElement0 = new FormElement(tag0, "?3^o$j:lgknb/~", attributes1);
      formElement0.ensureChildNodes();
      formElement0.val("textarea");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parse("u$ttern syntax rror: ", "u$ttern syntax rror: ");
      Document document1 = document0.clone();
      document1.getElementsByIndexEquals((-2));
      Element element0 = document0.appendElement("&C7NGFq%(BS=y'$3");
      document0.shallowClone();
      element0.previousElementSiblings();
      Element element1 = document0.head();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document1.html(charArrayWriter0);
      element1.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      Element element0 = document0.body();
      document0.updateMetaCharsetElement(true);
      element0.parents();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      document1.cssSelector();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      String string0 = "6]feA}";
      Element element0 = new Element("6]feA}");
      element0.appendElement("a");
      Document document0 = Parser.parseBodyFragment("6]feA}", "6]feA}");
      Document document1 = document0.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document0.setSiblingIndex(8);
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document2.attr("SZ)$Ug[PO0", "seamless");
      Document document3 = document2.ownerDocument();
      document3.prependText("a");
      String string1 = "h$(obubs";
      Element element1 = null;
      try {
        element1 = new Element((Tag) null, "h$(obubs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "u$ttern syntax error: ");
      Element element0 = new Element("u$ttern syntax error: ");
      element0.getElementsByIndexLessThan((-560));
      element0.getElementsByIndexEquals(71);
      Element element1 = element0.appendElement("a");
      element0.ownText();
      Tag.valueOf("br", (ParseSettings) null);
      Element element2 = element1.appendElement("br");
      element2.prependChild(element1);
      element2.doSetBaseUri("");
      element1.ownText();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parse("u$ttern syntax error: ", "u$ttern syntax error: ");
      Document document1 = document0.clone();
      Element element0 = document1.head();
      Element element1 = element0.prependChild(document0);
      element1.getElementsContainingOwnText("u$ttern syntax error: ");
      document1.nextElementSiblings();
      element1.doSetBaseUri("u$ttern syntax error: ");
      element0.ownText();
      element1.appendTo(document1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parse("u$ttern syntax rror: ", "u$ttern syntax rror: ");
      Document document1 = document0.clone();
      document1.getElementsByIndexEquals((-2));
      Element element0 = document0.appendElement("&C7NGFq%(BS=y'$3");
      document0.shallowClone();
      element0.previousElementSiblings();
      document0.head();
      Element element1 = document0.head();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      element1.html(charArrayWriter0);
      element1.append("&C7NGFq%(BS=y'$3");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parse("u$ttern syntax error: ", "u$ttern syntax error: ");
      Document document1 = document0.clone();
      Element element0 = document1.head();
      Element element1 = element0.prependChild(document0);
      element1.getElementsContainingOwnText("u$ttern syntax error: ");
      document1.nextElementSiblings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.cssSelector();
      element1.after((Node) document1);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Tag.valueOf("seamless");
      Attributes attributes0 = new Attributes();
      CDataNode cDataNode0 = new CDataNode("seamless");
      attributes0.clone();
      Document document0 = Parser.parseBodyFragmentRelaxed("w0Wi", "\"r=<43);!+q");
      Element element0 = document0.prependChild(cDataNode0);
      document0.getElementsContainingOwnText("w0Wi");
      document0.nextElementSiblings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.cssSelector();
      element0.textNodes();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parse("tfoot", "tfoot");
      Document document1 = Parser.parse("tfoot", "u$ttern syntax error: ");
      document1.val();
      document0.prependText("");
      document1.val();
      Element element0 = document0.text("u$ttern syntax error: ");
      String string0 = Node.EmptyString;
      element0.getElementsMatchingText("");
      Document document2 = document0.normalise();
      document2.hasText();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      String string0 = "col";
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("col", parseSettings0);
      String string1 = null;
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("0WRqiG", "`x]T kdmvuEMj");
      Attributes attributes2 = attributes1.clone();
      FormElement formElement0 = new FormElement(tag0, "col", attributes2);
      attributes2.normalize();
      formElement0.dataNodes();
      formElement0.getElementsByAttribute("[}ISyh`'eM'v3a(m");
      formElement0.ensureChildNodes();
      formElement0.text();
      Element element0 = formElement0.prepend("]1 C\f`JXo5MT~*R<");
      element0.nextElementSiblings();
      // Undeclared exception!
      try { 
        element0.after((Node) cDataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Element element0 = new Element("6]feA}");
      Document document0 = Parser.parseBodyFragment("6]feA}", "&X{jP5i:");
      Document document1 = document0.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document2.toggleClass("&X{jP5i:");
      document2.toggleClass(":has");
      Tag.valueOf("&X{jP5i:");
      Parser.parseBodyFragment("7+$@#`_9 ", "#root");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      document0.hasClass(":has");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parse("u$ttern syntax error: ", "u$ttern syntax error: ");
      Document document1 = Parser.parse("u$ttern syntax error: ", "u$ttern syntax error: ");
      document1.val();
      Element element0 = document1.prependText("u$ttern syntax error: ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      document0.val();
      DataNode dataNode0 = new DataNode("n(2r!\"0a(y 1(>xe-e9");
      Element element1 = document1.appendChild(dataNode0);
      String string0 = Node.EmptyString;
      element1.getElementsMatchingText("compact");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      String string0 = "isindex";
      Tag tag0 = Tag.valueOf("isindex");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("3')qZ$^id8rQY&5u", false);
      attributes1.getIgnoreCase("3')qZ$^id8rQY&5u");
      Attributes attributes2 = attributes1.clone();
      attributes1.asList();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      FormElement formElement0 = new FormElement(tag0, "isindex", attributes2);
      formElement0.parents();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "isindex");
      Element element0 = formElement0.toggleClass("isindex");
      FormElement formElement1 = (FormElement)formElement0.toggleClass("");
      formElement1.reparentChild(element0);
      attributes0.hasKeyIgnoreCase("n(2r!\"0a(y 1(>xe-e9");
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag.valueOf("STOP", parseSettings0);
      // Undeclared exception!
      formElement0.prependElement("Gr$__[4");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Element element0 = new Element("6]feA}");
      element0.getElementsByIndexLessThan(1224);
      element0.getElementsByIndexEquals(1224);
      Element element1 = element0.appendElement("a");
      String string0 = Node.EmptyString;
      element1.outerHtml();
      Element element2 = new Element("7}v1u@J%dG3");
      Document document0 = new Document("<a></a>");
      element2.getAllElements();
      // Undeclared exception!
      try { 
        element0.html((CharArrayWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parse("u$ttern syntax error: ", "u$ttern syntax error: ");
      Document document1 = document0.clone();
      Document document2 = Parser.parseBodyFragment("&C7NGFq(BS=y'$3", "u$ttern syntax error: ");
      Element element0 = document2.appendElement("^-V_qvZ-y*{g!9zl)TE");
      Element element1 = document1.shallowClone();
      Element element2 = document0.body();
      element2.previousElementSiblings();
      document2.head();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document2.html(charArrayWriter0);
      document1.toggleClass("u$ttern syntax error: ");
      document0.cssSelector();
      Set<String> set0 = element1.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Document document1 = (Document)document0.toggleClass("Tag name must not be empty.");
      Document document2 = (Document)document0.toggleClass("Children collection to be inserted must not be null.");
      Element element0 = document1.head();
      Element element1 = element0.prependChild(document0);
      element1.nextElementSiblings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        document2.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '#root.java.lang.String@0000000062.Children.collection.to.be.inserted.must.not.null.': unexpected token at '@0000000062.Children.collection.to.be.inserted.must.not.null.'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      Document document1 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      element0.getElementsByIndexEquals(78);
      element0.appendElement("col");
      document1.shallowClone();
      element0.previousElementSiblings();
      document1.head();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      element0.html(charArrayWriter0);
      document0.toggleClass(":has");
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parse("u$ttern syntax error: ", "u$ttern syntax error: ");
      Document document1 = Parser.parse("u$ttern syntax error: ", "u$ttern syntax error: ");
      Element element0 = document1.head();
      Element element1 = element0.attr("u$ttern syntax error: ", "11d9Uk):l>`o4lo ");
      element0.prependChild(document0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      element1.html(charArrayWriter0);
      Element element2 = element0.clone();
      element1.id();
      element1.text();
      element2.append("ls*_");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("u$ttern syntax error: ", "u$ttern syntax error: ");
      Document document1 = document0.clone();
      Element element0 = document1.head();
      Element element1 = element0.prependChild(document0);
      String string0 = Node.EmptyString;
      element1.getElementsMatchingText("");
      Element element2 = document0.body();
      element2.toggleClass("pu3ncRcsC{'!-");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.appendElement("n(2r!\"0A(y 1(>xE-E9");
      Element element1 = element0.prependChild(document0);
      document0.doSetBaseUri("nth-child");
      document0.ownText();
      // Undeclared exception!
      element1.attr("String must not be empty", "nth-child");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Document document0 = Parser.parseBodyFragment("AfterAttributeValue_quoted", "AfterAttributeValue_quoted");
      document0.getElementsByIndexEquals((-2));
      Element element0 = document0.appendElement("AfterAttributeValue_quoted");
      Element element1 = document0.head();
      element1.attr("multiple", ")y%DvQ]Z[j`Lq#s[-`v");
      Element element2 = document0.prependChild(element0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      element2.classNames();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      element2.html(charArrayWriter1);
      element1.wrap("org.jsoup.select.Evaluator$Attribute");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      document0.nextSibling();
      element0.getElementsByClass("Tag name must not be empty.");
      element0.hasText();
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Document document0 = Parser.parseBodyFragment("AfterAttributeValue_quoted", "AfterAttributeValue_quoted");
      document0.getElementsByIndexEquals((-2));
      Element element0 = document0.appendElement("AfterAttributeValue_quoted");
      element0.previousElementSiblings();
      element0.doSetBaseUri("nth-child");
      document0.ownText();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("ed", parseSettings0);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      CDataNode cDataNode0 = new CDataNode("ed");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "nth-child", attributes0);
      document0.outerHtml();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      formElement0.ensureChildNodes();
      Element element1 = formElement0.val((String) null);
      element1.getElementsByAttributeValueStarting("ed", "org.jsoup.nodes.Element");
      document0.html();
      document0.data();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document0 = parser0.parseInput("[BVM|eC(}", "l`0xu9alockqe#.;");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Tag tag0 = Tag.valueOf("[BVM|eC(}", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.iterator();
      String string0 = null;
      Attribute attribute0 = new Attribute(" > ", (String) null, attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "l`0xu9alockqe#.;", attributes1);
      FormElement formElement1 = formElement0.addElement(document0);
      Element element0 = document0.doClone(formElement1);
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("u$ttern syntax error: ", "u$ttern syntax error: ");
      Document document1 = document0.clone();
      Element element0 = document1.head();
      element0.shallowClone();
      Element element1 = element0.prependChild(document0);
      DataNode dataNode0 = DataNode.createFromEncoded("org.jsoup.nodes.Element", ":lt(%d)");
      element1.appendChild(dataNode0);
      document1.nextElementSiblings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      String string0 = ":nth-child(%d)";
      Document document0 = Parser.parseBodyFragmentRelaxed(":nth-child(%d)", ":nth-child(%d)");
      document0.cssSelector();
      Element element0 = document0.body();
      element0.before((Node) document0);
      String string1 = "SeS#d7e?J7of\\^m\\";
      // Undeclared exception!
      element0.is((Evaluator) null);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document document0 = Parser.parseBodyFragmentRelaxed("Patern syntax error:", "lKZ`&&4?l`");
      document0.attributes();
      document0.getElementsContainingOwnText("small");
      document0.appendElement("details");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "html";
      Tag tag0 = Tag.valueOf("html");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "html", attributes0);
      String string1 = "RawtextEndTagName";
      Tag.valueOf("RawtextEndTagName");
      element0.prependElement("html");
      // Undeclared exception!
      try { 
        element0.childNode(1879);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1879, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000039", "java.lang.string@0000000039");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      Document document2 = document1.clone();
      Parser.htmlParser();
      String string0 = "dK~lju%{>(LU[";
      document0.textNodes();
      document2.appendElement("dK~lju%{>(LU[");
      String string1 = "systemId";
      document1.getElementsContainingText("systemId");
      // Undeclared exception!
      try { 
        document2.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("cZUa", "cZUa");
      document0.toString();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.nextElementSiblings();
      Element element0 = document0.doClone(document0);
      Element element1 = element0.prependChild(document0);
      element0.prependChild(element1);
      document0.nextElementSiblings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6]feA}");
      Element element0 = new Element("6]feA}");
      element0.getElementsByIndexLessThan(1224);
      element0.getElementsByAttributeValueNot("&znmF", "6]feA}");
      element0.getElementsByIndexEquals(12);
      Element element1 = element0.appendElement("6]feA}");
      element1.textNodes();
      element1.ownText();
      Tag tag0 = Tag.valueOf("a", (ParseSettings) null);
      CDataNode cDataNode0 = new CDataNode("7}v1u@J%dG3");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "BX$(]Dkf?-1", attributes0);
      formElement0.outerHtml();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      Document document0 = Document.createShell("7X?/U']");
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      document0.is((Evaluator) evaluator_AllElements0);
      Document document1 = document0.clone();
      // Undeclared exception!
      try { 
        document1.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse("cZUa", "cZUa");
      document0.toString();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.nextElementSiblings();
      Element element0 = document0.doClone(document0);
      Element element1 = element0.prependChild(document0);
      element1.parents();
      document0.nextElementSiblings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      element0.wholeText();
      // Undeclared exception!
      element0.is("[%s^=%s]");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6]feA}");
      Element element0 = new Element("6]feA}");
      element0.getElementsByIndexLessThan(1224);
      element0.getElementsByIndexEquals(12);
      Element element1 = element0.appendElement("6]feA}");
      element1.ownText();
      Tag tag0 = Tag.valueOf("a", (ParseSettings) null);
      CDataNode cDataNode0 = new CDataNode("7}v1u@J%dG3");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "BX$(]Dkf?-1", attributes0);
      formElement0.outerHtml();
      Element element2 = new Element("java.lang.string@0000000039");
      formElement0.prependChild(element1);
      element1.nextElementSiblings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document document0 = Document.createShell("a");
      document0.clone();
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parse("u$ttern syntax error: ", "u$ttern syntax error: ");
      Document document1 = Parser.parse("u$ttern syntax error: ", "u$ttern syntax error: ");
      Element element0 = document1.head();
      Element element1 = element0.attr("u$ttern syntax error: ", "11d9Uk):l>`o4lo ");
      element0.prependChild(document0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      element1.html(charArrayWriter0);
      element0.clone();
      document0.getElementsByAttributeValueContaining("u$ttern syntax error: ", "11d9Uk):l>`o4lo ");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parse("cZUa", "cZUa");
      document0.toString();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.nextElementSiblings();
      Element element0 = document0.doClone(document0);
      StringReader stringReader0 = new StringReader("cZUa");
      char[] charArray0 = new char[2];
      stringReader0.read(charArray0);
      element0.previousElementSibling();
      document0.hasClass("<html>\n <head></head>\n <body>\n  cZUa\n </body>\n</html>");
      element0.empty();
      Element element1 = element0.prepend("<html>\n <head></head>\n <body>\n  cZUa\n </body>\n</html>");
      element1.getElementsByAttributeValueNot("bfu-", "('UOts&Z5");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse("cZUa", "cZUa");
      document0.toString();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.nextElementSiblings();
      Element element0 = document0.doClone(document0);
      document0.nextElementSiblings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.cssSelector();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Document document1 = (Document)document0.toggleClass("Tag name must not be empty.");
      Document document2 = (Document)document0.toggleClass("Children collection to be inserted must not be null.");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Tag.valueOf("Children collection to be inserted must not be null.");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.outerHtml();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      CharArrayWriter charArrayWriter2 = new CharArrayWriter();
      document2.cssSelector();
      document0.appendText("seamless");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.outerHtmlTail(charArrayWriter1, 7, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      Document document1 = Parser.parse("textarea", "textarea");
      Element element0 = document0.head();
      Element element1 = document1.head();
      element0.attr("Patern syntax error:", "AfterDoctypeName");
      element0.prependChild(document0);
      element1.nextElementSiblings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document1.cssSelector();
      element0.nextElementSibling();
      // Undeclared exception!
      element0.prepend("Patern syntax error:");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      Document document1 = Parser.parse("textarea", "textarea");
      Element element0 = document0.head();
      Document document2 = Document.createShell("textarea");
      document2.getElementsByIndexEquals((-1025));
      Element element1 = document1.appendElement("a");
      Element element2 = new Element("Tag name must not be empty.");
      element2.ownText();
      Document document3 = document2.normalise();
      document3.outerHtml();
      element0.empty();
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document2;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document2;
      nodeArray0[3] = (Node) element1;
      nodeArray0[4] = (Node) document2;
      nodeArray0[5] = (Node) element0;
      nodeArray0[6] = (Node) document2;
      // Undeclared exception!
      try { 
        element0.addChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parse("SelfClosfingStartTag", "Ne**Ncj9}C3:5y");
      Document document1 = Parser.parse("Ne**Ncj9}C3:5y", "Pattern syntax error: ");
      Element element0 = document0.head();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[0] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      document1.text("compact");
      element0.addClass("org.jsoup.parser.XmlTreeBuilder$1");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document document2 = Parser.parse("html", "SelfClosfingStartTag");
      document2.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Element element0 = new Element("6]feA}");
      int int0 = 1224;
      element0.previousElementSiblings();
      element0.getElementsByIndexEquals(1224);
      String string0 = "a";
      Element element1 = element0.appendElement("a");
      element1.ownText();
      element0.outerHtml();
      element0.empty();
      element0.attr("A0A'U", "6]feA}");
      // Undeclared exception!
      try { 
        element0.prependChild(element1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = new Document("u$ttern syntax error: ");
      Document document1 = Parser.parse("u$ttern syntax error: ", "u$ttern syntax error: ");
      Element element0 = document1.attr("u$ttern syntax error: ", "marquee");
      document0.prependChild(document0);
      element0.nextElementSiblings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Document.createShell("#");
      document0.toggleClass("-os, p(@@j##2pbqyf");
      document0.siblingElements();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.hasClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "IO>1w#S_C`");
      Document document1 = Parser.parse("IO>1w#S_C`", "IO>1w#S_C`");
      Element element0 = document0.head();
      document1.attr("IO>1w#S_C`", "IO>1w#S_C`");
      Element element1 = element0.prependChild(document1);
      document0.nextElementSiblings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      element0.getElementById("IO>1w#S_C`");
      element1.shallowClone();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "IO>1w#S_C`");
      Document document1 = Parser.parse("IO>1w#S_C`", "IO>1w#S_C`");
      Element element0 = document0.head();
      document1.attr("L`0xu9aLockqE#.;", "br");
      element0.nextElementSiblings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document1.cssSelector();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("u$ttern syntax error: ", "u$ttern syntax error: ");
      Document document1 = Parser.parse("u$ttern syntax error: ", "u$ttern syntax error: ");
      Element element0 = document1.head();
      Element element1 = element0.attr("u$ttern syntax error: ", "11d9Uk):l>`o4lo ");
      element0.prependChild(document0);
      element1.nextElementSiblings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      String string0 = "11d9Uk):l>`o4lo ";
      Element element0 = document0.head();
      String string1 = " ";
      // Undeclared exception!
      try { 
        element0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parse("QqT{$2Zl<", "QqT{$2Zl<");
      document0.data();
      document0.getElementsMatchingOwnText("e1#Av*");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan((-2103657449));
      evaluator_IndexLessThan0.matches(document0, document0);
      evaluator_IndexLessThan0.toString();
      document0.is((Evaluator) evaluator_IndexLessThan0);
      document0.nextElementSiblings();
      CDataNode cDataNode0 = new CDataNode(":lt(-2103657449)");
      cDataNode0.parent();
      Element element0 = document0.doClone((Node) null);
      element0.dataNodes();
      StringReader stringReader0 = new StringReader(":lt(-2103657449)");
      StringReader stringReader1 = new StringReader(":lt(-2103657449)");
      char[] charArray0 = new char[0];
      stringReader1.read(charArray0);
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)45;
      byteArray0[1] = (byte)30;
      byteArray0[2] = (byte)124;
      byteArray0[3] = (byte)76;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      document0.previousElementSibling();
      document0.getElementsByAttributeValueMatching("yfHHX", "#declaration");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Document document1 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document1.head();
      Element element1 = element0.attr(" ", "11d9Uk):l>`o4lo ");
      Element element2 = element0.prependChild(document0);
      element2.lastElementSibling();
      element1.nextElementSiblings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Element element3 = new Element("fLPs(");
      element2.removeClass("|");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.getElementsByAttributeStarting("Pattern syntax error: ");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Tag.valueOf("dir");
      Tag tag0 = Tag.valueOf("dir");
      FormElement formElement0 = new FormElement(tag0, "BX$(]Dkf?-1", (Attributes) null);
      FormElement formElement1 = new FormElement(tag0, "dir", (Attributes) null);
      formElement0.cssSelector();
      document0.tag();
      formElement0.getElementsMatchingText("textarea");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Document.createShell(".");
      document0.toggleClass("B|8N|G(.W");
      CDataNode cDataNode0 = new CDataNode("8");
      cDataNode0.nodelistChanged();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ".");
      Tag tag0 = Tag.valueOf("pZK/E2[");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "B|8N|G(.W", attributes0);
      formElement0.val();
      formElement0.nextElementSibling();
      FormElement formElement1 = new FormElement(tag0, "</", attributes0);
      formElement1.getElementsByTag("pZK/E2[");
      formElement0.ensureChildNodes();
      formElement1.val("BjWFO|X2");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Document document1 = Parser.parseBodyFragment("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.head();
      element0.attr(" ", "11d9Uk):l>`o4lo ");
      element0.prependChild(document0);
      document1.nextElementSiblings();
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Document.createShell(".");
      document0.toggleClass("B|8N|G(.W");
      CDataNode cDataNode0 = new CDataNode((String) null);
      cDataNode0.nodelistChanged();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.jsoup.nodes.Element$2");
      Tag tag0 = Tag.valueOf("html");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element$2", attributes1);
      formElement0.val();
      formElement0.nextElementSibling();
      formElement0.getElementsByTag("-->");
      Parser.parseXmlFragment("-->", "-->");
      FormElement formElement1 = formElement0.addElement((Element) null);
      formElement1.val("9d;{");
      formElement0.tag();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.hasAttr("Pattern syntax error: ");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      parseSettings0.normalizeTag("j\"Orx)");
      parseSettings0.normalizeAttribute("@khNm$");
      Tag tag0 = Tag.valueOf("j\"Orx)", parseSettings0);
      Element element0 = new Element(tag0, "textarea");
      element0.attr("5*|ft", "BNw+!uoCe|@yR.hD+Ej");
      Pattern pattern0 = Pattern.compile("@khNm$");
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Pattern syntax error: ");
      Document document1 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Parser.parse("yl9`", "version");
      Element element0 = document1.head();
      Element element1 = element0.attr(" ", "11d9Uk):l>`o4lo ");
      Element element2 = element0.prependChild(document0);
      element2.prependElement("yl9`");
      element1.nextElementSiblings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document1.html(charArrayWriter0);
      document0.toggleClass("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      document0.hasAttr("org.jsoup.nodes.Element$2");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      document0.getElementsByAttributeStarting("^cd(52,D'<VM T");
      element0.getElementsContainingOwnText("-dYf");
      element0.dataNodes();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Document document1 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.getElementsByAttributeStarting("Pattern syntax error: ");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document1.getElementById("7}v1u@J%dG3");
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("7}v1u@J%dG3", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("Pattern syntax error: ");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "Pattern syntax error: ", attributes0);
      formElement0.val();
      formElement0.nextElementSibling();
      // Undeclared exception!
      try { 
        formElement0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("version", "e1B");
      Element element0 = document0.body();
      element0.appendText("br");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Document document1 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.getElementsByAttributeStarting("Pattern syntax error: ");
      DocumentType documentType0 = new DocumentType("Pattern syntax error: ", "fxMEV-a3", "tag name must not be empty.");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      linkedHashSet0.add(documentType0);
      DocumentType documentType1 = new DocumentType("Pattern syntax error: ", "Y;S88D{JlZ2Y8^p", "SYSTEM");
      linkedHashSet0.add(documentType1);
      document0.insertChildren(1, (Collection<? extends Node>) linkedHashSet0);
      document0.getElementsByAttributeStarting(",");
      Element element0 = document1.toggleClass("table");
      document1.html();
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Document document1 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Parser.parse("yl9`", "version");
      Element element0 = document1.head();
      Element element1 = element0.attr(" ", "11d9Uk):l>`o4lo ");
      element0.prependChild(document0);
      element1.nextElementSiblings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document1.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.getElementsByAttributeStarting("Pattern syntax error: ");
      Document document1 = Parser.parse("Pattern syntax error: ", "shzya{(Y)&<(C%Um*:w");
      Element element0 = document1.body();
      element0.attr("11d9Uk):l>`o4ko+", "11d9Uk):l>`o4ko+");
      CDataNode cDataNode0 = new CDataNode(" _u!hu.Y`26.(J[<P%");
      Node node0 = cDataNode0.clone();
      // Undeclared exception!
      try { 
        cDataNode0.after(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parse("]u_.F%2x2", "QqT{$2Zl<");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "QqT{$2Zl<");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("SYSTEM", parseSettings0);
      CDataNode cDataNode0 = new CDataNode(" />");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = new Attribute("e1#Av*", "String input must not be null");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "u_F%^I2x2", attributes1);
      FormElement formElement1 = new FormElement(tag0, "String input must not be null", attributes0);
      String string0 = Node.EmptyString;
      document0.head();
      Element.preserveWhitespace(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      document0.toggleClass("Tag name must not be empty.");
      Element element0 = document0.toggleClass("Children collection to be inserted must not be null.");
      Tag.valueOf("BNw+!uoCe|@yR.hD+Ej");
      Parser.parseBodyFragment("Children collection to be inserted must not be null.", "BfU-");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.outerHtml();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      element0.hasClass("BfU-");
      // Undeclared exception!
      try { 
        document0.before((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      String string0 = "Children collection to be inserted must not be null.";
      document0.val();
      String string1 = null;
      // Undeclared exception!
      try { 
        element0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      document0.toggleClass("Tag name must not be empty.");
      document0.toggleClass("        ");
      element0.getElementsByIndexLessThan((-2861));
      Element element1 = document0.body();
      element1.nextSibling();
      Parser.parseBodyFragment("wb", "Tag name must not be empty.");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      Document document1 = document0.ownerDocument();
      document1.hasClass("org.jsoup.select.StructuralEvaluator$PreviousSibling");
      document1.appendText("|");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      Element element1 = document0.toggleClass("Children collection to be inserted must not be null.");
      element0.getElementsByIndexLessThan((-2861));
      element0.nextSibling();
      element1.appendElement("Hs3$2");
      Parser.parseBodyFragment("Hs3$2", "qiY4&BO1-7afjs");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      element1.ownerDocument();
      element1.hasClass("8TTLu;");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Document.createShell("D*");
      document0.toggleClass(":");
      Elements elements0 = document0.getElementsByIndexLessThan((-2861));
      document0.nextSibling();
      // Undeclared exception!
      try { 
        document0.insertChildren((-2861), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      document0.nextSibling();
      DocumentType documentType0 = new DocumentType("Tag name must not be empty.", "Tag name must not be empty.", "Tag name must not be empty.");
      Document document1 = Parser.parseBodyFragment(" > ", "attributeSingleValueCharsSorted");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      Document document2 = document1.ownerDocument();
      element0.hasClass("attributeSingleValueCharsSorted");
      document0.html("C");
      // Undeclared exception!
      try { 
        document2.before("Pattern syntax error: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      Element element1 = document0.toggleClass("Children collection to be inserted must not be null.");
      element0.getElementsByIndexLessThan((-2861));
      Element element2 = document0.val("D");
      element1.getElementsByClass("Tag name must not be empty.");
      element1.getElementsContainingOwnText("J%][");
      element0.getElementsContainingOwnText((String) null);
      element2.dataNodes();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      Element element1 = document0.toggleClass("Children collection to be inserted must not be null.");
      element0.getElementsByIndexLessThan((-2861));
      element0.nextSibling();
      Parser.parseBodyFragment("Hs3$2", "qiY4&BO1-7afjs");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = new CharArrayWriter();
      Document document1 = element1.ownerDocument();
      document1.hasClass("~g9hj*dv|8<}U");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Element element0 = new Element("QqT{$2Zl<");
      Document document0 = Parser.parse("f=k", "QqT{$2Zl<");
      String string0 = "yfHH\\X";
      document0.getElementsByClass("QqT{$2Zl<");
      Document document1 = document0.clone();
      Element element1 = document0.appendTo(document1);
      element1.firstElementSibling();
      document1.getElementsContainingOwnText("t?>R($|XXf>OJD1E");
      String string1 = "hn^'|b0hu}>9fh! ob*";
      Document.createShell("hn^'|b0hu}>9fh! ob*");
      // Undeclared exception!
      try { 
        document1.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "D*";
      String string1 = "1&N";
      Document document0 = Parser.parse("1&N", "textarea");
      String string2 = "l?7+";
      document0.getElementsByClass("f=k");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Element element0 = new Element("QqT{$2Zl<");
      Document document0 = Parser.parse("f=k", "QqT{$2Zl<");
      document0.getElementsByClass("r%3_opZ9-");
      Element element1 = document0.appendTo(element0);
      element1.firstElementSibling();
      document0.getElementsContainingOwnText("QqT{$2Zl<");
      Document.createShell(":");
      document0.lastElementSibling();
      document0.getElementsByAttributeValueMatching("yfHHX", "l?7+");
      document0.getElementsByAttributeValueMatching("QqT{$2Zl<", (Pattern) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse("*QLPk6", "*QLPk6");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Locale locale0 = Locale.SIMPLIFIED_CHINESE;
      String string0 = "#root";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "#root");
      String[] stringArray0 = Locale.getISOLanguages();
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      Document document1 = (Document)document0.classNames(set0);
      Element.preserveWhitespace(document0);
      locale0.getDisplayVariant();
      document0.id();
      document1.nextElementSiblings();
      MockPrintStream mockPrintStream0 = new MockPrintStream("#7@l");
      MockPrintStream mockPrintStream1 = (MockPrintStream)mockPrintStream0.printf(locale0, "class", (Object[]) stringArray0);
      Locale.Category locale_Category0 = Locale.Category.DISPLAY;
      Locale.setDefault(locale_Category0, locale0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "hyFmM%JEp0 8i?(");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      // Undeclared exception!
      try { 
        document1.outerHtmlHead(mockPrintStream1, (-1), document_OutputSettings1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Qq8r$2Z{<", "Qq8r$2Z{<");
      List<Node> list0 = Parser.parseXmlFragment("c:H", "z-J#");
      document0.childNodes = list0;
      Attributes attributes0 = new Attributes();
      document0.textNodes();
      document0.attr("Qq8r$2Z{<", "Qq8r$2Z{<");
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document0 = Document.createShell("publicId");
      Element element0 = document0.toggleClass(",fN");
      element0.getElementsByIndexEquals(3010);
      element0.getElementsByClass(",fN");
      Element element1 = document0.tagName("publicId");
      element1.childNodesCopy();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Document document1 = (Document)document0.toggleClass("Tag name must not be empty.");
      document0.nextSibling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.toggleClass("O&`n`Q$ R 9D;{");
      Document document2 = Document.createShell("#OxS(Xtja7}^oMm|eb");
      document0.nextSibling();
      Elements elements0 = document1.getElementsByClass("l?7+");
      document2.appendTo(document1);
      document0.getElementsContainingOwnText("Tag name must not be empty.");
      document1.clone();
      Document document3 = Document.createShell("#OxS(Xtja7}^oMm|eb");
      Pattern pattern0 = Pattern.compile("");
      document3.getElementsMatchingText(pattern0);
      document2.lastElementSibling();
      // Undeclared exception!
      try { 
        document2.insertChildren(2560, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      String string0 = "6]feA}";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Element element0 = new Element("6]feA}");
      element0.getElementsByIndexLessThan(1224);
      element0.getElementsByIndexEquals(1224);
      Element element1 = element0.appendElement("a");
      element1.ownText();
      element0.outerHtml();
      // Undeclared exception!
      try { 
        element0.select("-->");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '-->': unexpected token at '-->'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      String string0 = "Pattern syntax error: ";
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Document document1 = document0.clone();
      document1.toString();
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan((-300));
      Evaluator.IndexLessThan evaluator_IndexLessThan1 = new Evaluator.IndexLessThan(58);
      evaluator_IndexLessThan1.matches(document0, document1);
      Evaluator.IndexLessThan evaluator_IndexLessThan2 = new Evaluator.IndexLessThan(60);
      evaluator_IndexLessThan2.toString();
      document1.is((Evaluator) evaluator_IndexLessThan2);
      Document document2 = (Document)document1.clone();
      document2.attr("Pattern syntax error: ", "M+PBj(Xb,Q|nT]: I_");
      document1.nextElementSiblings();
      document1.doClone(document0);
      StringReader stringReader0 = null;
      try {
        stringReader0 = new StringReader((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("QqT{$2Zl<");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("QqT{$2Zl<", "QqT{$2Zl<");
      Tag tag1 = Tag.valueOf("@]8DM");
      FormElement formElement0 = new FormElement(tag0, "@]8DM", attributes1);
      FormElement formElement1 = new FormElement(tag1, "Fogn`@e1d($", attributes1);
      formElement0.addElement(formElement1);
      formElement0.cssSelector();
      Document document0 = Parser.parseBodyFragmentRelaxed("QqT{$2Zl<", "head");
      Document document1 = document0.normalise();
      document1.nextElementSibling();
      Element.preserveWhitespace(document0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Document document1 = (Document)document0.toggleClass("Tag name must not be empty.");
      document0.nextSibling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document2 = (Document)document0.toggleClass("O&`n`Q$ R 9D;{");
      Document document3 = Document.createShell("#OxS(Xtja7}^oMm|eb");
      document0.nextSibling();
      document1.getElementsByClass("l?7+");
      Document document4 = (Document)document3.appendTo(document1);
      document0.getElementsContainingOwnText("Tag name must not be empty.");
      document1.clone();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document2.hasClass("x<d|ePcw7EC^{h&q");
      document4.prependElement("cWxY;");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      String string0 = "Tag name must not be empty.";
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      Document document1 = new Document("Tag name must not be empty.");
      FileSystemHandling.shouldAllThrowIOExceptions();
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      document0.toggleClass("O&`n`Q$ R 9D;{");
      String string1 = "#OxS(Xtja7}^oMm|eb";
      Document document2 = Document.createShell("#OxS(Xtja7}^oMm|eb");
      document0.nextSibling();
      element0.getElementsByClass("l?7+");
      // Undeclared exception!
      try { 
        document2.appendTo(element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      document0.nextSibling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element1 = document0.toggleClass("O&`n`Q$ R 9D;{");
      Document document1 = Document.createShell("#OxS(Xtja7}^oMm|eb");
      document0.nextSibling();
      element0.getElementsByClass("l?7+");
      Document document2 = (Document)document1.appendTo(element0);
      document2.attr("l?7+", "P,2o:<5Eg*.F2N~j");
      element1.nextElementSiblings();
      element0.prepend("O&`n`Q$ R 9D;{");
      // Undeclared exception!
      try { 
        document1.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("Qq8r$2Z{<", "Qq8r$2Z{<");
      Attributes attributes0 = new Attributes();
      // Undeclared exception!
      try { 
        document0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      String string0 = ":";
      Element element0 = new Element(":");
      String string1 = ",L M'hYa$X";
      element0.getElementById(",L M'hYa$X");
      CDataNode cDataNode0 = new CDataNode(",L M'hYa$X");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Node node0 = cDataNode0.doClone(element0);
      // Undeclared exception!
      try { 
        element0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "'8IbqgS;>3z34IuQf");
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      document0.nextSibling();
      document0.updateMetaCharsetElement(true);
      document0.shallowClone();
      document0.val();
      Element element1 = document0.prependText("I#o5qq/");
      document0.parent();
      element0.parents();
      element1.val();
      element1.removeClass("textarea");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Element element0 = new Element("ziVWC0Fv2/(|nj");
      String string0 = "uP";
      Document document0 = Parser.parse("ziVWC0Fv2/(|nj", "uP");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Element element1 = document0.val("uP");
      // Undeclared exception!
      try { 
        element1.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Document document1 = (Document)document0.toggleClass("Tag name must not be empty.");
      document0.nextSibling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.toggleClass("O&`n`Q$ R 9D;{");
      Document document2 = Document.createShell("#OxS(Xtja7}^oMm|eb");
      document0.nextSibling();
      Elements elements0 = document1.getElementsByClass("l?7+");
      document2.appendTo(document1);
      document0.getElementsContainingOwnText("Tag name must not be empty.");
      document1.clone();
      Document.createShell("#OxS(Xtja7}^oMm|eb");
      document2.lastElementSibling();
      // Undeclared exception!
      try { 
        document2.insertChildren(2560, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Document.createShell("|d4m*:9P");
      document0.updateMetaCharsetElement(false);
      Element element0 = document0.shallowClone();
      document0.val();
      Document document1 = (Document)document0.prependText("|d4m*:9P");
      document1.parent();
      document1.parents();
      document1.val();
      document1.removeClass("[,ks\"sFxuLgz*L3>SkT");
      Document document2 = (Document)document0.appendChild(element0);
      document0.title();
      document2.getElementsMatchingText("");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) null;
      Document document3 = new Document("yfHHX");
      nodeArray0[1] = (Node) document3;
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      // Undeclared exception!
      try { 
        document2.addChildren((-2493), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      String string0 = "fZ=dAr";
      Document document0 = Parser.parseBodyFragmentRelaxed("ziVWC0Fv2/(|nj", "fZ=dAr");
      Document document1 = document0.clone();
      String string1 = null;
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      String string0 = " ";
      Element element0 = null;
      try {
        element0 = new Element(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Document document1 = (Document)document0.toggleClass("Tag name must not be empty.");
      document0.nextSibling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.toggleClass("O&`n`Q$ R 9D;{");
      Document.createShell("#OxS(Xtja7}^oMm|eb");
      document0.nextSibling();
      document1.getElementsByClass("l?7+");
      document0.getElementsContainingOwnText("Tag name must not be empty.");
      document1.clone();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      char[] charArray0 = new char[3];
      charArray0[0] = ',';
      charArray0[1] = 'I';
      charArray0[2] = 'T';
      // Undeclared exception!
      try { 
        charArrayWriter0.write(charArray0, 49, 58);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Parser parser1 = parser0.settings(parseSettings0);
      Document document0 = parser1.parseInput("nz>r~ocjB", "nz>r~ocjB");
      document0.attr("nz>r~ocjB", "G&j|+");
      document0.className();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      Element element0 = document0.val("nz>r~ocjB");
      element0.hasClass("nz>r~ocjB");
      Tag.valueOf("cb0aU(M");
      CDataNode cDataNode0 = new CDataNode("RCDATAEndTagName");
      element0.hasText();
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren(58, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      String string0 = "QqT{$2Zl<";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "h3");
      Document document0 = Parser.parseBodyFragment("h3", "QqT{$2Zl<");
      document0.text();
      Pattern pattern0 = Pattern.compile("h3", 4108);
      pattern0.asPredicate();
      document0.getElementsMatchingOwnText(pattern0);
      document0.getAllElements();
      document0.classNames();
      // Undeclared exception!
      try { 
        document0.select("7gXJ;CM~");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '7gXJ;CM~': unexpected token at ';CM~'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.clone();
      document0.getElementsByAttributeStarting("Pattern syntax error: ");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Tag tag0 = Tag.valueOf("^textarea");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("D+ N]djt#D8E7q#F", false);
      attributes1.put("wEhBn{&gnX;wlAAh&G", "br");
      FormElement formElement0 = new FormElement(tag0, "IW nuNBi0Ero", attributes0);
      Tag.valueOf("wEhBn{&gnX;wlAAh&G");
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.val();
      formElement1.text();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      String string0 = "Pattern syntax error: ";
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Document document1 = document0.clone();
      document0.getElementsByAttributeStarting("Pattern syntax error: ");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Tag.valueOf("Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document1.after("!oEqp@7A.C~ge6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Parser parser1 = parser0.settings(parseSettings0);
      Document document0 = parser1.parseInput("nz>r~ocjB", "nz>r~ocjB");
      document0.attr("nz>r~ocjB", "G&j|+");
      document0.className();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Z<#*,");
      Element element0 = document0.val("nz>r~ocjB");
      element0.hasClass("nz>r~ocjB");
      Tag tag0 = Tag.valueOf("cb0aU(M");
      CDataNode cDataNode0 = new CDataNode("RCDATAEndTagName");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "Z<#*,", attributes0);
      formElement0.val();
      element0.empty();
      element0.appendElement("cb0aU(M");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      String string0 = "ziVWC0Fv2/(|nj";
      Document document0 = Parser.parse("Pattern syntax erzor:", "ziVWC0Fv2/(|nj");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("~C'|Dm{0>B#");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ~C'|Dm{0>B#
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Parser parser1 = parser0.settings(parseSettings0);
      Document document0 = parser1.parseInput("nz>r~ocjB", "nz>r~ocjB");
      Document document1 = (Document)document0.attr("nz>r~ocjB", "G&j|+");
      document0.className();
      document0.toggleClass("xq");
      Document document2 = Document.createShell("G&j|+");
      document0.nextSibling();
      document0.getElementsByClass("org.jsoup.select.Evaluator$Class");
      document1.getElementsContainingOwnText("br");
      document1.clone();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.html(charArrayWriter0);
      document2.parents();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Document document0 = new Document("n,z>r~ocjB");
      Document document1 = Parser.parse("uP", "uP");
      Element element0 = document0.attr("11d9Uk):l>`o4lo ", "n,z>r~ocjB");
      element0.prependChild(document1);
      element0.getElementsContainingText("11d9Uk):l>`o4lo ");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ":";
      Document document0 = Parser.parseBodyFragment("value", ":");
      document0.val();
      document0.clearAttributes();
      document0.val("value");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "y!F|_*M&GoAet'e";
      Element element0 = new Element("y!F|_*M&GoAet'e");
      element0.parents();
      element0.getElementsByAttributeValueNot("y!F|_*M&GoAet'e", "y!F|_*M&GoAet'e");
      Document document0 = Parser.parseBodyFragmentRelaxed("y!F|_*M&GoAet'e", "y!F|_*M&GoAet'e");
      String string1 = "{@YxMTN`sCw2ncD";
      Element element1 = document0.text("{@YxMTN`sCw2ncD");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string2 = "body";
      Element element2 = element1.selectFirst("body");
      element2.attributes();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "y!F|_*M&GoAet'e");
      element1.hasClass("{@YxMTN`sCw2ncD");
      // Undeclared exception!
      try { 
        element0.replaceWith(element1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Tag.valueOf("yfHHX");
      CDataNode cDataNode0 = new CDataNode("T>Q,IK kEPD,");
      Attribute.createFromEncoded("yfHHX", "T>Q,IK kEPD,");
      Document document0 = Parser.parse("    ", "J:lUf)c");
      Element element0 = document0.attr("YJLoahfo^<", "YJLoahfo^<");
      Element element1 = document0.prependChild(element0);
      element1.nextElementSiblings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      document0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = ".";
      Document document0 = Parser.parseBodyFragmentRelaxed(".", ".");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = new Document("");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.hasText();
      Element element0 = document0.clone();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(121);
      document0.html(charArrayWriter0);
      element0.nextElementSibling();
      element0.tagName();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Document document0 = Parser.parse("QqT{$2Zl<", "Pattern syntax erzor:");
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "value");
      Document document1 = Parser.parse("hn^'|b0hu}>9fh! ob*", "DoctypeName");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(99);
      document0.html(charArrayWriter0);
      Document document2 = Parser.parse("</", "uP");
      document2.nextElementSibling();
      Element element0 = document0.empty();
      Charset charset0 = document1.charset();
      Set<String> set0 = charset0.aliases();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      document0.wholeText();
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      element0.getElementsByIndexLessThan((-2861));
      Element element1 = document0.toggleClass("Tag name must not be empty.");
      Document document1 = Document.createShell("Pattern syntax erzor:");
      document1.nextSibling();
      element0.getElementsByClass("Ej/.' {dr~SbCZ");
      Document document2 = Parser.parseBodyFragment("org.jsoup.nodes.CDataNode", "Pattern syntax erzor:");
      document0.getElementsContainingOwnText("Tag name must not be empty.");
      document1.clone();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      element1.getElementsMatchingOwnText("style");
      document2.dataNodes();
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      document0.getElementsContainingText("org.jsoup.nodes.Element$2");
      document0.hasAttributes();
      MockFile mockFile0 = new MockFile("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "@ZD{xU6TR");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // @ZD{xU6TR
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document0 = Document.createShell("5< t");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document document1 = document0.outputSettings(document_OutputSettings1);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document_OutputSettings0.prepareEncoder();
      Document document3 = document2.clone();
      document3.siblingElements();
      document2.getElementsContainingText("id");
      String string0 = "T>Q,IK kE\\PD,";
      Document document4 = (Document)document0.removeClass("T>Q,IK kEPD,");
      document4.doClone(document0);
      document1.prependElement("5< t");
      FileSystemHandling.shouldAllThrowIOExceptions();
      int int0 = 46;
      // Undeclared exception!
      try { 
        document3.attr((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      String string0 = "QqT{$2Zl<";
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag.valueOf("QqT{$2Zl<", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.clone();
      String string1 = "nqZ[zFH";
      Document document0 = Parser.parseBodyFragmentRelaxed("nqZ[zFH", "s+");
      Document document1 = document0.ownerDocument();
      Element element0 = document1.body();
      // Undeclared exception!
      try { 
        element0.child((-1478));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Document document0 = Parser.parseBodyFragment("vHerR/", "vHerR/");
      Document document1 = document0.clone();
      Element element0 = document1.body();
      element0.getElementsByIndexGreaterThan(62);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      document0.wholeText();
      Document document1 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      Document document2 = Parser.parseBodyFragment("MP'>", "Tag name must not be empty.");
      document1.getElementsByAttributeStarting("Tag name must not be empty.");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document1.hasText();
      document2.appendChild(document1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = new Document("");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.hasText();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Element element0 = document0.clone();
      Element element1 = document0.attr("Pattern syntax error: ", (String) null);
      Element element2 = element0.prependChild(document0);
      document0.nextElementSiblings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      element0.html(charArrayWriter0);
      element2.className();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("HN^'|b0hU}>9fh! Ob*", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(":", false);
      Attributes attributes2 = attributes1.put("Pattern syntax error: ", "value");
      FormElement formElement0 = new FormElement(tag0, "", attributes2);
      FormElement formElement1 = formElement0.addElement(element1);
      formElement1.val();
      formElement1.cssSelector();
      element1.prependText("value");
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      document0.wholeText();
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      element0.childNodes();
      element0.getElementsByIndexLessThan((-2861));
      element0.nextSibling();
      document0.getElementsByClass("Tag name must not be empty.");
      document0.getElementsContainingOwnText("duZG?Bo");
      document0.clone();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      charArrayWriter0.append((CharSequence) "duZG?Bo");
      document0.html(charArrayWriter0);
      document0.prepend("lO})C");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Document.createShell("value");
      document0.getElementsMatchingText("value");
      Attributes attributes0 = new Attributes();
      document0.textNodes();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document1 = Parser.parseBodyFragment("           ", ";LIPI");
      document1.appendTo(document0);
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding(":", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Element element0 = new Element("Tag name must not be empty.");
      Pattern pattern0 = Pattern.compile("Tag name must not be empty.");
      element0.getElementsMatchingOwnText(pattern0);
      element0.parent();
      element0.dataNodes();
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parse(">{dj", "Children collection to be inserted must not be null.");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Element element0 = document1.body();
      element0.html();
      element0.getElementsByAttributeValueStarting(">{dj", ",?qSJ/Fm(\"wH");
      element0.val("&gt;{dj");
      StringWriter stringWriter0 = new StringWriter(25);
      int int0 = 2731;
      // Undeclared exception!
      try { 
        stringWriter0.append((CharSequence) ",?qSJ/Fm(\"wH", 2731, 2019);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("QqT{$2Zl<", parseSettings0);
      Attributes attributes0 = new Attributes();
      Document document0 = Parser.parseBodyFragment("]u_F%2x2", "u_F%^I2x2");
      Element element0 = new Element(tag0, "QqT{$2Zl<", attributes0);
      document0.data();
      document0.getElementsByAttributeValueEnding("br", "e1#Av*");
      element0.previousElementSibling();
      document0.getElementsContainingOwnText("QqT{$2Zl<");
      Document document1 = document0.clone();
      document1.append("4@?R");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document1.html(charArrayWriter0);
      element0.getElementsByAttributeValueNot("br", "QqT{$2Zl<");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      document0.wholeText();
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      element0.getElementsByIndexLessThan((-2861));
      element0.wholeText();
      document0.toggleClass("Tag name must not be empty.");
      Document document1 = Document.createShell("Pattern syntax erzor:");
      document1.nextSibling();
      element0.getElementsByClass("Ej/.' {dr~SbCZ");
      Parser.parseBodyFragment("org.jsoup.nodes.CDataNode", "Pattern syntax erzor:");
      document0.getElementsContainingOwnText("Tag name must not be empty.");
      document1.clone();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document document2 = document0.clone();
      document2.html(charArrayWriter0);
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Parser parser1 = parser0.settings(parseSettings0);
      // Undeclared exception!
      try { 
        parser1.parseInput((String) null, "QqT{$2Zl<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Tag tag0 = Tag.valueOf("yfHHX");
      CDataNode cDataNode0 = new CDataNode("T>Q,IK kEPD,");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = Attribute.createFromEncoded("yfHHX", "T>Q,IK kEPD,");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "yfHHX", attributes1);
      Element element0 = new Element(tag0, ".RX");
      FormElement formElement1 = formElement0.addElement(element0);
      FormElement formElement2 = (FormElement)formElement1.appendText(".RX");
      element0.getElementById(".RX");
      formElement1.getAllElements();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("yfHHX");
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) tag0;
      objectArray0[1] = (Object) attributes1;
      objectArray0[2] = (Object) ".RX";
      objectArray0[3] = (Object) cDataNode0;
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.format(locale0, "yfHHX", objectArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(false);
      formElement2.outerHtmlHead(mockPrintWriter1, (-326), document_OutputSettings4);
      formElement2.className();
      formElement0.val();
      formElement2.cssSelector();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Parser.parseBodyFragmentRelaxed("BeforeAttributeName", "device");
      Document document0 = Parser.parse("", "{&ped");
      Element element0 = document0.toggleClass("H?@!_J|*Pv5r^Jj%");
      Element element1 = element0.text("device");
      document0.children();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element1.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      document0.wholeText();
      Document document1 = (Document)document0.toggleClass("Tag name must not be empty.");
      document1.className();
      document1.elementSiblingIndex();
      Document document2 = (Document)document1.removeClass("!Yw l^C");
      document2.ownText();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(false);
      Document document3 = document1.outputSettings(document_OutputSettings3);
      document3.toggleClass("");
      Document document4 = document3.clone();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document4.html(charArrayWriter0);
      document1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("QqT{$2Zl<");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("#root", "#root", attributes0);
      attributes0.put(attribute0);
      Element element0 = new Element(tag0, "#root", attributes0);
      FormElement formElement0 = new FormElement(tag0, "QqT{$2Zl<", attributes0);
      formElement0.prependChild(element0);
      attributes0.put("#root", true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(2080);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.charset((Charset) null);
      // Undeclared exception!
      try { 
        formElement0.outerHtmlHead((Appendable) null, 2080, document_OutputSettings4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      String string0 = Node.EmptyString;
      Element element1 = document0.appendChild(element0);
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeValue("", "Tag name must not be empty.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("QqT{$2Zl<", parseSettings0);
      Attributes attributes0 = new Attributes();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Attribute attribute0 = new Attribute("#root", "#root", attributes0);
      FormElement formElement0 = new FormElement(tag0, "Insert position out of bounds.", attributes0);
      formElement0.val();
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueNot((String) null, "\n * ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = new Document("");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      evaluator_IndexLessThan0.matches(document0, document0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = Document.createShell("");
      evaluator_IndexLessThan0.toString();
      document0.is((Evaluator) evaluator_IndexLessThan0);
      document0.hasText();
      Document document2 = (Document)document0.clone();
      document2.attr("", "Pattern syntax error: ");
      Document document3 = (Document)document2.prependChild(document0);
      document3.nextElementSiblings();
      document0.doClone(document1);
      StringReader stringReader0 = new StringReader(".Y");
      char[] charArray0 = new char[6];
      charArray0[0] = ')';
      charArray0[1] = 'g';
      charArray0[2] = 'w';
      charArray0[3] = 'y';
      charArray0[4] = '3';
      charArray0[5] = 'B';
      stringReader0.read(charArray0);
      document0.previousElementSibling();
      document3.getElementsByAttributeValueMatching((String) null, "");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Document document0 = Document.createShell("value");
      document0.getElementsMatchingText("value");
      Attributes attributes0 = new Attributes();
      document0.textNodes();
      Document document1 = Parser.parseBodyFragment(" />", ";LIPI");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag.valueOf("Tag name must not be empty.", parseSettings0);
      document0.getElementsByIndexLessThan(4056);
      document1.getElementsByClass("value");
      document1.getElementsContainingOwnText(";A:TIZ");
      document1.clone();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "Tag name must not be empty.");
      document1.html(charArrayWriter1);
      document1.parents();
      document1.nodeName();
      document1.dataset();
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = new Document("");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      evaluator_IndexLessThan0.matches(document0, document0);
      document0.getElementsContainingText("");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = Document.createShell("");
      document0.hasSameValue("");
      evaluator_IndexLessThan0.toString();
      document0.is((Evaluator) evaluator_IndexLessThan0);
      document0.hasText();
      Document document2 = (Document)document0.clone();
      document2.attr("", ":lt(0)");
      Document document3 = (Document)document2.prependChild(document0);
      document0.doClone(document1);
      document3.child(0);
      document0.getElementsContainingOwnText("textarea");
      document2.childNodeSize();
      document3.dataset();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      document0.wholeText();
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      element0.getElementsByIndexLessThan((-2861));
      element0.nextSibling();
      document0.getElementsByClass("Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Parser parser1 = parser0.settings(parseSettings0);
      Document document0 = parser1.parseInput("nz>r~ocjB", "nz>r~ocjB");
      String string0 = "";
      document0.attr("", "G&j|+");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = new Document("");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(1);
      evaluator_IndexLessThan0.matches(document0, document0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = Document.createShell("");
      evaluator_IndexLessThan0.toString();
      document0.is((Evaluator) evaluator_IndexLessThan0);
      document0.hasText();
      Document document2 = (Document)document0.clone();
      Document document3 = (Document)document2.attr("", "Pattern syntax error: ");
      Document document4 = (Document)document2.prependChild(document0);
      document4.nextElementSiblings();
      document0.doClone(document1);
      StringReader stringReader0 = new StringReader("Pattern syntax error: ");
      Node[] nodeArray0 = new Node[0];
      Document document5 = (Document)document1.insertChildren(1, nodeArray0);
      document5.getElementsContainingOwnText(":lt(1)");
      document3.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Document document1 = Document.createShell("Pattern syntax error: ");
      document1.hasText();
      Element element0 = document1.clone();
      Element element1 = document0.attr("*0", "Pattern syntax error: ");
      element0.prependChild(document0);
      element0.nextElementSiblings();
      Element element2 = document0.doClone(element0);
      StringReader stringReader0 = new StringReader("w|9Crp:");
      Document document2 = element1.ownerDocument();
      document2.childNodeSize();
      document0.siblingElements();
      // Undeclared exception!
      try { 
        element2.child(63);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 63, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Tag tag0 = Tag.valueOf("yfHHX");
      CDataNode cDataNode0 = new CDataNode("T>Q,IK kEPD,");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = Attribute.createFromEncoded("yfHHX", "T>Q,IK kEPD,");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "yfHHX", attributes1);
      Element element0 = new Element(tag0, ".RX");
      FormElement formElement1 = formElement0.addElement(element0);
      formElement1.appendText(".RX");
      element0.getElementById(".RX");
      formElement1.getAllElements();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("yfHHX");
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) tag0;
      objectArray0[1] = (Object) attributes1;
      objectArray0[2] = (Object) ".RX";
      objectArray0[3] = (Object) cDataNode0;
      mockPrintWriter0.format(locale0, "yfHHX", objectArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "5$HpS;7OZQ#FiVS1(O9");
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      document_OutputSettings3.outline(false);
      Document document0 = Parser.parseBodyFragment("<w9L6';TYhj_vN", "yfHHX");
      document0.childNodeSize();
      document0.siblingElements();
      // Undeclared exception!
      try { 
        formElement0.after((Node) formElement1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = new Document("");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      evaluator_IndexLessThan0.matches(document0, document0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = Document.createShell("");
      evaluator_IndexLessThan0.toString();
      document0.is((Evaluator) evaluator_IndexLessThan0);
      document0.hasText();
      Document document2 = (Document)document0.clone();
      Document document3 = (Document)document2.attr("", "Pattern syntax error: ");
      Document document4 = (Document)document2.prependChild(document0);
      document4.nextElementSiblings();
      document0.doClone(document1);
      StringReader stringReader0 = new StringReader("Pattern syntax error: ");
      Node[] nodeArray0 = new Node[0];
      Document document5 = (Document)document1.insertChildren(0, nodeArray0);
      document5.getElementsContainingOwnText(":lt(0)");
      document3.childNodeSize();
      document4.siblingElements();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      String string0 = "head";
      Document document0 = Parser.parseBodyFragmentRelaxed("wEhBn{&gnX;wlAAh&G", "head");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      EvoSuiteFile evoSuiteFile0 = null;
      boolean boolean0 = true;
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("head");
      Element element0 = document0.prependText("head");
      element0.select("head");
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintWriter0, 1974, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Document document0 = Document.createShell("head");
      document0.clearAttributes();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("sortable", "eNt]m6/49>}M{kb`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: eNt]m6/49>}M{kb`
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = new Element("q");
      Pattern pattern0 = Pattern.compile("Tag name must not be empty.");
      document0.getElementsByAttributeStarting("Tag name must not be empty.");
      Element element1 = document0.text("q");
      element0.dataNodes();
      element0.getElementsByAttributeValueStarting("_*B", "#root");
      element1.getElementsByAttributeValueMatching("_*B", pattern0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag.valueOf("QqT{$2Zl<", parseSettings0);
      Attributes attributes0 = new Attributes();
      Document document0 = Parser.parseBodyFragmentRelaxed("Attributes incorrectly present on end tag", "");
      Document document1 = document0.clone();
      document1.clearAttributes();
      document1.clearAttributes();
      document0.getElementsByAttributeValueMatching("u_F%^I2x2", "]u_F%2x2");
      document1.text("u_F%^I2x2");
      Element element0 = document1.child(0);
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      element0.filter(nodeFilter0);
      document1.getElementsContainingOwnText("java.lang.string@0000000051");
      document1.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      document0.id();
      document0.wholeText();
      Element element0 = document0.toggleClass("");
      document0.getElementsByIndexLessThan((-2861));
      element0.nextSibling();
      document0.getElementsByAttributeValueMatching("", "$9Yu&iD=^B");
      document0.shallowClone();
      // Undeclared exception!
      try { 
        document0.child((-2861));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag.valueOf("QqT{$2Zl<", parseSettings0);
      Document document0 = Parser.parse("q%NKGQgqWNz)HpK_)", "QqT{$2Zl<");
      Document document1 = document0.ownerDocument();
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings(parseSettings0);
      Parser parser2 = parser1.setTrackErrors((-768));
      Document document2 = document1.parser(parser2);
      Document document3 = document2.normalise();
      // Undeclared exception!
      try { 
        document3.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      document0.wholeText();
      Document document1 = (Document)document0.toggleClass("Tag name must not be empty.");
      document1.getElementsByIndexLessThan((-2861));
      document1.nextSibling();
      document1.attr("Pattern syntax error: ", (String) null);
      document0.prependChild(document1);
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-54);
      byteArray0[1] = (byte)16;
      byteArray0[2] = (byte)102;
      byteArray0[3] = (byte)17;
      byteArray0[4] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        document1.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      document0.wholeText();
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      element0.attributes();
      element0.getElementsByIndexLessThan((-2861));
      element0.nextSibling();
      document0.getElementsByClass("Tag name must not be empty.");
      document0.getElementsContainingOwnText("duZG?Bo");
      Document document1 = document0.clone();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document1.getElementsContainingOwnText("duZG?Bo");
      document1.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Document.createShell("jwu>}f,Fd1|%9");
      Element element0 = document0.createElement("jwu>}f,Fd1|%9");
      document0.clearAttributes();
      document0.clearAttributes();
      String string0 = "</";
      element0.getElementsByAttributeValueMatching("</", "jwu>}f,Fd1|%9");
      Element element1 = element0.shallowClone();
      // Undeclared exception!
      try { 
        element1.child(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = new Document("");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node0 = document0.traverse(nodeVisitor0);
      evaluator_IndexLessThan0.toString();
      document0.is((Evaluator) evaluator_IndexLessThan0);
      document0.hasText();
      Element element0 = document0.clone();
      Document document1 = new Document("");
      Element element1 = element0.prependChild(document0);
      element1.nextElementSiblings();
      Element element2 = document0.doClone(node0);
      StringReader stringReader0 = new StringReader("Pattern syntax error: ");
      char[] charArray0 = new char[2];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      stringReader0.read(charArray0);
      element2.previousElementSibling();
      element1.hasText();
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      document0.wholeText();
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      element0.getElementsByIndexLessThan((-2861));
      String string0 = "org.jsoup.nodes.CDataNode";
      document0.toggleClass("Tag name must not be empty.");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "Tag name must not be empty.");
      Element element1 = document0.val("org.jsoup.nodes.CDataNode");
      // Undeclared exception!
      try { 
        element1.before((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = new Document("");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      evaluator_IndexLessThan0.matches(document0, document0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      evaluator_IndexLessThan0.toString();
      evaluator_IndexLessThan0.toString();
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      evaluator_IndexLessThan0.toString();
      document0.is((Evaluator) evaluator_IndexLessThan0);
      document1.clone();
      document1.getElementsByAttributeStarting("#root");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.hasText();
      // Undeclared exception!
      try { 
        document1.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Document.createShell("value");
      document0.getElementsMatchingText("value");
      document0.nodelistChanged();
      document0.data();
      document0.wholeText();
      document0.toggleClass("org.jsoup.nodes.CDataNode");
      Document document1 = Document.createShell("");
      document1.nextSibling();
      document1.getElementsByClass("^+");
      document0.getElementsContainingOwnText((String) null);
      Document document2 = document1.clone();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document1.html(charArrayWriter0);
      document2.parents();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      Element element0 = document0.attr("", false);
      // Undeclared exception!
      try { 
        element0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jwu>}f,Fd1|%9");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag.valueOf("jwu>}f,Fd1|%9", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.clone();
      Tag tag0 = Tag.valueOf("T>Q,IK kEPD,");
      FormElement formElement0 = new FormElement(tag0, "T>Q,IK kEPD,", attributes0);
      formElement0.val();
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueNot("", "textarea");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Document.createShell("value");
      document0.getElementsMatchingText("value");
      Attributes attributes0 = new Attributes();
      String string0 = "u_F%^I2x2";
      document0.textNodes();
      String string1 = ";LIPI";
      Parser.parseBodyFragment(" />", ";LIPI");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Tag name must not be empty.", parseSettings0);
      Element element0 = new Element(tag0, ":", attributes0);
      document0.data();
      Document document1 = Document.createShell("Ubgc");
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueEnding((String) null, "QqT{$2Zl<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = new Document("");
      int int0 = 0;
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      evaluator_IndexLessThan0.matches(document0, document0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      evaluator_IndexLessThan0.toString();
      document0.is((Evaluator) evaluator_IndexLessThan0);
      document0.hasText();
      document1.attributes();
      Document document2 = Parser.parse(":lt(0)", "");
      evaluator_IndexLessThan0.matches(document2, document1);
      document0.html("#comment");
      String string0 = null;
      // Undeclared exception!
      try { 
        document0.attr((String) null, "#root");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("Ak*jLqgK", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "Ak*jLqgK", attributes0);
      Elements elements0 = element0.getElementsContainingText("DYy#<`PY");
      assertTrue(elements0.isEmpty());
      assertEquals("Ak*jLqgK", element0.baseUri());
      
      element0.getAllElements();
      element0.getElementsByAttributeValueContaining("wO", "wO");
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("QqT{$2Zl<", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      FormElement formElement0 = new FormElement(tag0, "QqT{$2Zl<", attributes1);
      formElement0.hasText();
      formElement0.append("*:O9Xrmdf 6Jd");
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Parser parser1 = parser0.settings(parseSettings0);
      String string0 = "nz>r~ocjB";
      Document document0 = parser1.parseInput("nz>r~ocjB", "nz>r~ocjB");
      Document document1 = (Document)document0.attr("", "G&j|+");
      document0.className();
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-2356));
      Parser.parseFragment("nz>r~ocjB", (Element) document0, "", parseErrorList0);
      Document document2 = (Document)document0.val("nz>r~ocjB");
      document2.hasClass("nz>r~ocjB");
      document1.ensureChildNodes();
      document0.val("");
      String string1 = null;
      // Undeclared exception!
      try { 
        document2.attr((String) null, "G&j|+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = new Document("");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      evaluator_IndexLessThan0.matches(document0, document0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      evaluator_IndexLessThan0.toString();
      document0.is((Evaluator) evaluator_IndexLessThan0);
      document0.hasText();
      document0.clone();
      Document document2 = document0.ownerDocument();
      document2.ownText();
      document1.toggleClass(":lt(0)");
      document1.getElementsByIndexLessThan(277);
      document2.addClass("Pattern syntax error: ");
      document0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      String string0 = "value";
      Document document0 = Document.createShell("value");
      document0.getElementsMatchingText("value");
      document0.nodelistChanged();
      document0.data();
      document0.is("x");
      document0.attr("", false);
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      String string0 = "1f5VG86ho*s\":DmoH";
      Document document0 = new Document("1f5VG86ho*s\":DmoH");
      document0.textNodes();
      document0.removeClass("");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = new Document("");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      evaluator_IndexLessThan0.matches(document0, document0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      evaluator_IndexLessThan0.toString();
      document0.is((Evaluator) evaluator_IndexLessThan0);
      document0.hasText();
      Document document1 = (Document)document0.clone();
      Document document2 = (Document)document1.attr("", "Pattern syntax error: ");
      document0.getElementsByClass("`6_");
      document2.getElementsContainingOwnText(":lt(0)");
      Document document3 = document2.clone();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document1.html(charArrayWriter0);
      document3.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.getElementsByAttributeValue("*0", "sortable");
      document0.getElementsByAttribute("Pattern syntax error: ");
      document0.className();
      document0.elementSiblingIndex();
      Document document1 = (Document)document0.removeClass("");
      document0.ownText();
      document1.toggleClass("*0");
      Document document2 = document1.clone();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.html(charArrayWriter0);
      document2.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.getElementsByAttributeValue("*0", "sortable");
      document0.getElementsByAttribute("Pattern syntax error: ");
      document0.className();
      document0.elementSiblingIndex();
      Element element0 = document0.removeClass("");
      document0.ownText();
      element0.toggleClass("bhPSx6O@KNPRF]");
      document0.getElementsByIndexLessThan(277);
      element0.addClass("Pattern syntax error: ");
      document0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors((-3018));
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser2 = parser1.settings(parseSettings0);
      StringReader stringReader0 = new StringReader("CjFm.U");
      Document document0 = parser2.parseInput((Reader) stringReader0, "47egoU+Y.z");
      Document document1 = document0.parser(parser2);
      document0.clone();
      document1.getElementsByAttributeStarting("CjFm.U");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors((-3018));
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser2 = parser1.settings(parseSettings0);
      StringReader stringReader0 = new StringReader("CjFm.U");
      Document document0 = parser2.parseInput((Reader) stringReader0, "47egoU+Y.z");
      Document document1 = document0.parser(parser2);
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      document1.getElementsByAttributeValue("sortable", "sortable");
      document0.getElementsByAttribute("47egoU+Y.z");
      document1.className();
      document1.elementSiblingIndex();
      Element element0 = document0.removeClass("mk09'");
      parseSettings0.normalizeAttribute("mk09'");
      document0.ownText();
      document1.select("47egoU+Y.z");
      document1.nodelistChanged();
      document1.getElementsByIndexEquals(0);
      element0.text();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Pattern syntax error: ", parseSettings0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Attributes attributes0 = new Attributes();
      String string0 = "kxNR-'rDw70_:1Zto ";
      Attribute attribute0 = new Attribute("kxNR-'rDw70_:1Zto ", "'7\"Z(!,gVLRs'N'T", attributes0);
      Attributes attributes1 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null, attributes1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(1256);
      evaluator_IndexLessThan0.matches(document0, document0);
      Document document1 = Parser.parseBodyFragment("Tag name must not be empty.", " &6$Cm.4");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node0 = document1.traverse(nodeVisitor0);
      evaluator_IndexLessThan0.toString();
      Document document2 = document1.clone();
      document2.is((Evaluator) evaluator_IndexLessThan0);
      document1.hasText();
      document2.clone();
      Element element0 = document1.attr("8X.At&0xXOGE5<@", "#root");
      element0.prependChild(node0);
      document0.nextElementSiblings();
      Element element1 = document0.doClone(document1);
      Node[] nodeArray0 = new Node[21];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document1;
      Document document3 = document0.ownerDocument();
      nodeArray0[4] = (Node) document3;
      nodeArray0[5] = (Node) element1;
      // Undeclared exception!
      try { 
        document1.insertChildren(124, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = new Document("");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      document0.wholeText();
      Element element0 = document0.toggleClass("");
      document0.getElementsByIndexLessThan((-2861));
      element0.nextSibling();
      document0.getElementsByClass("cWxY;");
      document0.getElementsContainingOwnText("#root");
      Document document1 = document0.clone();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document1.html(charArrayWriter0);
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("9HU9Z=W", parseSettings0);
      Attributes attributes0 = new Attributes();
      String string0 = "UDrEs;r%#VhO8z`";
      Document document0 = Parser.parseBodyFragment("9HU9Z=W", "UDrEs;r%#VhO8z`");
      Element element0 = new Element(tag0, "]u_F%2x2", attributes0);
      String string1 = " />";
      String string2 = "F=p8iG=Xkf>";
      element0.getElementsByAttributeValueEnding(" />", "F=p8iG=Xkf>");
      document0.previousElementSibling();
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(62);
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "command");
      Document document1 = document0.clone();
      Document document2 = document1.normalise();
      evaluator_IndexLessThan0.matches(document2, document0);
      Document document3 = Document.createShell("QqT{$2Zl<");
      evaluator_IndexLessThan0.toString();
      document1.is((Evaluator) evaluator_IndexLessThan0);
      document2.hasText();
      Document document4 = (Document)document1.clone();
      String string0 = "Pattern syntax error: ";
      document4.attr("{gV3W:4", "body");
      Document document5 = (Document)document3.prependChild(document4);
      document5.nextElementSiblings();
      document3.doClone(document2);
      StringReader stringReader0 = new StringReader("tag name must not be empty.");
      Node[] nodeArray0 = new Node[3];
      DocumentType documentType0 = new DocumentType("yqa", "Pattern syntax error: ", "tag name must not be empty.", "{gV3W:4");
      nodeArray0[0] = (Node) documentType0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      // Undeclared exception!
      try { 
        document3.insertChildren(3791, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      String string0 = "";
      Document document0 = new Document("");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.hasText();
      Document document1 = (Document)document0.clone();
      String string1 = "Pattern syntax error: ";
      document0.attr("Pattern syntax error: ", (String) null);
      document1.prependChild(document0);
      document0.nextElementSiblings();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[1] = (Node) document0;
      Document document2 = document1.clone();
      // Undeclared exception!
      try { 
        document2.insertChildren(6, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.clone();
      document0.getElementsByAttributeStarting("Pattern syntax error: ");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("textarea", false);
      Attributes attributes2 = attributes1.put("ScriptDataEndTagOpen", "z;`U~/<b{&,");
      FormElement formElement0 = new FormElement(tag0, "ScriptDataEndTagOpen", attributes2);
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.val();
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("QqT{$2Zl<", parseSettings0);
      Attributes attributes0 = new Attributes();
      String string0 = "u_F%^I2x2";
      Document document0 = Parser.parseBodyFragment("]u_F%2x2", "u_F%^I2x2");
      Element element0 = new Element(tag0, "QqT{$2Zl<", attributes0);
      String string1 = " />";
      document0.data();
      document0.getElementsByAttributeValueEnding(" />", "e1#Av*");
      element0.previousElementSibling();
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("QqT{$2Zl<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: QqT{$2Zl<
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hMHQD=&2~Ask\"S", "head");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("QqT{$2Zl<", parseSettings0);
      Attributes attributes0 = new Attributes();
      Document document0 = Parser.parseBodyFragment("]u_F%2x2", "u_F%^I2x2");
      Element element0 = new Element(tag0, "QqT{$2Zl<", attributes0);
      Document document1 = Parser.parse("e1#Av*", "e1#Av*");
      Element element1 = document1.body();
      element1.getElementsByAttributeValue("MRgwYjg", "e1#Av*");
      document0.getElementsByAttribute("1-H;d +!<@,orXg6}");
      element1.className();
      Document document2 = document1.ownerDocument();
      document2.elementSiblingIndex();
      document2.removeClass("]u_F%2x2");
      Element element2 = document2.body();
      element2.ownText();
      // Undeclared exception!
      try { 
        document2.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors((-3018));
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser2 = parser1.settings(parseSettings0);
      StringReader stringReader0 = new StringReader("CjFm.U");
      Document document0 = parser2.parseInput((Reader) stringReader0, "47egoU+Y.z");
      document0.parser(parser2);
      ParseSettings parseSettings1 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("CjFm.U", parseSettings1);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attribute attribute0 = new Attribute("K&;Z5}w", "tag name must not be empty.");
      Attributes attributes2 = attributes1.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "s+", attributes2);
      FormElement formElement1 = formElement0.addElement(document0);
      formElement1.getElementsByAttributeValueEnding("</", "s+");
      document0.previousElementSibling();
      document0.getElementsMatchingOwnText("CjFm.U");
      String string0 = "head";
      String string1 = ":maMgches(P\\";
      // Undeclared exception!
      try { 
        Parser.parseBodyFragmentRelaxed((String) null, ":");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = new Document("");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      evaluator_IndexLessThan0.matches(document0, document0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      evaluator_IndexLessThan0.toString();
      document0.is((Evaluator) evaluator_IndexLessThan0);
      document0.hasText();
      Document document2 = (Document)document0.clone();
      document2.attr("", "Pattern syntax error: ");
      Document document3 = (Document)document2.prependChild(document0);
      document3.nextElementSiblings();
      document0.doClone(document1);
      StringReader stringReader0 = new StringReader("Pattern syntax error: ");
      Node[] nodeArray0 = new Node[0];
      document1.insertChildren(0, nodeArray0);
      document0.getElementsByAttributeValueStarting("\"]^", "small");
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("wEhBn{&gnX;wlAAh&G", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.clone();
      FormElement formElement0 = new FormElement(tag0, "wEhBn{&gnX;wlAAh&G", attributes0);
      formElement0.val();
      formElement0.textNodes();
      Element element0 = formElement0.val("");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      String string0 = "orS`\\Emnxm";
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document0 = Parser.parse("orS`Emnxm", "%r'6[~0&r");
      document0.getElementsByAttributeValueMatching("orS`Emnxm", ":>V");
      document0.tagName();
      Element element0 = document0.shallowClone();
      String string1 = "SKIP_CHILDREN";
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("SKIP_CHILDREN");
      mockPrintWriter0.println("SKIP_CHILDREN");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "q7{R#v&o4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Parser parser1 = parser0.settings(parseSettings0);
      Document document0 = parser1.parseInput("nz>r~ocjB", "nz>r~ocjB");
      int int0 = (-2356);
      Document document1 = (Document)document0.attr("", "G&j|+");
      document0.className();
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-2356));
      Parser.parseFragment("nz>r~ocjB", (Element) document0, "", parseErrorList0);
      Document document2 = (Document)document0.val("nz>r~ocjB");
      document2.hasClass("nz>r~ocjB");
      document1.ensureChildNodes();
      Document document3 = (Document)document2.val("ZS}(l$-Lo");
      parser0.parseFragmentInput("c%o{K-]CQdT", document3, "F3wK^V.]b<>cLa[3.");
      document0.getElementsByAttributeValueEnding("ZS}(l$-Lo", "B[9`#^(Z}m>> ");
      document0.val();
      document2.getElementsByIndexGreaterThan((-2356));
      Parser.unescapeEntities("c%o{K-]CQdT", false);
      // Undeclared exception!
      try { 
        document0.wrap("java.lang.string@0000000051");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Tag.valueOf("|)k:5z(8Gt");
      Attributes attributes0 = new Attributes();
      attributes0.put("org.jsoup.parser.XmlTreeBuilder", "");
      Document document0 = Document.createShell("org.jsoup.nodes.DocumentType");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      Document document2 = document1.ownerDocument();
      document2.val();
      int int0 = (-4420);
      document1.getElementsByIndexGreaterThan((-4420));
      Parser.unescapeEntities("|)k:5z(8Gt", true);
      String string0 = "7jVo3o?5@";
      document1.wrap("7jVo3o?5@");
      // Undeclared exception!
      try { 
        document2.selectFirst("|)k:5z(8Gt");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '|)k:5z(8Gt': unexpected token at '|)k:5z(8Gt'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = new Document("");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      evaluator_IndexLessThan0.matches(document0, document0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node0 = document0.traverse(nodeVisitor0);
      evaluator_IndexLessThan0.toString();
      document0.is((Evaluator) evaluator_IndexLessThan0);
      document0.hasText();
      Document document1 = (Document)document0.clone();
      document1.attr("", "Pattern syntax error: ");
      Document document2 = (Document)document1.prependChild(document0);
      document2.nextElementSiblings();
      Document document3 = (Document)document0.doClone(node0);
      StringReader stringReader0 = new StringReader("Pattern syntax error: ");
      char[] charArray0 = new char[2];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      stringReader0.read(charArray0);
      document3.previousElementSibling();
      document3.getElementsByAttributeValueMatching("Pattern syntax error: ", "");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag.valueOf("QqT{$2Zl<", parseSettings0);
      Attributes attributes0 = new Attributes();
      Document document0 = new Document("");
      Document document1 = document0.normalise();
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild(189, 189);
      document1.is((Evaluator) evaluator_IsNthChild0);
      Document document2 = Document.createShell("u_F%^I2x2");
      Element element0 = document2.clone();
      Element element1 = document0.attr("html", "z|s/O5V'<");
      element1.prependChild(element0);
      element1.nextElementSiblings();
      Element element2 = document0.doClone(document2);
      element2.elementSiblingIndex();
      StringReader stringReader0 = new StringReader("z|s/O5V'<");
      char[] charArray0 = new char[3];
      charArray0[0] = 'm';
      charArray0[1] = 'm';
      charArray0[2] = 'm';
      stringReader0.read(charArray0);
      document0.previousElementSibling();
      // Undeclared exception!
      try { 
        document2.getElementsByAttributeValueMatching("html", "QqT{$2Zl<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: QqT{$2Zl<
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("sortable", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("sortable", "ixZtBobN29S`'6");
      FormElement formElement0 = new FormElement(tag0, "sortable", attributes1);
      FormElement formElement1 = formElement0.addElement(document0);
      document0.parentNode = (Node) formElement1;
      document0.getElementsByAttributeValue("*0", "sortable");
      document0.getElementsByAttribute("Pattern syntax error: ");
      document0.className();
      document0.elementSiblingIndex();
      Document document1 = (Document)document0.removeClass("");
      document0.ownText();
      Document document2 = (Document)document1.toggleClass("*0");
      Document document3 = document1.clone();
      document2.nodelistChanged();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document2.previousElementSibling();
      document3.getElementsByAttributeValueMatching("InSelect", "");
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors((-3018));
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser2 = parser1.settings(parseSettings0);
      StringReader stringReader0 = new StringReader("CjFm.U");
      Document document0 = parser2.parseInput((Reader) stringReader0, "47egoU+Y.z");
      Document document1 = document0.parser(parser2);
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      document1.getElementsByAttributeValue("sortable", "sortable");
      document0.getElementsByAttribute("47egoU+Y.z");
      document1.className();
      document1.elementSiblingIndex();
      document0.removeClass("mk09'");
      document0.ownText();
      Element element0 = document1.toggleClass("meta");
      element0.getElementsByIndexLessThan(1);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      String string0 = "value";
      Document document0 = Document.createShell("value");
      document0.getElementsMatchingText("value");
      document0.nodelistChanged();
      document0.data();
      document0.attr("", false);
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors((-3018));
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser2 = parser1.settings(parseSettings0);
      StringReader stringReader0 = new StringReader("CjFm.U");
      Document document0 = parser2.parseInput((Reader) stringReader0, "47egoU+Y.z");
      Document document1 = document0.parser(parser2);
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      charArray0[1] = '7';
      charArray0[2] = 'm';
      stringReader0.read(charArray0);
      document0.childNodeSize();
      document1.baseUri();
      // Undeclared exception!
      try { 
        document0.before("CjFm.U");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = new Document("");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      evaluator_IndexLessThan0.matches(document0, document0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      evaluator_IndexLessThan0.toString();
      document0.is((Evaluator) evaluator_IndexLessThan0);
      document0.hasText();
      Element element0 = document0.clone();
      document0.getElementsMatchingOwnText("i*a@UoUa");
      Document document1 = Parser.parseBodyFragmentRelaxed("i*a@UoUa", "i*a@UoUa");
      document1.children();
      document1.getElementsByClass("jp&|9HD2F7<U.");
      element0.appendText("textarea");
      String string0 = "body";
      Tag.valueOf("body");
      String string1 = "org.jsoup.parser.Tag";
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      // Undeclared exception!
      try { 
        attributes1.put((Attribute) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("QqT{$2Zl<", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.clone();
      Document document0 = new Document("");
      Document document1 = document0.ownerDocument();
      Element element0 = document1.appendText("QqT{$2Zl<");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "QqT{$2Zl<", attributes0);
      // Undeclared exception!
      try { 
        element0.text("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document document0 = new Document("&9F3`n<| ");
      Document document1 = document0.normalise();
      document1.attr("&9F3`n<| ", "org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = new Document("");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      evaluator_IndexLessThan0.matches(document0, document0);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "l<g");
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      String string0 = Node.EmptyString;
      document0.is((Evaluator) evaluator_IndexLessThan0);
      document0.hasText();
      Document document2 = (Document)document0.clone();
      document2.attr("", "Pattern syntax error: ");
      Document document3 = (Document)document2.prependChild(document0);
      document3.nextElementSiblings();
      Document document4 = document1.normalise();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document4;
      nodeArray0[1] = (Node) document3;
      nodeArray0[2] = (Node) document1;
      document0.insertChildren(0, nodeArray0);
      document4.prependChild(document3);
      // Undeclared exception!
      try { 
        document4.getElementsByAttributeValueStarting("Pattern syntax error: ", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("QqT{$2Zl<", "B,O");
      document0.wholeText();
      Element element0 = document0.toggleClass("QqT{$2Zl<");
      document0.getElementsByIndexLessThan(143);
      element0.nextSibling();
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      parser0.setTrackErrors((-3018));
      StringReader stringReader0 = new StringReader("CjFm.U");
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "seamless");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = new Document("");
      int int0 = 0;
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      evaluator_IndexLessThan0.matches(document0, document0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Document document1 = (Document)document0.traverse(nodeVisitor0);
      evaluator_IndexLessThan0.toString();
      document1.is((Evaluator) evaluator_IndexLessThan0);
      document0.hasText();
      Document document2 = (Document)document0.clone();
      String string0 = null;
      Document document3 = (Document)document1.attr("Pattern syntax error: ", (String) null);
      document2.prependChild(document1);
      document0.nextElementSiblings();
      TextNode textNode0 = new TextNode("Pattern syntax error: ", ":lt(0)");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document3;
      // Undeclared exception!
      try { 
        textNode0.addChildren(0, nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = new Document("");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      evaluator_IndexLessThan0.matches(document0, document0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      document0.traverse(nodeVisitor0);
      evaluator_IndexLessThan0.toString();
      document0.is((Evaluator) evaluator_IndexLessThan0);
      document0.hasText();
      Element element0 = document0.clone();
      Element element1 = document0.attr("Pattern syntax error: ", "br");
      Element element2 = element1.prependChild(element0);
      element1.nextElementSiblings();
      document0.doClone(element2);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) element1;
      nodeArray0[1] = (Node) element1;
      document0.insertChildren(0, nodeArray0);
      element0.getElementsByAttributeValueStarting(" />", "br");
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.CombiningEvaluator$And");
      String string0 = "GdL`I0ko*xeg`_)/%";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, (String) null);
      document0.getElementsByIndexEquals((-3431));
      CDataNode cDataNode0 = new CDataNode("GdL`I0ko*xeg`_)/%");
      cDataNode0.getWholeText();
      cDataNode0.outerHtml();
      // Undeclared exception!
      try { 
        cDataNode0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Parser parser1 = parser0.settings(parseSettings0);
      Document document1 = document0.parser(parser1);
      Element element0 = document1.body();
      element0.before("");
      Document document2 = Parser.parseBodyFragment("", "");
      document2.getElementsByAttributeStarting("span");
      CharArrayWriter charArrayWriter0 = null;
      try {
        charArrayWriter0 = new CharArrayWriter((-34));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Negative initial size: -34
         //
         verifyException("java.io.CharArrayWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Element element0 = new Element("Tag name must not be empty.");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("C.rA*v?.u0dAp4a&h");
      Document document0 = parser0.parseInput((Reader) stringReader0, "C.rA*v?.u0dAp4a&h");
      Element element0 = document0.empty();
      element0.appendText("");
      element0.prependChild(document0);
      document0.tagName();
      Appendable appendable0 = null;
      int int0 = (-164);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      // Undeclared exception!
      try { 
        document_OutputSettings2.indentAmount((-164));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("QqT{$2Zl<", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      FormElement formElement0 = new FormElement(tag0, "QqT{$2Zl<", attributes1);
      formElement0.val();
      formElement0.html("QqT{$2Zl<");
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      String string0 = "html";
      Element element0 = new Element("html");
      Document document0 = new Document("html");
      document0.getElementsByIndexGreaterThan((-3690));
      element0.getElementsByTag("Wws\"A[(Dy^W_GoR#");
      document0.children();
      // Undeclared exception!
      try { 
        element0.before("span");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("QqT{$2Zl<", parseSettings0);
      Attributes attributes0 = new Attributes();
      String string0 = "u_F%^I2x2";
      Document document0 = Parser.parseBodyFragment("]u_F%2x2", "u_F%^I2x2");
      Element element0 = new Element(tag0, "QqT{$2Zl<", attributes0);
      String string1 = "e1#Av*";
      document0.getElementsByAttributeValueEnding(" />", "e1#Av*");
      element0.previousElementSibling();
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("QqT{$2Zl<");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: QqT{$2Zl<
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      String string0 = "value";
      Document document0 = new Document("value");
      document0.getElementsMatchingText("value");
      document0.nodelistChanged();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "value");
      document0.data();
      // Undeclared exception!
      try { 
        document0.child((-1272));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag.valueOf("QqT{$2Zl<", parseSettings0);
      String string0 = "Pattern syntax error: ";
      Element element0 = new Element("QqT{$2Zl<");
      Element element1 = element0.attr("ysko;=~S&*$Q(", "WR[BAa,=!");
      element0.prependChild(element1);
      // Undeclared exception!
      try { 
        element1.select("WR[BAa,=!");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at 'BAa,=!'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      String string0 = "value";
      Document document0 = Document.createShell("value");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      document0.hasAttr("org.jsoup.nodes.Element$2");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      String string0 = ";{[QJ$C(f+-zT4(qL~z";
      DocumentType documentType0 = new DocumentType("],y~", ";{[QJ$C(f+-zT4(qL~z", "");
      linkedHashSet0.add(documentType0);
      DocumentType documentType1 = new DocumentType("org.jsoup.nodes.Element$2", ";{[QJ$C(f+-zT4(qL~z", "Y;S88D{JlZ2Y8^p");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      document0.getElementsByAttributeStarting("^cd(52,D'<VM T");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueStarting("org.jsoup.nodes.Element$2", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Tag tag0 = Tag.valueOf("yfHHX");
      CDataNode cDataNode0 = new CDataNode("T>Q,IK kEPD,");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = Attribute.createFromEncoded("yfHHX", "T>Q,IK kEPD,");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "yfHHX", attributes1);
      String string0 = ".RX";
      Element element0 = new Element(tag0, ".RX");
      FormElement formElement1 = formElement0.addElement(element0);
      FormElement formElement2 = (FormElement)formElement1.appendText(".RX");
      element0.getElementById(".RX");
      formElement1.getAllElements();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("yfHHX");
      Locale locale0 = Locale.FRENCH;
      Object[] objectArray0 = new Object[4];
      objectArray0[0] = (Object) tag0;
      objectArray0[1] = (Object) attributes1;
      objectArray0[2] = (Object) ".RX";
      objectArray0[3] = (Object) cDataNode0;
      MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.format(locale0, "yfHHX", objectArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(false);
      formElement2.outerHtmlHead(mockPrintWriter1, (-326), document_OutputSettings4);
      formElement2.className();
      // Undeclared exception!
      try { 
        formElement0.before("vo;r");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "wEhBn{&gnX;wlAAh&G";
      Element element0 = new Element("wEhBn{&gnX;wlAAh&G");
      // Undeclared exception!
      try { 
        element0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      document0.hasAttr("org.jsoup.nodes.Element$2");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      String string0 = ";{[QJ$C(f+-zT4(qL~z";
      DocumentType documentType0 = new DocumentType("],y~", ";{[QJ$C(f+-zT4(qL~z", "");
      linkedHashSet0.add(documentType0);
      DocumentType documentType1 = new DocumentType("org.jsoup.nodes.Element$2", ";{[QJ$C(f+-zT4(qL~z", "Y;S88D{JlZ2Y8^p");
      linkedHashSet0.add(documentType1);
      document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      document0.getElementsByAttributeStarting("^cd(52,D'<VM T");
      Element element0 = document0.toggleClass("ubQ+WzyXe\".GYJMx");
      document0.html();
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      String string0 = "#root";
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      Document document1 = document0.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      document0.attr("#root");
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document2.body();
      document0.shallowClone();
      Appendable appendable0 = null;
      document0.getElementsByAttributeStarting("#root");
      int int0 = 0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      document_OutputSettings2.charset(charset0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(false);
      document_OutputSettings3.prepareEncoder();
      // Undeclared exception!
      try { 
        document_OutputSettings3.charset("#root");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // #root
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors((-3018));
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser2 = parser1.settings(parseSettings0);
      StringReader stringReader0 = new StringReader("CjFm.U");
      Document document0 = parser2.parseInput((Reader) stringReader0, "47egoU+Y.z");
      Document document1 = document0.parser(parser2);
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      charArray0[1] = '7';
      charArray0[2] = 'm';
      stringReader0.read(charArray0);
      document1.previousElementSibling();
      document0.getElementsByAttributeValueMatching("47egoU+Y.z", "CjFm.U");
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      boolean boolean0 = true;
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("/Y0kP`EsG", parseSettings0);
      Element element0 = new Element(tag0, "/Y0kP`EsG");
      parseSettings0.normalizeAttribute("/Y0kP`EsG");
      element0.nodelistChanged();
      element0.getElementsByAttributeValueContaining("B", "Insert position out of bounds.");
      element0.getElementsByClass("B");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("Insert position out of bounds.", "/Y0kP`EsG");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // /Y0kP`EsG
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      String string0 = "az1P";
      Document document0 = Parser.parseBodyFragment("az1P", "az1P");
      List<Node> list0 = document0.ensureChildNodes();
      document0.nodelistChanged();
      document0.childNodes = list0;
      document0.getElementsByIndexGreaterThan(0);
      document0.className();
      // Undeclared exception!
      try { 
        document0.child(3827);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3827, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      document0.wholeText();
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      int int0 = (-2861);
      element0.getElementsByIndexLessThan((-2861));
      element0.nextSibling();
      document0.getElementsByClass("Tag name must not be empty.");
      document0.getElementsContainingOwnText("ZG?Bo");
      element0.val((String) null);
      Element element1 = element0.addClass("Tag name must not be empty.");
      String string0 = "-\\gVSQR";
      Element element2 = element1.val("-gVSQR");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append('H');
      charArrayWriter1.flush();
      element2.html(charArrayWriter1);
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parse("QX[8L\"-o", "output");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      Element element0 = document1.head();
      // Undeclared exception!
      try { 
        element0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yu0v", "yu0v");
      Element element0 = document0.createElement("yu0v");
      String string0 = "";
      String string1 = ":matchText";
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueContaining("", ":matchText");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~<loE", "~<loE");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      Document document2 = document1.ownerDocument();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors((-1578));
      Document document4 = document3.parser(parser1);
      Document document5 = document4.normalise();
      parser1.setTrackErrors((-1578));
      document5.getElementsByAttributeValue("~<loE", "WOH[/");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      String string0 = "eMn]PI";
      Element element0 = new Element("eMn]PI");
      // Undeclared exception!
      try { 
        element0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      String string0 = "value";
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("value", parseSettings0);
      String string1 = "";
      Element element0 = new Element(tag0, "");
      Tag.valueOf("value", parseSettings0);
      element0.empty();
      element0.wholeText();
      parseSettings0.normalizeAttribute("");
      element0.childNodesAsArray();
      int int0 = 0;
      StringBuilder stringBuilder0 = new StringBuilder();
      int int1 = 1610;
      StringBuilder stringBuilder1 = stringBuilder0.appendCodePoint(1610);
      char[] charArray0 = new char[6];
      charArray0[0] = ':';
      charArray0[1] = 'b';
      charArray0[2] = 'G';
      charArray0[3] = 'D';
      charArray0[4] = 'e';
      charArray0[5] = 'y';
      // Undeclared exception!
      try { 
        stringBuilder1.insert(1145, charArray0);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1145
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      String string0 = "6^wS@y*!-f";
      Document document0 = Parser.parseBodyFragmentRelaxed("6^wS@y*!-f", "6^wS@y*!-f");
      // Undeclared exception!
      try { 
        document0.is("oFk:u0T>FYN<");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'oFk:u0T>FYN<': unexpected token at ':u0T>FYN<'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = "";
      String string1 = "nx(J:zOYSHm87EI]";
      Document document0 = Parser.parseBodyFragmentRelaxed("", "nx(J:zOYSHm87EI]");
      Document document1 = (Document)document0.appendText("nx(J:zOYSHm87EI]");
      document0.ensureChildNodes();
      String string2 = null;
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      nodeArray0[5] = (Node) document1;
      nodeArray0[6] = (Node) document1;
      // Undeclared exception!
      try { 
        document1.addChildren(2315, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qTc");
      Element element0 = new Element(tag0, "qTc");
      element0.tagName("qTc");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Tag tag0 = Tag.valueOf("|)k:5z(8Gt");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("org.jsoup.parser.XmlTreeBuilder", "");
      Attribute attribute0 = Attribute.createFromEncoded("|)k:5z(8Gt", "$F[");
      Attributes attributes2 = attributes1.put(attribute0);
      Element element0 = new Element(tag0, "|)k:5z(8Gt", attributes2);
      // Undeclared exception!
      try { 
        element0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.hasAttr("");
      String string0 = "r,]:5b%fBN{";
      String string1 = "";
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      String string0 = "az1P";
      Document document0 = Parser.parseBodyFragment("az1P", "az1P");
      List<Node> list0 = document0.ensureChildNodes();
      document0.nodelistChanged();
      document0.childNodes = list0;
      document0.getElementsByIndexGreaterThan(0);
      document0.className();
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Document document1 = document0.clone();
      document0.getElementsByAttributeStarting("Pattern syntax error: ");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document1.hasText();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      int int0 = (-3018);
      Parser parser1 = parser0.setTrackErrors((-3018));
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser2 = parser1.settings(parseSettings0);
      StringReader stringReader0 = new StringReader("CjFm.U");
      String string0 = "47egoU+Y.z";
      Document document0 = parser2.parseInput((Reader) stringReader0, "47egoU+Y.z");
      Document document1 = document0.parser(parser2);
      char[] charArray0 = new char[3];
      charArray0[0] = 'V';
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      nodeArray0[5] = (Node) document0;
      // Undeclared exception!
      try { 
        document1.insertChildren((-3018), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("C.rA*v?.u0dAp4a&h");
      Document document0 = parser0.parseInput((Reader) stringReader0, "C.rA*v?.u0dAp4a&h");
      Element element0 = document0.empty();
      String string0 = "";
      Element element1 = element0.appendText("");
      element0.prependChild(document0);
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(99);
      evaluator_IndexLessThan0.toString();
      // Undeclared exception!
      element1.is((Evaluator) evaluator_IndexLessThan0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Document document1 = document0.clone();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document1.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("");
      Document document0 = parser0.parseInput((Reader) stringReader0, "");
      Element element0 = document0.head();
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qTc");
      Element element0 = new Element(tag0, "qTc");
      Element element1 = element0.tagName("qTc");
      element0.nextElementSiblings();
      element0.html();
      element1.parent();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      String string0 = "sortable";
      document0.getElementsByAttributeValue("*0", "sortable");
      document0.getElementsByAttribute("Pattern syntax error: ");
      document0.className();
      document0.elementSiblingIndex();
      Document document1 = (Document)document0.removeClass("");
      document1.attr("*0", (String) null);
      Document document2 = (Document)document1.prependChild(document0);
      document0.nextElementSiblings();
      document1.doClone(document2);
      StringReader stringReader0 = new StringReader("body");
      Node[] nodeArray0 = new Node[0];
      document1.insertChildren(0, nodeArray0);
      Document document3 = Parser.parse("sortable", "\"]^");
      Document document4 = document3.ownerDocument();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document5 = document4.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        document5.getElementsByAttributeValueStarting("", "\"]^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = new Document("");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(0);
      evaluator_IndexLessThan0.matches(document0, document0);
      NodeVisitor nodeVisitor0 = mock(NodeVisitor.class, new ViolatedAssumptionAnswer());
      Node node0 = document0.traverse(nodeVisitor0);
      evaluator_IndexLessThan0.toString();
      document0.is((Evaluator) evaluator_IndexLessThan0);
      document0.hasText();
      Document document1 = (Document)document0.clone();
      String string0 = "Pattern syntax error: ";
      document1.attr("", "Pattern syntax error: ");
      Document document2 = (Document)document1.prependChild(document0);
      document2.nextElementSiblings();
      document0.doClone(node0);
      document2.children();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document2;
      nodeArray0[1] = (Node) document2;
      nodeArray0[2] = node0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Tag tag0 = Tag.valueOf("nth-child");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("legend", true);
      Attributes attributes2 = attributes1.put("legend", "nth-child");
      Attributes attributes3 = attributes2.clone();
      FormElement formElement0 = new FormElement(tag0, "nth-child", attributes3);
      formElement0.previousElementSiblings();
      formElement0.parents();
      formElement0.textNodes();
      formElement0.children();
      formElement0.getElementsByAttributeValueStarting("legend", "tbody");
      Element element0 = formElement0.toggleClass("");
      element0.siblingNodes();
      formElement0.prependChild(element0);
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Parser parser1 = parser0.settings(parseSettings0);
      Document document0 = parser1.parseInput("nz>r~ocjB", "nz>r~ocjB");
      int int0 = (-2356);
      String string0 = "G&j|+";
      Document document1 = (Document)document0.attr("", "G&j|+");
      document0.className();
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-2356));
      Parser.parseFragment("nz>r~ocjB", (Element) document0, "", parseErrorList0);
      Document document2 = (Document)document0.val("nz>r~ocjB");
      document2.hasClass("nz>r~ocjB");
      document1.ensureChildNodes();
      Document document3 = (Document)document0.val("");
      String string1 = null;
      String string2 = "V8hpCH[MAKP";
      // Undeclared exception!
      try { 
        parser0.parseFragmentInput((String) null, document3, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.doSetBaseUri("qe4>Dp_g2C\u0007");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = "value";
      Document document0 = Document.createShell("value");
      document0.getElementsMatchingText("value");
      document0.nodelistChanged();
      document0.data();
      // Undeclared exception!
      try { 
        document0.child(1824);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1824, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":nth-child(%d)");
      FormElement formElement0 = new FormElement(tag0, ":nth-child(%d)", (Attributes) null);
      Element element0 = formElement0.tagName("MrE+:#m(|Q:\"|Q");
      // Undeclared exception!
      try { 
        element0.after((Node) formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = new Document("1f5VG86ho*s\":DmoH");
      document0.textNodes();
      Elements elements0 = document0.getElementsContainingOwnText("1f5VG86ho*s\":DmoH");
      assertTrue(elements0.isEmpty());
      
      document0.childNodeSize();
      assertEquals("1f5VG86ho*s\":DmoH", document0.baseUri());
  }
}
