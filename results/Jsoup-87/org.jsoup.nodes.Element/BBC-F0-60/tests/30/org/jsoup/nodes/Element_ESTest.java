/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:51:21 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("lh'@lR0?9", "Children collection to be inserted must not be null.");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("5lt~O7", "ePN!'&!femL)G;,cd:");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ePN!'&!femL)G;,cd:
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parse("R~\"e", "R~\"e");
      Document document1 = new Document("R~\"e");
      document1.reparentChild(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parse("f^p:S+{Bv7&", "s+");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.prepareEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(byteArrayOutputStream0, charsetEncoder0);
      document0.outerHtmlTail(outputStreamWriter0, 8220, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Document.createShell("0!S\"]I!4\"Z'");
      MockPrintStream mockPrintStream0 = new MockPrintStream("f`Z:D;b~'ZV3vHi<");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockPrintStream0, false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(mockPrintWriter0, 58, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("IN>", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "", attributes0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = new Document("        ");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = new Document("F9");
      document0.getElementsByAttributeValueMatching("F9", "F9");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Document.createShell("0!S\"]I!4@l\"Z'o");
      Parser parser0 = Parser.xmlParser();
      document0.parser(parser0);
      document0.wrap("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parse("ex;", "ex;");
      Element element0 = document0.head();
      element0.wrap("A68m");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Document.createShell("0!S\"]I!4@l\"Z'o");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("mextare0");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "mextare0", attributes0);
      pseudoTextElement0.setSiblingIndex((-1644953643));
      pseudoTextElement0.val("mextare0");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parse("ex;", "ex;");
      Element element0 = document0.head();
      element0.val("RLiSM;zZ{");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("mextare0");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "mextare0", attributes0);
      Element element0 = pseudoTextElement0.val("mextare0");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^", "^");
      document0.setSiblingIndex((-2557));
      document0.toggleClass("tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AfterFrameset", "AfterFrameset");
      Element element0 = document0.head();
      element0.toggleClass(":empty");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R", "R");
      Element element0 = document0.appendElement("D*1");
      element0.toggleClass("R");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.appendTo(document0);
      Element element0 = document0.previousElementSibling();
      element0.text("");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R", "R");
      document0.appendTo(document0);
      document0.text("GO");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse("R", "R");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parse("R~\"e", "R~\"e");
      Element element0 = document0.body();
      element0.tagName("R~\"e");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("quirks", "Pattern syntax error: ");
      document0.tagName("html");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = new Document("icgbL[(7-\"gKaUr~");
      document0.tagName("icgbL[(7-\"gKaUr~");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell("0!S\"]I!4@l\"Z'o");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("fieldset", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Vv3a>x+SPR-wNDzN", attributes0);
      pseudoTextElement0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("fieldset", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "()mE*%A/gKGL7", attributes0);
      pseudoTextElement0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parse("63SMTdj:Trr", "5N&4Ymk");
      document0.selectFirst("value");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Element element0 = new Element("value");
      element0.selectFirst("value");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.select("textarea");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Element element0 = new Element("afterframeset");
      element0.select("afterframeset");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R~.\"Se", "R~.\"Se");
      document0.appendTo(document0);
      Element element0 = document0.previousElementSibling();
      element0.removeClass("");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.appendTo(document0);
      document0.removeClass("#");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = new Document(";?.n");
      document0.removeClass("!~lm6{J/=|Fpf[G");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.appendTo(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.setSiblingIndex((-3357));
      document0.prependText("");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.appendTo(document0);
      Element element0 = document0.previousElementSibling();
      element0.prependText("AfterFrameset");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.appendTo(document0);
      document0.prependText("pRaEWMLeZ,");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Document.createShell("value");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^", "^");
      Element element0 = document0.head();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("ex;", "ex;");
      Element element0 = document0.head();
      element0.prepend("ex;");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^ ^FH^Po*]E9+C='", "M@d&+OLpYv64~'9W!");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R~\"e", "R~\"e");
      Tag tag0 = Tag.valueOf("R~\"e");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "R~\"e", attributes0);
      document0.appendTo(pseudoTextElement0);
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parse("f^p:S+{Bv7&", "s+");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R", "R");
      document0.reparentChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("uF'%-I_Dg]%,u5W;", "5N&4Ymk");
      document0.prependText("uF'%-I_Dg]%,u5W;");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Document.createShell("0!S\"]I!4@l\"Z'o");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Document.createShell("dek");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.appendTo(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Document.createShell("Af/@*/B9f{_Di");
      Element element0 = document0.head();
      Element element1 = element0.empty();
      element1.isBlock();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("ePN!'&!femL)G;,cd:");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("#Y;YUQjve0l_O_62A#0");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#Y;YUQjve0l_O_62A#0", attributes0);
      Evaluator.IndexEquals evaluator_IndexEquals0 = new Evaluator.IndexEquals((-1017));
      pseudoTextElement0.is((Evaluator) evaluator_IndexEquals0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AfterFrameset", "fieldset");
      Element element0 = document0.createElement("fieldset");
      List<DataNode> list0 = document0.dataNodes();
      element0.insertChildren(0, (Collection<? extends Node>) list0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MB?zEc$'Q(k{c%[Ph=f", "MB?zEc$'Q(k{c%[Ph=f");
      Element element0 = document0.body();
      element0.html("MB?zEc$'Q(k{c%[Ph=f");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mextare0", "mextare0");
      Element element0 = document0.head();
      element0.html((PipedWriter) null);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("AfterFrameset");
      Document document0 = parser0.parseInput((Reader) stringReader0, "Tag name must not be empty.");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("fieldset", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Vv3a>x+SPR-wNDzN", attributes0);
      pseudoTextElement0.html();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+`", "icgbL[(7-\"gKaUr~");
      Element element0 = document0.body();
      element0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = new Document("");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Document.createShell("value");
      Pattern pattern0 = Pattern.compile("        ");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = new Document("Vv3a>x+SPR-wNDzN");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = new Document("F9");
      Pattern pattern0 = Pattern.compile("^ ^FH^Po*]E9+C='");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Pattern pattern0 = Pattern.compile("value");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parse("mextae0", "mextae0");
      document0.getElementsMatchingOwnText("java.lang.string@0000000035");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AfterFrameset", "AfterFrameset");
      document0.getElementsMatchingOwnText("");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^ ^FH^Po*]E9+C='", "M@d&+OLpYv64~'9W!");
      document0.getElementsContainingText("");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Attributes attributes0 = document0.attributes();
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("<html>\n <head></head>\n <body></body>\n</html>", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "<html>\n <head></head>\n <body></body>\n</html>", attributes0);
      pseudoTextElement0.getElementsByTag("<html>\n <head></head>\n <body></body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("^ ^FH^Po*]E9+C='", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "^ ^FH^Po*]E9+C='", (Attributes) null);
      formElement0.getElementsByIndexGreaterThan((-1));
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("X$=qvWUS.[Ew'OCN;G");
      Document document0 = parser0.parseInput((Reader) stringReader0, "+9e5gRgDk");
      Element element0 = document0.toggleClass("allowfullscreen");
      element0.toggleClass("allowfullscreen");
      document0.getElementsByClass("allowfullscreen");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AfterFrameset", "AfterFrameset");
      Element element0 = document0.toggleClass(":empty");
      element0.getElementsByAttributeValueMatching("class", "");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = new Document("~W|s+8E");
      document0.getElementsByAttributeValueEnding("~W|s+8E", "</");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("Children collection to be inserted must not be null.");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.put("JJk", true);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "JJk", attributes0);
      pseudoTextElement0.getElementsByAttributeStarting("JJk");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R~.\"Se", "R~.\"Se");
      document0.appendTo(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.appendTo(document0);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = new Document("Vv3a>x+SPR-wNDzN");
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MB?zEc$'Q(k{c%[Ph=f", "MB?zEc$'Q(k{c%[Ph=f");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("fieldset");
      Document document0 = new Document("fieldset");
      document0.doClone(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MB?zEc$'Q(k{c%[Ph=f", "MB?zEc$'Q(k{c%[Ph=f");
      Element element0 = document0.doClone(document0);
      element0.html("MB?zEc$'Q(k{c%[Ph=f");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("mextare0");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "mextare0", attributes0);
      pseudoTextElement0.clone();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R~\"e", "R~\"e");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("fieldset", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("fieldset");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Vv3a>x+SPR-wNDzN", attributes0);
      Locale locale0 = Locale.CANADA;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      pseudoTextElement0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R~.\"Se", "R~.\"Se");
      Element element0 = document0.appendTo(document0);
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R", "R");
      Element element0 = document0.toggleClass("R");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R~\"e", "R~\"e");
      document0.toggleClass("Tag name must not be empty.");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = new Document("F9");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "eago:'5>PnQvf,o");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("^ ^FH^Po*]E9+C='", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "^ ^FH^Po*]E9+C='", (Attributes) null);
      formElement0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MB?zEc$'Q(k{c%[Ph=f", "MB?zEc$'Q(k{c%[Ph=f");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Children collection to be inserted must not be null.");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ";?.n", attributes0);
      Element element0 = pseudoTextElement0.append("Children collection to be inserted must not be null.");
      Document document0 = new Document("Children collection to be inserted must not be null.");
      Element element1 = document0.appendText("org.jsoup.nodes.Element$1");
      Elements elements0 = element0.getElementsContainingOwnText("Children collection to be inserted must not be null.");
      Element element2 = element1.insertChildren((-1), (Collection<? extends Node>) elements0);
      element2.child(0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("t<R)2b/'Gg}dE ki5W", "t<R)2b/'Gg}dE ki5W");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AfterFrameset", "AfterFrameset");
      Element element0 = document0.head();
      element0.before((Node) document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R~\"e", "R~\"e");
      document0.reparentChild(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell("dek");
      Element element0 = document0.head();
      element0.before("dek");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse("t<R)2b/'Gg}dE ki5W", "t<R)2b/'Gg}dE ki5W");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "s+");
      Element element0 = document0.body();
      element0.attr("s+", false);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = new Document("");
      document0.attr("", true);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d@", "?xG=kN`o8\"AU'");
      document0.setSiblingIndex(6);
      document0.attr("d@", "   ");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^", "^");
      Element element0 = document0.head();
      element0.attr("", (String) null);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R~.\"Se", "R~.\"Se");
      Element element0 = document0.appendTo(document0);
      Element element1 = document0.previousElementSibling();
      element1.appendTo(element0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R~.\"Se", "R~.\"Se");
      Element element0 = document0.appendTo(document0);
      element0.appendText("*a3Czho2z0");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Document.createShell("0!S\"]I!4@l\"Z'o");
      Element element0 = document0.head();
      element0.appendText("</");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = new Document("~W|s+8E");
      document0.appendElement("2T=VS");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("t<R)2b/'Gg}dE ki5W", "t<R)2b/'Gg}dE ki5W");
      document0.appendElement("html");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Document.createShell("0!S\"]I!4@l\"Z'o");
      Element element0 = document0.head();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parse("^ ^fh^po*]e9+c='", "^ ^fh^po*]e9+c='");
      CDataNode cDataNode0 = new CDataNode("");
      document0.appendChild(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Document.createShell("0!S\"]I!4@l\"Z'o");
      document0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parse("R", "R");
      Element element0 = document0.appendElement("L");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = new Document("Q3O");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.appendTo(document0);
      Element element1 = document0.previousElementSibling();
      element1.after((Node) element0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mextare0", "mextare0");
      Element element0 = document0.head();
      element0.after("mextare0");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parse("ooRSnr#{PM5v1Do", "ooRSnr#{PM5v1Do");
      Document document1 = document0.clone();
      document1.appendTo(document0);
      document1.after("v]T;Q9~;y=b");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = new Document("");
      document0.setSiblingIndex((-886));
      document0.addClass("8iy[f$yq");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "R");
      Element element0 = document0.body();
      element0.addClass("nobr");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "R");
      document0.addClass("nobr");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R", "R");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.wrap("s+");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("+`ZSc ${", parseSettings0);
      Element element0 = new Element(tag0, "+`ZSc ${");
      DocumentType documentType0 = new DocumentType("+`ZSc ${", "j6j~", "j6j~", "j6j~", "RmGUpMor\"0>");
      element0.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        element0.wrap("Qh@{|KG%r&MBg;");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R~.\"Se", "R~.\"Se");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.val("zAx8 UeF'G-msI#");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("^ ^FH^Po*]E9+C='", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "^ ^FH^Po*]E9+C='", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.html("");
      // Undeclared exception!
      try { 
        document0.text("n");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R~\"e", "R~\"e");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.tagName("dek");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AfterFrameset", "AfterFrameset");
      // Undeclared exception!
      try { 
        document0.selectFirst("s:c*ad'0i");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 's:c*ad'0i': unexpected token at ':c*ad'0i'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("IN>", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      // Undeclared exception!
      try { 
        formElement0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = new Document("        ");
      // Undeclared exception!
      try { 
        document0.select("org.jsoup.nodes.Element$NodeList");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.nodes.Element$NodeList': unexpected token at '$NodeList'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      DataNode dataNode0 = DataNode.createFromEncoded("", "");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.prependElement("pRaEWMLeZ,");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Document.createShell("0!S\"]I!4@l\"Z'o");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R", "R");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prepend("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R~.\"Se", "R~.\"Se");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mextare0", "mextare0");
      MockFile mockFile0 = new MockFile("osSj6jxOUy");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(3187);
      // Undeclared exception!
      document0.outerHtmlTail(mockPrintStream0, 3531, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse("uF'%-I_Dg]%,u5W;", "5N&4Ymk");
      StringWriter stringWriter0 = new StringWriter(558);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringWriter0, 1839, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^ ^FH^Po*]E9+C='", "M@d&+OLpYv64~'9W!");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      StringWriter stringWriter0 = new StringWriter(541);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringWriter0, (-1393), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R~\"e", "R~\"e");
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 170, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parse("R~\"e", "R~\"e");
      StringBuffer stringBuffer0 = new StringBuffer("R~\"e");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringBuffer0, (-2675), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = new Document("^ ^FH^Po*]E9+C='");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "#");
      // Undeclared exception!
      try { 
        document0.is("Jh[k3\"=%QLTI");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at 'k3'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R", "R");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.is("R");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Document.createShell("");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R~\"e", "R~\"e");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html("R~\"e");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("fieldset", "fieldset");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parse("itemscope", "itemscope");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mextare0", "mextare0");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html((BufferedWriter) null);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("lJ< #)op<Y#$;[Q>q])", "#");
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+", "+");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = new Document("~W|s+8E");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse("$W!", "$W!");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("K7XsL;7se]rt-/", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("4REcv");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "LC3,;S", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsMatchingText("8iy[f$yq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 8iy[f$yq
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("LHl&s;]0$~(,bu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: LHl&s;]0$~(,bu
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AfterFrameset", "AfterFrameset");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("7n52DC,pf4BxvV", "7n52DC,pf4BxvV");
      DataNode dataNode0 = new DataNode("br");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals((-2625));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Document.createShell("s$4e[m?^nssh6[");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByClass("s$4e[m?^nssh6[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R~.\"Se", "@\"|fAN_q");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "class");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("fieldset");
      Document document0 = parser0.parseInput((Reader) stringReader0, "org.jsoup.parser.Token$1");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@\"|fAN_q", "^ ^FH^Po*]E9+C='");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("B\"YbI-+6gzwC", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "org.jsoup.nodes.Element$NodeList");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":matchesOwn(", "'");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "oR S:-zHaL/n,b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("^ ^FH^Po*]E9+C='", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "^ ^FH^Po*]E9+C='", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse("7w52DC,pf4xvV", "7w52DC,pf4xvV");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementById("7w52DC,pf4xvV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = new Document("icgbL[(7-\"gKaUr~");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R>\"e", "R>\"e");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parse("mextae0", "mextae0");
      Element element0 = document0.head();
      element0.setSiblingIndex((-1871));
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("Children collection to be inserted must not be null.");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Children collection to be inserted must not be null.", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("Children collection to be inserted must not be null.");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Children collection to be inserted must not be null.", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.child(966);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 966, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.", true);
      document0.setParentNode(xmlDeclaration0);
      CDataNode cDataNode0 = new CDataNode(" />");
      // Undeclared exception!
      try { 
        document0.before((Node) cDataNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parse("^", "^");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.before("^");
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "bnHZb9LD");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R~.\"Se", "=9BD2!Xq");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "=9BD2!Xq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      DataNode dataNode0 = DataNode.createFromEncoded("?Dv'Uyq a3D3,m[=(tW", "?Dv'Uyq a3D3,m[=(tW");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse("R~\"e", "R~\"e");
      Document document1 = new Document("R~\"e");
      document1.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("63SMTdj:Trr", "5N&4Ymk");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("Pattern syntax error: ", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("5B");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "Pattern syntax error: ", attributes0);
      // Undeclared exception!
      try { 
        formElement0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R~.\"Se", "R~.\"Se");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.appendElement("^=");
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("fieldset", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("fieldset");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "fieldset", attributes0);
      // Undeclared exception!
      try { 
        formElement0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AfterFrameset", "AfterFrameset");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("mextare0", "mextare0");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.append("mextare0");
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("fieldset", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("fieldset");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "KpeqU;F /`H}3kZ;9", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?c#.$:<_", "Children collection to be inserted must not be null.");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      try { 
        document0.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R~\"e", "R~\"e");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.after("R~\"e");
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";?.n", "RawtextEndTagName");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "J|^eh!", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("icgbL[(7-\"gKaUr~", parseSettings0);
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R~\"e", "R~\"e");
      Element element0 = document0.toggleClass("R~\"e");
      Element element1 = element0.toggleClass("replacementStr");
      element1.hasClass("java.lang.string@0000000091");
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Document.createShell("^ ^FH^Po*]E9+C='");
      document0.hasClass("^ ^FH^Po*]E9+C='");
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^ ^FH^Po*]E9+C='", "M@d&+OLpYv64~'9W!");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parse("uF'%-I_Dg]%,u5W;", "5N&4Ymk");
      Element element0 = document0.prependText("uF'%-I_Dg]%,u5W;");
      element0.data();
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("R~\"e");
      parser0.parseInput((Reader) stringReader0, "+9e5gRgDk");
      Document document0 = parser0.parseInput((Reader) stringReader0, "-!Hi[$I_P");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Document.createShell("value");
      document0.prependText("T2/oNpMusMf");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = new Document("AfterFrameset");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "s+");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("AfterFrameset", "AfterFrameset");
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      Tag tag0 = Tag.valueOf("dek", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "RF'l%B_Z_ ]|zw)", attributes0);
      nodeArray0[1] = (Node) formElement0;
      nodeArray0[2] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("^ ^FH^Po*]E9+C='", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "^ ^FH^Po*]E9+C='", (Attributes) null);
      Document document0 = new Document("^ ^FH^Po*]E9+C='");
      Element element0 = document0.appendTo(formElement0);
      element0.prepend("textarea");
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.val("");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R~\"e", "R~\"e");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R", "R");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Document.createShell("Af/@*/B9f{_Di");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Element element0 = new Element("av`8qXv");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parse("uF'%-I_Dg]%,u5W;", "uF'%-I_Dg]%,u5W;");
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText("uF'%-I_Dg]%,u5W;");
      document0.is((Evaluator) evaluator_ContainsText0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AfterFrameset", "AfterFrameset");
      Pattern pattern0 = Pattern.compile("AfterFrameset");
      document0.getElementsByAttributeValueMatching("}*t]&J", pattern0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R~\"e", "R~\"e");
      // Undeclared exception!
      try { 
        document0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("^ ^FH^Po*]E9+C='", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "^ ^FH^Po*]E9+C='", (Attributes) null);
      formElement0.text();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Document.createShell("0!S\"]I!4@l\"Z'o");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R", "R");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7n52DC,pf4BxvV", "kkik2@LDBjcD");
      // Undeclared exception!
      try { 
        document0.html((CharArrayWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(840);
      document1.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      CDataNode cDataNode0 = new CDataNode("ePN!'&!femL)G;,cd:");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "ePN!'&!femL)G;,cd:", attributes0);
      pseudoTextElement0.val();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R~\"e", "R~\"e");
      Element element0 = document0.toggleClass("R~\"e");
      element0.toggleClass("replacementStr");
      document0.hasClass("replacementStr");
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "A5U!)(;0_");
      document0.toggleClass("A5U!)(;0_");
      document0.toggleClass(" />");
      document0.getElementsByClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R~\"e", "R~\"e");
      Element element0 = document0.toggleClass("R~\"e");
      document0.toggleClass("Tag name must not be empty.");
      element0.getElementsByClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7n52DC,pf4BxvV", "kkik2@LDBjcD");
      document0.toggleClass("7n52DC,pf4BxvV");
      document0.hasClass("java.lang.string@0000000091");
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parse("e-T1'?m}%3^[>!O+*", "e-T1'?m}%3^[>!O+*");
      document0.toggleClass("d@");
      document0.getElementsByClass("e-T1'?m}%3^[>!O+*");
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parse("ooRSnr#{PM5v1Do", "ooRSnr#{PM5v1Do");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R~\"e", "R~\"e");
      document0.reparentChild(document0);
      document0.getElementsMatchingText("R~\"e");
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Tag tag0 = Tag.valueOf("value");
      CDataNode cDataNode0 = new CDataNode("i.OxpA|uJD@}x |yz|");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "i.OxpA|uJD@}x |yz|", attributes0);
      pseudoTextElement0.prependChild(cDataNode0);
      pseudoTextElement0.getElementsContainingText("g)4I]5<.Bm4_)@<J");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R>\"e", "R>\"e");
      document0.title("R>\"e");
      document0.getElementsMatchingText("GO");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("B]s", "U]L%T{?#bg0}");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("L<B3 V`K7\u0004K", true);
      nodeArray0[1] = (Node) xmlDeclaration0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.prependText("[TI/NFMOj=iHI");
      element0.appendText("[TI/NFMOj=iHI");
      document0.getElementsMatchingText("");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("R~\"e", "u:s:");
      document0.appendElement("V~iPt]zn/NZfr~q_D^");
      document0.getElementsMatchingText("R~\"e");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AfterFrameset", "AfterFrameset");
      Element element0 = document0.createElement("umsva7|");
      document0.appendTo(element0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Document.createShell("Af/@*/B9f{_Di");
      Element element0 = document0.head();
      Element element1 = element0.empty();
      element1.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("AfterFrameset", "GAsi7");
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("dek", parseSettings0);
      Element element0 = new Element(tag0, "AfterFrameset");
      document0.appendTo(element0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^", "^");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, elements0.size());
      assertEquals("^", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parse("^", "^");
      document0.reparentChild(document0);
      Elements elements0 = document0.previousElementSiblings();
      assertEquals("^", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = new Document("        ");
      document0.previousElementSibling();
      assertEquals("        ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R~\"e", "R~\"e");
      document0.nextElementSibling();
      assertEquals("R~\"e", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parse("uF'%-I_Dg]%,u5W;", "5N&4Ymk");
      document0.siblingElements();
      assertEquals("5N&4Ymk", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R~.\"Se", "R~.\"Se");
      Element element0 = document0.appendTo(document0);
      Elements elements0 = element0.siblingElements();
      assertEquals("R~.\"Se", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("fielset");
      Document document0 = parser0.parseInput((Reader) stringReader0, "org.jsoup.parser.Token$1");
      Element element0 = document0.toggleClass("fielset");
      element0.cssSelector();
      assertEquals("org.jsoup.parser.Token$1", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("R~.\"Se", "R~.\"Se");
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
      try { 
        document0.insertChildren(30, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "#");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-3289), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = new Document("icgbL[(7-\"gKaUr~");
      List<Node> list0 = document0.childNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren(558, (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Document.createShell("0!S\"]I!4@l\"Z'o");
      Elements elements0 = document0.getElementsByIndexEquals(1839);
      // Undeclared exception!
      try { 
        document0.insertChildren((-1088), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AfterFrameset", "fieldset");
      List<DataNode> list0 = document0.dataNodes();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) list0);
      assertEquals("fieldset", element0.baseUri());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AfterFrameset", "AfterFrameset");
      document0.html("~:ck4]W}J`@Dluvb#<");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("AfterFrameset", document0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AfterFrameset", "AfterFrameset");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("AfterFrameset", document0.baseUri());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "R");
      Element element0 = document0.body();
      document0.appendTo(element0);
      assertEquals(2, element0.childNodeSize());
      
      document0.previousElementSibling();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("Children collection to be inserted must not be null.");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Children collection to be inserted must not be null.", attributes0);
      Elements elements0 = pseudoTextElement0.getElementsByIndexGreaterThan(32);
      assertTrue(elements0.isEmpty());
      assertEquals("Children collection to be inserted must not be null.", pseudoTextElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R~\"e", "R~\"e");
      Element element0 = document0.selectFirst("body");
      assertEquals(1, element0.siblingIndex());
      assertEquals("R~\"e", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = new Document("</");
      document0.getElementsByTag("value");
      assertEquals("</", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getAllElements();
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lOsQ{,AjB#LbLET}", "lOsQ{,AjB#LbLET}");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parse("^", "^");
      // Undeclared exception!
      try { 
        document0.before("^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R>\"e", "R>\"e");
      document0.getElementsByAttribute("R>\"e");
      assertEquals("R>\"e", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R~\"e", "R~\"e");
      document0.getElementsByAttributeValueNot("R~\"e", "body");
      assertEquals(1, document0.childNodeSize());
      assertEquals("R~\"e", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.attr("r}R|Q_pnfQC 7o>", "7o");
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.shallowClone();
      assertEquals("", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Tag tag0 = Tag.valueOf("PW,12M");
      Element element0 = new Element(tag0, "");
      element0.doSetBaseUri("PW,12M");
      assertEquals("PW,12M", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = new Document("</");
      document0.getElementsByAttributeValueContaining("org.jsoup.nodes.element$nodelist", "</");
      assertEquals("</", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "[XTy:;V;EmkwH8zeRD-");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R", "R");
      document0.is("R");
      assertEquals("R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R", "R");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R~\"e", "R~\"e");
      document0.getElementsByAttributeStarting("f?zaw=[");
      assertEquals(1, document0.childNodeSize());
      assertEquals("R~\"e", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("g~\"e", "g~\"e");
      Elements elements0 = document0.getElementsByIndexLessThan(80);
      assertFalse(elements0.isEmpty());
      assertEquals("g~\"e", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R~\"e", "R~\"e");
      // Undeclared exception!
      try { 
        document0.after("R~\"e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parse("e-T1'?m}%3^[>!O+*", "e-T1'?m}%3^[>!O+*");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parse("ex;", "ex;");
      document0.prepend("ex;");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parse("ex;", "ex;");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals("ex;", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R", "R");
      document0.getElementsByAttributeValueStarting("R", ".");
      assertEquals("R", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("^ ^FH^Po*]E9+C='", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "^ ^FH^Po*]E9+C='", (Attributes) null);
      formElement0.getElementsByAttributeValue("#root", "+kq`0]HA@s5N'wwBO3");
      assertEquals("^ ^FH^Po*]E9+C='", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parse("uF'%-I_Dg]%,u5W;", "5N&4Ymk");
      String string0 = document0.wholeText();
      assertEquals("uF'%-I_Dg]%,u5W;", string0);
      assertEquals("5N&4Ymk", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R~\"e", "R~\"e");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Element element0 = new Element("g~\"e");
      Elements elements0 = element0.getElementsByIndexLessThan(80);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse("ex;", "ex;");
      Elements elements0 = document0.getElementsContainingOwnText("fPhL~[ozRm/Op*|$");
      assertTrue(elements0.isEmpty());
      assertEquals("ex;", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = new Document("Vv3a>x+SPR-wNDzN");
      document0.dataset();
      assertEquals("Vv3a>x+SPR-wNDzN", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.text("org.jsoup.nodes.Element");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Document.createShell("^ ^FH^Po*]E9+C='");
      // Undeclared exception!
      try { 
        document0.child((-3615));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parse("^", "^");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("^", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parse("7n52DC,pf4BxvV", "7n52DC,pf4BxvV");
      Element element0 = document0.prependElement("7n52DC,pf4BxvV");
      Element element1 = element0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertNotSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parse("e-T1'?m}%3^[>!O+*", "e-T1'?m}%3^[>!O+*");
      document0.toggleClass("d@");
      boolean boolean0 = document0.hasClass("org.jsoup.nodes.Element$NodeList");
      assertEquals("e-T1'?m}%3^[>!O+*", document0.baseUri());
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parse("ex;", "ex;");
      // Undeclared exception!
      try { 
        document0.wrap("A68m");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^", "^");
      document0.nextElementSiblings();
      assertEquals("^", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parse("7w52DC,pf4xvV", "7w52DC,pf4xvV");
      document0.getElementById("7w52DC,pf4xvV");
  }
}
