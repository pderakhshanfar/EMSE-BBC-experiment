/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:39:02 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("(Or8=0+S", "");
      document0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = new Document(";?");
      document0.reparentChild(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parse("r4qmr2", "r4qmr2");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parse("la/", "la/");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = new Document("2\"Z");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Gla", "0x");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      Document document1 = new Document("NA");
      document0.appendChild(document1);
      document1.wrap("Y_a.<=7*Kw84GQMs");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Document.createShell("p,;1'B=| c;;ajE\u0000S");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Tag tag0 = Tag.valueOf("*4B[%OyvJ");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "basefont", attributes0);
      formElement0.setSiblingIndex((-150142072));
      formElement0.val("*4B[%OyvJ");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parse("html", "");
      Element element0 = document0.body();
      element0.val("");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".VY{bj8Z");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ".VY{bj8Z", attributes0);
      formElement0.val(" />");
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":'c!=),!UZUu:jDp~", "org.jsoup.nodes.Element$1");
      Element element0 = document0.body();
      element0.toggleClass(" ");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Element element0 = new Element(":containsOwn(%s)");
      Document document0 = Parser.parseBodyFragment("|containsOwn(%s)", "o");
      document0.appendChild(element0);
      element0.text(")K?$QiB9)A/;Vnz");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Document.createShell("'jcbH9m");
      Element element0 = document0.head();
      element0.text("NnR?w)K]([E~:%kpM]");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell("JUc");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "_01:");
      Document document0 = Document.createShell("_01:");
      document0.appendChild(element0);
      element0.tagName("o");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "body", (Attributes) null);
      pseudoTextElement0.tagName("body");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("div");
      Document document0 = parser0.parseInput((Reader) stringReader0, "R4+f/Y8v?C#W9I@x-V7");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Tag tag0 = Tag.valueOf("basefont");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "basefont", attributes0);
      formElement0.tag();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Tag tag0 = Tag.valueOf("basefont");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "basefont", attributes0);
      formElement0.selectFirst("u");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      Tag tag0 = Tag.valueOf("tl");
      Element element0 = new Element(tag0, "NA");
      document0.appendChild(element0);
      element0.selectFirst("tl");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Tag tag0 = Tag.valueOf("tl");
      Element element0 = new Element(tag0, "NA");
      element0.selectFirst("tl");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "br");
      document0.selectFirst("html");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(", "(");
      document0.select("html");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("OUqXg+u#b5vsHiD;M<Q", "java.lang.string@0000000047 ");
      Element element0 = document0.body();
      element0.removeClass("java.lang.string@0000000047 ");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("OUqXg+u#b5vsHiD;M<Q", "java.lang.string@0000000047 ");
      document0.reparentChild(document0);
      document0.removeClass("java.lang.string@0000000047 ");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      document0.removeClass("ioLI#g|me");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("NA", "NA");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parse("id", ".VYCbj8Z");
      Element element0 = document0.body();
      element0.prependText(":nth-child(%d)");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      Tag tag0 = Tag.valueOf("NA");
      Element element0 = new Element(tag0, "NA");
      document0.appendChild(element0);
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("head", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "head", attributes0);
      Document document0 = Document.createShell("del");
      pseudoTextElement0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      Tag tag0 = Tag.valueOf("NA");
      Element element0 = new Element(tag0, "NA");
      document0.appendChild(element0);
      element0.prepend("?']`G");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = new Document("");
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Document.createShell("Must be false");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".", ".");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(", "(");
      Document document1 = Parser.parseBodyFragmentRelaxed("(", "(");
      document0.reparentChild(document1);
      document1.parent();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parse("la/", "la/");
      document0.reparentChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Element element0 = new Element("2\"Z");
      TextNode textNode0 = TextNode.createFromEncoded("2\"Z", "#document");
      Element element1 = element0.appendChild(textNode0);
      element1.ownText();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(" /N>", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, " /N>", attributes0);
      formElement0.nodeName();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Document.createShell("JUc");
      Element element0 = document0.head();
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse("basefont", ": ");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      Tag tag0 = Tag.valueOf("NA");
      Element element0 = new Element(tag0, "NA");
      document0.appendChild(element0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "#");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan((-367));
      document0.is((Evaluator) evaluator_IndexLessThan0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.createElement("8-Ml");
      element0.is("8-Ml");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Document.createShell("la/");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "br");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(1, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parse("la/", "la/");
      document0.reparentChild(document0);
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      document0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("h4", "=dy=:seWXNFBG9Bvj`");
      Element element0 = document0.body();
      element0.html("=dy=:seWXNFBG9Bvj`");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("&]4*r;oKb", "hDGHvC]qW");
      document0.html("<joJav6*)kA9MX");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = new Document("");
      document0.html((PipedWriter) null);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".", ".");
      document0.getElementsByAttributeValueMatching("", "#root");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".", ".");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parse("p,;1'B=| c;;ajE\u0000S", "p,;1'B=| c;;ajE\u0000S");
      Pattern pattern0 = Pattern.compile("%tm%", (-2321));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("OUqXg+u#b5vsHiD;M<Q", "java.lang.string@0000000047 ");
      Pattern pattern0 = Pattern.compile(",baefont");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":containsOwn(%s)", ":containsOwn(%s)");
      document0.getElementsContainingText((String) null);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Tag tag0 = Tag.valueOf("tl");
      Element element0 = new Element(tag0, "NA");
      element0.getElementsContainingOwnText("NA");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parse("AKM}ve(^t:>d,vy", "AKM}ve(^t:>d,vy");
      document0.getElementsByTag("QNto98x%,C8");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("div");
      Document document0 = parser0.parseInput((Reader) stringReader0, "R4+f/Y8v?C#W9I@x-V7");
      document0.getElementsByTag("html");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parse("AKM}ve(^t:>d,vy", "AKM}ve(^t:>d,vy");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      document0.getElementsByAttributeValueNot("Children collection to be inserted must not be null.", " ");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(", "(");
      document0.getElementsByAttribute("(");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("{YH0~Nh~6C", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("{YH0~Nh~6C", "{YH0~Nh~6C");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "{YH0~Nh~6C", attributes1);
      pseudoTextElement0.getElementsByAttribute("{YH0~Nh~6C");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parse("NkxA", "NkxA");
      document0.appendTo(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".", ".");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("SpXv", ".VYCbj8Z");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Tag tag0 = Tag.valueOf("head");
      Element element0 = new Element(tag0, "head");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".VYCbj8Z");
      Element element0 = new Element(tag0, "wd*[j>BxkQ|\"1A");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("lSeEhBB*K,3FlUkBj", "lSeEhBB*K,3FlUkBj");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse("p,;1'B=| c;;ajE\u0000S", "p,;1'B=| c;;ajE\u0000S");
      document0.setSiblingIndex((-1));
      Set<String> set0 = document0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Element element0 = new Element("br");
      Document document0 = Document.createShell("br");
      document0.appendChild(element0);
      Locale locale0 = Locale.CANADA_FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", "p,;1'B=| c;;ajE\u0000S");
      document0.toggleClass(" ");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = new Document(".");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Tag tag0 = Tag.valueOf("p,;1'B=| c;;ajE\u0000S");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "p,;1'B=| c;;ajE\u0000S", attributes0);
      pseudoTextElement0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parse("p,;1'B=| c;;ajE\u0000S", "p,;1'B=| c;;ajE\u0000S");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tX8DRsM-n}1-eMw", "RY@8ywy%Lw");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      Document document1 = new Document("NA");
      document0.appendChild(document1);
      document1.before((Node) document1);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      document0.reparentChild(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "p,;1'B=| c;;ajE\u0000S");
      Element element0 = document0.head();
      element0.before("%f}-XB6'");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Tag tag0 = Tag.valueOf("j.Y{E8Z");
      Element element0 = new Element(tag0, "D*nyo5+");
      Element element1 = new Element("8gWc:!");
      Element element2 = element0.prependChild(element1);
      Document document0 = Document.createShell("j.Y{E8Z");
      document0.appendChild(element2);
      element2.before("<html>\n <head></head>\n <body></body>\n</html>\n<j.Y{E8Z>\n <8gWc:!></8gWc:!>\n</j.Y{E8Z>");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      document0.doSetBaseUri((String) null);
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.StructuralEvaluator$Root");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Element element0 = new Element("#document");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Document.createShell("0SYb;Sv~)'m:J9eD");
      Element element0 = document0.body();
      element0.attr("0SYb;Sv~)'m:J9eD", true);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("div");
      Document document0 = parser0.parseInput((Reader) stringReader0, "R4+f/Y8v?C#W9I@x-V7");
      document0.attr("G.-'5YY+grajo", true);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse(";?", ";?");
      document0.setSiblingIndex(1586);
      document0.attr("#cdata", "");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("style", "u`W79h}");
      Element element0 = document0.head();
      element0.attr("fHo", "u`W79h}");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("{YH0~Nh~6C", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "px%", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "px%", attributes0);
      element0.appendTo(pseudoTextElement0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Tag tag0 = Tag.valueOf("h1");
      CDataNode cDataNode0 = new CDataNode("h1");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "h1", attributes0);
      formElement0.appendText("h1");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.doClone(document0);
      element0.appendText("/+j");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0SYb;Sv~)'m:2J9eDB", "(Or8=0+S");
      document0.appendElement("25s");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".VY{bj8Z");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ".VY{bj8Z", attributes0);
      formElement0.appendElement("body");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.head();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Ha/", "Ha/");
      document0.setSiblingIndex(35);
      document0.append("Ha/");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("head", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "head", attributes0);
      pseudoTextElement0.append("Zu");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.clone();
      document1.reparentChild(document0);
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.head();
      element0.after("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      Tag tag0 = Tag.valueOf("tl");
      Element element0 = new Element(tag0, "NA");
      document0.appendChild(element0);
      element0.after("nsIHv9j@p'c");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Tag tag0 = Tag.valueOf("h1");
      CDataNode cDataNode0 = new CDataNode("h1");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "h1", attributes0);
      formElement0.addClass("body");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      document0.appendChild(document0);
      document0.addClass("? 4tltE-");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(", "(");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.wrap("@&EUL2vON");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("0SYb;Sv~)'m:2J9eDB", "0SYb;Sv~)'m:2J9eDB");
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(", "(");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.val("j`?)b*m1aj");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput(".VY{bj8Z", ".VY{bj8Z");
      // Undeclared exception!
      try { 
        document0.val("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".VY{bj8Z");
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[6];
      attributes0.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, ".VY{bj8Z", attributes0);
      // Undeclared exception!
      try { 
        formElement0.val(".VY{bj8Z");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("div");
      Document document0 = parser0.parseInput((Reader) stringReader0, "R4+f/Y8v?C#W9I@x-V7");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.text("b`FiiPHhy99{u9{");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("div");
      Document document0 = parser0.parseInput((Reader) stringReader0, "R4+f/Y8v?C#W9I@x-V7");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parse("la/", "la/");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.tagName("la/");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", "{!O");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("mh,V^e>Og[iW]zO/:fe", "mh,V^e>Og[iW]zO/:fe");
      // Undeclared exception!
      try { 
        document0.selectFirst("mh,V^e>Og[iW]zO/:fe");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'V^e': unexpected token at '^e'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*4B[%OyvJ", "*4B[%OyvJ");
      // Undeclared exception!
      try { 
        document0.selectFirst("*4B[%OyvJ");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'O'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parse("JW#_(W7aVA+JDvw", "JW#_(W7aVA+JDvw");
      // Undeclared exception!
      try { 
        document0.select("org.jsoup.nodes.Element$NodeList");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.nodes.Element$NodeList': unexpected token at '$NodeList'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("L}=8$CWw__ni1U[Y*&", parseSettings0);
      Element element0 = new Element(tag0, "L}=8$CWw__ni1U[Y*&");
      // Undeclared exception!
      try { 
        element0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$AttributeWithValueNot", parseSettings0);
      Element element0 = new Element(tag0, "org.jsoup.select.Evaluator$AttributeWithValueNot");
      DataNode dataNode0 = new DataNode("Children collection to be inserted must not be null.");
      Element element1 = element0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element1.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("data-", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "Tv#&'}h?%=%f?Xi-xEF", attributes0);
      // Undeclared exception!
      try { 
        element0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#_(W7aVA+JDvw", "#_(W7aVA+JDvw");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prependElement("#_(W7aVA+JDvw");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parse("la/", "la/");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("h4", "=dy=:seWXNFBG9Bvj`");
      Element element0 = document0.body();
      Element element1 = element0.doClone(document0);
      // Undeclared exception!
      try { 
        document0.prependChild(element1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("a6i567I`0}-Jam&1", "a6i567I`0}-Jam&1");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NA", "NA");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prepend("#root");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*4B[%OyvJ", "*4B[%OyvJ");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1299);
      // Undeclared exception!
      document0.outerHtmlTail(charArrayWriter0, 1299, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tX8DRsM-n}1-eMw", "Insert position out of bounds.");
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 30, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("la/", "la/");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charArrayWriter0, (-2446), (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P:", "");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintWriter0, (-1312), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = charset0.encode("");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 58, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("@'Mk<]O2(", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "#root", attributes0);
      StringWriter stringWriter0 = new StringWriter(1761);
      // Undeclared exception!
      try { 
        formElement0.outerHtmlHead(stringWriter0, 6, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parse("la/", "la/");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, 891, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      DataNode dataNode0 = new DataNode("#document");
      Document document0 = Parser.parseBodyFragment("#root", "ka&i^w*>#hq[\"");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("la]");
      Document document0 = Parser.parseBodyFragment("la]", "la]");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse("la/", "la/");
      document0.reparentChild(document0);
      Document document1 = Document.createShell("");
      document0.after((Node) document1);
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("NkxA", "InCaption");
      // Undeclared exception!
      document1.is((Evaluator) evaluator_AttributeWithValueNot0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Element element0 = new Element("2\"Z");
      // Undeclared exception!
      try { 
        element0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      // Undeclared exception!
      try { 
        document0.is("org.jsoup.nodes.Element$1");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.nodes.Element$1': unexpected token at '$1'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.is("body");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*4B[%OyvJ", "*4B[%OyvJ");
      // Undeclared exception!
      try { 
        document0.is("*4B[%OyvJ");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'O'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("{YH0~Nh~6C", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "QEh.Z{9;npl3", attributes0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "g{7Iz,o+D9e", attributes0);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      // Undeclared exception!
      try { 
        pseudoTextElement0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parse("la/", "la/");
      document0.reparentChild(document0);
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      linkedList0.add(document0);
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse(";?", ";?");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html(":rj6|Q");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      CDataNode cDataNode0 = new CDataNode("head");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "p8 ;uzPA@g", attributes0);
      PipedWriter pipedWriter0 = new PipedWriter();
      element0.prepend("body");
      // Undeclared exception!
      try { 
        element0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*4B[%OyvJ", "*4B[%OyvJ");
      Element element0 = document0.appendTo(document0);
      MockFile mockFile0 = new MockFile("`5");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      // Undeclared exception!
      element0.html((OutputStreamWriter) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parse("j.Y{E8Z", "j.Y{E8Z");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.html();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("8?", "8?");
      Comment comment0 = new Comment("8?");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = new Document(";?");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NA", "NA");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("m{{~.73<?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: m{{~.73<?
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("datalist", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("T0,Q]uB}=*3{Jd`");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{YH0~Nh~6C", "bh}|UDF-d?^b;vq");
      DocumentType documentType0 = new DocumentType("tX8PRsM-n}X6eMw", "tX8PRsM-n}X6eMw", "uzs,C^", "tX8PRsM-n}X6eMw", "#root");
      document0.setParentNode(documentType0);
      Pattern pattern0 = Pattern.compile("``RcCOGYbWe");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText(pattern0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "i0!*|");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "org.jsoup.parser.HtmlTreeBuilder");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("7[Qv-fN`\"M<to");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 7[Qv-fN`\"M<to
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`ncP", "`ncP");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      Element element0 = document0.head();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan((-1270));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parse("p,;1'B=| c;;ajE\u0000S", "p,;1'B=| c;;ajE\u0000S");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$2", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueStarting("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parse("la/", "la/");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("la/", "T++TG5nzwufyii");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("(Or8=0+S", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot((String) null, "t\"v>6vT");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Document.createShell("u`W79h}");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("Children collection to be inserted must not be null.", "\u0001q>f&0n>WoM{An2g");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: \u0001q>f&0n>WoM{An2g
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(", "(");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("e", "js<@$!wz{l'RZ");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "fTQY*996/5{DI;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(", "(");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".VY{bj8Z");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "px%", attributes0);
      // Undeclared exception!
      try { 
        element0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("p,;1'B=| c;;ajE\u0000S", "p,;1'B=| c;;ajE\u0000S");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parse("la/", "la/");
      DataNode dataNode0 = new DataNode(".Y{jE8Z", "*;biJv5h");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parse("la/", "la/");
      TextNode textNode0 = TextNode.createFromEncoded("la/", "la/");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Tag tag0 = Tag.valueOf("?EgA-,B><`/|tH!21!");
      CDataNode cDataNode0 = new CDataNode("@v\"yZn^eq2_d\"");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "?EgA-,B><`/|tH!21!", attributes0);
      // Undeclared exception!
      try { 
        formElement0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.child((-1092));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(", "(");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.before(",:'(S .9\"nV/5@fEUgo");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(", "(");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.attr("R?u64", ":nth-child(%d)");
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("#o52Q", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("#o52Q");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "#o52Q", attributes0);
      // Undeclared exception!
      try { 
        formElement0.attr((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Pattern syntax error: ", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Tag tag0 = Tag.valueOf("A%N_kBes!#");
      Element element0 = new Element(tag0, "la/");
      List<Node> list0 = Parser.parseFragment("tl", element0, "isaJP*Sr!4\"", (ParseErrorList) null);
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.appendText("#");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("la/", "la/");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse("la/", "la/");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.appendElement("u=a1D0||{|y6 ");
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parse("NkxA", "NkxA");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      Tag tag0 = Tag.valueOf("IyJz21wo@2");
      Element element0 = new Element(tag0, "IyJz21wo@2");
      CDataNode cDataNode0 = new CDataNode("NA");
      Node node0 = cDataNode0.doClone(element0);
      // Undeclared exception!
      try { 
        document0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{YH0~Nh~6C", "{YH0~Nh~6C");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.after((Node) document1);
      // Undeclared exception!
      document1.append("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("la/");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Document.createShell("value");
      Element element0 = document0.doClone(document0);
      // Undeclared exception!
      try { 
        element0.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("OUqXg+u#b5vsHiD;M<Q", "java.lang.string@0000000047 ");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.after("!]?Xr`bCfc");
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parse("AKM}ve(^t:>d,vy", "AKM}ve(^t:>d,vy");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".VYCbj8Z");
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "[_'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parse("AKM}ve(^t:>d,vy", "AKM}ve(^t:>d,vy");
      MockFile mockFile0 = new MockFile("AKM}ve(^t:>d,vy", "SYSTEM");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, false);
      document0.html((OutputStreamWriter) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("&a/", "&a/");
      document0.toggleClass("li");
      document0.addClass("");
      document0.hasClass("li");
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parse("AKM}ve(^t:>d,vy", "AKM}ve(^t:>d,vy");
      document0.toggleClass("rjsoup.nodes.Element$odeList");
      document0.addClass("AKM}ve(^t:>d,vy");
      document0.hasClass("AKM}ve(^t:>d,vy");
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = new Document("rsouu.nodes.Element$odeList");
      document0.toggleClass("rsouu.nodes.Element$odeList");
      Element element0 = document0.addClass("width must be > 0");
      element0.hasClass("rsouu.nodes.Element$odeList");
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("lSeEhBB*K,3FlUkBj", "lSeEhBB*K,3FlUkBj");
      document0.addClass("n");
      document0.toggleClass("lSeEhBB*K,3FlUkBj");
      document0.addClass("%;ygubL.M$0dj");
      document0.hasClass("java.lang.string@0000000056");
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("lSeEhBB*K,3FlUkBj", "lSeEhBB*K,3FlUkBj");
      document0.addClass("%;ygubL.M$0dj");
      document0.hasClass("java.lang.string@0000000056");
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      document0.hasClass("? 4tltE-");
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("tX8PRsM-n}X6eMw", " />");
      Element element0 = document0.toggleClass("tX8PRsM-n}X6eMw");
      Set<String> set0 = element0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("image", "`5");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Element element0 = new Element("2\"Z");
      TextNode textNode0 = TextNode.createFromEncoded("2\"Z", "#document");
      element0.appendChild(textNode0);
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Document.createShell("p,;1'B=| c;;ajE\u0000S");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".", ".");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("DbMFznvvk_#", "W79h}");
      Element element0 = document0.head();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parse("NA", "NA");
      Element element0 = document0.appendChild(document0);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parse("p,;1'B=| c;;ajE\u0000S", "p,;1'B=| c;;ajE\u0000S");
      document0.addClass(" />");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Ha/", "Ha/");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = new Document("");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "#");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":containsOwn(%s)", ":containsOwn(%s)");
      document0.empty();
      document0.html();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("la/", "la/");
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("AttributeValue_doubleQuoted", "AttributeValue_doubleQuoted");
      document0.is((Evaluator) evaluator_AttributeWithValueNot0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Pattern pattern0 = Pattern.compile("value", 0);
      document0.getElementsByAttributeValueMatching("value", pattern0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("la/", "la/");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "#document");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0SYb;Sv~)'m:2J9eDB", "yAKW");
      document0.attributes();
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P:", "P|");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("(");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(mockPrintWriter0, (-1312), document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element("br");
      Element element1 = new Element(tag0, "br");
      element0.prependChild(element1);
      Document document0 = Document.createShell("br");
      Element element2 = document0.appendChild(element0);
      element2.html();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Element element0 = new Element("br");
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Document.createShell("#");
      document0.title("zF$crRd");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".", ".");
      // Undeclared exception!
      try { 
        document0.html((OutputStreamWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parse("*4B[%OyvJ", "*4B[%OyvJ");
      StringBuilder stringBuilder0 = new StringBuilder("BVE{bj8Z");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, 145, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "textarea", (Attributes) null);
      formElement0.val(".Y{jE8Z");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parse("AKM}ve(^t:>d,vy", "AKM}ve(^t:>d,vy");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AKM}ve(^t:>d,vy", "C#ZPIF|l]4m>5o");
      document0.toggleClass("Insert position out of bounds.");
      document0.addClass("");
      document0.getElementsByClass("C#ZPIF|l]4m>5o");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = new Document("rjsoup.nodes.Element$odeList");
      document0.toggleClass("rjsoup.nodes.Element$odeList");
      Element element0 = document0.addClass("width must be > 0");
      element0.getElementsByClass("m");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000085", "java.lang.string@0000000085");
      document0.toggleClass("java.lang.string@0000000085");
      document0.addClass("basefont");
      document0.getElementsByClass("java.lang.string@0000000047");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("BeforeHtml", "n^q\"plyz g");
      document0.toggleClass("8`0I+m$.DcQ");
      document0.addClass(" />");
      document0.hasClass(" />");
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("noscript", "noscript");
      Element element0 = document0.toggleClass("Pattern syntax error:");
      element0.getElementsByClass("Pattern syntax error:");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parse(".Y{jE8Z", ".Y{jE8Z");
      document0.toggleClass(".Y{jE8Z");
      document0.hasClass("org.jsoup.nodes.Document$OutputSettings");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Tag tag0 = Tag.valueOf("basefont");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "nosclript", attributes0);
      Comment comment0 = new Comment("3@M{v4%y#");
      Element element0 = formElement0.prependChild(comment0);
      element0.data();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000085", "java.lang.string@0000000085");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*4B[%OyvJ", "*4B[%OyvJ");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parse(";?", ";?");
      document0.reparentChild(document0);
      Pattern pattern0 = Pattern.compile(";?");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("*4B[%OyvJ", "*4B[%OyvJ", "(p='pq|P");
      Element.preserveWhitespace(documentType0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "_01:");
      Document document0 = Document.createShell("_01:");
      document0.appendChild(element0);
      document0.getElementsMatchingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parse("NkxA", "NkxA");
      CDataNode cDataNode0 = new CDataNode("");
      document0.appendChild(cDataNode0);
      document0.getElementsMatchingText("NkxA");
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("NA", false);
      document0.appendChild(xmlDeclaration0);
      document0.getElementsMatchingOwnText("nov|aR=U-]<K>M");
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#_(W7aVA+JDvw", "#_(W7aVA+JDvw");
      Document document1 = Parser.parse("#_(W7aVA+JDvw", "sR>9L: Az");
      document0.appendChild(document1);
      document0.getElementsMatchingText("sR>9L: Az");
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("F$P(63O", "Could not parse nth-index '%s': unexpected format");
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "F$P(63O");
      document0.appendChild(element0);
      document0.getElementsMatchingText("org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Document.createShell("#");
      document0.title("zF$crRd");
      document0.getElementsContainingText("<html>\n <head>\n  <title>zF$crRd</title>\n </head>\n <body></body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":containsOwn(%s)", ":containsOwn(%s)");
      DocumentType documentType0 = new DocumentType("P:", "P:", "P:");
      document0.appendChild(documentType0);
      document0.getElementsMatchingText("B]|&%-Lq2k");
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("NA", "NA");
      document0.getElementById("NA");
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parse("la/", "la/");
      document0.reparentChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "menuitem");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parse("la/", "la/");
      document0.reparentChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parse("NA", "NA");
      Element element0 = document0.appendChild(document0);
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "p,;1'B=| c;;ajE\u0000S");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse("la/", "la/");
      document0.reparentChild(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Document.createShell(".VY{bj8Z");
      Element element0 = document0.prependElement("textarea");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = new Document("");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Document.createShell("JUc");
      Element element0 = document0.body();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, element0.siblingIndex());
      assertEquals("JUc", element0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parse("basefont", ": ");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      assertEquals(": ", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parse("j.Y{E8Z", "j.Y{E8Z");
      document0.appendChild(document0);
      String string0 = document0.cssSelector();
      assertEquals("#root", string0);
      assertEquals("j.Y{E8Z", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Tag tag0 = Tag.valueOf("{YH0~Nh~6C");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "g{7Iz,o+D9e", attributes0);
      pseudoTextElement0.toggleClass("g{7Iz,o+D9e");
      pseudoTextElement0.cssSelector();
      assertEquals(1, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("{YH0~Nh~6C", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "{YH0~Nh~6C", attributes0);
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        pseudoTextElement0.insertChildren((-2966), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "menuitem");
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        document0.insertChildren(52, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Elements elements0 = document0.getElementsMatchingOwnText("br");
      // Undeclared exception!
      try { 
        document0.insertChildren(1342, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(", "(");
      Elements elements0 = document0.siblingElements();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1110026255), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parse("wd*[j>BxkQ|\"1A", "\"");
      Elements elements0 = document0.getElementsByAttributeStarting("i6En4sm&b{!#Q8");
      Element element0 = document0.insertChildren(1, (Collection<? extends Node>) elements0);
      assertEquals("\"", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tX8PRsM-n}X6eMw", "Tag name must not be empty.");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("data-", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "data-", attributes0);
      Element element1 = element0.prependText("body");
      List<TextNode> list0 = element1.textNodes();
      assertEquals("data-", element1.baseUri());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Document.createShell("0SYb;Sv~)'m:J9eD");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
      assertEquals("0SYb;Sv~)'m:J9eD", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{YH0~Nh~6C", "bh}|UDF-d?^b;vq");
      Element element0 = document0.body();
      Element element1 = document0.doClone(element0);
      Elements elements0 = element1.getElementsByIndexGreaterThan(3662);
      assertEquals("bh}|UDF-d?^b;vq", element1.baseUri());
      assertTrue(elements0.isEmpty());
      assertTrue(element1.hasParent());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Document.createShell("p,;1'B=| c;;ajE\u0000S");
      Elements elements0 = document0.getElementsByIndexLessThan(1556);
      assertEquals(1, document0.childNodeSize());
      assertEquals(3, elements0.size());
      assertEquals("p,;1'B=| c;;ajE\u0000S", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".", ".");
      document0.parents();
      assertEquals(".", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("tX8PRsM-n}X6eMw", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tX8PRsM-n}X6eMw", (Attributes) null);
      Elements elements0 = pseudoTextElement0.getElementsByIndexGreaterThan((-1802440777));
      assertEquals("tX8PRsM-n}X6eMw", pseudoTextElement0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parse("JW#_(W7aVA+JDvw", "JW#_(W7aVA+JDvw");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "mark");
      document0.getAllElements();
      assertEquals("mark", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":containsOwn(%s)", ":containsOwn(%s)");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "p,;1'B=| c;;ajE\u0000S");
      // Undeclared exception!
      try { 
        document0.before("%f}-XB6'");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x&Ys8S1Zdt", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse("la/", "la/");
      document0.getElementsByAttributeValueNot("la/", "T++TG5nzwufyii");
      assertEquals("la/", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByAttributeValueContaining(", ", "Insert position out of bounds.");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".", "br");
      document0.getElementsByAttributeValueEnding("br", "2qyRrde6`T");
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("html", "A4 A_r");
      document0.is("html");
      assertEquals("A4 A_r", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      // Undeclared exception!
      try { 
        document0.wrap("Y_a.<=7*Kw84GQMs");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parse("la/", "la/");
      Elements elements0 = document0.getElementsMatchingOwnText("la/");
      assertEquals(1, elements0.size());
      assertEquals("la/", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".VY{bj8Z");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ".VY{bj8Z", attributes0);
      Elements elements0 = formElement0.getElementsByIndexEquals(53);
      assertEquals(".VY{bj8Z", formElement0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(", "(");
      Elements elements0 = document0.getElementsByIndexLessThan((-1110026255));
      assertEquals(0, elements0.size());
      assertEquals("(", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      // Undeclared exception!
      try { 
        document0.after("nsIHv9j@p'c");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".", ".");
      Pattern pattern0 = Pattern.compile(".", 392);
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertEquals(".", document0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tX8PRsM-n}X6eMw", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("math", "org.jsoup.parser.TokeniserState");
      document0.select("math");
      assertEquals("org.jsoup.parser.TokeniserState", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parse("basefont", ": ");
      document0.getElementsByAttributeValueStarting("</", "title");
      assertEquals(": ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      document0.getElementsByAttributeValue("NA", "tl");
      assertEquals("NA", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("p,;1'B=| c;;ajE\u0000S", "p,;1'B=| c;;ajE\u0000S");
      document0.wholeText();
      assertEquals("p,;1'B=| c;;ajE\u0000S", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Element element0 = new Element("lLS%.qszyD/\" e");
      // Undeclared exception!
      try { 
        element0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      Elements elements0 = document0.getElementsContainingOwnText("NA");
      assertEquals("NA", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0SYb;Sv~)'m:2J9eDB", "yAKW");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("yAKW", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Document.createShell("'jcbH9m");
      Element element0 = document0.text("NnR?w)K]([E~:%kpM]");
      assertEquals(1, document0.childNodeSize());
      assertEquals("'jcbH9m", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Gla", "0x");
      Element element0 = document0.tagName("EhwND3J1`wCnN2)EdRG");
      assertEquals("0x", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("NA", "NA");
      // Undeclared exception!
      try { 
        document0.child(46);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 46, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parse("la/", "la/");
      document0.previousElementSiblings();
      assertEquals("la/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".", ".");
      document0.children();
  }
}
