/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:25:43 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("U28L<9iU0", "676Bj6ZCPi");
      document0.appendElement("BGqW2|A");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parse("@Ozr::&=.K;\"SX[yr", "@.nn+Z%Ma");
      document0.toggleClass("=u");
      document0.addClass("eof7j hropt2#o,}o");
      document0.hasClass("java.lang.string@0000000011");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Element element0 = document0.doClone(document0);
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = new Document(">m](\t#hOsWId-_y");
      Document document1 = document0.normalise();
      Node[] nodeArray0 = new Node[7];
      // Undeclared exception!
      try { 
        document1.insertChildren((-1192), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Document.createShell("V0");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Document.createShell("acronym");
      Document document1 = (Document)document0.doClone(document0);
      document1.wrap("acronym");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">m(\t#OsI-_y", ">m(\t#OsI-_y");
      Element element0 = document0.body();
      element0.wrap("VU`<D=onyCM");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell("TT7ZluH!Cmv<jq>");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = new Document("qPePtg");
      document0.setSiblingIndex((-1259));
      document0.val("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Document.createShell("html");
      Element element0 = document0.head();
      element0.val("xgja2'vC;!=r=2?");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parse(",b:p>'UK", ",b:p>'UK");
      Element element0 = document0.appendElement("KA");
      Element element1 = element0.prepend("KA");
      element1.val("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Document.createShell("k,axfM%+<CrMHbW^C");
      document0.val("#");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      document0.siblingIndex = 8;
      document0.toggleClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      Element element0 = document0.head();
      element0.toggleClass("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hwml", "hwml");
      Tag tag0 = Tag.valueOf("676bj6zcpi");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "hwml", (Attributes) null);
      document0.appendTo(pseudoTextElement0);
      document0.toggleClass("S8w>?7T!PnAG6H");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Document.createShell("html");
      document0.tagName("html");
      document0.text("s+");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parse("t%g nae must not be empty.", "t%g nae must not be empty.");
      Element element0 = document0.appendElement("KA");
      element0.text("br");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Document.createShell("j'<}XG");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b]ZBfRgK", "y");
      document0.siblingIndex = (-844);
      document0.tagName("b]ZBfRgK");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "body");
      Element element0 = document0.appendElement("Doctype");
      element0.tagName("body");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = new Document(":containsOwn(%s)");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "o>'");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = new Document(">m](\t#hOsWId-_y");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Document.createShell("acronym");
      document0.selectFirst("acronym");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("h", parseSettings0);
      Element element0 = new Element(tag0, "section");
      element0.selectFirst("h");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = new Document("*e27ckjETj^l@");
      document0.normalise();
      Element element0 = document0.head();
      element0.removeClass("");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000080", "java.lang.string@0000000080");
      Element element0 = document0.appendElement("java.lang.string@0000000080");
      element0.removeClass("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("html", "html");
      Element element0 = document0.head();
      document0.title("html");
      Element element1 = element0.lastElementSibling();
      element1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      element1.prependText("{dxY`)mgYiWt]N");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      Element element0 = document0.head();
      element0.prependText("{dxY`)mgYiWt]N");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Element element0 = new Element("U28L<9iU0");
      element0.prependElement("U2l8L<9iU0");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("/=>k:t", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "/=>k:t", attributes0);
      formElement0.setSiblingIndex((-405));
      Document document0 = Parser.parseBodyFragment("7%$d`?3+MkD@FdtQG", "org.jsoup.nodes.Element$1");
      formElement0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = new Document(">m](\t#hOsWId-_y");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      Document document1 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      document0.prependChild(document1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parse("nLnyqGT$", "nLnyqGT$");
      document0.siblingIndex = (-1973);
      document0.prepend("fallback");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(">m](\t#hOsWId-_y", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      Element element0 = pseudoTextElement0.tagName("head");
      element0.prepend("head");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Element element0 = new Element("AH^l^>-r$#>M");
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ka", "ka");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parse(",b:p>'UK", ",b:p>'UK");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Document.createShell("html");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = new Document("ba");
      Element element0 = document0.appendElement("ba");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Element element0 = document0.html("Tag name must not be empty.");
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Document.createShell("html");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parse("U28L<9iU0", "676Bj6ZCPi");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parse(",b:p>'UK", ",b:p>'UK");
      Element element0 = document0.appendElement("KA");
      Element element1 = element0.prepend("KA");
      element1.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("Kfg`i;?/4ALn", "Tag name must not be empty.");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Element element0 = new Element("U28L<9iU0");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      element0.is((Evaluator) evaluator_IsRoot0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parse("", "muted");
      Evaluator.AttributeWithValueContaining evaluator_AttributeWithValueContaining0 = new Evaluator.AttributeWithValueContaining("muted", "org.jsoup.nodes.Element$1");
      document0.is((Evaluator) evaluator_AttributeWithValueContaining0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^u/z/N9La^cHJ$1w0p", ":first-of-type");
      Element element0 = document0.head();
      element0.is(":first-of-type");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Document.createShell("acronym");
      document0.is("#root");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parse("'a", "'a");
      Element element0 = document0.doClone(document0);
      Node[] nodeArray0 = new Node[0];
      element0.insertChildren(1, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("fallb", parseSettings0);
      Element element0 = new Element(tag0, "fallb", (Attributes) null);
      Node[] nodeArray0 = new Node[0];
      element0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.doClone(document0);
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      element0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.setSiblingIndex((-785));
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = new Document("j'<}XG");
      document0.normalise();
      Element element0 = document0.body();
      element0.html((PipedWriter) null);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Document.createShell("acronym");
      document0.val("acronym");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Document.createShell(".G");
      Pattern pattern0 = Pattern.compile("iLS,::q9kc/wF}^");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Array must not contain any null objects", "j'<}XG");
      Pattern pattern0 = Pattern.compile("Array must not contain any null objects");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Document.createShell("html");
      document0.getElementsMatchingText("pu_lh^0u4wn~^4r");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Element element0 = new Element("0$U-o5H#OvF");
      Pattern pattern0 = Pattern.compile("0$U-o5H#OvF");
      element0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("pu_lh^0u4wn~^4r", "pu_lh^0u4wn~^4r");
      Pattern pattern0 = Pattern.compile("pu_lh^0u4wn~^4r", 21);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parse("body", "body");
      document0.getElementsMatchingOwnText("7W-kIv^");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Tag name must not be empty.");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("id");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "id", attributes0);
      pseudoTextElement0.getElementsContainingOwnText("id");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ka", "ka");
      document0.getElementsByTag("java.lang.string@0000000016 -mq name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Document.createShell("html");
      document0.getElementsByTag("html");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataEndTagName");
      document0.getElementsByIndexLessThan((-1110026255));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Document.createShell("V0");
      document0.getElementsByIndexGreaterThan((-1639));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Document.createShell("k,axfM%+<CrMHbW^C");
      document0.getElementsByIndexEquals(22);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse("U28L<9iU0", "676Bj6ZCPi");
      document0.getElementsByClass("U28L<9iU0");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Tag tag0 = Tag.valueOf("QOh^$y<5]C");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("QOh^$y<5]C", "QOh^$y<5]C");
      Element element0 = new Element(tag0, "QOh^$y<5]C", attributes1);
      element0.getElementsByAttributeValueStarting("QOh^$y<5]C", "QOh^$y<5]C");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("$F", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("$F", "$F");
      FormElement formElement0 = new FormElement(tag0, "$F", attributes1);
      formElement0.getElementsByAttributeValueNot("$F", "$F");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Tag tag0 = Tag.valueOf("QOh^$y<5]C");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("QOh^$y<5]C", "QOh^$y<5]C");
      Element element0 = new Element(tag0, "QOh^$y<5]C", attributes1);
      element0.getElementsByAttributeValueMatching("QOh^$y<5]C", "");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("]vAS`yo^7FDTv9", "]vAS`yo^7FDTv9");
      document0.getElementsByAttributeValue("J@QH*DB3N", "]vAS`yo^7FDTv9");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Woz'4/j0~{");
      CDataNode cDataNode0 = new CDataNode("Woz'4/j0~{");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = new Attribute("Woz'4/j0~{", "Woz'4/j0~{");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "Woz'4/j0~{", attributes1);
      formElement0.getElementsByAttributeStarting("Woz'4/j0~{");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("47.[e]v>'E2w", "org.jsoup.nodes.Element");
      Element element0 = document0.attr("f&z/f20: g", "G%FsW7");
      element0.getElementsByAttribute("f&z/f20: g");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      document0.prependChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ka", "ka");
      Element element0 = document0.appendTo(document0);
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Jtml", "Jtml");
      Element element0 = document0.head();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      element1.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("j'<}XG");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("vn\",(", "");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parse("\"}q_V#1N", "head");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "o>'");
      Element element0 = document0.body();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Document.createShell("html");
      Element element0 = document0.head();
      Set<String> set0 = element0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parse("UD28L<=0", "UD28L<=0");
      Element element0 = document0.toggleClass("zVC");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      document0.toggleClass("Tag name must not be empty.");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = new Document("V0");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bND@lbhD(t,Yk", "bND@lbhD(t,Yk");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("fallb", parseSettings0);
      Element element0 = new Element(tag0, "fallb", (Attributes) null);
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("'a", "'a");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Document.createShell("Tag name musc not b< empty.");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hwml", "hwml");
      Tag tag0 = Tag.valueOf("676bj6zcpi");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "hwml", (Attributes) null);
      Element element0 = document0.appendTo(pseudoTextElement0);
      document0.before((Node) element0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tU28i<9iU0", "tU28i<9iU0");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("html", "html");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      element1.before((Node) document0);
      element1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parse("", "muted");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pN{LvGjBPs&^wN", "");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Document.createShell("acronym");
      Element element0 = document0.val("acronym");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("U28L<9iU0", "676Bj6ZCPi");
      Element element0 = document0.appendElement("BGqW2|A");
      element0.attr("InTableText", true);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = new Document(":containsOwn(%s)");
      document0.normalise();
      Element element0 = document0.head();
      element0.attr(":containsOwn(%s)", false);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = new Document(">m](\t#hOsWId-_y");
      document0.normalise();
      document0.attr(">m](\t#hOsWId-_y", false);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = new Document(">m](\t#hOsWId-_y");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.attr("          ", "textarea");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell("html");
      Element element0 = document0.head();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("/=>k:t", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "/=>k:t", attributes0);
      formElement0.setSiblingIndex((-405));
      formElement0.appendText("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      element1.appendText("html");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("html");
      document0.appendElement("html");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = new Document("|ZJ[Il}");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      Comment comment0 = new Comment("|ZJ[Il}");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      element0.appendChild(xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ":nth-child(%d)");
      Element element0 = document0.body();
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Tag tag0 = Tag.valueOf("java.lang.string@0000000038 ");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "java.lang.string@0000000038 ", attributes0);
      formElement0.append("");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{LxB\"mRy`a]Ri6", "org.jsoup.nodes.Element");
      Element element0 = document0.head();
      element0.after((Node) element0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ka", "ka");
      Element element0 = document0.doClone(document0);
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "#", attributes0);
      Element element1 = element0.appendElement("eof7J hroPT2#O,}o");
      element1.after("tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ":nth-child(%d)");
      Element element0 = document0.body();
      element0.after("Hn:?3,-kziKv!H");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ka", "ka");
      document0.appendTo(document0);
      document0.addClass("ka");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.setSiblingIndex((-785));
      document0.addClass("w~/iLR");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Document.createShell("html");
      Element element0 = document0.head();
      element0.addClass("html");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-a", "-a");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.wrap("Unexpected token [%s] when in state [%s]");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7%$d`?3+MkD@FdtQG", "org.jsoup.nodes.Element$1");
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.val("");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse("jie8/=1Pf:jM+$hI", "jie8/=1Pf:jM+$hI");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("G&k!g>>fn9Sy", "w f-2$.K");
      // Undeclared exception!
      try { 
        document0.text("id");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parse("&*C=<n,{NQS6", "&*C=<n,{NQS6");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-`", "-`");
      Element element0 = document0.doClone(document0);
      element0.appendTo(document0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name musc not b< empty.", "Tag name musc not b< empty.");
      DocumentType documentType0 = new DocumentType("PBdZ#a$|", "PBdZ#a$|", "PBdZ#a$|");
      Element element0 = document0.doClone(documentType0);
      document0.appendTo(element0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = new Document(":nth-child(%d)");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.tagName("j-wvtr-O)t");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.tagName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("h1", "h1");
      // Undeclared exception!
      try { 
        document0.selectFirst("HX52Q");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'HX52Q': unexpected token at 'HX52Q'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse("UD28L<=0", "UD28L<=0");
      // Undeclared exception!
      try { 
        document0.select("*c5iA^wc`{Jp#In.i{");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '*c5iA^wc`{Jp#In.i{': unexpected token at '^wc`{Jp#In.i{'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b]ZBfRgK", "y");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      TextNode textNode0 = new TextNode("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Document.createShell("V0");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ":nth-child(%d)");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.prependElement("[a%+");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("vn\",(", "");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parse(",b:p>'UK", ",b:p>'UK");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.prepend("DoaNv");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Document.createShell("V0");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Document.createShell("reversed");
      CDataNode cDataNode0 = new CDataNode("J*|pe([KqHH");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.prepend("reversed");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Tag tag0 = Tag.valueOf("U28L<9iU0");
      CDataNode cDataNode0 = new CDataNode("{CzR>w9$dw+f");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "replacementChar", attributes0);
      // Undeclared exception!
      try { 
        formElement0.outerHtmlTail((Appendable) null, (byte)6, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Document.createShell("j'<}XG");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(13);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charArrayWriter0, (-157), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Document.createShell("TT7ZluH!Cmv<jq>");
      MockPrintStream mockPrintStream0 = new MockPrintStream("qI L{yu8y{5jk4F@");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(4533);
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintStream0, 4533, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Document.createShell("b]ZBfRgK");
      CharBuffer charBuffer0 = CharBuffer.allocate(7);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 7, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$2", "du^PB/v");
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringBuilder0, 382, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      MockPrintStream mockPrintStream0 = new MockPrintStream("nLnyqGT$");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintStream0, (-2866), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Document.createShell("Tag name musc not b< empty.");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, 3327, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("K>iR(g'aC@M=0biX-", "org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      DataNode dataNode0 = new DataNode("html");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("action", "head");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ka", "ka");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.html("ka");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">m](\t#hOsWId-_y", ">m](\t#hOsWId-_y");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell("RvneIg[uY");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.html((CharArrayWriter) null);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parse("UD28L<=0", "UD28L<=0");
      // Undeclared exception!
      try { 
        document0.html((MockFileWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Attribute");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ":nth-child(%d)");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("`Bv>IcNbPn8ch[t");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: `Bv>IcNbPn8ch[t
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("9Bjbi?nFz|>", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "'=g`Y)SQr[", (Attributes) null);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("B->mhZ", ";hN!|l';K%`");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("OX|pls/D~9k[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: OX|pls/D~9k[
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      Comment comment0 = new Comment("Tag name must not be empty.", "Tag name must not be empty.");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      Element element0 = document0.doClone(xmlDeclaration0);
      document0.appendTo(element0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("Yfj-Gx:VhH7^\"");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parse(",b:p>'UK", ",b:p>'UK");
      Element element0 = document0.appendElement("KA");
      Element element1 = element0.prepend("KA");
      element1.setSiblingIndex((-810));
      // Undeclared exception!
      try { 
        document0.getElementsContainingText(",b:p>'UK");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ":nth-child(%d)");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("~R#`I}'!;<ooLRwmPP", "Unexpected character '%s' in input state [%s]");
      CDataNode cDataNode0 = new CDataNode("#root");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.getElementsByIndexEquals(10);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Document.createShell("V0");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("V0", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ":nth-child(%d)");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot((String) null, ">NfA)Z %9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Document.createShell("=");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching((String) null, "bND@lbhD(t,Yk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: bND@lbhD(t,Yk
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("^}#{'p`QEf=A", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = new Document(">](\t#hOsWId-_y");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining((String) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ":nth-child(%d)");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      Document document1 = (Document)document0.html("Tag name must not be empty.");
      Document document2 = (Document)document1.doClone(document1);
      document1.appendChild(document2);
      // Undeclared exception!
      try { 
        document1.getAllElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = new Document("acronym");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      Element element1 = document0.appendElement("Tag name must not be empty.");
      document0.appendTo(element1);
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '#root.java.lang.String@0000000054': unexpected token at '@0000000054'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".a", "=}[hbJVd]");
      Comment comment0 = new Comment("#", "#");
      Element element0 = document0.doClone(comment0);
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("acronym");
      // Undeclared exception!
      try { 
        document0.child(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.child((-1141));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parse("EndTagOpen", "java.lang.string@0000000078");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.before("java.lang.string@0000000078");
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Tag tag0 = Tag.valueOf("h>Wu74'k:VrJS]0");
      CDataNode cDataNode0 = new CDataNode("h>Wu74'k:VrJS]0");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "h>Wu74'k:VrJS]0", attributes0);
      Element element0 = formElement0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.before("noscript");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Document.createShell("Uo+\"n>a{");
      Element element0 = document0.addClass("Uo+\"n>a{");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.attr("Uo+\"n>a{", "!TQ4nwO*`Mu<:ma");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Element element0 = new Element("0$U-o5H#OvF");
      // Undeclared exception!
      try { 
        element0.attr((String) null, "textarea");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("z:Yg", "z:Yg");
      DataNode dataNode0 = new DataNode("z:Yg", "z:Yg");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parse("RRp5r#q+D}-bF}_Q=", "RRp5r#q+D}-bF}_Q=");
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf(" > ");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "0 >E77}joLR;6/`", attributes0);
      pseudoTextElement0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.appendTo(pseudoTextElement0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = new Document(">m](\t#hOsWId-_y");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.appendElement("KA");
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parse("", "muted");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Document.createShell("acronym");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-a", "-a");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.append("-a");
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tU28i<9iU0", "tU28i<9iU0");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parse("nLRyqRGT$", "nLRyqRGT$");
      document0.appendTo(document0);
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-a", "-a");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.after("#root");
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, (String) null, (Attributes) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "X^U]ggh2NAYsFs");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("action", "head");
      PipedReader pipedReader0 = new PipedReader(426);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      document0.html(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataEndTagName");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("ScriptDataEndTagName");
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ":nth-child(%d)");
      Element element0 = document0.body();
      element0.data();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      document0.html("Tag name must not be empty.");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Document.createShell("V0");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hwml", "hwml");
      Element element0 = document0.appendElement("hwml");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parse("U28L<9iU0", "676Bj6ZCPi");
      Element element0 = document0.appendElement("BGqW2|A");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = new Document(":containsOwn(%s)");
      document0.normalise();
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.html("A5hXbKW;Y5)=p5h0Oz");
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Document.createShell("^fh6Ei@FFDV>hl");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = new Document(">m](\t#hOsWId-_y");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parse("Kfg`i;?/4ALn", "Tag name must not be empty.");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Jtml", "Jtml");
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      document0.getElementsByIndexGreaterThan(23);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parse("S1 2W(,+@Y|/", "S1 2W(,+@Y|/");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      Pattern pattern0 = Pattern.compile("Tag name must not be empty.");
      document0.getElementsByAttributeValueMatching("<!doctype", pattern0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("action", "head");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataEndTagName");
      MockFile mockFile0 = new MockFile("0$U-o5H#OvF", "e-5kSX@)y}");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(mockPrintWriter0, 58, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("TT7ZluH!Cmv<jq>", "TT7ZluH!Cmv<jq>");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "TT7ZluH!Cmv<jq>");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parse("o(PW||m5O", "Pz*M*iYe4");
      StringBuilder stringBuilder0 = new StringBuilder("o(PW||m5O");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(stringBuilder0, 2763, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parse("UD28L<=0", "UD28L<=0");
      Element element0 = document0.toggleClass("zVC");
      element0.toggleClass("zVC");
      element0.hasClass("zVC");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      document0.toggleClass("class");
      document0.addClass(" ");
      document0.hasClass("U2l8L<9iU0");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      document0.toggleClass("Tag name must not be empty.");
      document0.toggleClass("Tag name must not be empty.");
      document0.hasClass("-MQ");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      document0.toggleClass("Tag name must not be empty.");
      document0.hasClass("-MQ");
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parse("JqiK:@4dw;<3m", "JqiK:@4dw;<3m");
      document0.addClass("PaXXIxH>DdY,@:S");
      document0.hasClass("org.jsoup.select.Collector$Accumulator");
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("hwml", "hwml");
      document0.hasClass("f`[]p.IlqauigL7f?");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataEndTagName");
      document0.removeClass("ScriptDataEndTagName");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      document0.appendText("");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-tU28i<9iU0", "-tU28i<9iU0");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parse("", "muted");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-a", "-a");
      Element element0 = document0.doClone(document0);
      Element element1 = document0.appendTo(element0);
      element1.getElementsContainingText("-a");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("<^@g~w");
      Element.preserveWhitespace(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = new Document(">m](\t#hOsWId-_y");
      Comment comment0 = new Comment(">m](\t#hOsWId-_y");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      document0.appendChild(xmlDeclaration0);
      document0.getElementsContainingOwnText((String) null);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Document.createShell("TT7ZluH!Cmv<jq>");
      Element element0 = document0.appendText("TT7ZluH!Cmv<jq>");
      element0.prepend("#V3I,^");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Document.createShell("TT7ZluH!Cmv<jq>");
      Element element0 = document0.appendText("TT7ZluH!Cmv<jq>");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag naVe mu|t noN be empty.", "Tag naVe mu|t noN be empty.");
      document0.appendElement("br");
      document0.getElementsContainingText("br");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("<!doctype", "cx0x4/qw\tf`rjx?");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Document.createShell("html");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      Tag tag0 = Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "bGgNC@lbhD(t,Yk", attributes0);
      formElement0.setParentNode(document0);
      formElement0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = new Document("#root");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      Element element1 = element0.previousElementSibling();
      element1.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      Element element0 = document0.doClone(document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("KA", "KA");
      Element element0 = document0.appendElement("KA");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Document.createShell("html");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = new Document(":containsOwn(%s)");
      document0.normalise();
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Document.createShell("j'<}XG");
      document0.nextElementSibling();
      assertEquals("j'<}XG", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("org.jsoup.select.Evaluator$ContainsText", false);
      Element element0 = document0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("h", parseSettings0);
      Element element0 = new Element(tag0, "section");
      element0.siblingElements();
      assertEquals("section", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{LxB\"mRy`a]Ri6", "org.jsoup.nodes.Element");
      Element element0 = document0.head();
      element0.before("nth-last-of-type");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(3)", string0);
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{LxB\"mRy`a]Ri6", "org.jsoup.nodes.Element");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
      assertEquals("html > head", string0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ka", "ka");
      Element element0 = document0.appendTo(document0);
      String string0 = element0.cssSelector();
      assertEquals("ka", element0.baseUri());
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parse("Tag name must not be empty.", "Tag name must not be empty.");
      document0.toggleClass("Tag name must not be empty.");
      document0.cssSelector();
      assertEquals("Tag name must not be empty.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = new Document("j'<}[cXG");
      Node[] nodeArray0 = new Node[8];
      // Undeclared exception!
      try { 
        document0.insertChildren(1606, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Document.createShell("");
      List<Node> list0 = document0.childNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren(6, (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("]vAS`yo^7FDTv9", "]vAS`yo^7FDTv9");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-973), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bND@lbhD(t,Yk", "bND@lbhD(t,Yk");
      LinkedList<TextNode> linkedList0 = new LinkedList<TextNode>();
      Element element0 = document0.insertChildren(1, (Collection<? extends Node>) linkedList0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("bND@lbhD(t,Yk", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Document.createShell("");
      DataNode dataNode0 = new DataNode("");
      document0.appendChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parse("UD28L<=0", "UD28L<=0");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("UD28L<=0", document0.baseUri());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = new Document("Z%j:[ >G");
      Element element0 = document0.prependText("CUz-");
      List<TextNode> list0 = element0.textNodes();
      assertEquals("Z%j:[ >G", element0.baseUri());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parse("'a", "'a");
      Element element0 = document0.doClone(document0);
      element0.before("kygY-9P[Elz");
      element0.previousElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertEquals("'a", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ka", "ka");
      Element element0 = document0.selectFirst("body");
      assertEquals("ka", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-`", "-`");
      Elements elements0 = document0.getElementsMatchingText("-`");
      assertEquals("-`", document0.baseUri());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Document.createShell("V0");
      // Undeclared exception!
      try { 
        document0.is("5&Qj%n^vyJEDQ)}");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '5&Qj%n^vyJEDQ)}': unexpected token at '&Qj%n^vyJEDQ)}'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Document.createShell("2H@}tKBDkau&");
      document0.getAllElements();
      assertEquals("2H@}tKBDkau&", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ka", "ka");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parse("'a", "'a");
      // Undeclared exception!
      try { 
        document0.before("kygY-9P[Elz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Element element0 = new Element("AH^l^>-r$#>M");
      Elements elements0 = element0.getElementsByAttribute("LDV+<T|/\"");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ":nth-child(%d)");
      document0.getElementsByAttributeValueNot(":nth-child(%d)", ":nth-child(%d)");
      assertEquals(":nth-child(%d)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Document.createShell("Tag ame must not be empty.");
      document0.appendTo(document0);
      document0.siblingElements();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "body");
      Element element0 = document0.shallowClone();
      assertEquals("body", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = new Document(">m](\t#hOsWId-_y");
      document0.doSetBaseUri("          ");
      assertEquals("          ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ka", "ka");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parse("", "muted");
      document0.getElementsByAttributeValueContaining("k:2\"~=R=!L9VP", "muted");
      assertEquals("muted", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Element element0 = new Element("U28L<9iU0");
      // Undeclared exception!
      try { 
        element0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      document0.getElementsByAttributeValueMatching("html", "html");
      assertEquals(1, document0.childNodeSize());
      assertEquals("html", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-a", "-a");
      // Undeclared exception!
      try { 
        document0.wrap("Unexpected token [%s] when in state [%s]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("U28L<9iU0", "A2}$2/&\"C+");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      assertEquals(3, elements0.size());
      assertEquals("A2}$2/&\"C+", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("t%g nae must not be empty.", "t%g nae must not be empty.");
      document0.getElementsByAttributeStarting("t%g nae must not be empty.");
      assertEquals("t%g nae must not be empty.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("html", "html");
      document0.prependElement("html");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Elements elements0 = document0.getElementsByIndexLessThan(710);
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-a", "-a");
      // Undeclared exception!
      try { 
        document0.after("#root");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parse("", "muted");
      document0.getElementsMatchingOwnText("");
      assertEquals("muted", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataEndTagName");
      document0.select("ScriptDataEndTagName");
      assertEquals("ScriptDataEndTagName", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Document.createShell("acronym");
      document0.getElementsByAttributeValueStarting("acronym", "acronym");
      assertEquals("acronym", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parse("", "muted");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("~j'", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parse("ka", "ka");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "textarea");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parse("UD28L<=0", "UD28L<=0");
      document0.wholeText();
      assertEquals("UD28L<=0", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("html", "html");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Element element0 = new Element("AH^l^>-r$#>M");
      Elements elements0 = element0.getElementsByAttributeValueEnding("AH^l^>-r$#>M", "NS,b81GMwIe8{!");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("-tU28i<9iU0", "-tU28i<9iU0");
      document0.title("-tU28i<9iU0");
      String string0 = document0.text();
      assertEquals(1, document0.childNodeSize());
      assertEquals("-tU28i<9iU0 -tU28i<9iU0", string0);
      assertEquals("-tU28i<9iU0", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataEndTagName");
      Element element0 = document0.tagName("ScriptDataEndTagName");
      element0.select("ScriptDataEndTagName");
      assertEquals(1, element0.childNodeSize());
      assertEquals("ScriptDataEndTagName", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("KA", "KA");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("KA", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Document.createShell("Tag name musc not b< empty.");
      Element element0 = document0.addClass("Tag name musc not b< empty.");
      boolean boolean0 = element0.hasClass("Tag name musc not b< empty.");
      assertEquals("Tag name musc not b< empty.", element0.baseUri());
      assertFalse(boolean0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      document0.nextElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parse("", "muted");
      document0.getElementById("body");
  }
}
