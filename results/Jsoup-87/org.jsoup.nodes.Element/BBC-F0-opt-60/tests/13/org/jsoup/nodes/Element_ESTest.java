/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 15:54:38 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.appendElement("textarea");
      Element element1 = element0.before((Node) document0);
      element1.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")cOWVyIk'OZ", ")cOWVyIk'OZ");
      Tag tag0 = Tag.valueOf("T");
      Element element0 = new Element(tag0, "T");
      document0.parentNode = (Node) element0;
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")cOWVyIk'OZ", ")cOWVyIk'OZ");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("ul", parseSettings0);
      Element element0 = new Element(tag0, "ul");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("ul");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0);
      Document document0 = Parser.parseBodyFragment(",s", "ipxe,c$a&}sifna");
      Charset charset0 = document0.charset();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charset0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlTail(outputStreamWriter0, 8222, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/nbtw5V_,", "textarea");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("Q)A!II7vJgp/H'ux7^%", "w-yF@19dkGP:N8G");
      document0.wrap("selected");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parse("Oyw9XMfosOtQ3+bo", "Oyw9XMfosOtQ3+bo");
      Element element0 = document0.head();
      element0.wrap("]#ZlGD#3($'Hgbh7yNv");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("kFJdOD/eKd7", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "kFJdOD/eKd7", (Attributes) null);
      formElement0.wholeText();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = new Document("#");
      document0.setSiblingIndex((-973));
      document0.val("#");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.val((String) null);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000073");
      document0.val("r<<S#s#Wb");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("checked");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("checked");
      Element element0 = new Element(tag0, "textarea", attributes0);
      Element element1 = element0.val("textarea");
      element1.val();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Document.createShell(";eV8x0![T^oI2Z+B>^");
      Element element0 = document0.appendElement(";eV8x0![T^oI2Z+B>^");
      element0.toggleClass("<;ev8x0![t^oi2z+b>^></;ev8x0![t^oi2z+b>^>");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textanke", "textanke");
      document0.setSiblingIndex((-3970));
      document0.toggleClass("textanke");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$FirstFinder", "org.jsoup.select.Collector$FirstFinder");
      Element element0 = document0.head();
      element0.toggleClass("checked");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.setSiblingIndex((-678));
      document0.text("");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$Firs<Finder", "org.jsoup.select.Collector$Firs<Finder");
      Element element0 = document0.body();
      element0.text("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Document.createShell("#rot");
      Element element0 = document0.tagName("S~");
      element0.parentNode = (Node) document0;
      document0.text("#rot");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")cOWVyIk'OZ", ")cOWVyIk'OZ");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse("hqyu", "hqyu");
      Element element0 = document0.appendElement("textarea");
      element0.tagName("Unexpected token type: ");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Element element0 = new Element("br");
      element0.tagName("Yb~-|eeKY");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = new Document("SqmY1q`y|O\"V*[1o'");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "+a'9aVQ.`-ft-#1y", attributes0);
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.appendElement("textarea");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("acOWVyIk'OZ", "efva(U|USI9Z\"9hUeHE");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Insert position out of bounds.");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "", attributes0);
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("ul", parseSettings0);
      Element element0 = new Element(tag0, "ul");
      element0.selectFirst(",s");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("osv!,h4{kpq]", "osv!,h4{kpq]");
      document0.appendElement("3");
      document0.selectFirst("3");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parse("hqyu", "hqyu");
      document0.appendElement("hqyu");
      document0.select("hqyu");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.head();
      element0.removeClass("textarea");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.appendElement("textarea");
      element0.removeClass("textarea");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parse("Oyw9XMfosOtQ3+bo", "Oyw9XMfosOtQ3+bo");
      document0.removeClass("textarea");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.appendElement("textarea");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parse("hqyu", "hqyu");
      Element element0 = document0.appendElement("textarea");
      Element.preserveWhitespace(element0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("VFgK`.bC#GH5/2f", "}&}*Z/]wRWa%$O/+'_s");
      document0.appendChild(document0);
      document0.prependText("li");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$FirstFinder", "org.jsoup.select.Collector$FirstFinder");
      Element element0 = document0.tagName("body");
      element0.prependText("<q 9* h");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = new Document("body");
      document0.prependElement("body");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a", "a");
      Element element0 = document0.appendElement("hr");
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a", "a");
      document0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      element0.prepend("org.jsoup.nodes.Entities$EscapeMode");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      Element element0 = new Element(tag0, "PhH%D^+f` 4rr,dU4[");
      element0.prepend("<dP%-Xs{");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000073", "java.lang.string@0000000073");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7L`", "g(kLj+");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("osv!,h4{epq]", "osv!,h4{epq]");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("s+", ")cOWVyIk'OZ");
      Element element0 = document0.appendElement("p[AHdYE.2i0'O:7Z?");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = new Document("heaer");
      document0.parentNode = (Node) document0;
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendText("n<L>+");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.appendElement("textaNke");
      element0.before((Node) document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$Firs<Finder", "org.jsoup.select.Collector$Firs<Finder");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("acOWVyIkT'OZ", "acOWVyIkT'OZ");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Tag tag0 = Tag.valueOf(";yGYUo!#3giT");
      CDataNode cDataNode0 = new CDataNode("Comment");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ";yGYUo!#3giT", attributes0);
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      pseudoTextElement0.is((Evaluator) evaluator_AllElements0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Tag tag0 = Tag.valueOf("\"y3");
      CDataNode cDataNode0 = new CDataNode("\"y3");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "}%WY9", attributes0);
      Evaluator.Class evaluator_Class0 = new Evaluator.Class(".");
      formElement0.is((Evaluator) evaluator_Class0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Element element0 = new Element("VJup");
      element0.is("VJup");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = new Document("#root");
      document0.is("#root");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Document.createShell("");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.appendElement("textarea");
      element0.before((Node) document0);
      Elements elements0 = element0.nextElementSiblings();
      document0.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parse("hqyu", "hqyu");
      Element element0 = document0.appendElement("hqyu");
      element0.html("hqyu");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parse("osv!,h4{kpq]", "osv!,h4{kpq]");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Element element0 = new Element("VJup");
      element0.html((CharArrayWriter) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Element element0 = document0.head();
      element0.html();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Document.createShell("#rot");
      document0.getElementsByAttributeValueStarting("S~", "s*\"L7");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Document.createShell(";eV8x0![T^oI2Z+B>^");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("vj", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "!a", (Attributes) null);
      Pattern pattern0 = Pattern.compile("");
      formElement0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("body", "head");
      document0.getElementsMatchingText(" ");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = new Document("#root");
      document0.html("#root");
      document0.getElementsMatchingText("#root");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parse("q1", "osv!,h4{kpq]");
      Pattern pattern0 = Pattern.compile("q1", 57);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a", "a");
      document0.getElementsMatchingOwnText("a");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parse("hqyu", "hqyu");
      document0.getElementsContainingText("hqyu");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$FirstFinder", "org.jsoup.select.Collector$FirstFinder");
      document0.getElementsContainingOwnText("");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.getElementsByTag("Y'~%R!");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.appendElement("textaNke");
      element0.getElementsByTag("textaNke");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parse("Gr", "Gr");
      Element element0 = document0.appendElement("Gr");
      element0.getElementsByIndexLessThan(4);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("qea1Q", "org.jsoup.nodes.Element$1");
      document0.getElementsByIndexGreaterThan((-1));
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell("Id05\"OX3fY@T=t>");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$Firs<Finder", "org.jsoup.select.Collector$Firs<Finder");
      Element element0 = document0.toggleClass("org.jsoup.select.Collector$Firs<Finder");
      document0.toggleClass("org.jsoup.select.Collector$Firs<Finder");
      element0.getElementsByClass("org.jsoup.select.Collector$Firs<Finder");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Tag tag0 = Tag.valueOf("small");
      CDataNode cDataNode0 = new CDataNode("small");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("]", "]");
      FormElement formElement0 = new FormElement(tag0, "small", attributes1);
      formElement0.getElementsByAttributeValueStarting("]", "]");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("osvg,4kpq]", " ");
      document0.getElementsByAttributeValueNot(" ", " ");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.getElementsByAttributeValueContaining("textarea", "osv!,h4{kpq]");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ag name mut not bn emtH.");
      CDataNode cDataNode0 = new CDataNode("class");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("=h~},,5h\".iw", "rr+O4U12u7e");
      Element element0 = new Element(tag0, "#", attributes1);
      element0.getElementsByAttributeStarting("=h~},,5h\".iw");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Document.createShell("textanke");
      document0.attr("textanke", "replacementStr");
      document0.getElementsByAttribute("textanke");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.appendElement("textaNke");
      element0.before((Node) document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      document0.childNodes = (List<Node>) linkedList0;
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("osv!,h4{kpq]", "osv!,h4{kpq]");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", " > ");
      Element element0 = document0.body();
      Locale locale0 = Locale.ITALIAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Element element1 = element0.classNames(set0);
      element1.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element$1");
      element0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("rq;u", "rq;u");
      Element element0 = document0.appendElement("rq;u");
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("osv!,h4{kpq]", "osv!,h4{kpq]");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("osv!,h4{kpq]", "osv!,h4{kpq]");
      Element element0 = document0.appendElement("Y_");
      Set<String> set0 = document0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parse("hq.yu", "hq.yu");
      Element element0 = document0.head();
      Set<String> set0 = element0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$FirstFinder", "org.jsoup.select.Collector$FirstFinder");
      document0.toggleClass("textarea");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = new Document("");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(" > ", " > ");
      Element element0 = document0.createElement(" > ");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.prependText("");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = new Document("#");
      Element element0 = document0.appendElement("textaNke");
      Element element1 = element0.val("#");
      element0.before((Node) element1);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("textaNke");
      element0.before("");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Elements", "org.jsoup.select.Elements");
      Element element0 = document0.body();
      element0.before("sZ[{");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#3jibNP", "#3jibNP");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s\"}>7WZ]+\"bzk?hr^7", "");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = new Document("Could not parse nth-index '%s': unexpected format");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = new Document("KDA!X54__Q|;?!rm~");
      Element element0 = document0.val("html");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", " > ");
      Element element0 = document0.body();
      element0.attr("ScriptDataEscapedLessthanSign", false);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("osVG,4kPq]", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "value", attributes0);
      Element element1 = element0.appendTo(element0);
      element1.attr("osVG,4kPq]", true);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("osVG,4kPq]", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "value", attributes0);
      element0.attr("osVG,4kPq]", true);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")cOWVyIk'OZ", ")cOWVyIk'OZ");
      Element element0 = document0.appendElement(")cOWVyIk'OZ");
      element0.siblingIndex = (-203);
      element0.attr("*=", ")cOWVyIk'OZ");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", " > ");
      Element element0 = document0.body();
      element0.attr("time", "time");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$FirstFinder", "org.jsoup.select.Collector$FirstFinder");
      Element element0 = document0.head();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")cOWVyIk'OZ", ")cOWVyIk'OZ");
      document0.appendTo(document0);
      document0.appendText("extended");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qv+S]Z;E\"w/&[", "P@IsJ");
      document0.setSiblingIndex((-295));
      document0.appendText("qv+S]Z;E\"w/&[");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "O!nq5i");
      Element element0 = document0.head();
      element0.appendText("RCDATAEndTagOpen");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qv+S]Z;E\"w/&[", "P@IsJ");
      document0.setSiblingIndex((-295));
      Comment comment0 = new Comment("qv+S]Z;E\"w/&[");
      document0.appendChild(comment0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.appendElement("hr");
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textanke", "textanke");
      document0.setSiblingIndex((-3970));
      document0.append("&#x");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      Element element0 = document0.head();
      element0.append("BM>zB7lJ T#");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":1=1-\"FvU1!", ":1=1-\"FvU1!");
      Element element0 = document0.appendElement("textaNke");
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":ImmediateParent%s", ":ImmediateParent%s");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parse("hqyu", "hqyu");
      Element element0 = document0.appendElement("textarea");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("acOWVyIk'OZ", "acOWVyIk'OZ");
      document0.parentNode = (Node) document0;
      DataNode dataNode0 = new DataNode("n");
      document0.after((Node) dataNode0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = new Document("S");
      Element element0 = document0.appendElement("VJ");
      element0.after("org.jsoup.select.Selector$SelectorParseException");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r", "r");
      Element element0 = document0.appendElement("hr");
      element0.after(":nth-child(%d)");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("osv!,h4{kpq]", "osv!,h4{kpq]");
      Element element0 = document0.appendElement("Y_");
      Element element1 = element0.prepend("Y_");
      element1.after("osv!,h4{kpq]");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parse("hqyu", "hqyu");
      Element element0 = document0.appendElement("textarea");
      element0.addClass("textarea");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parse("#", ":nth-child(%d)");
      document0.setSiblingIndex((-2531));
      document0.addClass("org.jsoup.select.Evaluator");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.appendElement("textaNke");
      Element element1 = element0.before((Node) document0);
      // Undeclared exception!
      element1.wrap("_~=[9Vc/d");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Document.createShell("#rot");
      Element element0 = document0.tagName("S~");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.val("samp");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = new Document("XqL}X3a{C%x0X");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Document.createShell("#rot");
      Element element0 = document0.tagName("S~");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      element0.tagName("#rot");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")cOWVyIk'OZ", ")cOWVyIk'OZ");
      // Undeclared exception!
      try { 
        document0.tagName(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":", "Z0 =j58Xq18)\"VPh+\\");
      Element element0 = new Element("<;;*az}k|mc|jgf,:z");
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.selectFirst("jPKaRr0'6}T");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'jPKaRr0'6}T': unexpected token at ''6}T'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parse("heaer", "heaer");
      // Undeclared exception!
      try { 
        document0.selectFirst("F5[kcd%J");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'J'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "#");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("E@?Ghv4bcu}9)pO}", parseSettings0);
      Element element0 = new Element(tag0, "E@?Ghv4bcu}9)pO}");
      // Undeclared exception!
      try { 
        element0.select("E@?Ghv4bcu}9)pO}");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'E@?Ghv4bcu}9)pO}': unexpected token at '@?Ghv4bcu}9)pO}'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("exHae", "exHae");
      Element element0 = document0.body();
      element0.siblingIndex = (-2795);
      // Undeclared exception!
      try { 
        element0.select("utf");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000073", "java.lang.string@0000000073");
      TextNode textNode0 = TextNode.createFromEncoded(" \"");
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$FirstFinder", "org.jsoup.select.Collector$FirstFinder");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")cOWVyIk'OZ", ")cOWVyIk'OZ");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.prependElement("~1");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = new Document("#root");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Gr", "Gr");
      DocumentType documentType0 = new DocumentType("lt;", "s+", "lt;", "+{@YR,ndbW7'-.9", "s+");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.prependChild(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = new Document("&RCY tv");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.prependChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = new Document(")cOWIk'OZ");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.prepend(")cOWIk'OZ");
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$Firs<Finder", "org.jsoup.select.Collector$Firs<Finder");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parse("^8", "^8");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("java.lang.string@0000000044", "T}#:G?syXf&Mw+", false);
      Element element0 = document0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element0.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell("acOWVyI;'ZZ");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1166);
      // Undeclared exception!
      document0.outerHtmlTail(stringWriter0, 23, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parse("<;;*az}k|mc|jgf,:z", "<;;*az}k|mc|jgf,:z");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "Gr");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 1858, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("osv!,h4{kpq]", "osv!,h4{kpq]");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 8211, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")cOWVyIk'OZ", ")cOWVyIk'OZ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, (-4251), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Z|jj*uI_<9j", "`");
      StringBuilder stringBuilder0 = new StringBuilder("`");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuilder0, (-225), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parse("Gr", "Gr");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, 2624, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8]Ud[&MNBQPw4d1|i", "8]Ud[&MNBQPw4d1|i");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "8]Ud[&MNBQPw4d1|i");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(834);
      // Undeclared exception!
      document0.outerHtmlHead(stringBuilder0, 834, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parse("osv!,h4{kpq]", "osv!,h4{kpq]");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, (-326), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("|b\"2vwf", parseSettings0);
      Element element0 = new Element(tag0, "fdlx':<01_e");
      MockFile mockFile0 = new MockFile("|b\"2vwf");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(mockPrintWriter0, (-2054165654), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000073", "java.lang.string@0000000073");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("java.lang.string@0000000073 t3_-", "java.lang.string@0000000073 t3_-", false);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000073", "java.lang.string@0000000073");
      DocumentType documentType0 = new DocumentType("hj<r@in)wzho{L75", "aY", "open", "hj<r@in)wzho{L75", "aY");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = new Document("KDA!X5g__Q|;A!r<m~");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textank", "textank");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.is((Evaluator) null);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parse(">", ">");
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute((String) null);
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_Attribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parse("osv!,h4{kpq]", "osv!,h4{kpq]");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.is("org.jsoup.parser.TokenQueue");
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Document.createShell("KDA!X54__Q|;?!rm~");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$FirstFinder", "org.jsoup.select.Collector$FirstFinder");
      Elements elements0 = document0.children();
      // Undeclared exception!
      try { 
        document0.insertChildren(1, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")cOWVyIk'OZ", ")cOWVyIk'OZ");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.html("M`@y");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000038");
      DataNode dataNode0 = new DataNode("!dF'l,M8qJM");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.html("!dF'l,M8qJM");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_~=[9Vc/d");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.prepareEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charsetEncoder0);
      outputStreamWriter0.close();
      // Undeclared exception!
      try { 
        document0.html(outputStreamWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Document.createShell("#rot");
      Element element0 = document0.tagName("S~");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      element0.html((CharArrayWriter) null);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      char[] charArray0 = new char[2];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("body", "head");
      // Undeclared exception!
      try { 
        document0.html((OutputStreamWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Element element0 = document0.tagName("}S~");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      element0.html();
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000073", "java.lang.string@0000000073");
      TextNode textNode0 = TextNode.createFromEncoded("");
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")cOWVyIk'OZ", ")cOWVyIk'OZ");
      Element element0 = document0.appendElement(")cOWVyIk'OZ");
      element0.siblingIndex = (-203);
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("osv!,h4{kpq]", "osv!,h4{kpq]");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parse("Gr", "Gr");
      Element element0 = document0.appendElement("Gr");
      element0.setSiblingIndex((-1));
      // Undeclared exception!
      document0.getElementsMatchingOwnText("Gr");
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("VS8)=nf|W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: VS8)=nf|W
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Document.createShell("#");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("#", "textaNke", false);
      document0.setParentNode(xmlDeclaration0);
      document0.text("#");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("textaNke");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000073", "java.lang.string@0000000073");
      Element element0 = document0.appendElement("Gr");
      element0.setSiblingIndex((-1906));
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("Gr");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000073", "java.lang.string@0000000073");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("Gr");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "title");
      CDataNode cDataNode0 = new CDataNode("title");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("br");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")ae", ")ae");
      document0.siblingIndex = (-682);
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingText(")ae");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan(58);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Document.createShell("pu}$7>Kb#4xM))");
      DataNode dataNode0 = new DataNode("Q+-H", "br");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals((-1842001214));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("3*vu", "3*vu");
      // Undeclared exception!
      try { 
        document0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cJ+,_.;+<Dyzfth%MdL", "cJ+,_.;+<Dyzfth%MdL");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("$aZ1_(LWJ>2qYxt", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("S", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000073");
      document0.attr("java.lang.string@0000000073", "java.lang.string@0000000073");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("java.lang.string@0000000073", (Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$AttributeWithValueMatching", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parse("hq.yu", "hq.yu");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("<html>\n <head></head>\n <body>\n  hq.yu\n </body>\n</html>\n<textarea></textarea>", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = new Document("8]Ud[&MNBQPw4d1|i");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding((String) null, ".");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000073", "java.lang.string@0000000073");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("java.lang.string@0000000073", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.appendElement("br");
      element1.setSiblingIndex((-1010136971));
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeValue("br", "br");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$FirstFinder", "org.jsoup.select.Collector$FirstFinder");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = new Document("95:Pzw&Jf~8Pf+(X;");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = new Document("KDA!X54__Q|;?!rm~");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Document.createShell("gt");
      CDataNode cDataNode0 = new CDataNode("gt");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = new Document("i6`@mC9");
      Comment comment0 = new Comment("6FaE}:@J?..*4x=d$");
      document0.parentNode = (Node) comment0;
      // Undeclared exception!
      try { 
        document0.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E!0G clK2\"$Ib/`U", "E!0G clK2\"$Ib/`U");
      Element element0 = document0.head();
      element0.addClass("yKn/0A.");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'head.java.lang.String@0000000088': unexpected token at '@0000000088'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parse("osv!,h4{kpq]", "4Dj6");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textanke", "textanke");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.child(8);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = new Document("samp");
      // Undeclared exception!
      try { 
        document0.child((-1625949436));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Element element0 = new Element(">{m;=4_*Fqpg,92f");
      DataNode dataNode0 = new DataNode(">{m;=4_*Fqpg,92f", "itemscope");
      dataNode0.reparentChild(element0);
      // Undeclared exception!
      try { 
        element0.before((Node) dataNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.appendElement("textaNke");
      element0.siblingIndex = (-2);
      // Undeclared exception!
      try { 
        element0.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: -2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.before("html");
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")cOWVyIk'OZ", ")cOWVyIk'OZ");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.attr(")cOWVyIk'OZ", "nn/PjU-OA^okmn1oQ<x");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$Firs<Finder", "org.jsoup.select.Collector$Firs<Finder");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "I+5>BA|(p-q;c{od![b");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000073", "java.lang.string@0000000073");
      DocumentType documentType0 = new DocumentType("hj<r@in)wzho{L75", "aY", "open", "hj<r@in)wzho{L75", "aY");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("VFgK`.bC#GH5/2f", "}&}*Z/]wRWa%$O/+'_s");
      Element element0 = document0.appendChild(document0);
      Element element1 = element0.empty();
      // Undeclared exception!
      try { 
        element1.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cJ+,_.;+<Dyzfth%MdL", "cJ+,_.;+<Dyzfth%MdL");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Document.createShell("9@g=Jd~eQtx");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")cOWIk'OZ", ")cOWIk'OZ");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.appendElement("R~pT@+kbE9#M");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Element element0 = new Element("b");
      List<Node> list0 = element0.childNodes();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.appendElement("b");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "#");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.appendElement("#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parse("osv!,h4{kpq]", "4Dj6");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.appendElement("textaNke");
      Element element1 = element0.before((Node) document0);
      // Undeclared exception!
      element1.append("b\"RX TlG)n=Bj yu#|I");
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.strng@000000073", "java.lang.strng@000000073");
      TextNode textNode0 = TextNode.createFromEncoded("java.lang.strng@000000073", "&8-m");
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.append("java.lang.strng@000000073");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      try { 
        element0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Document.createShell("#rot");
      Document document1 = (Document)document0.tagName("S~");
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      document1.after("+eueno,\"v]\"f@b");
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Collector$FirstFinder", "org.jsoup.select.Collector$FirstFinder");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Tag tag0 = Tag.valueOf("KDA!X5g__Q|;A!r<m~");
      CDataNode cDataNode0 = new CDataNode("KDA!X5g__Q|;A!r<m~");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("_~=[9Vc/d");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.prepareEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charsetEncoder0);
      document0.html(outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parse("acOWVyIkT'OZ", "acOWVyIkT'OZ");
      Element element0 = document0.toggleClass("");
      document0.toggleClass("6a.djl-'5GF= ");
      element0.hasClass("h?~");
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsou-.select.Elements", "org.jsou-.select.Elements");
      document0.hasClass("prompt");
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$FirstFinder", "org.jsoup.select.Collector$FirstFinder");
      Element element0 = document0.toggleClass("org.jsoup.select.Collector$FirstFinder");
      Set<String> set0 = element0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.prependText("textarea");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<html>\n <head></head>\n <body>\n  acowvyi;'zz\n </body>\n</html>", "-r6NQB");
      Element element0 = document0.body();
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Document.createShell("KDA!X54__Q|;?!rm~");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("UNm~`*`5", "UNm~`*`5");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse("hqyu", "hqyu");
      Element element0 = document0.appendElement("textarea");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$FirstFinder", "org.jsoup.select.Collector$FirstFinder");
      Element element0 = document0.head();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Elements", "org.jsoup.select.Elements");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parse("wP#}Qed;zA", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.appendElement("textaNke");
      element0.before((Node) document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textanke", "textanke");
      Element element0 = document0.head();
      element0.html("m1tMI#~wd2p");
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = new Document("#root");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("osv!,h4{kpq]", "osv!,h4{kpq]");
      Pattern pattern0 = Pattern.compile("q1", 57);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = new Document("Could not parse nth-index '%s': unexpected format");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("acOWVyIkT'OZ", "acOWVyIkT'OZ");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsou-.select.Elements", "org.jsou-.select.Elements");
      Element element0 = document0.empty();
      // Undeclared exception!
      try { 
        element0.text("f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000073");
      document0.getElementsByAttributeValueMatching("java.lang.string@0000000073", (Pattern) null);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("exHae", "exHae");
      document0.select("utf");
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Element element0 = new Element("br");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":1=1-\"FvU1!", ":1=1-\"FvU1!");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("osv!,h4{kpq]", "osv!,h4{kpq]");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Document document1 = (Document)document0.classNames((Set<String>) linkedHashSet0);
      document1.clone();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Element element0 = new Element("menuitem");
      StringBuilder stringBuilder0 = new StringBuilder(765);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      element0.outerHtmlHead(stringBuilder0, 765, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#3jibNP", "#3jibNP");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "#3jibNP");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Element element0 = new Element("br");
      Document document0 = new Document("Nh*!fBZ2idd8*OmhT0O");
      Element element1 = document0.createElement("br");
      element0.prependChild(element1);
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = new Document("");
      document0.appendElement("_-H/F3F$1WA[O");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.appendElement("textarea");
      // Undeclared exception!
      try { 
        element0.val((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.appendElement("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000073", "java.lang.string@0000000073");
      document0.addClass("java.lang.string@0000000073");
      Element element0 = document0.toggleClass("java.lang.string@0000000073");
      element0.toggleClass("java.lang.string@0000000073");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("osvg,4kpq]", " ");
      document0.addClass("org.jsoup.select.evaluator$attributewithvalueending");
      Element element0 = document0.toggleClass("id");
      element0.hasClass("id");
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parse("acOWVyIkT'OZ", "acOWVyIkT'OZ");
      document0.toggleClass("");
      document0.toggleClass("6a.djl-'5GF= ");
      document0.getElementsByClass("Fa=");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000073", "R X`#8|%d_2RX");
      document0.getElementsByAttributeValueNot("java.lang.string@0000000073", "java.lang.string@0000000073");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.addClass("</");
      document0.toggleClass("required");
      document0.hasClass("java.lang.string@0000000073");
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$Firs<Finder", "org.jsoup.select.Collector$Firs<Finder");
      Element element0 = document0.toggleClass("org.jsoup.select.Collector$Firs<Finder");
      element0.toggleClass(" g|7X8e~ZKEGjs:8");
      document0.hasClass(":n[j~`]/q!WLdvf)ZXp*");
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000073");
      document0.addClass("java.lang.string@0000000073");
      document0.toggleClass("Insert position out of bounds.");
      document0.hasClass("eE");
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000073", "java.lang.string@0000000073");
      Element element0 = document0.addClass("java.lang.string@0000000073");
      element0.hasClass("java.lang.string@0000000073");
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$FirstFinder", "org.jsoup.select.Collector$FirstFinder");
      Element element0 = document0.toggleClass("textarea");
      element0.hasClass("org.jsoup.select.Collector$FirstFinder");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("P;6hTpw@Pg", "P;6hTpw@Pg");
      DataNode dataNode0 = new DataNode("P;6hTpw@Pg");
      Element element0 = document0.prependChild(dataNode0);
      element0.data();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parse("Isd", "Oen.aP:QF.S<dBcK`\"\"");
      DocumentType documentType0 = new DocumentType("Oen.aP:QF.S<dBcK`\"\"", "z*(D6@AHWIXt]=", "eg Gh0=K>WB)I");
      document0.prependChild(documentType0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")cOWVyIk'OZ", ")cOWVyIk'OZ");
      document0.parentNode = (Node) document0;
      Element.preserveWhitespace(document0.parentNode);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("#root");
      Element.preserveWhitespace(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.appendElement("br");
      document0.appendElement("br");
      document0.getElementsMatchingOwnText("Y|6X>i>$Q}\"Dn8tg");
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parse("AfterAfterBody", "AfterAfterBody");
      document0.title("AfterAfterBody");
      document0.getElementsMatchingOwnText("tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parse("AfterAfterBody", "AfterAfterBody");
      DataNode dataNode0 = new DataNode("AfterAfterBody", "K@eMpD,");
      document0.appendChild(dataNode0);
      document0.getElementsMatchingOwnText("tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$FirstFinder", "org.jsoup.select.Collector$FirstFinder");
      document0.appendText(".");
      document0.getElementsContainingText(" qE");
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Pattern syntax error: ", "Pattern syntax error: ");
      document0.appendText("Pattern syntax error: ");
      document0.getElementsContainingText("#");
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.appendElement("br");
      document0.getElementsContainingText("org.jsoup.helper.w3cdom$w3cbuilder");
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r", "r");
      document0.getElementById("hr");
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = new Document("heaer");
      document0.parentNode = (Node) document0;
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = new Document("S");
      document0.appendElement("VJ");
      Element element0 = document0.appendElement("Tag name must not be empty.");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Document.createShell("aEs/(.TRRd?a>}$T.F");
      Element element0 = document0.prependElement("br");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = new Document("#");
      Element element0 = document0.appendElement("textaNke");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parse("#", ":nth-child(%d)");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parse("hqyu", "hqyu");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("acOWVyIk'OZ", "efva(U|USI9Z\"9hUeHE");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, elements0.size());
      assertEquals("efva(U|USI9Z\"9hUeHE", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Elements elements0 = document0.siblingElements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.appendElement("textaNke");
      element0.before((Node) document0);
      Elements elements0 = document0.siblingElements();
      assertEquals(2, elements0.size());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parse("AfterAfterBody", "AfterAfterBody");
      Element element0 = document0.body();
      element0.wrap("AfterAfterBody");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(2) > body:nth-child(1)", string0);
      assertEquals("AfterAfterBody", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E!0G clK2\"$Ib/`U", "E!0G clK2\"$Ib/`U");
      document0.addClass("yKn/0A.");
      document0.cssSelector();
      assertEquals("E!0G clK2\"$Ib/`U", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren(54, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(" > ", " > ");
      Node[] nodeArray0 = new Node[6];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1429), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.getElementsMatchingOwnText("org.jsoup.select.collector$firs<finder");
      // Undeclared exception!
      try { 
        document0.insertChildren(34, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$FirstFinder", "org.jsoup.select.Collector$FirstFinder");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      Element element0 = document0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
      assertEquals("org.jsoup.select.Collector$FirstFinder", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = new Document("SqmY1q`y|O\"V*[1o'");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertEquals("SqmY1q`y|O\"V*[1o'", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8]Ud[&MNBQPw4d1|i", "8]Ud[&MNBQPw4d1|i");
      DataNode dataNode0 = new DataNode("8]Ud[&MNBQPw4d1|i");
      document0.appendChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0Cig b[72", "0Cig b[72");
      Element element0 = document0.prependText("osv!,h4{kpq]");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Elements elements0 = document0.getElementsByIndexGreaterThan(58);
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parse("osv!,h4{kpq]", "osv!,h4{kpq]");
      document0.selectFirst("3");
      assertEquals("osv!,h4{kpq]", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8]Ud[&MNBQPw4d1|i", "8]Ud[&MNBQPw4d1|i");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText(")cowvyik'oz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: )cowvyik'oz
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FIdYPg:9;?", "FIdYPg:9;?");
      // Undeclared exception!
      try { 
        document0.is("FIdYPg:9;?");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'FIdYPg:9;?': unexpected token at ':9;?'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parse("hq.yu", "hq.yu");
      document0.getAllElements();
      assertEquals("hq.yu", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Elements", "org.jsoup.select.Elements");
      // Undeclared exception!
      try { 
        document0.before("sZ[{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("#root", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("#root");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "#root", attributes0);
      element0.getElementsByAttribute("hM@H_@E");
      assertEquals("#root", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parse("Oyw9XMfosOtQ3+bo", "Oyw9XMfosOtQ3+bo");
      Element element0 = document0.shallowClone();
      assertEquals("Oyw9XMfosOtQ3+bo", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      document0.doSetBaseUri("or.jsoup.nodes.Element$2");
      assertEquals("or.jsoup.nodes.Element$2", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parse("acOWVyIk'OZ", "acOWVyIk'OZ");
      DataNode dataNode0 = new DataNode("n");
      // Undeclared exception!
      try { 
        document0.after((Node) dataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$FirstFinder", "org.jsoup.select.Collector$FirstFinder");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("D/'^i2B;V", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = new Document("heaer");
      document0.getElementsByAttributeValueMatching("dh\"P9", "java.lang.string@0000000026");
      assertEquals("heaer", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("i9.u<j:6`2p3G>#<!", "AV0o");
      Elements elements0 = document0.getElementsContainingText("br");
      assertEquals(1, document0.childNodeSize());
      assertEquals("AV0o", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Elements elements0 = document0.getElementsByClass("java.lan>.st/ing@0000000073");
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) elements0);
      assertEquals("br", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000073", "java.lang.string@0000000073");
      Elements elements0 = document0.getElementsByAttributeValueEnding("java.lang.string@0000000073", "java.lang.string@0000000073");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = new Document("+=");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = new Document("#root");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("truespeed", "-@ mQOPy70>Couz[N");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: -@ mQOPy70>Couz[N
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Document.createShell("pu}$7>Kb#4xM))");
      Elements elements0 = document0.getElementsByIndexEquals((-1842001214));
      assertEquals("pu}$7>Kb#4xM))", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ag name mut not bn emtH.");
      CDataNode cDataNode0 = new CDataNode("class");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "#", attributes0);
      element0.getElementsByAttributeStarting("=h~},,5h\".iw");
      assertEquals("#", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parse("Gr", "Gr");
      Elements elements0 = document0.getElementsByIndexLessThan(4);
      assertEquals("Gr", document0.baseUri());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r", "r");
      // Undeclared exception!
      try { 
        document0.after(":nth-child(%d)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textanke", "textanke");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("textanke", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Element element0 = new Element("br");
      Elements elements0 = element0.getElementsByAttributeValue("br", "br");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parse("Oyw9XMfosOtQ3+bo", "Oyw9XMfosOtQ3+bo");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "title");
      document0.wholeText();
      assertEquals("title", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Element element0 = new Element("+z<pZ");
      Element element1 = element0.append("+z<pZ");
      List<Node> list0 = Parser.parseFragment("beforeattributevalue", element0, "beforeattributevalue");
      element1.childNodes = list0;
      // Undeclared exception!
      try { 
        element1.html("!");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Elements elements0 = document0.getElementsContainingOwnText("}S~");
      assertEquals("#root", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.dataset();
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.title("br");
      String string0 = document0.html();
      assertEquals("br", document0.baseUri());
      assertEquals("<html>\n <head>\n  <title>br</title>\n </head>\n <body>\n  br\n </body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Document.createShell("#rot");
      Element element0 = document0.tagName("S~");
      element0.parentNode = (Node) document0;
      element0.prependText("S~");
      element0.lastElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertEquals("#rot", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Document.createShell("#rot");
      document0.prependText("S~");
      document0.getElementsContainingText("checked");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textanke", "textanke");
      // Undeclared exception!
      try { 
        document0.child(8);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Elements", "org.jsoup.select.Elements");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.Elements", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      Element element0 = new Element(tag0, "PhH%D^+f` 4rr,dU4[");
      Pattern pattern0 = Pattern.compile(":containsOwn(%s)");
      element0.getElementsMatchingText(pattern0);
      assertEquals("PhH%D^+f` 4rr,dU4[", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parse("AfterAfterBody", "AfterAfterBody");
      // Undeclared exception!
      try { 
        document0.wrap("AfterAfterBody");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Collector$FirstFinder", "org.jsoup.select.Collector$FirstFinder");
      Elements elements0 = document0.nextElementSiblings();
      // Undeclared exception!
      try { 
        document0.insertChildren((-3826), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
