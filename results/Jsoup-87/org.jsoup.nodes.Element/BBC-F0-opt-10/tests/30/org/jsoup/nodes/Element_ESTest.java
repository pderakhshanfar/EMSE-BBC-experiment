/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 21:29:31 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Document.createShell("Ft\"-chKl");
      document0.toggleClass("Insert position out of bounds.");
      document0.toggleClass("Insert position out of bounds.");
      document0.hasClass("Ft\"-chKl");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("J(i", "J(i");
      document0.getElementsByAttributeValueMatching("J(i", "RPN-fb2F`b=Wo}\u0000");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Node[] nodeArray0 = new Node[6];
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parse("&#x", "&#x");
      StringBuffer stringBuffer0 = new StringBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(stringBuffer0, 24, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = new Document("\"lO7w&],0U");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parse("=rhHS;*Uk@D|hgIeDA ", "wsSmlq?A");
      document0.doSetBaseUri("e0oBP!z127]vRzY");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("f)R5bJJb9Q^", "f)R5bJJb9Q^");
      Parser parser0 = Parser.xmlParser();
      document0.parser(parser0);
      document0.wrap("f)R5bJJb9Q^");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      Element element0 = document0.head();
      element0.wrap("nth-child");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell("Ft\"-chKl");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parse(">0KX7", ">0KX7");
      Element element0 = document0.head();
      element0.val("E;t@%~qdMY}RAoIpQ{q");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.appendElement(">Ylj1ZmE,n$/g,s/\"]");
      element0.val(">Ylj1ZmE,n$/g,s/\"]");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = new Document("head");
      document0.val("head");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      Element element0 = document0.appendTo(document0);
      element0.toggleClass("`9)y$]'pATJ<0u\"");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      Element element0 = document0.head();
      element0.toggleClass("br");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parse("=rhHS;*Uk@D|hgIeDA ", "wsSmlq?A");
      Element element0 = document0.append("e0oBP!z127]vRzY");
      element0.parentNode = (Node) document0;
      element0.toggleClass("e0oBP!z127]vRzY");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sg>2UJ-HFIpfXIC", "sg>2UJ-HFIpfXIC");
      Element element0 = document0.appendElement("Bn+F:7}f*O`lx`QO#\"");
      element0.text("Bn+F:7}f*O`lx`QO#\"");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("q", "q");
      Element element0 = document0.head();
      element0.text("!4;zXtR");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("HL`J(TT2p}`", "HL`J(TT2p}`");
      Element element0 = document0.appendElement("checkd");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("HL`J(TTp}`", "HL`J(TTp}`");
      Element element0 = document0.appendElement("checked");
      element0.tagName("HL`J(TTp}`");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Element element0 = new Element("P67;t<Br=]g*");
      element0.tagName("D5");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Tag tag0 = Tag.valueOf("h1", (ParseSettings) null);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "2S_SQ<Z33", attributes0);
      pseudoTextElement0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = new Document("\"lO7w&],0U");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("</", "</");
      document0.appendElement(" nE");
      document0.selectFirst(" nE");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "]>.#e\"L,/$B}");
      document0.tagName("textarea");
      document0.selectFirst("textarea");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = new Document("sg>2UJ-HFIpfXIC");
      document0.select("td");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      Element element0 = document0.createElement("ScriptDataEndTagName");
      element0.select("ScriptDataEndTagName");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.body();
      element0.removeClass("*[0N+");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("multiple", "ScriptDataEscapeStartDash");
      Element element0 = document0.appendElement("multiple");
      element0.removeClass("czX~6PMW");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("gh~xnsZ&w0BUvnd9l", "gh~xnsZ&w0BUvnd9l");
      document0.removeClass("O");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parse("grC$)g]n8*Fj0;|O", "grC$)g]n8*Fj0;|O");
      Element element0 = document0.prepend("grC$)g]n8*Fj0;|O");
      document0.appendTo(element0);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.appendElement(">Ylj1ZmE,n$/g,s/\"]");
      Element element1 = element0.previousElementSibling();
      element1.before((Node) document0);
      element1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sg>L2UJ-HFIp3fIC", "sg>L2UJ-HFIp3fIC");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      Element element0 = document0.head();
      element0.prependText("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.appendTo(document0);
      document0.prependText("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.appendElement(">Ylj1ZmE,n$/g,s/\"]");
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.appendElement(">Ylj1ZmE,n$/g,s/\"]");
      Element element1 = element0.previousElementSibling();
      element1.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      Element element0 = document0.body();
      element0.prepend("#root");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      Element element0 = document0.prependElement("P X, aK~+{Lp");
      element0.prepend("18^tn-yi@x");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("8M$`p[#", "");
      Element element0 = document0.createElement("rt");
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = new Document("");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sg>L2UJ-HFIp3fIC", "sg>L2UJ-HFIp3fIC");
      Element element0 = document0.body();
      Element element1 = document0.doClone(element0);
      element1.parents();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("J(i", "J(i");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("multiple", "ScriptDataEscapeStartDash");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.W3CDom", "org.jsoup.helper.W3CDom");
      Document document1 = (Document)document0.appendTo(document0);
      document1.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parse("nt\"-child", "nt\"-child");
      Element element0 = document0.appendElement("}J");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Document.createShell("CF#{)@l/1EBKxj%u]bZ");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = new Document("sg>L2UJ-HFIp3fIC");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      document0.addChildren(nodeArray0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      Element element0 = document0.prependElement("P X, aK~+{Lp");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.appendElement(">Ylj1ZmE,n$/g,s/\"]");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("f)R5bJJb9Q^", "f)R5bJJb9Q^");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parse("title", "title");
      Element element0 = document0.head();
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      element0.is((Evaluator) evaluator_IsFirstChild0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Document.createShell("b[kPXy%BSHG;b4)f");
      document0.is("rxwL");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      Element element0 = document0.head();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      element0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      Elements elements0 = document0.nextElementSiblings();
      Element element0 = document0.appendTo(document0);
      element0.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      element0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parse("", "Tt0f[0");
      Element element0 = document0.body();
      element0.html("");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parse("", "Tt0f[0");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      document0.html("1een-yi@x");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("s+", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("s+");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "s+", attributes0);
      pseudoTextElement0.html((BufferedWriter) null);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = new Document("nt\"-child");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document("");
      document0.getElementsByAttributeValueStarting("textarea", "ri<*A:%Y14M8~R");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("J(i", "J(i");
      document0.prepend(".mGL,B");
      Pattern pattern0 = Pattern.compile(".mGL,B", (-1432352094));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Pattern pattern0 = Pattern.compile(":MgR$A&C&", 60);
      Document document0 = Parser.parseBodyFragmentRelaxed(":MgR$A&C&", ":MgR$A&C&");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = new Document("\"lO7w&],0U");
      document0.getElementsMatchingOwnText("\"lO7w&],0U");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("body", "body");
      document0.getElementsContainingText("body");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsContainingOwnText("");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Document.createShell("b[kPXy%BSHG;b4)f");
      document0.getElementsByTag("rxwL");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Document.createShell("|P:`qH\"~");
      Element element0 = document0.createElement("|P:`qH\"~");
      element0.getElementsByTag("|P:`qH\"~");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = new Document("");
      document0.getElementsByIndexLessThan(902);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Tag tag0 = Tag.valueOf("h1", (ParseSettings) null);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "2S_SQ<Z33", attributes0);
      pseudoTextElement0.getElementsByIndexGreaterThan((-4105));
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.getElementsByIndexEquals(1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Ft\"-chKl", "Ft\"-chKl");
      document0.toggleClass("Ft\"-chKl");
      document0.toggleClass("Ft\"-chKl");
      document0.getElementsByClass("Ft\"-chKl");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = new Document("Object must not be null");
      document0.getElementsByAttributeValueNot("multiple", "        ");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Tag tag0 = Tag.valueOf("LFF0H0:lCm]rOUEpuN+");
      Element element0 = new Element(tag0, "LFF0H0:lCm]rOUEpuN+");
      element0.getElementsByAttributeValueNot("a%&pm#9g_aWBhXd_b9(", "A$!I?~njS");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse("grC$)g]n8*Fj0;|O", "grC$)g]n8*Fj0;|O");
      Element element0 = document0.prepend("grC$)g]n8*Fj0;|O");
      document0.appendTo(element0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("grC$)g]n8*Fj0;|O", "grC$)g]n8*Fj0;|O");
      document0.appendTo(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sg>L2UJ-HFIp3fIC", "sg>L2UJ-HFIp3fIC");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Document.createShell("HH&&YzBm5%v*nyi=");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parse("f)R5bJJb9Q^", "f)R5bJJb9Q^");
      Element element0 = document0.body();
      Locale locale0 = Locale.FRENCH;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = new Document("P'GU)YR?~S");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Element$1");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      document0.toggleClass("nth-child");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = new Document("");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = new Document("24Y)Z`.TM_");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      Element element0 = document0.prepend("nth-child");
      element0.child(0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      Element element0 = document0.head();
      document0.appendTo(element0);
      element0.child(0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Document document1 = (Document)document0.doClone(document0);
      document1.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Element element0 = new Element("G>x\"z5J#~");
      Element element1 = element0.appendElement("[>LqW&:ReLdK");
      element1.before("html");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("body", "textarea");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Element element0 = new Element("missing semicolon");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parse("8M$`p[#", "O");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Element element0 = new Element("nth-child");
      element0.siblingIndex = 6726;
      element0.attr("nth-child", false);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("nth-child", "nth-child");
      Element element0 = document0.head();
      element0.attr("?h*-7t+<> Ek%p.", true);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("title", "title");
      Element element0 = document0.appendElement("title");
      element0.attr("Insert position out of bounds.", "Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.appendElement(">Ylj1ZmE,n$/g,s/\"]");
      element0.attr("`.>J[9kWVZMiztl:0gz", "`.>J[9kWVZMiztl:0gz");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.attr("h_Ej!r48/4ho!!", "org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("w0~M.", "w0~M.");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = new Document("Object must not be null");
      Document document1 = document0.clone();
      document1.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r<!?/.fl8?%??o tzw7", "r<!?/.fl8?%??o tzw7");
      Element element0 = document0.appendElement("r<!?/.fl8?%??o tzw7");
      element0.appendText("q");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parse("grC$)g]n8*Fj0;|O", "grC$)g]n8*Fj0;|O");
      Element element0 = document0.appendElement("head");
      element0.before("gwfs6fm!;");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("njh- nxild", "njh- nxild");
      document0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]>.#e\"L,/$B}", "]>.#e\"L,/$B}");
      Element element0 = document0.head();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("multiple");
      FormElement formElement0 = new FormElement(tag0, "multiple", attributes0);
      formElement0.append("<!doctype");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = new Document("nt\"-child");
      Element element0 = document0.appendElement("br");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("grC$)g]n8*Fj0;|O", "grC$)g]n8*Fj0;|O");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Document.createShell("F7lW',$O%<M@V OJ");
      Element element0 = document0.appendElement("br");
      element0.after("");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parse("nth-child", "nth-child");
      Element element0 = document0.appendElement("}J");
      Element element1 = element0.previousElementSibling();
      element1.after("}J");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("HL`J(TT2p}`", "HL`J(TT2p}`");
      Element element0 = document0.appendElement("checkd");
      element0.addClass("cz(/jcef(;e>zrr<+{");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parse("^X'wUho/a", "^X'wUho/a");
      document0.setSiblingIndex((-1167));
      document0.addClass("s+");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parse("f)R5bJJb9Q^", "f)R5bJJb9Q^");
      Element element0 = document0.body();
      element0.replaceWith(document0);
      // Undeclared exception!
      document0.wrap("f)R5bJJb9Q^");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("sg>L2UJ-HFIp3fIC", "    ");
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.val("nth-child");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("multiple");
      String[] stringArray0 = new String[7];
      attributes0.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "multiple", attributes0);
      // Undeclared exception!
      try { 
        formElement0.val("");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parse("b[kpxy%bshg;b4)f", "b[kpxy%bshg;b4)f");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = new Document("sg>L2UJ-HFIp3fIC");
      // Undeclared exception!
      try { 
        document0.text("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("body", "body");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.tagName("org.jsoup.nodes.Attribute");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parse("nt\"-child", "nt\"-child");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sg>L2UJ-HFIp3fIC", "sg>L2UJ-HFIp3fIC");
      Element element0 = document0.body();
      Element element1 = document0.doClone(element0);
      // Undeclared exception!
      try { 
        element1.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = new Document("!0O;ARX2!");
      // Undeclared exception!
      try { 
        document0.selectFirst("3'JQ_!g#O3%o{U$_4MG");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '3'JQ_!g#O3%o{U$_4MG': unexpected token at ''JQ_!g#O3%o{U$_4MG'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = new Document("\"lO7w&],0U");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parse("gh~xnsZ&w0BUvnd9l", "gh~xnsZ&w0BUvnd9l");
      // Undeclared exception!
      try { 
        document0.select("$RQ8odE@wElaC");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '$RQ8odE@wElaC': unexpected token at '$RQ8odE@wElaC'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      DocumentType documentType0 = new DocumentType("\"3%Kkh~Pk7]zB`qP`", "-", "\"3%Kkh~Pk7]zB`qP`");
      Element element0 = document0.doClone(documentType0);
      // Undeclared exception!
      try { 
        element0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("nth-child", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("menuitem");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "MW`FSGK", attributes0);
      // Undeclared exception!
      try { 
        formElement0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Document.createShell("f<7+rufq%)4g'?");
      Element element0 = document0.appendTo(document0);
      element0.empty();
      // Undeclared exception!
      try { 
        element0.prependChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2SA_SQ<Z33", "2SA_SQ<Z33");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.prepend("#root");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$IsOnlyChild");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Tag tag0 = Tag.valueOf("LFF0H0:lCm]rOUEpuN+");
      Element element0 = new Element(tag0, "LFF0H0:lCm]rOUEpuN+");
      CDataNode cDataNode0 = new CDataNode("a%&pm#9g_aWBhXd_b9(");
      Element element1 = element0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element1.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!=", "!=");
      StringBuilder stringBuilder0 = new StringBuilder("org.jsoup.select.Evaluator$IndexLessThan");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(4207);
      // Undeclared exception!
      document0.outerHtmlTail(stringBuilder0, 4207, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse("tit", "tit");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "tit");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 37, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("J(i", "J(i");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 319, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Document.createShell("TBI?OGzo#Pg1l\"jV");
      MockPrintStream mockPrintStream0 = new MockPrintStream("LwHL`](TTp}`");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintStream0, (-2211), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("J06goL_DiB!=aTFO", "br");
      MockFileWriter mockFileWriter0 = new MockFileWriter("J06goL_DiB!=aTFO");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockFileWriter0, (-1425), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse("grC$)g]n8*Fj0;|O", "P9sNbkxL&^3|C6");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, (-168), document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parse("\"lO7w&],0U", "2SA_SQ<Z33");
      DataNode dataNode0 = new DataNode("2SA_SQ<Z33", "Insert position out of bounds.");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[^%s]", "]wu2e~oYN_e3`bjG%[");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parse("#rC$)g]n8*Fj0;|O", "#rC$)g]n8*Fj0;|O");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Document.createShell("multiple");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.is(":containsOwn(%s)");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Tag tag0 = Tag.valueOf("checked");
      Element element0 = new Element(tag0, "Gs5WzLO");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      // Undeclared exception!
      try { 
        element0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parse("e#<e#X.0", "*y2o(}!nj5)");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html("C7S):;:ffQf<YtBKC~");
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.appendTo(document0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      document0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("formnovalidate", "grC$)g]n8*Fj0;|O");
      // Undeclared exception!
      try { 
        document0.html((OutputStreamWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parse("]C(iL#U6QPfqB%l~$", "D");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("meta[name=charset]", "0-B3e/T!3AC9Hl");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parse("sg>L2UJ-HFIp3fIC", "sg>L2UJ-HFIp3fIC");
      Element element0 = document0.body();
      Element element1 = document0.doClone(element0);
      element1.appendTo(document0);
      element1.getElementsMatchingText("sg>L2UJ-HFIp3fIC");
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("6Y5$\"?6l*c'+d(G");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 6Y5$\"?6l*c'+d(G
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("J(i", "J(i");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("IfZu]e{}>/1C(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: IfZu]e{}>/1C(
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("?;v1s%DV4@FAZ=", "");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Tag tag0 = Tag.valueOf("checked");
      Element element0 = new Element(tag0, "Gs5WzLO");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("ismap", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("b[kpxy%bshg;b4)f", "b[kpxy%bshg;b4)f");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("b[kpxy%bshg;b4)f", "b[kpxy%bshg;b4)f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: b[kpxy%bshg;b4)f
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("head", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("J(i", "J(i");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("J(i", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[^%s]", "]wu2e~oYN_e3`bjG%[");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "]wu2e~oYN_e3`bjG%[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      Element element0 = document0.appendTo(document0);
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        element0.getElementById("nth-child");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("w0~M.", "w0~M.");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("grC$)g]n8*Fj0;|O", "grC$)g]n8*Fj0;|O");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      Element element0 = document0.head();
      element0.addClass("nth-child");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'head.java.lang.String@0000000088': unexpected token at '@0000000088'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Tag tag0 = Tag.valueOf("checked");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#root", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("IfZu]e{}>/1C(", "b[kPXy%BSHG;b4)f");
      // Undeclared exception!
      try { 
        document0.child(423);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 423, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("x:INBi;VtU|},C\"Z<q", "1@B1%z+");
      // Undeclared exception!
      try { 
        document0.child((-3296));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("multiple");
      FormElement formElement0 = new FormElement(tag0, "multiple", attributes0);
      formElement0.appendChild(formElement0);
      // Undeclared exception!
      formElement0.before("multiple");
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("grC$)g]n8*Fj0;|O", "grC$)g]n8*Fj0;|O");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("7+):z:tQ;bhgD<4NK");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.attr("multiple", "ac");
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = new Document("sg>2UJ-HFIpfXIC");
      Element element0 = document0.doClone(document0);
      // Undeclared exception!
      try { 
        element0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Tag tag0 = Tag.valueOf("checked");
      Element element0 = new Element(tag0, "Gvs5zLO");
      // Undeclared exception!
      try { 
        element0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parse("i3y1&k>mMt+G<I<", "tbody");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.appendElement("/q%Tli(");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("nt\"-child", "nt\"-child");
      List<Node> list0 = Parser.parseXmlFragment(" po", "eg");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement(" po");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a/tozrW", "a/tozrW");
      Document document1 = document0.normalise();
      List<Node> list0 = document1.childNodes();
      document1.childNodes = list0;
      // Undeclared exception!
      try { 
        document1.appendChild(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = new Document("sg>2UJ-HFIpfXIC");
      Element element0 = document0.doClone(document0);
      // Undeclared exception!
      try { 
        document0.appendChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = new Document("@=d=+lF.Ko9");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parse("=rhHS;*Uk@D|hgIeDA ", "wsSmlq?A");
      Element element0 = document0.append("e0oBP!z127]vRzY");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.append("wsSmlq?A");
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Tag tag0 = Tag.valueOf("l+=-wwAe");
      Element element0 = new Element(tag0, "l+=-wwAe");
      // Undeclared exception!
      try { 
        element0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parse("nth-child", "nth-child");
      Element element0 = document0.appendElement("}J");
      // Undeclared exception!
      try { 
        element0.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.after("EH*?Dec`mmt]R7");
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Document.createShell("sg>2UJ-HFIpfXIC");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element$1");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("uC4a", parseSettings0);
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#root");
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Document.createShell("1eEn-yI@x");
      document0.toggleClass("1eEn-yI@x");
      document0.hasClass("scriptdataescapedendtagname");
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parse("f>:F\"BF|MQI", "II?3kkG7>.Duc'f{1t");
      document0.hasClass("II?3kkG7>.Duc'f{1t");
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("?;v1s%DV4@FAZ=", "k fcG%Br+5kFWW>hiv");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      document0.appendTo(document0);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Document.createShell("nthn-chid");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.appendTo(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      document0.appendTo(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parse(">0KX7", ">0KX7");
      Element element0 = document0.head();
      element0.append("i0");
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parse("nth-child", "nth-child");
      Element element0 = document0.val("nth-child");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = new Document("j6");
      document0.getElementsContainingText("+mJf7_b<?emKSd9");
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[^%s]", "[^%s]");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = new Document("");
      Pattern pattern0 = Pattern.compile("ri<*A:%Y14M8~R", 21);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sg>L2UJ-HFIp3fIC", "sg>L2UJ-HFIp3fIC");
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      Element element0 = document0.createElement("nth-child");
      document0.appendChild(element0);
      element0.append("#root");
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("J(i", "J(i");
      Pattern pattern0 = Pattern.compile(".mGL,B", (-1432352094));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "org.jsoup.parser.Token$EndTag");
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      document0.is((Evaluator) evaluator_IsFirstOfType0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("P^938'e,", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "P^938'e,", (Attributes) null);
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element$1");
      formElement0.getElementsByAttributeValueMatching("y", pattern0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("HL`J(TT2p}`", "HL`J(TT2p}`");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parse("", "Tt0f[0");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parse("&#x", "&#x");
      document0.title("&#x");
      MockFile mockFile0 = new MockFile("w3UFel!X", "HZ#ZEDUxa<");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0);
      document0.html(outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "</");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuffer0, 2750, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parse("gh~xnsZ&w0BUvnd9l", "gh~xnsZ&w0BUvnd9l");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = new Document("nt\"-child");
      document0.appendElement("br");
      MockFile mockFile0 = new MockFile("org.jsoup.internal.Normalizer", "jJh1");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      document0.outerHtml((Appendable) mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("njh- nxild", "njh- nxild");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parse("grC$)g]n8*Fj0;|O", "grC$)g]n8*Fj0;|O");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 14, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("multiple", "multiple");
      Element element0 = document0.appendElement("textarea");
      // Undeclared exception!
      try { 
        element0.val((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      CDataNode cDataNode0 = new CDataNode("textarea");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "q", attributes0);
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Element$1");
      document0.toggleClass("org.jsoup.nodes.Element$1");
      element0.toggleClass("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parse("jz%h6", "jz%h6");
      document0.toggleClass("grC$)g]n8*Fj0;|O");
      document0.toggleClass("=rhHS;*Uk@D|hgIeDA ");
      document0.hasClass("=rhHS;*Uk@D|hgIeDA ");
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ft\"-chKl", "Ft\"-chKl");
      Element element0 = document0.toggleClass("Ft\"-chKl");
      document0.toggleClass("ScriptDataEscapedEndTagName");
      element0.hasClass("ScriptDataEscapedEndTagName");
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parse("nt\"-child", "nt\"-child");
      document0.toggleClass("org.jsoup.nodes.Element$NodeList");
      document0.toggleClass(" KV");
      document0.hasClass("nt\"-child");
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Document.createShell("1eEn-yI@x");
      Element element0 = document0.toggleClass("1eEn-yI@x");
      element0.getElementsByClass("ScriptDataEscapedEndTagName");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parse("grC$)g]n8*Fj0;|O", "grC$)g]n8*Fj0;|O");
      Element element0 = document0.toggleClass("grC$)g]n8*Fj0;|O");
      element0.hasClass("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Element$1");
      element0.hasClass("Ug~rB");
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Document.createShell("grC$)g]n8*Fj0;|O");
      Comment comment0 = new Comment("_M5fltP&", "grC$)g]n8*Fj0;|O");
      Element element0 = document0.prependChild(comment0);
      element0.data();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Document.createShell("7+):z:tQ;bhgD<4NK");
      Element element0 = document0.prepend("7+):z:tQ;bhgD<4NK");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nt\"-child", " />");
      document0.appendElement("br");
      document0.getElementsContainingOwnText(" nE");
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse("grC$)g]n8*Fj0;|O", "grC$)g]n8*Fj0;|O");
      CDataNode cDataNode0 = new CDataNode("grC$)g]n8*Fj0;|O");
      Element element0 = document0.prependChild(cDataNode0);
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parse("&#x", "&#x");
      document0.title("&#x");
      document0.getElementsContainingOwnText(",JS:'Lgy{yp");
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" > ", " > ");
      document0.appendText(" > ");
      document0.getElementsMatchingText("lL.WrQz#N;#twdZ&Y0");
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nt\"-child", " />");
      document0.appendElement("br");
      document0.getElementsMatchingText("nt\"-child");
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parse("nt\"-child", "nt\"-child");
      document0.appendElement("}J");
      document0.getElementsMatchingText("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r<!?/.fl8?%??o tzw7", "r<!?/.fl8?%??o tzw7");
      document0.getElementsMatchingText("q");
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      document0.getElementById("#root");
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = new Document("sg>L2UJ-HFIp3fIC");
      document0.appendTo(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[^%s]", " ");
      Element element0 = document0.head();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      Element element0 = document0.head();
      document0.appendTo(element0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      document0.appendTo(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Document.createShell("grC$)g]n8*Fj0;|O");
      Element element0 = document0.doClone(document0);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Document.createShell("1eEn-yI@x");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parse("nt\"-child", "nt\"-child");
      Element element0 = document0.appendElement("}J");
      Element element1 = element0.previousElementSibling();
      element1.appendText("}J");
      document0.getElementsMatchingText("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("grC$)g]n8*Fj0;|O", "grC$)g]n8*Fj0;|O");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(0, element0.siblingIndex());
      assertEquals("grC$)g]n8*Fj0;|O", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("</", "</");
      Element element0 = document0.appendElement(" nE");
      Elements elements0 = element0.siblingElements();
      assertEquals("</", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Ft\"-chKl", "Ft\"-chKl");
      document0.siblingElements();
      assertEquals("Ft\"-chKl", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("jvB]J=h}rjn:OR|", "</");
      DocumentType documentType0 = new DocumentType("AttributeValue_doubleQuoted", "AttributeValue_doubleQuoted", "</", "q7i-1{eak$?poTo@c");
      Element element0 = document0.doClone(documentType0);
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("%{pO", "%{pO");
      Element element0 = document0.head();
      element0.after("%{pO");
      String string0 = element0.cssSelector();
      assertEquals("%{pO", element0.baseUri());
      assertEquals("html > head:nth-child(1)", string0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("%{pO", "%{pO");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("%{pO", element0.baseUri());
      assertEquals("html > head", string0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.toggleClass("org.jsoup.nodes.Element$1");
      document0.cssSelector();
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Document.createShell("|P:`qH\"~");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1979), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(70, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("i", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("i");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "width must be > 0", attributes0);
      LinkedHashSet<PseudoTextElement> linkedHashSet0 = new LinkedHashSet<PseudoTextElement>();
      // Undeclared exception!
      try { 
        element0.insertChildren(46, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      Elements elements0 = document0.nextElementSiblings();
      // Undeclared exception!
      try { 
        document0.insertChildren((-2266), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      Elements elements0 = document0.nextElementSiblings();
      Element element0 = document0.insertChildren((-1), (Collection<? extends Node>) elements0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("nth-child", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      Elements elements0 = document0.nextElementSiblings();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) elements0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("nth-child", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Document.createShell("html");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("html", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parse("8M$`p[#", "O");
      document0.prepend("8M$`p[#");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.body();
      Element element1 = document0.doClone(element0);
      element1.nextElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Elements elements0 = document0.getElementsByIndexGreaterThan(64);
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("</", "</");
      document0.selectFirst(" nE");
      assertEquals("</", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = new Document("\"lO7w&],0U");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = new Document("org.jsoup.parser.HtmlTreeBuilder");
      // Undeclared exception!
      try { 
        document0.before((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("?;v1s%DV4@FAZ=", "k fcG%Br+5kFWW>hiv");
      document0.getElementsByAttribute("k fcG%Br+5kFWW>hiv");
      assertEquals("k fcG%Br+5kFWW>hiv", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("type", "type");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", ":not");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Document.createShell("CF#{)@l/1EBKxj%u]bZ");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.prependElement("Sb-.Db_^");
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nt\"-child", " />");
      Element element0 = document0.shallowClone();
      assertEquals(" />", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      Element element0 = document0.clone();
      assertEquals(1, document0.childNodeSize());
      assertNotSame(element0, document0);
      assertEquals("nth-child", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("grC$)g]n8*Fj0;|O", "grC$)g]n8*Fj0;|O");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("q", "q");
      Element element0 = document0.text("!4;zXtR");
      assertEquals(1, element0.childNodeSize());
      assertEquals("q", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parse("gh~xnsZ&w0BUvnd9l", "gh~xnsZ&w0BUvnd9l");
      document0.getElementsByAttributeValueContaining("org.oup.nodes.Element$1", "template");
      assertEquals("gh~xnsZ&w0BUvnd9l", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sg>L2UJ-HFIp3fIC", "sg>L2UJ-HFIp3fIC");
      document0.getElementsByAttributeValueEnding("multiple", "html > head");
      assertEquals(1, document0.childNodeSize());
      assertEquals("sg>L2UJ-HFIp3fIC", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parse("f>:F\"BF|MQI", "II?3kkG7>.Duc'f{1t");
      document0.is("*");
      assertEquals("II?3kkG7>.Duc'f{1t", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parse("grC$)g]n8*Fj0;|O", "(");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "yk{7^`'k{bbm6+b/9zq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[^%s]", "[^%s]");
      Elements elements0 = document0.getElementsByIndexEquals((-2459));
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
      assertEquals("[^%s]", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Document.createShell("multiple");
      document0.getElementsByAttributeStarting(":nth-of-type(");
      assertEquals("multiple", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByIndexLessThan(74);
      assertEquals(1, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("%{pO", "%{pO");
      // Undeclared exception!
      try { 
        document0.after("%{pO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parse("checked", "JPNkpi7&e/");
      Elements elements0 = document0.getElementsMatchingOwnText("checked");
      assertEquals("JPNkpi7&e/", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.helper.W3CDom", "org.jsoup.helper.W3CDom");
      Element element0 = document0.prepend("org.jsoup.helper.W3CDom");
      document0.appendTo(element0);
      document0.ownText();
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "org.jsoup.nodes.Document$OutputSettings");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parse("", "Tt0f[0");
      document0.getElementsByAttributeValue("@q_aLAy.*y^>;F", "@q_aLAy.*y^>;F");
      assertEquals("Tt0f[0", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parse("nth-child", "nth-child");
      Element element0 = document0.attr("?h*-7t+<> Ek%p.", true);
      assertEquals("nth-child", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("36VKkcJ00", "@5:iJA=4_WZOD3Y");
      document0.wholeText();
      assertEquals("@5:iJA=4_WZOD3Y", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sg>L2UJ-HFIp3fIC", "sg>L2UJ-HFIp3fIC");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Element element0 = new Element("P67;t<Br=]g*");
      // Undeclared exception!
      try { 
        element0.is("P67;t<Br=]g*");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'P67;t<Br=]g*': unexpected token at ';t<Br=]g*'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parse("grC$)g]n8*Fj0;|O", "grC$)g]n8*Fj0;|O");
      document0.dataset();
      assertEquals("grC$)g]n8*Fj0;|O", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parse("%{pO", "%{pO");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Document.createShell("html");
      Element element0 = document0.tagName("html");
      assertEquals(1, element0.childNodeSize());
      assertEquals("html", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.prependText("[%s^=%s]");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      Element element0 = document0.child(0);
      assertNotNull(element0);
      
      Element element1 = element0.shallowClone();
      assertEquals("nth-child", element1.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      document0.previousElementSiblings();
      assertEquals("nth-child", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nth-child", "nth-child");
      // Undeclared exception!
      try { 
        document0.wrap("nth-child");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }
}
