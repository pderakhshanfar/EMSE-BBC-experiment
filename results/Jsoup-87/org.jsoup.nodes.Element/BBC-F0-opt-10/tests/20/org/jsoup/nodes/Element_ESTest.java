/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 16:12:52 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.IOException;
import java.io.ObjectOutputStream;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Cr^y8]m.?", "7nX4`Y993rDF");
      Element element0 = document0.toggleClass("7nX4`Y993rDF");
      element0.toggleClass("7nX4`Y993rDF");
      element0.getElementsByClass("tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ?e ", " ?e ");
      Element element0 = document0.toggleClass("H<g+w");
      Element element1 = element0.toggleClass(" ?e ");
      element1.getElementsByClass("Bg");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Document.createShell("A");
      Element element0 = document0.doClone(document0);
      document0.appendElement("A");
      element0.siblingElements();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Document", ".C;pK(imes+>`L");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("Doctype");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(mockPrintWriter0, 8204, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Document.createShell("head");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "head");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(stringBuilder0, 2182, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("B?Na6ur3Px>lM'!H", parseSettings0);
      Element element0 = new Element(tag0, "#cdata");
      element0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("samp", "samp");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("6Uh\"B,i>", "6Uh\"B,i>");
      Element element0 = document0.appendElement("6Uh\"B,i>");
      element0.wrap("i_*6*]=3|l@");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("samp", "samp");
      Element element0 = document0.head();
      element0.wrap("x)_s:wFLo");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      element0.wrap("head");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parse("6Uh\"B,i>", "6Uh\"B,i>");
      Element element0 = document0.appendElement("6Uh\"B,i>");
      element0.val("E3GY");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      document0.setSiblingIndex((-1699));
      document0.val("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Element element0 = new Element("head");
      element0.val("head");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = new Document("d");
      Element element0 = document0.appendElement("d");
      element0.val("d");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parse("6Uh\"B,i>", "6Uh\"B,i>");
      document0.val("E3GY");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.doClone(document0);
      element0.after((Node) document0);
      document0.toggleClass("#root");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<", "<");
      document0.setSiblingIndex((-261));
      document0.toggleClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Document.createShell("dt");
      Element element0 = document0.appendElement("dt");
      element0.text(" />");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Document.createShell("dt");
      document0.text(" />");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      document0.setSiblingIndex((-1699));
      document0.tagName("nc");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7nX4`Y993rDF", "7nX4`Y993rDF");
      Element element0 = document0.body();
      element0.tagName("7nX4`Y993rDF");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      document0.empty();
      document0.tagName("nc");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = new Document("bdo");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.createElement("head");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = new Document("]");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parse("style", "");
      document0.tagName("style");
      document0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parse(")}sKC ", "$- b9aCEbF/ZieVUEJ");
      document0.selectFirst("br");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = new Document("d");
      document0.appendElement("d");
      Element element0 = document0.appendElement("d");
      element0.selectFirst("d");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      formElement0.selectFirst("textarea");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XR1NO@k%d~\"*yE;", "org.jsoup.parser.HtmlTreeBuilderState$Constants");
      document0.select("daF|vT");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("<!doctype", "<!doctype");
      Element element0 = document0.appendElement("[%s*=%s]");
      element0.removeClass(".C;pK(imes+>`L");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      document0.removeClass("head");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      Element element1 = element0.after((Node) document0);
      element1.after((Node) element0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7-nX4`Y993rDF", "7-nX4`Y993rDF");
      Element element0 = document0.head();
      element0.prependText("7-nX4`Y993rDF");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "character outside of valid range");
      document0.prependElement("character outside of valid range");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      Element element1 = element0.after((Node) document0);
      element1.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Document", "org.jsoup.nodes.Document");
      document0.setSiblingIndex((-1432352094));
      document0.prepend("java.lang.string@0000000048 novalidate");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.appendElement("head");
      element0.prepend("head");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = new Document(" ?e ");
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("4qwB8f9~d", ",\"*=:6J9$]ghtj");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.appendElement("zrMu{B/4");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      element0.after((Node) document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" h%d.L{", " h%d.L{");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("jdL", "ht~ho__!JkmC");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Document.createShell("A");
      Element element0 = document0.doClone(document0);
      document0.appendElement(" />");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("dt", "dt");
      Element element0 = document0.appendElement("dt");
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("textarea", "textarea");
      document0.is((Evaluator) evaluator_AttributeWithValueNot0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("dt", "dt");
      Element element0 = document0.appendElement("dt");
      element0.is("dt");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d", "d");
      Element element0 = document0.appendElement("id");
      Node[] nodeArray0 = new Node[0];
      element0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d", "d");
      Element element0 = document0.body();
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      element0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = new Document("4qwB8f9~d");
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R_9l0TB+dURf{VsFd]", "p7ad");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("daF|vT", "daF|vT");
      Element element0 = document0.appendElement(" > ");
      PipedWriter pipedWriter0 = new PipedWriter();
      element0.html(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Element element0 = new Element("head");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = new Document("z'TRSt");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parse(")}sKC ", "$- b9aCEbF/ZieVUEJ");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("dt", "dt");
      document0.getElementsMatchingOwnText("dt");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      document0.getElementsContainingText("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Document.createShell("A");
      document0.getElementsContainingOwnText("A");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parse("l?i[^", "");
      document0.getElementsByTag("l?i[^");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Document.createShell("A");
      document0.getElementsByTag("#root");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsByIndexLessThan((-2628));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Document.createShell("A");
      document0.getElementsByIndexGreaterThan(4);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parse(")}sKC ", "$- b9aCEbF/ZieVUEJ");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parse("6Uh\"B,i>", "6Uh\"B,i>");
      document0.getElementsByAttributeValueStarting("compact", "nc");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "NeUu");
      document0.toggleClass("#root");
      document0.getElementsByAttributeStarting("class");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      Element element1 = element0.after((Node) document0);
      element1.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "</");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Document.createShell("dt");
      Element element0 = document0.appendElement("dt");
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Document.createShell("A");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse(")}sKC ", "$- b9aCEbF/ZieVUEJ");
      Element element0 = document0.child(0);
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      Document document1 = (Document)document0.empty();
      document1.clone();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = new Document("");
      document0.prependChild(document0);
      LinkedList<String> linkedList0 = new LinkedList<String>();
      document0.prependText("ScriptDataDoubleEscapeStart");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>(linkedList0);
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = new Document("dt");
      Element element0 = document0.appendElement("dt");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = new Document("3YY&)V");
      document0.prependText("uQC25oP0LK_ xZkZ?");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "612Ax~LUa");
      document0.toggleClass("7?D`N&-~9aM'nvGj#75");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "612Ax~LUa");
      Element element0 = document0.toggleClass("7?D`N&-~9aM'nvGj#75");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse("style", "");
      Element element0 = document0.appendElement("zrMu{B/4");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.appendElement("zrMu{B/4");
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.doClone(document0);
      element0.before("");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parse("Queue did not match expected sequence", "Queue did not match expected sequence");
      Element element0 = document0.body();
      element0.before("");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Element element0 = new Element("z~x<.1uA/7nIPDF.I%s");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Document", "org.jsoup.nodes.Document");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Document");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("XVB%", "4qwB8f9~d");
      Element element0 = document0.body();
      element0.attr("org.jsoup.parser.TokeniserState", true);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parse("style", "");
      Element element0 = document0.appendElement("zrMu{B/4");
      element0.attr("8VCH|UkGP5mx;VlG", false);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      element0.attr("u>5-tB>ez&", "*eB~[UDbBs~;H_w");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = new Document("4qwB9f9Md");
      document0.attr("4qwB9f9Md", "n U  [1a9|O5xH");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = new Document("d");
      document0.appendElement("d");
      document0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.appendTo(element0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = new Document("d");
      Element element0 = document0.appendElement("d");
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("6Uh\"B,i>", "6Uh\"B,i>");
      Element element0 = document0.appendElement("6Uh\"B,i>");
      element0.appendText("-dEOJ]A9g+<N+");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "head");
      Element element0 = document0.body();
      element0.append("GI");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Document.createShell("A");
      Element element0 = document0.doClone(document0);
      element0.append("`d)tcU7:\"9-)!:%8");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = new Document("");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Document.createShell("A");
      Element element0 = document0.body();
      element0.after("");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Document document1 = (Document)document0.doClone(document0);
      document1.after("");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      element0.addClass("");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      element0.after((Node) document0);
      document0.addClass("c");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = new Document("4qwB8f9~d");
      document0.addClass("4qwB8f9~d");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      Element element1 = element0.after((Node) document0);
      // Undeclared exception!
      element1.wrap("head");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell("A");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      Element element1 = element0.after((Node) document0);
      // Undeclared exception!
      element1.val(")l5231ao-;*i}/7y");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "612Ax~LUa");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = new Document("7-nX4Y993rDF");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.textNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = new Document("A");
      // Undeclared exception!
      try { 
        document0.text("A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      Element element1 = element0.after((Node) document0);
      element1.childNodes = null;
      // Undeclared exception!
      try { 
        element0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("4qwB8f9~d", ",\"*=:6J9$]ghtj");
      Element element0 = document0.body();
      Element element1 = element0.after((Node) document0);
      // Undeclared exception!
      element1.tagName(",\"*=:6J9$]ghtj");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = new Document("]");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parse(")}sKC ", "$- b9aCEbF/ZieVUEJ");
      // Undeclared exception!
      try { 
        document0.selectFirst(":nth-child(%d)");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse nth-index '%d': unexpected format
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Document.createShell("#");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      // Undeclared exception!
      try { 
        document0.select(":nth-child(%d)");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse nth-index '%d': unexpected format
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = new Document("]");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("qf3xy.af/3pa]k", "qf3xy.af/3pa]k");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Tag tag0 = Tag.valueOf("gM*mn? RT");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "title", attributes0);
      DocumentType documentType0 = new DocumentType(":6", "title", "i", "i", "strike");
      Element element1 = element0.doClone(documentType0);
      // Undeclared exception!
      try { 
        element1.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("<!doctype", "<!doctype");
      TextNode textNode0 = TextNode.createFromEncoded("c.c4A6~k>]w!");
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Element element0 = new Element("4qwB8f9~d");
      // Undeclared exception!
      try { 
        element0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.prependElement("template");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("dt");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Document.createShell("A");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parse("d", "d");
      Document document1 = (Document)document0.doClone(document0);
      document1.before((Node) document0);
      // Undeclared exception!
      document0.prepend("eWxID'H%qn.N");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = new Document("7-nX4Y993rDF");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.prepend("7-nX4Y9N93D");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(1t4 K", "#root");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      DocumentType documentType0 = new DocumentType("org.jsoup.nodes.Document", "org.jsoup.nodes.Document", "%B^g>B");
      Element element0 = document0.doClone(documentType0);
      // Undeclared exception!
      try { 
        element0.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("A", "A");
      CharBuffer charBuffer0 = CharBuffer.allocate(8);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 44, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Document.createShell("A");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 204, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      MockFile mockFile0 = new MockFile("p/Tb)KVP'6ofV<7=", "p/Tb)KVP'6ofV<7=");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintWriter0, (-300), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("dt", "dt");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, (-2178), document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = new Document("br");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(113);
      // Undeclared exception!
      document0.outerHtmlHead(charArrayWriter0, 113, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("daF|vT", "#root");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 1154, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, (-1), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7nX4`Y993rDF", "7nX4`Y993rDF");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("7nX4`Y993rDF");
      ObjectOutputStream objectOutputStream0 = new ObjectOutputStream(mockFileOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(objectOutputStream0);
      CharsetEncoder charsetEncoder0 = document_OutputSettings0.prepareEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(outputStreamWriter0, (-1371), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XR1NO@k%d~\"*yE;", "org.jsoup.parser.HtmlTreeBuilderState$Constants");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        document0.outerHtmlHead(pipedWriter0, 2182, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Document.createShell("");
      DocumentType documentType0 = new DocumentType("&gt;", "", "");
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "612Ax~LUa");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!doctype", "<!doctype");
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith((String) null);
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_TagEndsWith0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.is("l}ixr+lZuVM<_j/X5");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'l}ixr+lZuVM<_j/X5': unexpected token at '}ixr+lZuVM<_j/X5'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      element0.after((Node) document0);
      // Undeclared exception!
      document0.is("dfn");
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Document.createShell("dt");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d", "d");
      Element element0 = document0.body();
      element0.after((Node) document0);
      // Undeclared exception!
      element0.html("d");
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse("OGP[!VQV", "OGP[!VQV");
      Element element0 = document0.appendElement("qm");
      List<Node> list0 = document0.childNodes();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.html("OGP[!VQV");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Document.createShell("#");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.doClone(document0);
      element0.after((Node) document0);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      document0.html(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Document.createShell("<CV*u{{t|>=HX|");
      Charset charset0 = document0.charset();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "<CV*u{{t|>=HX|");
      ByteBuffer byteBuffer0 = charset0.encode(charBuffer0);
      CharBuffer charBuffer1 = charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      element0.after((Node) document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("daF|vT", "#root");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("org.jsoup.helper.ChangeNotifyingArrayList", parseSettings0);
      Element element0 = new Element(tag0, "bo5Wlm0");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "br");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("`a4@,b%'1s8=ud(|F", "`a4@,b%'1s8=ud(|F");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("`a4@,b%'1s8=ud(|F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: `a4@,b%'1s8=ud(|F
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5~U", "5~U");
      Element element0 = document0.appendElement("id");
      element0.siblingIndex = (-316);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("5~U");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Document.createShell("LMjvfY/8U-Ruzemkqda");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Document.createShell("A");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Element element0 = new Element("8NH;tSQY)70AN$ra9");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText("8nh;tsqy)70an$ra9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 8nh;tsqy)70an$ra9
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "org.jsoup.select.CombiningEvaluator$Or");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse("daF|vT", "value");
      CDataNode cDataNode0 = new CDataNode("daF|vT");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.getElementsByIndexGreaterThan((-3452));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^", "^");
      Element element0 = document0.head();
      element0.setSiblingIndex((-3424));
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan((-1110026255));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Document.createShell("A");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d", "d");
      Element element0 = document0.body();
      Element element1 = element0.after((Node) document0);
      element1.siblingIndex = (-1625949436);
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("Afr", "Pattern syntax error: ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("xg.ae3-OJ%+aQ1/a", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Document.createShell("head");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Document.createShell("A");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("T<?B-2mH^>( a", "$\"~S3!(S");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: $\"~S3!(S
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = new Document("#root");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("YMYY-)Q=f", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Element element0 = new Element("4qwB8f9~d");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueContaining("org.jsoup.nodes.Element$1", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("0", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = new Document("]");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("8", "`@e ");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("Rawtext");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "612Ax~LUa");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parse(")}sKC ", "$- b9aCEbF/ZieVUEJ");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("dt", "dt");
      Element element0 = document0.head();
      element0.toggleClass("dt");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'head.java.lang.String@0000000052': unexpected token at '@0000000052'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("BK8!b<%M{", "BK8!b<%M{");
      CDataNode cDataNode0 = new CDataNode("BK8!b<%M{");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Document", "org.jsoup.nodes.Document");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Tag tag0 = Tag.valueOf("_D");
      Element element0 = new Element(tag0, "value");
      Parser parser0 = Parser.xmlParser();
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("org.jsoup.select.evaluator$attributewithvaluestarting", true);
      element0.parentNode = (Node) xmlDeclaration0;
      Document document0 = parser0.parseInput("value", "_D");
      // Undeclared exception!
      try { 
        element0.before((Node) document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      element0.after((Node) document0);
      // Undeclared exception!
      document0.before("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("dt", "dt");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      Element element1 = element0.after((Node) document0);
      // Undeclared exception!
      element1.attr("kGgh&Vdh^: \"A`A>((H", "8/{XW");
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4qwB8f9~d", "4qwB8f9~d");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("dt", "dt");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Element element0 = new Element("4qwB9f9Md");
      // Undeclared exception!
      try { 
        element0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.appendElement("Dt8v.idR`o:[0U[7X%2");
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7-nX4Y993rDF", "7-nX4Y993rDF");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      document0.parser(parser1);
      // Undeclared exception!
      try { 
        document0.appendElement("7-nX4Y993rDF");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parse("l?i%[^", "");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("J]68qTzcJmpG}Y", "J]68qTzcJmpG}Y");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Document.createShell("dt");
      Element element0 = document0.appendElement("dt");
      Element element1 = element0.after((Node) document0);
      // Undeclared exception!
      element1.append("dt");
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("daF|vT", "daF|vT");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^", "^");
      DocumentType documentType0 = new DocumentType("body", "body", "^");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.append("id");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Document.createShell("head");
      DataNode dataNode0 = DataNode.createFromEncoded("\"2/", "head");
      Element element0 = document0.doClone(dataNode0);
      Element element1 = document0.body();
      // Undeclared exception!
      try { 
        element1.after((Node) element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.body();
      CDataNode cDataNode0 = new CDataNode("");
      Node node0 = cDataNode0.doClone(element0);
      // Undeclared exception!
      try { 
        element0.after(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Document.createShell("");
      Document document1 = (Document)document0.doClone(document0);
      document1.after((Node) document0);
      // Undeclared exception!
      document1.after("");
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("d@y^D]l^Gz@EWVDsU- ", ">7im");
      Element element0 = document0.selectFirst(":last-of-type");
      Document document1 = (Document)document0.doClone(element0);
      // Undeclared exception!
      try { 
        document1.after("4_");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("UTF8", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("Lj|vkFxjU\"L");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = new Document("d");
      document0.html((OutputStreamWriter) null);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Document", "org.jsoup.nodes.Document");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Document");
      element0.hasClass("ttw}1");
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Document", "org.jsoup.nodes.Document");
      document0.toggleClass("org.jsoup.nodes.Document");
      document0.toggleClass("org.jsoup.nodes.Document");
      document0.hasClass("org.jsoup.nodes.Document");
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = new Document(" ?e ");
      Element element0 = document0.toggleClass("H<g+w");
      element0.toggleClass(" ?e ");
      element0.hasClass("java.lang.string@0000000044");
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("daF|vT", "daF|vT");
      document0.hasClass("");
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Document", ".C;pK(imes+>`L");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Document");
      element0.hasClass("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = new Document(" ?e ");
      Element element0 = document0.toggleClass("H<g+w");
      element0.hasClass("java.lang.string@0000000044");
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.prepend("head");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "br");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      element0.after((Node) document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = new Document("d");
      Element element0 = document0.doClone(document0);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Document.createShell("A");
      Element element0 = document0.doClone(document0);
      document0.appendElement(" > ");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Document.createShell("head");
      Element element0 = document0.body();
      element0.after((Node) document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.doClone(document0);
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Document.createShell("dt");
      Element element0 = document0.appendElement("dt");
      document0.tagName("[%s*=%s]");
      element0.html("dkTovei7e\"");
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Document.createShell("A");
      document0.getElementsByAttributeValue("A", " />");
      document0.attr(",Q");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("B?Na6ur3Px>lM'!H", parseSettings0);
      Element element0 = new Element(tag0, "#cdata");
      element0.children();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "org.jsoup.select.CombiningEvaluator$Or");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      Pattern pattern0 = Pattern.compile(":2}Md9");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("dt", "dt");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parse("l?i[^", "");
      Evaluator.TagEndsWith evaluator_TagEndsWith0 = new Evaluator.TagEndsWith("l?i[^");
      document0.is((Evaluator) evaluator_TagEndsWith0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsByAttributeValueMatching(";BGDlGE`LtKH^", pattern0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      document0.select("head");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Document.createShell("dt");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parse("6Uh\"B,i>", "6Uh\"B,i>");
      document0.title("6Uh\"B,i>");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">", "head");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.appendElement("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Document", "org.jsoup.nodes.Document");
      document0.toggleClass("org.jsoup.nodes.Document");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Document");
      element0.toggleClass("org.jsoup.nodes.Document");
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ?e ", " ?e ");
      Element element0 = document0.toggleClass("H<g+w");
      document0.toggleClass("Bg");
      element0.getElementsByClass("Bg");
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ?e ", " ?e ");
      document0.toggleClass("H<g+w");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.toggleClass(" ?e ");
      document0.getElementsByClass("java.lang.string@0000000048");
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parse("<!doctype", "<!doctype");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!loc,ype", "<!loc,ype");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parse("<!doctype", "<!doctype");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", "");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      element0.after((Node) document0);
      element0.text();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ttw}1", "ttw}1");
      CDataNode cDataNode0 = new CDataNode("style");
      document0.appendChild(cDataNode0);
      document0.getElementsContainingText("");
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parse("6Uh\"B,i>", "6Uh\"B,i>");
      document0.title("6Uh\"B,i>");
      document0.getElementsMatchingOwnText("]H~owX7mwI6U]");
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parse("<!doctype", "<!doctype");
      document0.getElementsMatchingOwnText(".");
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("CvO9omioqvI[eG", "CvO9omioqvI[eG");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parse(")}sKC ", "$- b9aCEbF/ZieVUEJ");
      Element element0 = document0.child(0);
      Element element1 = element0.appendText("");
      Element element2 = document0.body();
      element1.after((Node) element2);
      element0.text();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parse(")}sKC ", "$- b9aCEbF/ZieVUEJ");
      document0.appendText("");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parse(")}sKC ", "$- b9aCEbF/ZieVUEJ");
      document0.prependText("canvas");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5~U", "5~U");
      document0.appendElement("id");
      document0.getElementsMatchingText("5~U");
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parse("<", "<");
      document0.appendElement("br");
      document0.getElementsMatchingText("br");
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4qwB8f9~d", "4qwB8f9~d");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("4qwB8f9~d", false);
      Element element0 = document0.prependChild(xmlDeclaration0);
      Pattern pattern0 = Pattern.compile("JPaR.wD*94#GIU", (-825));
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d", "d");
      document0.getElementById("d");
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Document.createShell("A");
      Element element0 = document0.doClone(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.doClone(document0);
      Element element1 = element0.after((Node) document0);
      element1.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Document.createShell("A");
      Element element0 = document0.doClone(document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^", "^");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, elements0.size());
      assertEquals("^", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = new Document("z'TRSt");
      document0.nextElementSibling();
      assertEquals("z'TRSt", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = new Document("d");
      Element element0 = document0.doClone(document0);
      element0.nextElementSiblings();
      assertEquals("d", element0.baseUri());
      assertTrue(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parse("l?i[^", "");
      Elements elements0 = document0.siblingElements();
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parse(")}sKC ", "$- b9aCEbF/ZieVUEJ");
      Element element0 = document0.child(0);
      assertNotNull(element0);
      
      Elements elements0 = element0.siblingElements();
      assertEquals("$- b9aCEbF/ZieVUEJ", element0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Document.createShell("d");
      Element element0 = document0.head();
      element0.before("");
      element0.cssSelector();
      assertEquals(2, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("dt", "dt");
      document0.toggleClass("dt");
      document0.cssSelector();
      assertEquals("dt", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4qwB8f9~d", "4qwB8f9~d");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1879), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren((-1), nodeArray0);
      assertEquals("head", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren(973, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Document", ", currentElement=");
      Elements elements0 = document0.parents();
      // Undeclared exception!
      try { 
        document0.insertChildren(24, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4qwB8f9~d", "4qwB8f9~d");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1335), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Document.createShell("#");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("#", document0.baseUri());
      assertEquals(0, list0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("4qwB9f9Md", "6eh\"B,i#");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("6eh\"B,i#", document0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "br");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Element element0 = new Element("8NH;tSQY)70AN$ra9");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("8NH;tSQY)70AN$ra9", true);
      Element element1 = element0.prependChild(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element1.child((-1817));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Document.createShell("+2}kB5Ar2G_(;K");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1331));
      assertEquals(4, elements0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("+2}kB5Ar2G_(;K", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7nX4`Y993rDF", "7nX4`Y993rDF");
      document0.getAllElements();
      assertEquals("7nX4`Y993rDF", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Document.createShell("d");
      // Undeclared exception!
      try { 
        document0.before("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      document0.getElementsByAttribute("RawtextEndTagOpen");
      assertEquals("head", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      document0.getElementsByAttributeValueNot("'+SGe", "'+SGe");
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parse("style", "");
      Element element0 = document0.shallowClone();
      assertEquals("#root", element0.tagName());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.doSetBaseUri("");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parse(")}sKC ", "$- b9aCEbF/ZieVUEJ");
      document0.getElementsByAttributeValueContaining("$- b9aCEbF/ZieVUEJ", "$- b9aCEbF/ZieVUEJ");
      assertEquals("$- b9aCEbF/ZieVUEJ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.getElementsByAttributeValueEnding("BZs2n_OIp[7$~`k{K_", ":2}Md9");
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("dt", "dt");
      document0.is("dt");
      assertEquals("dt", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Document.createShell("A");
      document0.getElementsByAttributeValueMatching(":nth-child(%d)", "");
      assertEquals(1, document0.childNodeSize());
      assertEquals("A", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse(")}sKC ", "$- b9aCEbF/ZieVUEJ");
      Elements elements0 = document0.getElementsByIndexEquals(65536);
      assertEquals("$- b9aCEbF/ZieVUEJ", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parse(")}sKC ", "$- b9aCEbF/ZieVUEJ");
      document0.getElementsByAttributeStarting("$- b9aCEbF/ZieVUEJ");
      assertEquals("$- b9aCEbF/ZieVUEJ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Document", ", currentElement=");
      Elements elements0 = document0.getElementsByIndexLessThan(1569);
      assertEquals(", currentElement=", document0.baseUri());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = new Document("id");
      document0.prepend("               ");
      boolean boolean0 = document0.hasText();
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Document.createShell("d");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals("d", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parse("6Uh\"B,i>", "6Uh\"B,i>");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("6Uh\"B,i>", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("XVB%", "4qwB8f9~d");
      Element element0 = document0.attr("org.jsoup.parser.TokeniserState", true);
      assertEquals(1, element0.childNodeSize());
      assertEquals("4qwB8f9~d", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Document.createShell("dt");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "br");
      document0.wholeText();
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Element element0 = new Element("head");
      Element element1 = element0.removeClass("xml");
      assertFalse(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parse("S|sd)E>nTSih1V14", "nbYo}4w<fF");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Elements elements0 = document0.getElementsContainingOwnText("");
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      document0.dataset();
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Document.createShell("r(i=-/tm6aE");
      // Undeclared exception!
      try { 
        document0.child(794);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 794, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("dt", "dt");
      document0.prependElement("dt");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      // Undeclared exception!
      try { 
        document0.wrap("head");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }
}
