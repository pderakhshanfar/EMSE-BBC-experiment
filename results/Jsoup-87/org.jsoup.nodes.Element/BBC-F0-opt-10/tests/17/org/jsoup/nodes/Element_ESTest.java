/*
 * This file was automatically generated by EvoSuite
 * Wed Oct 20 16:02:14 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.net.URISyntaxException;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.function.Consumer;
import java.util.function.UnaryOperator;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.mock.java.net.MockURI;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseError;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;
import sun.nio.cs.US_ASCII;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000038 3", "java.lang.string@0000000038 3");
      document0.dataset();
      DataNode dataNode0 = DataNode.createFromEncoded("bm", "!\"X<0j./eD;3l3");
      document0.appendChild(dataNode0);
      document0.data();
      document0.id();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.siblingIndex = (-3061);
      document0.hasClass("br");
      document0.getElementsByAttributeValueContaining("br", "s+");
      document0.addClass("s+");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("JGo`ONTTH@/8F^g<", "textarea");
      Element element0 = document0.appendElement("textarea");
      // Undeclared exception!
      try { 
        element0.val((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("jkva.lang.strinO@00G000007G", "jkva.lang.strinO@00G000007G");
      Tag tag0 = Tag.valueOf("jkva.lang.strinO@00G000007G");
      Attributes attributes0 = new Attributes();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jkva.lang.strinO@00G000007G");
      Attributes attributes1 = attributes0.put("jkva.lang.strinO@00G000007G", "jkva.lang.strinO@00G000007G");
      Attributes attributes2 = attributes1.put("aNipP[,{F9iSHW`", true);
      attributes2.iterator();
      Element element0 = new Element(tag0, "jkva.lang.strinO@00G000007G", attributes2);
      element0.getElementsByAttribute("aNipP[,{F9iSHW`");
      document0.setParentNode(element0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      String string0 = "requAr`d";
      Document document0 = Parser.parseBodyFragment("requAr`d", "requAr`d");
      Element element0 = document0.appendElement("requAr`d");
      Pattern pattern0 = Pattern.compile("requAr`d");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("requAr`d", pattern0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parse("'WMA[dF4C7", "'WMA[dF4C7");
      document0.childNodes = null;
      document0.hasClass("'WMA[dF4C7");
      // Undeclared exception!
      try { 
        document0.textNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("8Yf", "8Yf");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(2671);
      CDataNode cDataNode0 = new CDataNode("8Yf");
      TextNode textNode0 = cDataNode0.text("8Yf");
      document0.parentNode = (Node) textNode0;
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
      try { 
        document1.html("java.lang.string@0000000038 ka\"7n~e>yld|2g9");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.appendElement("br");
      document0.html();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("br", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      String string0 = "ka\"7n~eYLd|g9";
      Document document0 = Parser.parseBodyFragmentRelaxed("ka\"7n~eYLd|g9", "ka\"7n~eYLd|g9");
      document0.body();
      Comment comment0 = new Comment("ka\"7n~eYLd|g9");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.nextElementSibling();
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.dataNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bNb<?", "bNb<?");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      String string0 = "requAr`d";
      Document document0 = Parser.parseBodyFragment("requAr`d", "requAr`d");
      Element element0 = document0.appendElement("requAr`d");
      document0.previousElementSiblings();
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      try { 
        element0.outerHtmlHead(pipedWriter0, (-909), document_OutputSettings2);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Document.createShell("6");
      Document document1 = Parser.parse("}N(i[L1ELjjI", "pIY,HrD^");
      document0.setParentNode(document1);
      document0.text();
      document0.after("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = new Document("requAr`d");
      Element element0 = document0.appendElement("requAr`d");
      element0.setSiblingIndex((-4440));
      element0.val();
      // Undeclared exception!
      try { 
        element0.getAllElements();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell("jkva.lang.strinO@000000007G");
      document0.siblingElements();
      CDataNode cDataNode0 = new CDataNode("9z;yQ");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "jkva.lang.strinO@000000007G");
      document0.parentNode = (Node) cDataNode0;
      Document document1 = (Document)document0.text("jkva.lang.strinO@000000007G");
      document1.classNames();
      document0.hasClass("jkva.lang.strinO@000000007G");
      // Undeclared exception!
      try { 
        document1.wrap("9z;yQ");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByTag("@SH,Bxgb-");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parse("AttributeValue_singleQuoted", "AttributeValue_singleQuoted");
      document0.getElementsByIndexGreaterThan((-1151));
      document0.siblingIndex = (-1151);
      Element element0 = document0.toggleClass("AttributeValue_singleQuoted");
      element0.getElementsContainingOwnText("head");
      document0.hasClass("AttributeValue_singleQuoted");
      element0.prependText("AttributeValue_singleQuoted");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bP", "bP");
      Element element0 = document0.body();
      element0.getElementsContainingOwnText("c1Z[u~j82]#8jQ");
      element0.wrap("tWI%-)Q6N");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x", "x");
      Element element0 = document0.prependElement("x");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.setParentNode(element0);
      element0.hasClass("org.jsoup.nodes.Element$1");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset((Charset) null);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(false);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      document0.replaceChild(element0, element0);
      document_OutputSettings2.escapeMode(entities_EscapeMode0);
      Document document1 = document0.outputSettings(document_OutputSettings3);
      // Undeclared exception!
      try { 
        document1.select("x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Document.createShell("6");
      Element element0 = document0.toggleClass("");
      document0.siblingElements();
      document0.toggleClass(" ");
      element0.hasClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      String string0 = "uG9|?#@_";
      Element element0 = new Element("uG9|?#@_");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "uG9|?#@_");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(charBuffer0, 26, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("VeqBody", "VeqBody");
      document0.setParentNode(document0);
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild((-1712), (-1712));
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IsNthChild0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vf5eqBo}dy", "Vf5eqBo}dy");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("Vf5eqBo}dy", "Vf5eqBo}dy", false);
      document0.setParentNode(xmlDeclaration0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        document1.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.valuator$ContainsOwnText", "org.jsoup.select.valuator$ContainsOwnText");
      Element element0 = document0.head();
      Element element1 = element0.before("org.jsoup.select.valuator$ContainsOwnText");
      element1.toggleClass("value");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'head.java.lang.String@0000000096': unexpected token at '@0000000096'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vf5eqBo}dy", "Vf5eqBo}dy");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.appendElement("java.lang.string@0000000039");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset((Charset) null);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      Document document2 = document0.outputSettings(document_OutputSettings3);
      // Undeclared exception!
      try { 
        document2.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      String string0 = " > ";
      Document document0 = Parser.parseBodyFragment(" > ", " > ");
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte) (-87);
      byteArray0[1] = (byte) (-11);
      byteArray0[2] = (byte)96;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Element element0 = document0.appendElement(" > ");
      element0.setSiblingIndex((byte) (-11));
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      String string0 = "sbp";
      Tag tag0 = Tag.valueOf("sbp");
      String string1 = "org.jsoup.select.Evaluator$Id";
      CDataNode cDataNode0 = new CDataNode("sbp");
      Attributes attributes0 = cDataNode0.attributes();
      FileSystemHandling.shouldAllThrowIOExceptions();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.select.Evaluator$Id", attributes0);
      pseudoTextElement0.wholeText();
      Element element0 = pseudoTextElement0.doClone(cDataNode0);
      attributes0.spliterator();
      Element element1 = pseudoTextElement0.toggleClass("$[U1 (wZ{W6$%");
      element1.nextSibling();
      element1.appendTo(pseudoTextElement0);
      // Undeclared exception!
      try { 
        element1.after((Node) element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("body", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("u_spX]?r", false);
      Element element0 = new Element(tag0, "aw", attributes1);
      String[] stringArray0 = new String[6];
      stringArray0[0] = "9%^";
      stringArray0[1] = "naap(<B^hji8G?WdI+";
      stringArray0[2] = "aw";
      stringArray0[3] = "";
      stringArray0[4] = "aw";
      stringArray0[5] = "u_spX]?r";
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        element0.attr("u_spX]?r", "applet");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Parser.parse("H$r", "H$r");
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("textarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "bNhwh<g!hwRMQ'R5", attributes0);
      pseudoTextElement0.val();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("6", "6");
      Element element0 = document0.toggleClass("6");
      element0.childNodes = null;
      element0.siblingElements();
      element0.toggleClass("6");
      // Undeclared exception!
      try { 
        document0.getElementById("lQ}@%oDnMdd`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = new Document("bP");
      Document document1 = document0.ownerDocument();
      Parser.htmlParser();
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      // Undeclared exception!
      try { 
        document1.is((Evaluator) evaluator_IsRoot0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      String string0 = "_";
      Document document0 = Parser.parseBodyFragmentRelaxed("_", "_");
      StringBuffer stringBuffer0 = new StringBuffer();
      int int0 = 63;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(1192721831);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      // Undeclared exception!
      document0.outerHtmlTail(stringBuffer0, 63, document_OutputSettings4);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document0 = Parser.parseBodyFragmentRelaxed("_", "_");
      Element element0 = document0.toggleClass("_");
      document0.siblingElements();
      element0.toggleClass("_");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("u%m=tf5gW;m}BVRy5", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.keys = null;
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "math", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.val("!dYc\"-*|");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      parser0.setTrackErrors((-1652));
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      DocumentType documentType0 = new DocumentType("AttributeValue_singleQuotev", "#root", "AttributeValue_singleQuotev", "#root");
      document0.setParentNode(documentType0);
      Document document1 = document0.normalise();
      // Undeclared exception!
      try { 
        document1.before("#root");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3", "3");
      Element element0 = document0.toggleClass("3");
      document0.siblingElements();
      element0.toggleClass("3");
      Element element1 = element0.toggleClass("\u0000&u>|,4jcm:%");
      element1.hasClass("3");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000035");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      List<Node> list0 = Parser.parseFragment("java.lang.string@0000000035", (Element) document0, "java.lang.string@0000000035", parseErrorList0);
      document0.childNodes = list0;
      UnaryOperator<ParseError> unaryOperator0 = UnaryOperator.identity();
      parseErrorList0.replaceAll(unaryOperator0);
      // Undeclared exception!
      try { 
        document0.html("java.lang.string@0000000035");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rp", "ScriptDataEndTagOpen");
      document0.outerHtml();
      TextNode textNode0 = TextNode.createFromEncoded("rp", "rp");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.before((Node) textNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3", "3");
      Document document1 = (Document)document0.toggleClass("3");
      document0.siblingElements();
      document1.toggleClass("3");
      FileSystemHandling.shouldAllThrowIOExceptions();
      document1.reparentChild(document0);
      document1.getElementsByClass("3");
      document1.hasClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.prependElement("br");
      Element element0 = document0.appendElement("br");
      element0.clearAttributes();
      document0.getElementsContainingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6,~?D7Krh#)wmKL$B");
      Element element0 = document0.prependElement("S_v8L/s");
      element0.getElementsByAttributeValueMatching("G 6,~?D7Krh#)wmKL$B", (Pattern) null);
      document0.nextElementSiblings();
      Element element1 = document0.body();
      element1.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      element1.childNodeSize();
      element1.siblingElements();
      element0.data();
      element0.html("Cap.nY;gG8H9&:w");
      document0.text();
      element0.elementSiblingIndex();
      element1.parent();
      // Undeclared exception!
      try { 
        document0.selectFirst("Cap.nY;gG8H9&:w org.jsoup.select.Evaluator$ContainsOwnText");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Cap.nY;gG8H9&:w org.jsoup.select.Evaluator$ContainsOwnText': unexpected token at ';gG8H9&:w org.jsoup.select.Evaluator$ContainsOwnText'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.appendElement("br");
      document0.getElementsContainingOwnText("br");
      Element element1 = element0.before("br");
      element1.children();
      element1.tag();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bP", "bP");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      document0.appendElement("bP");
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      String string0 = "bP";
      Document document0 = Parser.parseBodyFragmentRelaxed("bP", "bP");
      List<Node> list0 = Parser.parseXmlFragment("bP", "bP");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement("bP");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      String string0 = "+putybs:.";
      Charset charset0 = document0.charset();
      ByteBuffer byteBuffer0 = charset0.encode("+putybs:.");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("w:Cy,ChK3EX", "eLfD4\b/Mgg]#NC");
      Element element0 = document0.toggleClass("Tag name must not be empty.");
      document0.siblingElements();
      document0.toggleClass("Insert position out of bounds.");
      element0.hasClass("bm");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("bm", "VK~qhR_R} <yU@~");
      TextNode textNode0 = TextNode.createFromEncoded("qUf<6$", "bm");
      document0.setParentNode(textNode0);
      Parser parser0 = Parser.xmlParser();
      Document document1 = parser0.parseInput("Children collection to be inserted must not be null.", "=.*Zud+wd0EKD");
      document1.getElementsContainingOwnText("=.*Zud+wd0EKD");
      document0.prependChild(document1);
      // Undeclared exception!
      try { 
        document0.parent();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bm", "bm");
      DataNode dataNode0 = DataNode.createFromEncoded("default", "default");
      DataNode dataNode1 = dataNode0.setWholeData("AfterFrameset");
      document0.setParentNode(dataNode1);
      document0.val();
      // Undeclared exception!
      try { 
        document0.prepend("uC#,;Yy5h?e!PS3L}");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s", "s");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("s", false);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan((-3771));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parse("+p@UtyBs:.", "+p@UtyBs:.");
      Document document1 = Document.createShell("w},o=Tz]~CI}sRF");
      List<Node> list0 = document1.childNodesCopy();
      document0.childNodes = list0;
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("+p@UtyBs:.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      String string0 = "u/9ABTtL]v&N~{5][r:";
      Document document0 = parser1.parseInput("u/9ABTtL]v&N~{5][r:", ":nth-last-of-type(");
      Document document1 = document0.clone();
      // Undeclared exception!
      try { 
        document1.tagName("q^]m)$%x8n/zs");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("qe", "qe");
      document0.dataNodes();
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("required", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "required", attributes0);
      FormElement formElement1 = new FormElement(tag0, "required", attributes0);
      formElement0.is("required");
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("AttributeValue_singleQuoted", "AttributeValue_singleQuoted");
      DocumentType documentType0 = new DocumentType("9>", "AttributeValue_singleQuoted", "AttributeValue_singleQuoted");
      document0.parentNode = (Node) documentType0;
      document0.hasAttr("9>");
      document0.toggleClass("AttributeValue_singleQuoted");
      document0.hasClass("AttributeValue_singleQuoted");
      // Undeclared exception!
      try { 
        document0.append("^H9=smH4bhHs%T|eb");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.prependElement("br");
      element0.setSiblingIndex((-2297));
      Element element1 = element0.appendText("");
      element1.prepend("");
      Parser.xmlParser();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.toggleClass("");
      document0.toggleClass("");
      element0.hasClass("");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      String string0 = "~C>3 yG$PvI?m2a~vD";
      Document document0 = Parser.parseBodyFragment("~C>3 yG$PvI?m2a~vD", "~C>3 yG$PvI?m2a~vD");
      Element element0 = document0.createElement("~C>3 yG$PvI?m2a~vD");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("~C>3 yG$PvI?m2a~vD", document0, "~C>3 yG$PvI?m2a~vD");
      element0.childNodes = list0;
      Parser.htmlParser();
      element0.elementSiblingIndex();
      document0.previousElementSibling();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Parser.unescapeEntities("]0[:*mOC?=0?|", true);
      // Undeclared exception!
      try { 
        document0.appendTo(element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("button", false);
      Attribute attribute0 = new Attribute("button", "");
      Attributes attributes2 = attributes1.put(attribute0);
      attributes0.addAll(attributes2);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Tag.valueOf("html");
      String string0 = "R%";
      parseSettings0.normalizeTag("button");
      Attributes attributes3 = attributes1.put("R%", "button");
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element$2", attributes3);
      element0.childNodesCopy();
      parseSettings0.normalizeAttribute("org.jsoup.select.Evaluator$Tag");
      element0.getElementsByAttributeValueNot("dl", "pU]z3");
      element0.elementSiblingIndex();
      attributes0.get("pU]z3");
      attributes3.put("org.jsoup.select.evaluator$tag", false);
      element0.clone();
      Element element1 = element0.removeClass("::$RFH'&jK^C/#00nZ");
      // Undeclared exception!
      try { 
        element1.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parse("AttributeValue_singleQuoted", "AttributeValue_singleQuoted");
      document0.getElementsByIndexGreaterThan((-1151));
      document0.siblingIndex = (-1151);
      document0.toggleClass("AttributeValue_singleQuoted");
      document0.hasClass("AttributeValue_singleQuoted");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("HD'\"2]g#", "HD'\"2]g#");
      document0.setParentNode(document0);
      List<DataNode> list0 = new LinkedList<DataNode>();
      // Undeclared exception!
      document0.is("5G,s|DtR3|xC");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Attributes attributes0 = new Attributes();
      parseSettings0.normalizeTag("math");
      Attributes attributes1 = attributes0.clone();
      Attributes attributes2 = attributes1.put("{^|", "textarea");
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes2);
      Element element0 = formElement0.val("required");
      element0.getElementsByAttributeValueContaining("{^|", "textarea");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document0 = Parser.parse("{^|", "{^|");
      document0.clone();
      document0.data();
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, 339, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bm", "bm");
      document0.appendElement("bm");
      document0.text();
      Element element0 = document0.child(1);
      element0.dataset();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("required", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("required", "-qz,ZpoXwlR]&@_\r/W");
      FormElement formElement0 = new FormElement(tag0, "required", attributes1);
      Element element0 = formElement0.val("required");
      element0.selectFirst("required");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parse("s", "s");
      DocumentType documentType0 = new DocumentType("s", "s", "s", "s", "pM}gDMlB");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("2w%:x,");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Document.createShell("attributevalue_singlequoted");
      Document document1 = (Document)document0.toggleClass("attributevalue_singlequoted");
      document0.getElementsContainingOwnText("org.jsoup.parser.Token$Character");
      US_ASCII uS_ASCII0 = (US_ASCII)Charset.defaultCharset();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)0;
      byteArray0[1] = (byte)15;
      byteArray0[2] = (byte)97;
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = uS_ASCII0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(58);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      document_OutputSettings1.charset((Charset) uS_ASCII0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      // Undeclared exception!
      try { 
        document1.outerHtmlTail(charBuffer0, 60, document_OutputSettings2);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nb1", "nb1");
      Element element0 = document0.head();
      Element element1 = element0.lastElementSibling();
      element1.empty();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      String string0 = "x";
      Document document0 = Parser.parseBodyFragment("NB1", "x");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parse("NB1", "NB1");
      document0.getElementsByAttributeValueNot(" ", " ");
      document0.dataNodes();
      document0.cssSelector();
      document0.className();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag.valueOf("required", parseSettings0);
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.title();
      Element element0 = document0.head();
      Document document1 = element0.ownerDocument();
      document1.getElementsMatchingOwnText("required");
      document0.appendElement("br");
      document1.getElementsContainingOwnText("r,zC,K0<mx$.vc");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document.createShell(":contains#,Zwn(%s)");
      Parser.parse(":contains#,Zwn(%s)", ":contains#,Zwn(%s)");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(":contains#,Zwn(%s)");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute(":contains#,Zwn(%s)", "-qz,ZpoXwlR]&@_\r/W");
      Attributes attributes1 = attributes0.clone();
      String[] stringArray0 = new String[1];
      stringArray0[0] = "required";
      attributes1.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "wa2hn}S", attributes1);
      // Undeclared exception!
      try { 
        formElement0.val("required");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("attributevalue_singleqote", "attributevalue_singleqote");
      Document document1 = (Document)document0.toggleClass("attributevalue_singleqote");
      document1.setSiblingIndex(103);
      Document document2 = (Document)document1.toggleClass("attributevalue_singleqote");
      document2.html();
      document1.hasClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parse("NB1", "NB1");
      Element element0 = document0.prependElement("pM}gDMlB");
      element0.val();
      element0.getElementsByAttributeStarting(".>MJ+");
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000085", "java.lang.string@0000000085");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.clone();
      Element element0 = document2.head();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parse("NB1", "NB1");
      document0.dataNodes();
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "NB1");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      String string0 = "s";
      Document document0 = Document.createShell("s");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "s");
      // Undeclared exception!
      try { 
        document0.prependElement("s");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Document.createShell("nqp<r");
      Document document1 = Parser.parse("Children collection to be inserted must not be null.", "93i+_]eq],n");
      List<Node> list0 = document0.childNodesCopy();
      document1.childNodes = list0;
      // Undeclared exception!
      try { 
        document1.getElementsByIndexGreaterThan((-2334));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bm", "java.lang.string@0000000047");
      Element element0 = document0.appendElement("bm");
      element0.addClass("org.jsoup.select.selector$selectorparseexception");
      element0.hasClass("bm");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nqp<r", "nqp<r");
      document0.getElementsByIndexLessThan(56);
      document0.removeClass("NbFFFAc3H^;$R%");
      document0.setParentNode(document0);
      document0.previousElementSiblings();
      document0.getElementsByIndexEquals(56);
      // Undeclared exception!
      document0.after("NbFFFAc3H^;$R%");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Document.createShell("attributevalue_singlequoted");
      Element element0 = document0.toggleClass("attributevalue_singlequoted");
      document0.getElementsByIndexGreaterThan((-706));
      element0.className();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Document.createShell("A/wQ ,^T!?E");
      document0.toggleClass("A/wQ ,^T!?E");
      Element element0 = document0.toggleClass("attributevalue_singlequoted attributevalue_singlequoted");
      document0.html();
      document0.hasClass("'ve");
      element0.hasClass("jk5lI^~8{1");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Document.createShell("attributevalue_singlequoted");
      Element element0 = document0.toggleClass("attributevalue_singlequoted");
      Element element1 = element0.toggleClass("attributevalue_singlequoted");
      element1.html();
      document0.hasClass("attributevalue_singlequoted");
      element0.hasClass("java.lang.string@0000000038");
      Element element2 = document0.toggleClass("attributevalue_singlequoted");
      element2.getElementsByAttributeValueEnding("attributevalue_singlequoted", "class");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Document.createShell("attributevalue_singlequoted");
      Element element0 = document0.toggleClass("attributevalue_singlequoted");
      Element element1 = element0.toggleClass("attributevalue_singlequoted");
      element1.html();
      document0.hasClass("attributevalue_singlequoted");
      element0.hasClass("<html>\n <head></head>\n <body></body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Document.createShell("nqp<r");
      Element element0 = document0.append("   ");
      document0.hasText();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      Document document0 = Parser.parseBodyFragmentRelaxed("base", "base");
      Element element0 = document0.head();
      element0.html((PipedWriter) null);
      element0.appendTo(document0);
      element0.getElementsByIndexLessThan(4);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors((-463));
      Document document0 = parser1.parseInput("np.]", "bkVYUK?@<8dZV#\"");
      Element element0 = document0.toggleClass("np.]");
      document0.toggleClass("\"BswNvA5J#m");
      element0.html();
      element0.hasClass("phlp?[<bt_uvkwlvd");
      String string0 = Node.EmptyString;
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      StringReader stringReader0 = new StringReader("~%,@");
      Document document0 = parser1.parseInput((Reader) stringReader0, "applet");
      String string0 = "c=t}HdCWQ';+?:1";
      Parser.parseXmlFragment("applet", "g=>N3Fto\"y");
      // Undeclared exception!
      try { 
        document0.appendElement("c=t}HdCWQ';+?:1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      String string0 = "";
      Document document0 = Parser.parse("", "");
      document0.hasAttr("");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Comment comment0 = new Comment("");
      Document document1 = (Document)document0.doClone(comment0);
      comment0.childNodesCopy();
      String string1 = "Insert position out of bounds.";
      Document document2 = (Document)document1.attr("", "Insert position out of bounds.");
      String string2 = "I9.\\N]^777]";
      // Undeclared exception!
      try { 
        document2.getElementsByIndexEquals((-2158));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":containsOwn(%s)", ":containsOwn(%s)");
      Element element0 = document0.appendElement("5Y");
      element0.html(":containsOwn(%s)");
      element0.hasClass(":containsOwn(%s)");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Document.createShell("s");
      Element element0 = document0.prependElement("s");
      Element element1 = element0.appendText("s");
      document0.html();
      element1.val();
      document0.getElementsByIndexLessThan(1);
      document0.child(1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Element element0 = document0.head();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Document.createShell("s");
      document0.prependElement("s");
      Element element0 = document0.appendElement("s");
      document0.getElementsByAttributeValueContaining("$es!hO", "$es!hO");
      element0.hasClass("\t4");
      document0.text();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Document.createShell("attributevalue_singlequoted");
      Element element0 = document0.toggleClass("attributevalue_singlequoted");
      Element element1 = element0.toggleClass("attributevalue_singlequoted");
      element1.html();
      document0.hasClass("attributevalue_singlequoted");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell("KPFQP1Wv}");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      document_OutputSettings2.prepareEncoder();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(false);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.syntax(document_OutputSettings_Syntax0);
      document0.outerHtmlTail(stringBuilder0, (-3075), document_OutputSettings4);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":containsOWn(%s)", ":containsOWn(%s)");
      Element element0 = document0.appendElement("5Y");
      List<Node> list0 = element0.childNodesCopy();
      document0.childNodes = list0;
      element0.hasClass(":containsOWn(%s)");
      document0.text();
      // Undeclared exception!
      try { 
        element0.after("jd+c");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Document.createShell("5y");
      Document document1 = document0.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors(8);
      Document document3 = document2.parser(parser1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(8);
      document3.prependElement("5y");
      Document document4 = document3.outputSettings(document_OutputSettings2);
      document4.getElementsByAttribute("5y");
      Element element0 = document4.body();
      element0.html();
      document4.append("5y");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nqp<r", "nqp<r");
      Element element0 = document0.prependElement("fieldset");
      element0.doClone(document0);
      element0.val("fieldset");
      document0.dataset();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("attributevalue_singlequoted", "|1d3ECh?9T");
      Element element0 = document0.toggleClass("|1d3ECh?9T");
      FileSystemHandling.shouldAllThrowIOExceptions();
      element0.hasClass("attributevalue_singlequoted");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      Parser.parseBodyFragment("org.jsoup.select.Evaluator$ContainsOwnText", "textarea");
      Element element0 = document0.prependElement("textarea");
      element0.val("org.jsoup.select.Evaluator$ContainsOwnText");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#4_{!M\"C<", "[CDATA[");
      Element element0 = document0.appendElement("#4_{!M\"C<");
      document0.append("`M+b>)$73im>Jk");
      document0.text();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = new Document("em");
      TextNode textNode0 = new TextNode("em");
      document0.setParentNode(textNode0);
      document0.getElementsByClass("em");
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document.createShell("s");
      Document document0 = Parser.parseBodyFragment("l<1^\"lyg}l4r", "l<1^\"lyg}l4r");
      document0.prependElement("4{3X@R yEPJiH*K;");
      Document document1 = new Document("u?f_%tS0]`LR8bw=**");
      document1.val("u?f_%tS0]`LR8bw=**");
      document1.val();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      Element element0 = document0.prependElement("org.jsoup.select.Evaluator$ContainsOwnText");
      document0.setParentNode(element0);
      document0.previousElementSiblings();
      // Undeclared exception!
      try { 
        document0.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Document.createShell("KPFQP1Wv}");
      Element element0 = document0.append("KPFQP1Wv}");
      document0.hasText();
      Element element1 = element0.html("KPFQP1Wv}");
      element1.prepend("#xq#cogscgxz47");
      element0.getElementsByIndexEquals(5);
      // Undeclared exception!
      try { 
        document0.text("#xq#cogscgxz47");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      Parser.parseBodyFragment("org.jsoup.select.Evaluator$ContainsOwnText", "textarea");
      Element element0 = document0.prependElement("textarea");
      element0.val("");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[CDATAb_[", "[CDATAb_[");
      document0.getElementsByClass("[CDATAb_[");
      document0.selectFirst(":last-child");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      Parser.parseBodyFragment("org.jsoup.select.Evaluator$ContainsOwnText", "textarea");
      Element element0 = document0.prependElement("textarea");
      element0.val("");
      document0.getElementsByIndexGreaterThan(845);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parse("ascii", "ascii");
      document0.appendElement("br");
      document0.hasClass("ascii");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      EvoSuiteFile evoSuiteFile0 = null;
      String string0 = "juoNXiT/JQwA";
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "juoNXiT/JQwA");
      Document document0 = Parser.parseBodyFragmentRelaxed("PMJuB/HDsmyb0", "PMJuB/HDsmyb0");
      Comment comment0 = new Comment("juoNXiT/JQwA", "1RR:%5.$&PT*}'*_");
      comment0.shallowClone();
      Document document1 = (Document)document0.prependChild(comment0);
      Document document2 = (Document)document1.appendText("1RR:%5.$&PT*}'*_");
      document0.ownText();
      document0.hasText();
      document1.wholeText();
      document2.text();
      document1.val();
      document1.clone();
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.valuator$ContainsOwnText", "org.jsoup.select.valuator$ContainsOwnText");
      Element element0 = document0.head();
      element0.before("org.jsoup.select.valuator$ContainsOwnText");
      element0.cssSelector();
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "dEI&{c");
      Document document1 = (Document)document0.append("org.jsoup.select.Evaluator$ContainsOwnText");
      Element element0 = document1.createElement("xyZ\"Zj?S&@k7~%$9");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      TextNode textNode0 = TextNode.createFromEncoded("#root");
      nodeArray0[3] = (Node) textNode0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) element0;
      nodeArray0[6] = (Node) document1;
      nodeArray0[7] = (Node) element0;
      element0.addChildren(nodeArray0);
      document1.doClone(document0);
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.getElementsContainingOwnText("G 6?D7Krh#)wmKL$B");
      String string0 = Node.EmptyString;
      document0.text();
      // Undeclared exception!
      element0.attr("dEI&{c", "xyZ\"Zj?S&@k7~%$9");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document0 = Parser.parseBodyFragment("d^nx'gjih", "d^nx'gjih");
      String string0 = "([+-])?(\\d+)";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "([+-])?(d+)");
      Parser parser0 = Parser.htmlParser();
      Document document1 = document0.parser(parser0);
      Element element0 = document1.head();
      element0.firstElementSibling();
      document1.childNodes();
      element0.addClass("d^nx'gjih");
      Element element1 = element0.before((Node) document1);
      document0.tag();
      String string1 = "0";
      element1.prependText("0");
      // Undeclared exception!
      try { 
        document0.selectFirst("([+-])?(d+)");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '([+-])?(d+)': unexpected token at '([+-])?(d+)'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors((-3));
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Parser.parseXmlFragment("zf|f#sCfl}q`H1>:BZ", "textarea");
      Parser.parseXmlFragment(")\";", "attributes incorrectly present on end tag");
      Document document0 = parser1.parseInput("R=F", "wR:\u0004;0E/X^ow$PX>`o");
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag("LYD1<#KJ-{");
      document0.is((Evaluator) evaluator_Tag0);
      Element element0 = document0.addClass("gbh(;hm\"7v=a2o5|#dm");
      element0.children();
      document0.tag();
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "#");
      Document document0 = Document.createShell("{6ZJZ");
      Element element0 = document0.body();
      element0.after("</");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" > ", " > ");
      document0.append(" > ");
      document0.text();
      document0.getElementsByAttributeValueEnding(" > ", "zH&");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      Document document0 = Parser.parseBodyFragment("g>0u", "g>0u");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByClass("org.jsoup.select.Evaluator$ContainsOwnText");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.valuator$ContainsOwnText", "org.jsoup.select.valuator$ContainsOwnText");
      Element element0 = document0.prependElement("org.jsoup.select.valuator$ContainsOwnText");
      element0.cssSelector();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "org.jsoup.select.valuator$containsowntext");
      document0.setParentNode(element0);
      document0.cssSelector();
      document0.text();
      document0.previousElementSiblings();
      document0.getElementsContainingText("org.jsoup.select.valuator$containsowntext > #root");
      // Undeclared exception!
      try { 
        element0.prependChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      String string0 = "h2";
      Document document0 = new Document("h2");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      String string1 = ":kZqf4Hp&*U4}*E";
      Element element1 = element0.append(":kZqf4Hp&*U4}*E");
      document1.setParentNode(element0);
      element1.val();
      document0.clone();
      element0.after((Node) document1);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[CDATA[", "[CDATA[");
      Element element0 = document0.append("[CDATA[");
      element0.siblingIndex = (-443);
      element0.text();
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      String string0 = "{6ZJZ";
      Document document0 = Document.createShell("{6ZJZ");
      MockFileWriter mockFileWriter0 = new MockFileWriter("{6ZJZ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(true);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(true);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockFileWriter0, (-1070), document_OutputSettings4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("uaAA-", "s");
      Element element0 = document0.head();
      document0.setParentNode(element0);
      document0.text();
      document0.previousElementSiblings();
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      document0.attributes();
      Element element0 = document0.prependElement("}q");
      document0.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      document0.previousElementSiblings();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      document0.cssSelector();
      DataNode dataNode0 = new DataNode("org.jsoup.select.Evaluator$ContainsOwnText");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte)1;
      byteArray0[1] = (byte) (-108);
      byteArray0[2] = (byte)110;
      byteArray0[3] = (byte)96;
      byteArray0[4] = (byte)60;
      byteArray0[5] = (byte)65;
      byteArray0[6] = (byte)4;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      Element element0 = document0.appendElement("org.jsoup.select.Evaluator$ContainsOwnText");
      element0.tagName("NfnJLrQ]hwG!2BE`");
      document0.getElementsByAttributeValue("org.jsoup.select.Evaluator$ContainsOwnText", "alj[");
      document0.append(":HlW^]");
      document0.text();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.valuator$ContainsOwnText", "org.jsoup.select.valuator$ContainsOwnText");
      document0.prependElement("org.jsoup.select.valuator$ContainsOwnText");
      document0.cssSelector();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document1 = document0.clone();
      CDataNode cDataNode0 = new CDataNode("#root");
      Node node0 = cDataNode0.shallowClone();
      document1.setParentNode(node0);
      document0.cssSelector();
      document0.text();
      // Undeclared exception!
      try { 
        document1.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(",", ",");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document1 = Parser.parse("9;ewv23ujl_=czd(", "9;ewv23ujl_=czd(");
      Element element0 = document0.appendElement("7jC");
      document0.append("bid#/h!}m{tqamn4[fl");
      document1.text();
      element0.after("9;ewv23ujl_=czd(");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Document.createShell("{6s");
      Parser.parse("*", "{6s");
      Element element0 = document0.appendElement("p&");
      document0.append(":matches(");
      document0.text();
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.valuator$ContainsOwnText", "org.jsoup.select.valuator$ContainsOwnText");
      Element element0 = document0.prependElement("org.jsoup.select.valuator$ContainsOwnText");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document0.setParentNode(element0);
      Document document1 = document0.normalise();
      document1.val();
      document0.previousElementSibling();
      // Undeclared exception!
      element0.prepend("dW5x]dC4=u|");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      Element element0 = document0.head();
      document0.setParentNode(element0);
      Element element1 = element0.appendTo(document0);
      element1.getAllElements();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6");
      document0.text();
      document0.nextElementSiblings();
      // Undeclared exception!
      try { 
        element0.appendChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      Element element0 = document0.prependElement("org.jsoup.select.Evaluator$ContainsOwnText");
      element0.cssSelector();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document0.setParentNode(element0);
      document0.cssSelector();
      String string0 = Node.EmptyString;
      Document document1 = document0.clone();
      document1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      Element element0 = document0.prependElement("S_v8L/s");
      Element element1 = element0.val("S_v8L/s");
      element1.previousElementSibling();
      // Undeclared exception!
      try { 
        element0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parse("MD6", "*");
      Element element0 = document0.appendElement(" > ");
      Document document1 = Parser.parse("*", "MD6");
      document0.prependElement("MD6");
      element0.val();
      document1.val("mark");
      element0.attr("#(w/cq8G9?", false);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p#", "p#");
      Element element0 = document0.prependElement("p#");
      element0.val((String) null);
      // Undeclared exception!
      try { 
        element0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document0 = Document.createShell("xn;");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      document_OutputSettings1.indentAmount(23);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      document_OutputSettings2.clone();
      Charset charset0 = document0.charset();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.charset(charset0);
      Document document1 = document0.outputSettings(document_OutputSettings3);
      document1.classNames();
      document0.ownText();
      document0.html("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("xn;", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nqp<r", "nqp<r");
      Element element0 = document0.prependElement("nqp<r");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) element0;
      document0.addChildren(nodeArray0);
      document0.cssSelector();
      String string0 = Node.EmptyString;
      Element element1 = element0.previousElementSibling();
      document0.nextElementSibling();
      element0.getElementsMatchingText("TM;Y-WV");
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nqp<r", "nqp<r");
      Element element0 = document0.prependElement("nqp<r");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      element0.siblingIndex = (-164);
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) element0;
      element0.data();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.appendElement("S_v8L/s");
      document0.prependElement("S_v8L/s");
      String string0 = Node.EmptyString;
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Document.createShell("6s");
      CDataNode cDataNode0 = new CDataNode("6s");
      Node node0 = cDataNode0.doClone(document0);
      Element element0 = document0.appendChild(node0);
      document0.prependElement("ol");
      document0.val();
      element0.cssSelector();
      document0.text();
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s", "s");
      document0.prependElement("s");
      Element element0 = document0.body();
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.html();
      document0.text();
      document0.hasText();
      element0.prependText("g");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      Document document1 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "class");
      document0.cssSelector();
      Element element0 = document1.appendChild(document0);
      document1.prependElement("s");
      document0.val();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      document0.cssSelector();
      document1.text();
      element0.hasText();
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        element0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document1 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "class");
      document0.cssSelector();
      document1.appendChild(document0);
      document1.prependElement("s");
      document0.val();
      document0.cssSelector();
      document1.html();
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      Document document1 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "class");
      document0.cssSelector();
      Document document2 = (Document)document1.appendChild(document0);
      document1.prependElement("s");
      document0.append("org.jsoup.select.Evaluator$ContainsOwnText");
      document0.val();
      document0.cssSelector();
      document1.text();
      document1.text();
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.indentAmount(3449);
      // Undeclared exception!
      try { 
        document2.outerHtmlHead(mockFileWriter0, 3449, document_OutputSettings4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Tag tag0 = Tag.valueOf("6s");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("6s", true);
      Attributes attributes2 = attributes1.put("6s", "NAsyiW2ZOQBeeO");
      Attribute attribute0 = Attribute.createFromEncoded("head", "NAsyiW2ZOQBeeO");
      Attributes attributes3 = attributes2.put(attribute0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "6s", attributes3);
      pseudoTextElement0.getElementsByAttributeStarting("head");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document0 = Parser.parseBodyFragment("&E<t_jBem><~__4|", "s_v8/s");
      Element.preserveWhitespace(document0);
      int int0 = 60;
      Pattern pattern0 = Pattern.compile("s_v8/s", 60);
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      pattern0.split((CharSequence) "&E<t_jBem><~__4|");
      pattern0.split((CharSequence) "s_v8/s");
      document0.getElementsMatchingText(pattern0);
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("org.jsoup.nodes.Element$2", false);
      Element element0 = document0.prependChild(xmlDeclaration0);
      element0.parentNode = (Node) xmlDeclaration0;
      element0.appendText("oI");
      document0.getElementsByAttributeValueMatching("&E<t_jBem><~__4|", "oI");
      // Undeclared exception!
      document0.attr("org.jsoup.nodes.Element$2", (String) null);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = new Document("l:`Spr&f/1 |M1w6dJ[");
      Document document1 = document0.normalise();
      Element element0 = document0.prependElement("base");
      element0.appendText("base");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document1.html();
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("h,7GjiNfpiA&>J>", "Vv(Si/![-`0y{vb|5");
      document0.ensureChildNodes();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Element element0 = document0.body();
      element0.text();
      Element element1 = document0.val("h,7GjiNfpiA&>J>");
      document0.previousElementSiblings();
      MockFile mockFile0 = new MockFile("Vv(Si/![-`0y{vb|5");
      MockFile mockFile1 = new MockFile(mockFile0, "h,7GjiNfpiA&>J>");
      mockFile1.toPath();
      mockFile1.setWritable(true);
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1, false);
      element1.html(mockFileWriter0);
      char[] charArray0 = new char[5];
      charArray0[0] = '(';
      charArray0[1] = 'h';
      charArray0[2] = 'r';
      charArray0[3] = 'O';
      charArray0[4] = '\"';
      mockFileWriter0.write(charArray0);
      element1.getElementsContainingText("h,7GjiNfpiA&>J>");
      Element element2 = element0.after((Node) document0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlTail(mockFileWriter0, 70, document_OutputSettings0);
      element2.appendTo(document0);
      // Undeclared exception!
      try { 
        element1.data();
        fail("Expecting exception: StackOverflowError");
      
      } catch(StackOverflowError e) {
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$ContainsOwnText");
      document0.append("org.jsoup.select.Evaluator$ContainsOwnText");
      document0.hasText();
      document0.getElementsByAttributeStarting("org.jsoup.select.Evaluator$ContainsOwnText");
      StringBuilder stringBuilder0 = new StringBuilder("org.jsoup.select.Evaluator$ContainsOwnText");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringBuilder0, (-699), document_OutputSettings4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      Document document1 = new Document("}F");
      Element element0 = document1.prependElement("}F");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document1.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      document0.text();
      // Undeclared exception!
      try { 
        element0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("uaAA-", "s");
      Element element0 = document0.prependElement("uaAA-");
      document0.setParentNode(element0);
      document0.text();
      document0.previousElementSiblings();
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.appendElement("S_v8L/s");
      Element element1 = document0.prependElement("S_v8L/s");
      Element element2 = element1.text("org.jsoup.select.Evaluator$ContainsOwnText");
      document0.text();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element2;
      nodeArray0[2] = (Node) element1;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) element2;
      nodeArray0[6] = (Node) element2;
      nodeArray0[7] = (Node) element0;
      // Undeclared exception!
      try { 
        element1.insertChildren((-1911), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = new Document("l:`Spr&f/1 |M1w6dJ[");
      Document document1 = document0.normalise();
      document0.prependElement("base");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document1.html();
      document1.setParentNode(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      Document document1 = new Document("org.jsoup.select.Evaluator$ContainsOwnText");
      Document document2 = document1.normalise();
      Element element0 = document2.prependElement("org.jsoup.select.Evaluator$ContainsOwnText");
      document1.html();
      document2.setParentNode(element0);
      document0.text();
      document1.dataNodes();
      // Undeclared exception!
      document1.wrap("Xx_EQyP15DK,|:$=");
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "");
      Document document1 = document0.clone();
      document1.getElementsByAttributeValueMatching("", "~9S");
      document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = new Document("=6k^slo_h59%p'o3");
      document2.html();
      document1.baseUri();
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parse("rg.jsoup.elec=.Evalua6or$ContainsOwnText", "rg.jsoup.elec=.Evalua6or$ContainsOwnText");
      Element element0 = document0.body();
      Document document1 = Parser.parse("rg.jsoup.elec=.Evalua6or$ContainsOwnText", "rg.jsoup.elec=.Evalua6or$ContainsOwnText");
      Element element1 = document1.prependElement("[ObJL]jS ;mjy>'");
      String string0 = Node.EmptyString;
      element1.nextElementSiblings();
      element0.previousElementSibling();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("l", "l");
      List<DataNode> list0 = new LinkedList<DataNode>();
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parse("rg.jsoup.elec=.Evalua6or$ContainsOwnText", "rg.jsoup.elec=.Evalua6or$ContainsOwnText");
      Element element0 = document0.body();
      Document document1 = Parser.parse("rg.jsoup.elec=.Evalua6or$ContainsOwnText", "rg.jsoup.elec=.Evalua6or$ContainsOwnText");
      Element element1 = document1.prependElement("[ObJL]jS ;mjy>'");
      element0.getElementsContainingOwnText("rg.jsoup.elec=.Evalua6or$ContainsOwnText");
      // Undeclared exception!
      try { 
        element1.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parse("EM-TAMDlW\"v5{2", " > ");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element0 = document0.body();
      String string0 = "8>JLIWwrzT0A#6";
      element0.siblingIndex = (-1436010313);
      Pattern pattern0 = Pattern.compile("8>JLIWwrzT0A#6");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching(" > ", pattern0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parse("G 6?D7Krh#)wmKL$B", "G 6?D7Krh#)wmKL$B");
      Document document1 = document0.clone();
      Element element0 = document1.body();
      element0.val();
      String string0 = Node.EmptyString;
      document0.text();
      Element element1 = element0.before((Node) document0);
      element1.appendElement("\"h'");
      Element.preserveWhitespace(document1);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("rg.jsoup.elec=.Evalua6or$ContainsOwnText", "rg.jsoup.elec=.Evalua6or$ContainsOwnText");
      Element element0 = document0.body();
      Document document1 = Parser.parse("rg.jsoup.elec=.Evalua6or$ContainsOwnText", "rg.jsoup.elec=.Evalua6or$ContainsOwnText");
      Element element1 = document1.prependElement("[ObJL]jS ;mjy>'");
      String string0 = Node.EmptyString;
      element1.nextElementSiblings();
      element0.previousElementSibling();
      element0.appendText("ZBFW2N5!8F3z5$");
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      parseSettings0.normalizeAttribute("n>+rQ9NX@iZenG^");
      Tag.valueOf("T*LW Ijdexq$t4|X", parseSettings0);
      ParseSettings parseSettings1 = new ParseSettings(true, true);
      Tag.valueOf("T*LW Ijdexq$t4|X", parseSettings1);
      Tag.valueOf("autofocus");
      Element element0 = new Element(tag0, "textarea");
      Tag.valueOf("p(fI");
      int int0 = 4299;
      Tag.valueOf("T*LW Ijdexq$t4|X", parseSettings1);
      element0.getElementsByIndexEquals(4299);
      element0.cssSelector();
      Element element1 = element0.clone();
      Element element2 = element1.append("textarea");
      Element element3 = element0.doClone(element2);
      element3.html("T*LW Ijdexq$t4|X");
      element3.nextSibling();
      // Undeclared exception!
      try { 
        element3.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parse("rg.jsoup.elec=.Evalua6or$ContainsOwnText", "rg.jsoup.elec=.Evalua6or$ContainsOwnText");
      Element element0 = document0.body();
      Document document1 = Parser.parse("rg.jsoup.elec=.Evalua6or$ContainsOwnText", "rg.jsoup.elec=.Evalua6or$ContainsOwnText");
      document1.getElementsByAttributeStarting("rg.jsoup.elec=.Evalua6or$ContainsOwnText");
      Element element1 = document1.prependElement("[ObJL]jS ;mjy>'");
      element1.previousElementSibling();
      element0.prepend("head");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x", "x");
      Element element0 = document0.head();
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.setParentNode(element0);
      document0.val();
      document0.text();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x", "x");
      Element element0 = document0.prependElement("x");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.setParentNode(element0);
      document0.val();
      document0.text();
      element0.selectFirst("x");
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x", "x");
      Element element0 = document0.prependElement("x");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      element0.getElementsByAttribute("x");
      document0.siblingElements();
      document0.setParentNode(element0);
      document0.val();
      // Undeclared exception!
      try { 
        element0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.prependElement("S_v8L/s");
      element0.val();
      document0.text();
      element0.before((Node) document0);
      // Undeclared exception!
      document0.html("S_v8L/s");
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = new Document("s");
      Document document1 = document0.normalise();
      Element element0 = document1.prependElement("s");
      document0.append("s");
      // Undeclared exception!
      try { 
        element0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x", "x");
      Element element0 = document0.prependElement("x");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.setParentNode(element0);
      document0.val();
      document0.text();
      // Undeclared exception!
      try { 
        element0.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x", "x");
      Element element0 = document0.prependElement("x");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.setParentNode(element0);
      element0.hasClass("org.jsoup.nodes.Element$1");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset((Charset) null);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(false);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      document_OutputSettings2.escapeMode(entities_EscapeMode0);
      Document document1 = document0.outputSettings(document_OutputSettings3);
      document1.select("x");
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "9$\"ZG!#t=");
      String string0 = "!";
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("!", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("!");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      FormElement formElement0 = new FormElement(tag0, "!", attributes1);
      formElement0.parentNode = (Node) cDataNode0;
      parseSettings0.normalizeAttribute("!");
      Tag.valueOf("dHA\"BxrKUH{c_U!");
      TextNode.createFromEncoded("dHA\"BxrKUH{c_U!");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Element element0 = formElement0.removeClass("!");
      formElement0.baseUri();
      // Undeclared exception!
      try { 
        formElement0.appendChild(element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x", "x");
      Element element0 = document0.prependElement("x");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      document0.setParentNode(element0);
      document0.text();
      // Undeclared exception!
      try { 
        document0.appendTo(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = new Document("s");
      Document document1 = document0.ownerDocument();
      Element element0 = document1.prependElement("s");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.getElementsContainingOwnText("s");
      document1.html();
      document0.setParentNode(document1);
      element0.val();
      document0.previousElementSibling();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      // Undeclared exception!
      document1.html(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("WCzf;pg]93Ij{mQ", "WCzf;pg]93Ij{mQ");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Element element0 = document0.body();
      element0.appendTo(document0);
      document0.dataNodes();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x", "x");
      Element element0 = document0.prependElement("x");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.getElementsContainingOwnText("x");
      document0.html();
      document0.setParentNode(element0);
      element0.val();
      // Undeclared exception!
      element0.prependElement("\"2.\"J8");
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Parser.xmlParser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(60);
      document_OutputSettings0.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Charset.defaultCharset();
      Node[] nodeArray0 = new Node[3];
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      Element element0 = document0.head();
      element0.shallowClone();
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      // Undeclared exception!
      document0.outerHtmlTail(charArrayWriter0, 1678, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("rg.jsoup.elec=.Evalua6or$ContainsOwnText", "rg.jsoup.elec=.Evalua6or$ContainsOwnText");
      Element element0 = document0.body();
      Elements elements0 = document0.nextElementSiblings();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      element1.getElementsContainingOwnText("rg.jsoup.elec=.Evalua6or$ContainsOwnText");
      document0.ownText();
      element1.childNodeSize();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "");
      element1.siblingElements();
      document0.hasText();
      Pattern pattern0 = Pattern.compile("", 1);
      element0.getElementsMatchingText(pattern0);
      element0.nextElementSiblings();
      element1.previousElementSibling();
      element1.nodeName();
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("_r[WU H>A", "rT[$*MPdC@4{");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      element0.wrap("_r[WU H>A");
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s", "s");
      Comment comment0 = new Comment("2xc37AY|r2E$`)Ktu");
      document0.setParentNode(comment0);
      document0.val();
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      Element element0 = document0.prependElement("S_v8L/s");
      Elements elements0 = document0.nextElementSiblings();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      element1.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      element1.childNodeSize();
      element0.getElementsByClass("org.jsoup.select.Evaluator$ContainsOwnText");
      element0.data();
      Element element2 = element1.val("S_v8L/s");
      element2.addClass(":gwPd_tn2;rQ0|I");
      document0.text();
      element1.getElementsByAttributeValue("I6KIL", "s_/s");
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x", "x");
      Element element0 = document0.prependElement("x");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.getElementsContainingOwnText("x");
      document0.html();
      document0.setParentNode(element0);
      document0.data();
      // Undeclared exception!
      element0.val("<x></x>\n<html>\n <head></head>\n <body>\n  x\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "");
      Document document1 = Parser.parse("@s+47>SuIBVxfY", "@s+47>SuIBVxfY");
      Element element0 = document0.prependElement("org.jsoup.parser.Token$CData");
      document1.val();
      element0.after("");
      element0.nextElementSiblings();
      element0.previousElementSibling();
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x", "x");
      Element element0 = document0.prependElement("x");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.getElementsContainingOwnText("x");
      document0.html();
      document0.setParentNode(element0);
      document0.val();
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Document document1 = (Document)document0.toggleClass("#root");
      document0.hasText();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.normalise();
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      document1.setParentNode(document0);
      document2.val();
      Document document3 = document2.clone();
      document3.nextElementSiblings();
      document2.hasClass("#root");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("{2N/gN");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      String string0 = "org.jsoup.nodes.Eleent";
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Eleent", 15);
      document1.getElementsMatchingOwnText(pattern0);
      Element element0 = document1.appendChild(document0);
      document1.appendChild(element0);
      document0.classNames();
      // Undeclared exception!
      document1.tagName("org.jsoup.nodes.Eleent");
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "@s+47>SuIBVxfY");
      Document document1 = Parser.parse("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      Element element0 = document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.normalise();
      Element element1 = document1.body();
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      document_OutputSettings1.outline(false);
      document_OutputSettings0.clone();
      element0.getElementsByAttributeStarting("org.jsoup.nodes.Element");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      document1.insertChildren(1, nodeArray0);
      element0.getElementsMatchingText("org.jsoup.nodes.Element");
      // Undeclared exception!
      element1.before("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x", "x");
      document0.getElementsByAttribute("x");
      document0.dataNodes();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, (-1939758402), document_OutputSettings3);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parse("rg.jsoup.elec=.Evalua6or$ContainsOwnText", "rg.jsoup.elec=.Evalua6or$ContainsOwnText");
      Element element0 = document0.body();
      Elements elements0 = document0.nextElementSiblings();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      element1.getElementsContainingOwnText("rg.jsoup.elec=.Evalua6or$ContainsOwnText");
      document0.ownText();
      element1.childNodeSize();
      element1.siblingElements();
      document0.hasText();
      element0.nextElementSiblings();
      Element element2 = element1.previousElementSibling();
      element1.parents();
      element2.appendElement("rg.jsoup.elec=.Evalua6or$ContainsOwnText");
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x", "x");
      Element element0 = document0.prependElement("x");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-10);
      byteArray0[1] = (byte) (-96);
      byteArray0[2] = (byte) (-35);
      byteArray0[3] = (byte) (-120);
      byteArray0[4] = (byte) (-49);
      byteArray0[5] = (byte) (-106);
      byteArray0[6] = (byte)26;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      document0.getElementsByAttributeStarting("x");
      Element element1 = element0.lastElementSibling();
      Element element2 = element1.val("Tag name must not be empty.");
      element2.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      document0.body();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x", "x");
      Element element0 = document0.prependElement("x");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.getElementsContainingOwnText("x");
      document0.html();
      document0.text();
      Tag tag0 = Tag.valueOf("</");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      FormElement formElement0 = new FormElement(tag0, "\"5oF`>Gl,", attributes1);
      FormElement formElement1 = formElement0.addElement(document0);
      element0.appendTo(formElement1);
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "@s+47>SuIBVxfY");
      Document document1 = new Document("org.jsoup.nodes.Element");
      Element element0 = document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.normalise();
      Element element1 = document1.body();
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      document1.outerHtml();
      document_OutputSettings1.outline(false);
      document_OutputSettings0.clone();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      element0.getElementsMatchingText("org.jsoup.nodes.Element");
      document0.elementSiblingIndex();
      element1.tag();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      Element element0 = document0.prependElement("S_v8L/s");
      Elements elements0 = document0.nextElementSiblings();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      element1.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      element1.childNodeSize();
      document0.val();
      document0.text();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "i9G)5@VEWR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVnfY", "");
      document0.prependElement("t\"E");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.childNodesCopy();
      document0.getElementsContainingOwnText("org.jsoup.nodes.Document$QuirksMode");
      Parser parser0 = Parser.htmlParser();
      Document document1 = document0.parser(parser0);
      document1.html();
      document1.text();
      // Undeclared exception!
      try { 
        document1.html((StringWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s", "s");
      document0.setSiblingIndex((-3126));
      Element element0 = document0.val(" mP:ZfX8-?[mdY_5");
      element0.nextElementSiblings();
      Document document1 = Parser.parseBodyFragmentRelaxed("s", "s");
      document1.text();
      document1.attributes();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      Document document0 = Parser.parse("org.jsoup.select.Evaluaor$ContainsOwnText", "org.jsoup.select.Evaluaor$ContainsOwnText");
      document0.data();
      String string0 = Node.EmptyString;
      document0.appendElement("h5");
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Document.createShell("");
      StringBuilder stringBuilder0 = new StringBuilder();
      StringBuilder stringBuilder1 = stringBuilder0.append(1);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      StringBuilder stringBuilder2 = stringBuilder1.append((Object) "2#nLKa.Jd@");
      StringBuilder stringBuilder3 = stringBuilder2.append(0.0F);
      StringBuilder stringBuilder4 = stringBuilder3.reverse();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      document0.outerHtmlTail(stringBuilder4, 1, document_OutputSettings1);
      document0.append("2#nLKa.Jd@");
      document0.hasText();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag.valueOf("2#nLKa.Jd@", parseSettings0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Element element0 = new Element("^SwRfM");
      element0.html();
      element0.getElementsMatchingText("^SwRfM");
      element0.removeClass("");
      element0.data();
      element0.getElementsMatchingOwnText("%D$]pXbjegB#ny=$*dq");
      CDataNode cDataNode0 = new CDataNode("%D$]pXbjegB#ny=$*dq");
      Node node0 = cDataNode0.doClone(element0);
      // Undeclared exception!
      try { 
        element0.before(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x", "x");
      Element element0 = document0.prependElement(" > ");
      Elements elements0 = document0.nextElementSiblings();
      Element element1 = document0.insertChildren(0, (Collection<? extends Node>) elements0);
      element1.getElementsContainingOwnText("S_v8L/s");
      Document document1 = Parser.parse("'sEB.{Rg%nt$~a", "org.jsoup.select.Evaluator");
      document1.childNodeSize();
      element1.siblingElements();
      element0.data();
      document0.val("2ak(N&OM?q|-!6%,vH");
      Node[] nodeArray0 = new Node[0];
      element1.insertChildren((-1), nodeArray0);
      Document document2 = new Document("'sEB.{Rg%nt$~a");
      // Undeclared exception!
      try { 
        document2.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      String string0 = "G 6?D7Krh#)wmKL$B";
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.prependElement("S_v8L/s");
      Element element1 = document0.head();
      Element element2 = element1.val("G 6?D7Krh#)wmKL$B");
      element0.appendChild(element2);
      // Undeclared exception!
      try { 
        element2.insertChildren(732, (Node[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Children collection to be inserted must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Tag tag0 = Tag.valueOf("g 6?d7krh#)wmkl$b");
      CDataNode cDataNode0 = new CDataNode("g 6?d7krh#)wmkl$b");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("g 6?d7krh#)wmkl$b", "s");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "g 6?d7krh#)wmkl$b", attributes1);
      cDataNode0.previousSibling();
      pseudoTextElement0.hasClass("?o]dd_xD01l7$");
      pseudoTextElement0.getElementsMatchingOwnText("s");
      attributes1.dataset();
      pseudoTextElement0.children();
      Element element0 = pseudoTextElement0.prepend("g 6?d7krh#)wmkl$b");
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-94);
      byteArray0[1] = (byte)46;
      byteArray0[2] = (byte)58;
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)62;
      byteArray0[6] = (byte) (-26);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      // Undeclared exception!
      try { 
        element0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "");
      Document document1 = new Document("");
      document1.getElementsByAttributeValueMatching("6VIN0V--", "6VIN0V--");
      Document document2 = (Document)document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document3 = document1.normalise();
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      document2.setParentNode(document0);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("6VIN0V--", parseSettings0);
      parseSettings0.normalizeTag("@s+47>SuIBVxfY");
      document3.cssSelector();
      Element element0 = new Element(tag0, "@s+47>SuIBVxfY");
      document2.hasClass("#root");
      document0.before((Node) document3);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      Element element0 = document0.prependElement("S_v8L/s");
      Elements elements0 = document0.nextElementSiblings();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      element1.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      element1.siblingElements();
      String string0 = Node.EmptyString;
      document0.hasText();
      element1.nextElementSiblings();
      element0.getElementsContainingOwnText("J}e\"}[: ");
      element0.previousElementSibling();
      element1.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = new Document("@s+47>SuIBVxfY");
      Document document1 = new Document("org.jsoup.ndes.Element");
      Element element0 = document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.normalise();
      Element element1 = document1.body();
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      element1.previousElementSiblings();
      Element element2 = element0.toggleClass("org.jsoup.UncheckedIOException");
      element2.data();
      Element element3 = element1.val("org.jsoup.ndes.Element");
      document0.hasText();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6rTyE3|UB{X&!");
      element2.nextElementSiblings();
      element2.hasClass("org.jsoup.UncheckedIOException");
      element3.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = new Document("@s+47>SuIBVxfY");
      Document document1 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "+2+pCiM1|JC~bf~q!7");
      Element element0 = document1.prependChild(document0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document0.normalise();
      document1.body();
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      document1.toggleClass("rp");
      document0.data();
      Element element1 = document1.val("hr'6WNaUkL");
      element1.html("+2+pCiM1|JC~bf~q!7");
      document2.hasText();
      document0.nextElementSiblings();
      element0.hasClass("EndTag");
      document2.cssSelector();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      Element element0 = document0.prependElement("S_v8L/s");
      Elements elements0 = document0.nextElementSiblings();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      element1.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      element1.childNodeSize();
      element1.siblingElements();
      element0.data();
      Element element2 = element1.val("S_v8L/s");
      element0.nextElementSiblings();
      element1.after((Node) element2);
      document0.dataNodes();
      element2.getElementsByIndexGreaterThan(0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.prependElement("S_v8L/s");
      Element element1 = document0.head();
      element0.val();
      element0.nextElementSiblings();
      element1.hasClass("G 6?D7Krh#)wmKL$B");
      element1.clone();
      element1.removeAttr("");
      element1.prependText("#root");
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element");
      Document document1 = new Document("org.jsoup.nodes.Element");
      Element element0 = document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.normalise();
      Element element1 = document1.body();
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      Document.createShell("org.jsoup.nodes.Element");
      Element element2 = element0.toggleClass("org.jsoup.UncheckedIOException");
      element2.data();
      Element element3 = element1.val("hr'6WNaUkL");
      document0.hasText();
      element2.nextElementSiblings();
      element0.hasClass("org.jsoup.nodes.Element");
      element3.getElementById("org.jsoup.nodes.Element");
      element3.toggleClass("");
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      parseSettings0.normalizeAttribute("n>+rQ9NX@iZenG^");
      Tag.valueOf("T*LW Ijdexq$t4|X", parseSettings0);
      ParseSettings parseSettings1 = new ParseSettings(true, true);
      Tag.valueOf("T*LW Ijdexq$t4|X", parseSettings1);
      Element element0 = new Element(tag0, "textarea");
      Tag.valueOf("p(fI");
      int int0 = 4299;
      Tag.valueOf("T*LW Ijdexq$t4|X", parseSettings1);
      element0.getElementsByIndexEquals(4299);
      element0.cssSelector();
      Element element1 = element0.clone();
      Element element2 = element1.append("textarea");
      Element element3 = element0.doClone(element2);
      element3.nextSibling();
      // Undeclared exception!
      try { 
        element3.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "org.jsoup.nodes.Element");
      Document document1 = new Document("org.jsoup.nodes.Element");
      Element element0 = document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.normalise();
      Element element1 = document1.body();
      element1.attr("@s+47>SuIBVxfY", "'$kf");
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      document_OutputSettings1.outline(false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      document_OutputSettings0.clone();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      document1.insertChildren(1, nodeArray0);
      element0.getElementsMatchingText("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "org.jsoup.nodes.Elpment");
      Document document1 = new Document("org.jsoup.nodes.Elpment");
      Element element0 = document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.normalise();
      Element element1 = document1.body();
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      Element element2 = element0.toggleClass("org.j{oup.UncheckedIOException");
      element2.data();
      Element element3 = element1.val("hr'6WNaUkL");
      document0.hasText();
      element2.nextElementSiblings();
      element2.hasClass("org.j{oup.UncheckedIOException");
      element3.getElementsByIndexGreaterThan((-1733));
      // Undeclared exception!
      try { 
        element1.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors(10);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser2 = parser1.settings(parseSettings0);
      Document document0 = parser2.parseInput("nth-child", "nth-child");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValueMatching("s", "nth-child");
      document1.prependChild(document0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.ownerDocument();
      document0.firstElementSibling();
      Parser parser3 = Parser.htmlParser();
      ParseSettings parseSettings1 = ParseSettings.preserveCase;
      parser3.settings(parseSettings0);
      document0.parser(parser1);
      document0.html();
      document0.text();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.prependElement("S_v8L/s");
      Tag.valueOf("br");
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      element0.getElementsContainingOwnText("S_v8L/s");
      document0.childNodeSize();
      document0.siblingElements();
      document0.data();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
      element0.val("D&Wrfw|Lt3B");
      document0.nextElementSiblings();
      document0.childNodeSize();
      element0.before("G 6?D7Krh#)wmKL$B");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "org.jsoup.nodes.Element");
      Document document1 = new Document("org.jsoup.nodes.Element");
      Element element0 = document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.normalise();
      Element element1 = document1.body();
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      Element element2 = element0.toggleClass("org.jsoup.UncheckedIOException");
      element2.data();
      element1.val("hr'6WNaUkL");
      document0.hasText();
      element2.nextElementSiblings();
      element2.hasClass("org.jsoup.UncheckedIOException");
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.prependElement("S_v8L/s");
      document0.siblingElements();
      Element element1 = document0.toggleClass("S_v8L/s");
      element0.data();
      element0.val("5DsI':B,hNPbk");
      element0.nextElementSiblings();
      element1.hasClass("mYi<:.FSpd!?4");
      element0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      document0.siblingElements();
      document0.toggleClass("`b{");
      document0.val("!");
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.body();
      Elements elements0 = document0.nextElementSiblings();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      element1.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      element1.childNodeSize();
      element1.siblingElements();
      element0.data();
      document0.hasText();
      element0.nextElementSiblings();
      element1.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      Element element2 = element1.previousElementSibling();
      element1.tagName();
      // Undeclared exception!
      try { 
        element2.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "");
      Document document1 = new Document("");
      document1.getElementsByAttributeValueMatching("6VIN0V--", "6VIN0V--");
      Document document2 = (Document)document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document3 = document1.normalise();
      Element element0 = document1.body();
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      document2.setParentNode(document0);
      document_OutputSettings1.outline(false);
      document_OutputSettings0.clone();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag.valueOf("6VIN0V--", parseSettings0);
      document3.cssSelector();
      document2.previousElementSibling();
      element0.getElementsMatchingText("6VIN0V--");
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      String string0 = "org.jsoup.select.Evaluator$ContainsOwnText";
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      Document document1 = Parser.parse("</", "org.jsoup.select.Evaluator$ContainsOwnText");
      Document document2 = new Document("org.jsoup.select.Evaluator$ContainsOwnText");
      Elements elements0 = document0.nextElementSiblings();
      document0.insertChildren(0, (Collection<? extends Node>) elements0);
      document0.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      document1.childNodeSize();
      document2.siblingElements();
      document0.data();
      document1.hasText();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "</");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      Element element0 = document0.prependElement("S_v8L/s");
      Elements elements0 = document0.nextElementSiblings();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      element1.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      element1.childNodeSize();
      element1.siblingElements();
      element0.data();
      Element element2 = element1.val("S_v8L/s");
      element0.nextElementSiblings();
      document0.childNodeSize();
      element1.before("S_v8L/s");
      element2.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      String string0 = "Tag name must not be empty.";
      boolean boolean0 = true;
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("Tag name must not be empty.", parseSettings0);
      String string1 = "+`_dsyS21*";
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Attributes attributes0 = new Attributes();
      attributes0.putIgnoreCase("+`_dsyS21*", "+`_dsyS21*");
      Attributes attributes1 = attributes0.clone();
      Attributes attributes2 = attributes1.put("Pattern syntax error: ", "Pattern syntax error: ");
      attributes2.clone();
      Attributes attributes3 = attributes2.put("Pattern syntax error: ", true);
      FormElement formElement0 = new FormElement(tag0, "+`_dsyS21*", attributes3);
      formElement0.attributes();
      formElement0.clone();
      String string2 = null;
      Attribute attribute0 = Attribute.createFromEncoded(".t}HL}P", "I6KIL");
      attributes1.put(attribute0);
      attributes1.dataset();
      attributes3.hasKeyIgnoreCase("Tag name must not be empty.");
      // Undeclared exception!
      try { 
        Pattern.compile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("br", "br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Charset.defaultCharset();
      document0.siblingElements();
      Element element0 = document0.toggleClass("br");
      element0.data();
      Element element1 = document0.val("br");
      document0.hasText();
      parser0.setTrackErrors(1624);
      element0.nextElementSiblings();
      element0.hasClass("%iy!O");
      Set<String> set0 = element1.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "");
      Document document1 = new Document("");
      document1.getElementsByAttributeValueMatching("6VIN0V--", "6VIN0V--");
      Document document2 = (Document)document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document3 = document1.normalise();
      document1.body();
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      document2.setParentNode(document0);
      document_OutputSettings1.outline(false);
      document_OutputSettings0.clone();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag.valueOf("6VIN0V--", parseSettings0);
      document3.cssSelector();
      document2.previousElementSibling();
      document3.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "");
      Document document1 = document0.clone();
      document1.getElementsByAttributeValueMatching("6VIN0V--", "6VIN0V--");
      document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      document1.outputSettings(document_OutputSettings0);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document0.html();
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      document0.getElementsMatchingText("");
      Element element0 = document1.nextElementSibling();
      element0.text("6VIN0V--");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Document.createShell("G 67Krh#)wmKL$B");
      Element element0 = document0.append("2#nLKa.Jd@");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.data();
      element0.val("2#nLKa.Jd@");
      document0.attributes();
      document0.hasText();
      Document document1 = Parser.parse("QO", "%iy!O");
      document1.nextElementSiblings();
      element0.hasClass(":nth-of-type(");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "org.jsoup.nodes.Element");
      Document document1 = new Document("org.jsoup.nodes.Element");
      document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.normalise();
      document1.body();
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      document_OutputSettings1.outline(false);
      document_OutputSettings0.clone();
      document0.val("6VIN0V--");
      document0.nextElementSiblings();
      Document document3 = document2.normalise();
      document3.childNodeSize();
      document2.before("$Bu-qRpG:.ft2");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "d0ezOAh<KNAe!l");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Tag tag0 = Tag.valueOf("nth-last-child");
      CDataNode cDataNode0 = new CDataNode("nth-last-child");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "#", attributes0);
      Element element0 = formElement0.appendChild(cDataNode0);
      element0.data();
      Pattern pattern0 = Pattern.compile("#", 5);
      element0.getElementsByAttributeValueMatching("a}f7nw9(|xq2nln3|ei", pattern0);
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      Element element0 = document0.prependElement("S_v8L/s");
      Elements elements0 = document0.nextElementSiblings();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      element1.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      element1.childNodeSize();
      element1.siblingElements();
      element0.data();
      element1.val("S_v8L/s");
      element0.nextElementSiblings();
      document0.childNodeSize();
      Element element2 = element1.before("S_v8L/s");
      document0.nextElementSibling();
      element2.prepend("x]wy;^$MQ-2J<<_");
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      document0.classNames();
      Element element0 = document0.prependElement("S_v8L/s");
      Elements elements0 = document0.nextElementSiblings();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      element1.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      element1.childNodeSize();
      element1.siblingElements();
      element1.getElementsContainingText("org.jsoup.select.Evaluator$ContainsOwnText");
      element0.data();
      element0.append("@2:k(5Y]I<3");
      document0.hasText();
      element0.val("G 6?D7Krh#)wmKL$B");
      document0.hasText();
      element1.nextElementSiblings();
      document0.hasClass("textarea");
      element1.getElementsMatchingOwnText("#root");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "body");
      Element element0 = document0.prependElement("S_v8L/s");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(true);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings5 = document_OutputSettings4.clone();
      Document.OutputSettings document_OutputSettings6 = document_OutputSettings5.outline(true);
      document_OutputSettings6.clone();
      Node[] nodeArray0 = new Node[2];
      Document document1 = Document.createShell("iRd4i%s5I_kv' j!");
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) element0;
      Element element1 = document0.insertChildren(0, nodeArray0);
      element1.getElementsMatchingText("6t:#9Z}s>r");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parse("head", "");
      document0.elementSiblingIndex();
      document0.dataset();
      document0.val();
      document0.elementSiblingIndex();
      Element element0 = document0.attr("head", false);
      element0.className();
      Element element1 = element0.prependChild(document0);
      // Undeclared exception!
      element1.appendElement("");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(60);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      document_OutputSettings1.indentAmount(60);
      // Undeclared exception!
      try { 
        document1.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Tag tag0 = Tag.valueOf("nav");
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      Attributes attributes1 = attributes0.put("<tq1+m&+1l2=hQ+Z", "nav");
      Attribute attribute0 = Attribute.createFromEncoded("org.jsoup.nodes.Element", "ryy8puu#+k)b");
      Attributes attributes2 = attributes1.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "ryy8puu#+k)b", attributes2);
      MockFile mockFile0 = new MockFile("org.jsoup.nodes.Element", "*");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      MockPrintStream mockPrintStream1 = new MockPrintStream(mockPrintStream0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Attribute.html("html", "<tq1+m&+1l2=hQ+Z", (Appendable) mockPrintStream1, document_OutputSettings0);
      Document document0 = Parser.parse("org.jsoup.nodes.Element$2", "nav");
      FormElement formElement1 = formElement0.addElement(document0);
      Element element0 = formElement1.html("nk{qhRT9}]PF!O");
      document0.ensureChildNodes();
      formElement0.getElementsContainingOwnText("source");
      element0.siblingElements();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      String string0 = "zk^.fhLhB";
      Document document0 = Document.createShell("zk^.fhLhB");
      Parser parser0 = Parser.xmlParser();
      document0.parser(parser0);
      Document.createShell("Z/u7v{k/vz");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("gfh$Q=xjWK]i", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "dEI&{c");
      Document document1 = (Document)document0.append("org.jsoup.select.Evaluator$ContainsOwnText");
      document1.doClone(document0);
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.getElementsContainingOwnText("G 6?D7Krh#)wmKL$B");
      document0.html();
      document0.text();
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Document.createShell("G 67Krh#)wmKL$B");
      Element element0 = document0.prependElement("S_v8L/s");
      document0.nextElementSiblings();
      LinkedHashSet<CDataNode> linkedHashSet0 = new LinkedHashSet<CDataNode>();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      document0.getElementsContainingOwnText(":%;");
      element0.text(":%;");
      element1.childNodeSize();
      element0.siblingElements();
      document0.data();
      element0.val("cy.94I!");
      element1.hasText();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.hasText();
      element1.nextElementSiblings();
      element1.getElementsContainingOwnText("cy.94I!");
      Element element2 = document1.head();
      element2.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "@s+47>SuIBVxfY");
      Document document1 = Document.createShell("g 6?d7krh#)wmkl$b");
      document1.append("@s+47>SuIBVxfY");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document1.getElementsContainingOwnText("@s+47>SuIBVxfY");
      Document document2 = new Document("hjc}%aBJp]iu aBz");
      document2.html();
      document0.text();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.prependElement("S_v8L/s");
      document0.getElementsByAttributeValueMatching("`y1^6", "br");
      document0.prependChild(element0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.normalise();
      Element element1 = document0.body();
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      document_OutputSettings0.outline(false);
      Charset charset0 = Charset.defaultCharset();
      document_OutputSettings1.charset(charset0);
      document_OutputSettings1.clone();
      Document document1 = new Document("org.jsoup.select.Evaluator$ContainsOwnText");
      element1.parents();
      document1.cssSelector();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      document0.prependElement("S_v8L/s");
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "listing");
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Charset.defaultCharset();
      document0.siblingElements();
      Element element1 = document0.toggleClass("br");
      element1.data();
      Element element2 = document0.text("");
      element2.val("@deN>4X9");
      document0.hasText();
      element2.nextElementSiblings();
      element2.hasClass("textarea");
      document0.childNodeSize();
      // Undeclared exception!
      try { 
        element1.child(2);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "");
      Document document1 = new Document("");
      document1.getElementsByAttributeValueMatching("6VIN0V--", "6VIN0V--");
      Element element0 = document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.normalise();
      Element element1 = document1.body();
      Charset.defaultCharset();
      document1.siblingElements();
      document1.toggleClass("*");
      element0.data();
      element1.val("QR55J}{W0jZ#W9g.8");
      element0.hasText();
      document1.nextElementSiblings();
      element0.hasClass("T{#D*[.+U&WUN9bC8Z");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document0 = parser0.parseInput("br", "br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(60);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Charset.defaultCharset();
      document0.siblingElements();
      Element element0 = document0.toggleClass("br");
      element0.ownText();
      Parser.parseBodyFragmentRelaxed("br", "i!+a9M?>n^=qwfI#;P");
      element0.data();
      Element element1 = document0.val("head");
      document0.hasText();
      element0.nextElementSiblings();
      element1.hasClass("head");
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      String string0 = "UOGSjn#1Cp5.h";
      Document document0 = new Document("UOGSjn#1Cp5.h");
      Document document1 = document0.clone();
      String string1 = "html";
      Element element0 = document1.prependElement("html");
      Elements elements0 = document1.nextElementSiblings();
      // Undeclared exception!
      try { 
        element0.insertChildren(58, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Document.createShell("iuXA)+OY'");
      Node node0 = document0.clearAttributes();
      document0.getElementsByAttributeValueMatching("s", "C$ZM$&^ZQhbGgf}X");
      document0.prependChild(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      // Undeclared exception!
      document1.html();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      String string0 = "G 6?D7Krh#)wmKL$B";
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      String string1 = "S_v8L/s";
      Element element0 = document0.prependElement("S_v8L/s");
      Pattern pattern0 = Pattern.compile("", 6);
      element0.getElementsMatchingOwnText(pattern0);
      int int0 = 0;
      // Undeclared exception!
      try { 
        element0.childNode(1152);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1152, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Document.createShell("A}F7nW9(|xq2-nlN3|EI");
      int int0 = 2199;
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("A}F7nW9(|xq2-nlN3|EI");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: A}F7nW9(|xq2-nlN3|EI
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document0 = parser0.parseInput("br", "br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(60);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Charset charset0 = Charset.defaultCharset();
      document_OutputSettings1.charset(charset0);
      document0.siblingElements();
      Element element0 = document0.toggleClass("br");
      element0.data();
      Element element1 = document0.val("head");
      Document document1 = new Document("br");
      Document document2 = Parser.parseBodyFragmentRelaxed("", "head");
      document2.parents();
      element1.cssSelector();
      document1.select("Q");
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Document.createShell("G 67Krh#)wmKL$B");
      document0.append("2#nLKa.Jd@");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.getElementsContainingOwnText("G 67Krh#)wmKL$B");
      document0.html();
      document0.text();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "");
      Document document1 = new Document("");
      document1.getElementsByAttributeValueMatching("6VIN0V--", "6VIN0V--");
      Element element0 = document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.normalise();
      Element element1 = document1.body();
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      document_OutputSettings1.outline(true);
      Charset charset0 = Charset.defaultCharset();
      document_OutputSettings1.charset(charset0);
      document_OutputSettings0.clone();
      Document document3 = new Document("");
      document3.dataNodes();
      document2.nodeName();
      element1.ownText();
      element1.doSetBaseUri("<fVC]80rf7rdWT[ec");
      element0.siblingElements();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$AttributeWithValueNot", "org.jsoup.select.Evaluator$AttributeWithValueNot");
      Document document1 = document0.normalise();
      document0.children();
      Document document2 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$AttributeWithValueNot", "s+");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document2;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) document2;
      nodeArray0[3] = (Node) document2;
      Document document3 = document1.normalise();
      document0.addClass("org.jsoup.select.Evaluator$AttributeWithValueNot");
      nodeArray0[4] = (Node) document3;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document1;
      // Undeclared exception!
      try { 
        document0.addChildren(1508, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.prependElement("S_v8L/s");
      Elements elements0 = document0.nextElementSiblings();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      element1.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      element1.childNodeSize();
      element1.siblingElements();
      element0.data();
      element1.val("S_v8L/s");
      document0.hasText();
      element0.nextElementSiblings();
      element1.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      element1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "");
      Document document1 = new Document("");
      document1.getElementsByAttributeValueMatching("6VIN0V--", "6VIN0V--");
      document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.normalise();
      document1.body();
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      document_OutputSettings1.outline(true);
      Charset charset0 = Charset.defaultCharset();
      document_OutputSettings1.charset(charset0);
      document_OutputSettings0.clone();
      Document document2 = new Document("SYSTEM");
      document1.parents();
      document1.cssSelector();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "");
      document0.getElementsByAttributeValueMatching("6VIN0V--", "Should not be reachable");
      DocumentType documentType0 = new DocumentType("8", "6VIN0V--", "Pattern syntax error: ");
      document0.prependChild(documentType0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      document0.outputSettings(document_OutputSettings0);
      document0.getElementsMatchingText("@s+47>SuIBVxfY");
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Document.createShell("0+OU6");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      document0.classNames();
      Charset.defaultCharset();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Element element0 = document0.classNames((Set<String>) linkedHashSet0);
      element0.outerHtml();
      Parser parser0 = Parser.xmlParser();
      parser0.setTrackErrors((-1618));
      element0.hasText();
      document0.nextElementSiblings();
      element0.removeClass("<html>\n <head></head>\n <body></body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document0 = parser0.parseInput("br", "br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(60);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Charset charset0 = Charset.defaultCharset();
      document_OutputSettings1.charset(charset0);
      document0.siblingElements();
      Element element0 = document0.toggleClass("br");
      element0.data();
      Element element1 = document0.val("head");
      document0.hasText();
      element0.nextElementSiblings();
      element1.hasClass("head");
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "");
      Document document1 = document0.clone();
      document1.getElementsByAttributeValueMatching("6VIN0V--", "6VIN0V--");
      Document document2 = (Document)document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document3 = document0.ownerDocument();
      document1.firstElementSibling();
      Document document4 = document2.outputSettings(document_OutputSettings0);
      document4.text("6VIN0V--");
      document3.val("");
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      document0.nextElementSiblings();
      Element element0 = document0.body();
      element0.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      element0.siblingElements();
      document0.data();
      element0.val("S_v8L/s");
      document0.hasText();
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      String string0 = "Tag name must not be empty.";
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "V>O4v%8");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Element element0 = document1.text("V>O4v%8");
      element0.wholeText();
      document1.html();
      // Undeclared exception!
      try { 
        document0.replaceChild(element0, document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      String string0 = "org.jsoup.select.Evaluator$ContainsOwnText";
      Document document0 = Parser.parse("dRAfqZ.n#", "G 6?D7Krh#)wmKL$B");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Element element0 = document1.prependElement("dRAfqZ.n#");
      Elements elements0 = element0.getElementsByAttributeValueMatching("I*nJ2]Oc5_>?'IS\"b", (Pattern) null);
      document1.nextElementSiblings();
      Element element1 = document1.insertChildren(0, (Collection<? extends Node>) elements0);
      element1.getElementsContainingOwnText("I*nJ2]Oc5_>?'IS\"b");
      document1.childNodeSize();
      element1.siblingElements();
      // Undeclared exception!
      try { 
        document1.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.prependElement("G 6?D7Krh#)wmKL$B");
      Elements elements0 = document0.nextElementSiblings();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      element1.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      element1.childNodeSize();
      element1.siblingElements();
      document0.hasText();
      element0.nextElementSiblings();
      // Undeclared exception!
      try { 
        document0.before("value");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Parser parser0 = Parser.xmlParser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      String string0 = "br";
      Document document0 = parser0.parseInput("br", "br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.elementSiblingIndex();
      Document document1 = document0.clone();
      document1.getElementsByAttributeValueEnding("X}1_77XXyh)5", "X}1_77XXyh)5");
      document1.shallowClone();
      document1.createElement("X}1_77XXyh)5");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      linkedList0.clone();
      String string1 = "Pattern syntax error: ";
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "Pattern syntax error: ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Document document1 = new Document("");
      document1.getElementsByAttributeValueMatching("6VIN0V--", "6VIN0V--");
      Element element0 = document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.normalise();
      Element element1 = document1.body();
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(true);
      Charset charset0 = Charset.defaultCharset();
      document_OutputSettings2.charset(charset0);
      document_OutputSettings0.clone();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      document1.insertChildren(1, nodeArray0);
      element0.getElementsMatchingText("");
      document1.removeClass("xqL9riP");
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      String string0 = "G 6?D7Krh#)wmKL$B";
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.prependElement("S_v8L/s");
      Tag tag0 = Tag.valueOf("br");
      Element element1 = new Element(tag0, "listing");
      element0.val();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag.valueOf("head");
      Tag.valueOf("org.jsoup.nodes.Element$1", parseSettings0);
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) element0;
      document0.text("ryy8puu#+k)b");
      nodeArray0[6] = (Node) document0;
      // Undeclared exception!
      try { 
        element1.insertChildren((-2223), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = "A}F7nW9(|xq2nlN3|EI";
      Document document0 = Parser.parse("A}F7nW9(|xq2nlN3|EI", "class");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Parser parser0 = Parser.xmlParser();
      Document document3 = document2.parser(parser0);
      document3.clone();
      // Undeclared exception!
      try { 
        document2.getElementsByAttributeValueMatching((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "");
      Document document1 = document0.clone();
      document1.getElementsByAttributeValueMatching("6VIN0V--", "6VIN0V--");
      document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Document document2 = document1.outputSettings(document_OutputSettings0);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      document0.getElementsMatchingText("");
      Element element0 = document2.empty();
      document0.html("html");
      element0.html("@s+47>SuIBVxfY");
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Document.createShell("0+OU6");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      document0.classNames();
      document0.getElementsByTag("0+OU6");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document0.classNames(set0);
      element0.outerHtml();
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.setTrackErrors((-1618));
      parser1.parseInput("0+OU6", "s_v8l/s");
      Document document1 = new Document("0+OU6");
      document1.parent();
      // Undeclared exception!
      try { 
        element0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Element element0 = new Element("+J2!6[39a3x");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "");
      Document document1 = new Document("");
      document1.getElementsByAttributeValueMatching("6VIN0V--", "6VIN0V--");
      Element element0 = document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.normalise();
      Element element1 = document1.body();
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(true);
      Charset charset0 = Charset.defaultCharset();
      document_OutputSettings2.charset(charset0);
      document_OutputSettings0.clone();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      document1.insertChildren(1, nodeArray0);
      element0.getElementsMatchingText("");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      String string0 = "6GR";
      Document document0 = Document.createShell("6GR");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.clone();
      Document document3 = document2.ownerDocument();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "6GR");
      Parser parser0 = Parser.xmlParser();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      Document document4 = document3.parser(parser0);
      Document document5 = document4.normalise();
      document5.children();
      String string1 = "";
      Parser.parseBodyFragmentRelaxed("6GR", "");
      // Undeclared exception!
      try { 
        document0.child((-1985114519));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Parser parser0 = Parser.xmlParser();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document0 = parser0.parseInput("br", "br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(60);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      Document document2 = document1.normalise();
      document_OutputSettings2.charset(charset0);
      document2.getElementsByAttribute("br");
      document2.wrap("br");
      document1.dataNodes();
      document0.nodeName();
      document0.text();
      document0.getElementById("X}1_77XXyh)5");
      Element element0 = document1.tagName("a}f7nw9(|xq2?dln3|ei");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      CharArrayWriter charArrayWriter1 = charArrayWriter0.append((CharSequence) "br");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter1);
      document2.html(mockPrintWriter0);
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan(60);
      element0.is((Evaluator) evaluator_IndexLessThan0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Document.createShell("0+OU6");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      document0.classNames();
      document0.childNodeSize();
      Document document1 = document0.ownerDocument();
      document1.siblingElements();
      document1.data();
      document1.val("g 6?d7krh#)wmkl$b");
      document1.hasText();
      document1.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parse("A}F7nW9(|xq2nlN3|EI", "m!Pf8O8Y)Ww");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.getElementsContainingOwnText("#");
      document0.data();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      document0.getElementsByIndexLessThan(12);
      document0.tagName("head");
      document0.textNodes();
      Element element0 = new Element("ryZ979dx2S");
      Document document1 = Parser.parseBodyFragmentRelaxed(":", "");
      // Undeclared exception!
      try { 
        document1.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.prependElement("S_v8L/s");
      element0.getElementsByAttributeValueMatching("G 6?D7Krh#)wmKL$B", (Pattern) null);
      Elements elements0 = document0.nextElementSiblings();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      element1.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      element1.childNodeSize();
      element1.siblingElements();
      Element element2 = document0.toggleClass("S_v8L/s");
      element0.data();
      element1.val("S_v8L/s");
      document0.hasText();
      element0.nextElementSiblings();
      element2.hasClass("");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "");
      Document document1 = document0.clone();
      document1.getElementsByAttributeValueMatching("6VIN0V--", "6VIN0V--");
      document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Parser parser0 = Parser.xmlParser();
      parser0.parseInput("@s+47>SuIBVxfY", "");
      Document document2 = parser0.parseInput("", "6VIN0V--");
      // Undeclared exception!
      try { 
        document2.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser1 = parser0.settings(parseSettings0);
      Document document0 = new Document("AfterAfterBody");
      Document document1 = document0.normalise();
      Document document2 = document1.parser(parser1);
      Document document3 = document2.normalise();
      Element element0 = document1.body();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.outline(false);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      document_OutputSettings1.clone();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      document1.is("AfterAfterBody");
      document3.html();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Document.createShell("0+OU6");
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      document0.classNames();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document0.classNames(set0);
      document0.parent();
      element0.toggleClass("X}1_77XXyh)5");
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Document.createShell("0+OU6");
      document0.getElementsContainingOwnText("0+OU6");
      document0.data();
      byte[] byteArray0 = new byte[3];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      document0.getElementsByIndexLessThan((byte)70);
      Parser parser0 = Parser.xmlParser();
      Document document1 = parser0.parseInput("2.BWsbo,/0cymP", "0'%5$`L*2}2X!|1NNMW");
      document1.tagName("0+OU6");
      document1.textNodes();
      Element element0 = new Element("body");
      document0.appendText("InCaption");
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Charset charset0 = Charset.defaultCharset();
      document_OutputSettings0.clone();
      document_OutputSettings1.charset(charset0);
      document1.getElementsByIndexLessThan(94);
      document0.tagName("body");
      Document document2 = document1.parser(parser0);
      document2.textNodes();
      Element element0 = new Element("body");
      document0.appendText("<]G|-9&=C{u14h");
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.prependElement("S_v8L/s");
      element0.getElementsByAttributeValueMatching("G 6?D7Krh#)wmKL$B", (Pattern) null);
      Elements elements0 = document0.nextElementSiblings();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      element1.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      element1.childNodeSize();
      element1.siblingElements();
      element0.data();
      element1.val("S_v8L/s");
      document0.hasText();
      element0.nextElementSiblings();
      Element element2 = document0.text("Tag name must not be empty.");
      element1.doClone(element2);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      Parser parser1 = Parser.xmlParser();
      Document document1 = parser1.parseInput("", "!DBS-1");
      document1.normalise();
      document1.data();
      byte[] byteArray0 = new byte[9];
      byteArray0[0] = (byte)70;
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte)70;
      byteArray0[3] = (byte)70;
      byteArray0[4] = (byte)70;
      byteArray0[5] = (byte)70;
      byteArray0[6] = (byte)70;
      byteArray0[7] = (byte)70;
      byteArray0[8] = (byte)70;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      document0.getElementsByIndexLessThan((byte)70);
      document1.tagName("fGFq@wiEHHDn%6h");
      document1.textNodes();
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Document document0 = Document.createShell("LXj6l4");
      Set<String> set0 = document0.classNames();
      Document document1 = (Document)document0.classNames(set0);
      document1.attr("LXj6l4", "4U-");
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = new Document("pF");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document0.getElementsByAttributeValueMatching(":nth-child(", "pF");
      document1.prependChild(document0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      String string0 = "A}F7nW9(|xq2nlN3|EI";
      Element element0 = document1.appendText(":nth-child(");
      element0.nextElementSibling();
      // Undeclared exception!
      document0.append(":nth-child(");
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "");
      Document document1 = document0.clone();
      document1.getElementsByAttributeValueMatching("6VIN0V--", "6VIN0V--");
      document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-44);
      byteArray0[1] = (byte)70;
      byteArray0[2] = (byte) (-44);
      byteArray0[3] = (byte) (-94);
      byteArray0[4] = (byte)57;
      byteArray0[6] = (byte) (-15);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      document1.getElementsByIndexLessThan((byte) (-44));
      Element element0 = document1.tagName("Q\"");
      element0.textNodes();
      element0.appendText("");
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.body();
      element0.getElementsByAttributeValueMatching("G 6?D7Krh#)wmKL$B", (Pattern) null);
      document0.nextElementSiblings();
      element0.getElementsContainingOwnText("A}F7nW9(|xq2nlN3|EI");
      element0.childNodeSize();
      element0.getElementsByAttributeValueEnding("A}F7nW9(|xq2nlN3|EI", "G 6?D7Krh#)wmKL$B");
      element0.siblingElements();
      element0.data();
      document0.clearAttributes();
      Document document1 = new Document("org.jsoup.select.Evaluator$ContainsOwnText");
      document1.getElementsMatchingText("org.jsoup.select.Evaluator$ContainsOwnText");
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      String string0 = "s";
      Document document0 = Parser.parseBodyFragment("s", "s");
      document0.getElementById("s");
      document0.normalise();
      Element element0 = document0.body();
      // Undeclared exception!
      try { 
        element0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      String string0 = "LXj6l4";
      Document document0 = Parser.parseBodyFragment("LXj6l4", "LXj6l4");
      document0.siblingElements();
      String string1 = "a}f7nw9(|xq2nln3|ei";
      document0.getElementsByAttributeValueContaining("LXj6l4", "a}f7nw9(|xq2nln3|ei");
      // Undeclared exception!
      try { 
        document0.is("a}f7nw9(|xq2nln3|ei");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'a}f7nw9(|xq2nln3|ei': unexpected token at '}f7nw9(|xq2nln3|ei'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "org.jsoup.select.Evaluator$ContainsOwnText");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.getElementsContainingOwnText(":");
      Element element0 = document0.append("video");
      element0.getElementsByAttributeValueStarting("s_v8l/s", "s_v8l/s");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Document.createShell("LXj6l4");
      document0.classNames();
      document0.doSetBaseUri("Y95Y/.)");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      document0.prependElement("S_v8L/s");
      Tag.valueOf("br");
      byte[] byteArray0 = new byte[8];
      byteArray0[0] = (byte) (-1);
      byteArray0[1] = (byte) (-44);
      byteArray0[2] = (byte) (-1);
      byteArray0[3] = (byte)57;
      byteArray0[4] = (byte)57;
      byteArray0[5] = (byte) (-44);
      byteArray0[6] = (byte) (-1);
      byteArray0[7] = (byte) (-44);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      document0.getElementsByIndexLessThan((byte) (-44));
      document0.tagName("br");
      document0.textNodes();
      document0.appendText("G 6?D7Krh#)wmKL$B");
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "");
      Document document1 = document0.clone();
      document1.getElementsByAttributeValueMatching("6VIN0V--", "6VIN0V--");
      document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.normalise();
      Element element0 = document1.body();
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(true);
      Charset charset0 = Charset.defaultCharset();
      document_OutputSettings2.charset(charset0);
      document_OutputSettings0.clone();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document1;
      document1.insertChildren(1, nodeArray0);
      // Undeclared exception!
      try { 
        document2.is("@s+47>SuIBVxfY");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '@s+47>SuIBVxfY': unexpected token at '@s+47>SuIBVxfY'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "XPr9e B?p|cQ");
      document0.siblingElements();
      document0.getElementsByAttributeValueContaining("XPr9e B?p|cQ", "XPr9e B?p|cQ");
      document0.is("L8ra");
      // Undeclared exception!
      try { 
        document0.select("XPr9e B?p|cQ");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'B?p|cQ': unexpected token at '?p|cQ'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      String string0 = "G 6?D7Krh#)wmKL$B";
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.prependElement("vT-L");
      element0.getElementsByAttributeValueMatching("G 6?D7Krh#)wmKL$B", (Pattern) null);
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      ParseSettings parseSettings1 = new ParseSettings(false, true);
      Parser parser0 = Parser.xmlParser();
      parser0.settings(parseSettings0);
      Parser parser1 = parser0.setTrackErrors(587);
      Document document1 = document0.parser(parser1);
      document0.hasClass("org.jsoup.select.Evaluator$ContainsOwnText");
      Document document2 = new Document("org.jsoup.select.Evaluator$ContainsOwnText");
      document1.ownerDocument();
      // Undeclared exception!
      try { 
        document1.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s", "s");
      document0.getElementById("s");
      document0.normalise();
      document0.text();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s_v8l/s", "org.jsoup.select.Evaluator$ContainsOwnText");
      Element element0 = document0.head();
      String string0 = "#root";
      element0.getElementsByAttributeValue("#root", "brBf~8<1\"RXCP");
      try { 
        MockURI.URI("org.jsoup.select.Evaluator$ContainsOwnText", "s_v8l/s", "/07NT}QmbX^nn4zu6");
        fail("Expecting exception: URISyntaxException");
      
      } catch(URISyntaxException e) {
         //
         // Illegal character in scheme name at index 26: org.jsoup.select.Evaluator$ContainsOwnText:s_v8l/s#/07NT%7DQmbX%5Enn4zu6
         //
         verifyException("java.net.URI$Parser", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      String string0 = "org.jsoup.select.Evaluator$ContainsOwnText";
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.prependElement("S_v8L/s");
      Element element1 = document0.prependChild(element0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      Document document2 = Parser.parseBodyFragment("br", "6O1H:aq3|hV>Gm");
      document2.appendText("G 6?D7Krh#)wmKL$B");
      element1.nextElementSibling();
      // Undeclared exception!
      try { 
        document1.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = "org.jsoup.select.Evaluator$ContainsOwnText";
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "W(7O ftI0ZJN)");
      Element element0 = document0.prependElement("S_v8L/s");
      element0.getElementsByAttributeValueMatching("W(7O ftI0ZJN)", (Pattern) null);
      document0.nextElementSiblings();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[0] = (Node) document0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element0;
      document0.body();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      document_OutputSettings2.clone();
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k?T4Rn 97i-(", "k?T4Rn 97i-(");
      Document document1 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      ParseSettings parseSettings1 = new ParseSettings(true, true);
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings(parseSettings1);
      Parser parser2 = parser0.setTrackErrors(60);
      Document document2 = document0.parser(parser2);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      ParseSettings parseSettings2 = new ParseSettings(true, true);
      parser1.settings(parseSettings2);
      DocumentType documentType0 = new DocumentType("*", "Children collection to be inserted must not be null.", "k?T4Rn 97i-(", "v+:m1(37gSh9lnI1~n", "qJ7(K~");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document2;
      nodeArray0[1] = (Node) document1;
      Document document3 = Document.createShell("PUBLIC");
      document2.empty();
      document3.hasClass("*");
      Document document4 = new Document("Children collection to be inserted must not be null.");
      document0.ownerDocument();
      Document document5 = new Document("dySdCPd");
      document5.prependElement("#root");
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.prependElement("S_v8L/s");
      element0.getElementsByAttributeValueMatching("G 6?D7Krh#)wmKL$B", (Pattern) null);
      document0.nextElementSiblings();
      DocumentType documentType0 = new DocumentType("org.jsoup.select.Evaluator$Matches", "[r", "qJ7(K~", "e*=aYO7O'", "v+:m1(37gSh9lnI1~n");
      Document document1 = Document.createShell("e*=aYO7O'");
      document0.body();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document1;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      Document document2 = Parser.parseBodyFragmentRelaxed("", "qJ7(K~");
      nodeArray0[6] = (Node) document2;
      nodeArray0[7] = (Node) element0;
      // Undeclared exception!
      try { 
        document1.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parse("LXj6l4", "LXj6l4");
      Element element0 = document0.appendText(")");
      // Undeclared exception!
      try { 
        element0.child(266);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 266, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "");
      Document document1 = document0.clone();
      document1.getElementsByAttributeValueMatching("6VIN0V--", "6VIN0V--");
      document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      Document document2 = document1.outputSettings(document_OutputSettings0);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      document2.clearAttributes();
      document0.getElementsMatchingText("");
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parse("G 6?D7Krh#)wmKL$B", "D\"8]");
      Document document1 = (Document)document0.text("D\"8]");
      document0.appendText("A}F7nW9(|xq2nlN3|EI");
      document1.nextElementSibling();
      document0.append("D\"8]");
      document0.select("br");
      document1.ensureChildNodes();
      document0.children();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parse("G 6?D7Krh#)wmKL$B", "D\"8]");
      Element element0 = document0.text("D\"8]");
      document0.clearAttributes();
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element0;
      Element element1 = document0.body();
      nodeArray0[1] = (Node) element1;
      nodeArray0[2] = (Node) document0;
      // Undeclared exception!
      try { 
        element0.insertChildren((-1938278822), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parse("G 6?D7Krh#)wmKL$B", "D\"8]");
      Document document1 = (Document)document0.text("D\"8]");
      document0.appendText("uL`7K(2");
      document0.nextElementSibling();
      document1.createElement("uL`7K(2");
      document1.getElementsByAttributeValueEnding("@", "GSd");
      document1.append("");
      // Undeclared exception!
      try { 
        document1.select("`v'F6r");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '`v'F6r': unexpected token at '`v'F6r'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.prependElement("S_v8L/s");
      element0.getElementsByAttributeValueMatching("G 6?D7Krh#)wmKL$B", (Pattern) null);
      Elements elements0 = document0.nextElementSiblings();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      element1.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      element1.childNodeSize();
      element1.siblingElements();
      element0.data();
      element0.html("Cap.nY;gG8H9&:w");
      document0.text();
      element0.elementSiblingIndex();
      element0.val("S_v8L/s");
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, element0.childNodeSize());
      
      element1.hasText();
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.prependElement("S_v8L/s");
      element0.getElementsByAttributeValueMatching("G 6?D7Krh#)wmKL$B", (Pattern) null);
      Elements elements0 = document0.nextElementSiblings();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      element1.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      element1.childNodeSize();
      element1.siblingElements();
      element0.data();
      Element element2 = element1.val("S_v8L/s");
      document0.getElementsByIndexGreaterThan(10926);
      element2.ensureChildNodes();
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      parseSettings0.normalizeAttribute("I");
      Tag tag0 = Tag.valueOf("*", parseSettings0);
      Element element0 = new Element(tag0, "*");
      element0.dataset();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Element element1 = new Element(tag0, "I");
      String string0 = Node.EmptyString;
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element1;
      Tag.valueOf("*", parseSettings0);
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element0;
      Element element2 = new Element(tag0, "");
      element0.empty();
      // Undeclared exception!
      try { 
        element2.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k?T4Rn 97i-(", "k?T4Rn 97i-(");
      Document document1 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      Document document2 = document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(0);
      Elements elements0 = document2.nextElementSiblings();
      Element element0 = document2.insertChildren(0, (Collection<? extends Node>) elements0);
      document2.getElementsContainingOwnText("k?T4Rn 97i-(");
      element0.childNodeSize();
      document1.siblingElements();
      document1.data();
      element0.html("readonly");
      document0.text();
      Element element1 = document1.body();
      element1.elementSiblingIndex();
      document1.val("readonly");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.prependElement("S_v8L/s");
      element0.getElementsByAttributeValueMatching("G 6?D7Krh#)wmKL$B", (Pattern) null);
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      ParseSettings parseSettings1 = new ParseSettings(false, true);
      Parser parser0 = Parser.xmlParser();
      parser0.settings(parseSettings0);
      Parser parser1 = parser0.setTrackErrors(587);
      Document document1 = document0.parser(parser1);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document1.html(charArrayWriter0);
      // Undeclared exception!
      try { 
        document0.is("-mhU&]b\"6Z,D");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '-mhU&]b\"6Z,D': unexpected token at '-mhU&]b\"6Z,D'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parse("G 6?D7Krh#)wmKL$B", "D\"8]");
      Element element0 = document0.text("D\"8]");
      document0.clearAttributes();
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText("6[LIlU5.t9=3gJp");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 6[LIlU5.t9=3gJp
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      document0.doSetBaseUri("org.jsoup.select.Evaluator$ContainsOwnText");
      Element element0 = document0.prependElement("S_v8L/s");
      element0.getElementsByAttributeValueMatching("G 6?D7Krh#)wmKL$B", (Pattern) null);
      Elements elements0 = document0.nextElementSiblings();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      element1.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      element1.childNodeSize();
      element1.siblingElements();
      document0.getElementsByTag("org.jsoup.nodes.Element");
      element0.data();
      element1.val("S_v8L/s");
      document0.hasText();
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parse("A}F7nW9(|xq2nlN3|EI", "A}F7nW9(|xq2nlN3|EI");
      Element element0 = document0.body();
      Pattern pattern0 = Pattern.compile("A}F7nW9(|xq2nlN3|EI", (-1));
      element0.getElementsByAttributeValueMatching("A}F7nW9(|xq2nlN3|EI", pattern0);
      element0.nodelistChanged();
      // Undeclared exception!
      try { 
        CharBuffer.allocate((-1));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parse("G 6?D7Krh#)wmKL$B", "D\"8]");
      document0.siblingElements();
      document0.text();
      Pattern pattern0 = Pattern.compile("textarea");
      document0.getElementsMatchingOwnText(pattern0);
      document0.prependElement("G 6?D7Krh#)wmKL$B");
      Element element0 = document0.html("abbr");
      element0.getElementsMatchingText("textarea");
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      document0.prependElement("S_v8L/s");
      Document document1 = document0.clone();
      document1.getElementsByAttributeValueMatching("nm~6 \"/1]yW|1C", "org.jsoup.select.Evaluator$ContainsOwnText");
      document1.prependChild(document0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document0.outputSettings(document_OutputSettings0);
      int int0 = 124;
      document2.appendText("A}F7nW9(|xq2nlN3|EI");
      document2.nextElementSibling();
      document_OutputSettings0.indentAmount(304);
      Parser parser0 = Parser.xmlParser();
      Document document3 = document2.parser(parser0);
      document3.append("G 6?D7Krh#)wmKL$B");
      // Undeclared exception!
      try { 
        document3.select("vFmyh#JG9L<a*");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'vFmyh#JG9L<a*': unexpected token at '<a*'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      String string0 = "@s+47>SuIBVxfY";
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "");
      Pattern pattern0 = null;
      Elements elements0 = document0.getElementsByAttributeValueMatching((String) null, (Pattern) null);
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) elements0);
      Document document1 = document0.normalise();
      document1.getElementsContainingOwnText("`8G2mw1<Q%+^KSMB");
      element0.childNodeSize();
      element0.siblingElements();
      element0.data();
      document0.html("novalidate");
      element0.nextElementSiblings();
      Parser parser0 = Parser.xmlParser();
      // Undeclared exception!
      try { 
        parser0.parseInput((String) null, "s_v8l/s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.StringReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$AttributeWithValueNot", "v6 #t^?vN?Gb<");
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = new Document("pF");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      ParseSettings parseSettings1 = new ParseSettings(true, true);
      Parser parser1 = parser0.settings(parseSettings1);
      Parser parser2 = parser1.setTrackErrors((-3580));
      Document document2 = document1.parser(parser2);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document2;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document1;
      parser2.settings(parseSettings1);
      nodeArray0[6] = (Node) document1;
      String string0 = "aN0MW=~MaZL";
      DocumentType documentType0 = new DocumentType("#root", "#root", "#root", "aN0MW=~MaZL", "aN0MW=~MaZL");
      nodeArray0[7] = (Node) documentType0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-3580), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$AttributeWithValueNot", "org.jsoup.select.Evaluator$AttributeWithValueNot");
      Document document1 = document0.normalise();
      Pattern pattern0 = Pattern.compile("org.jsoup.select.Evaluator$AttributeWithValueNot", 512);
      document1.getElementsMatchingText(pattern0);
      document1.text("org.jsoup.select.Evaluator$AttributeWithValueNot");
      Element element0 = document0.html("org.jsoup.select.Evaluator$AttributeWithValueNot");
      document1.text();
      Document document2 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document2.elementSiblingIndex();
      Element element1 = document1.val("org.jsoup.nodes.Element$NodeList");
      element1.appendText("org.jsoup.select.Evaluator$AttributeWithValueNot");
      element0.getAllElements();
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Charset charset0 = Charset.defaultCharset();
      document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Document document2 = document1.outputSettings(document_OutputSettings2);
      Document document3 = document2.ownerDocument();
      document2.attributes();
      // Undeclared exception!
      try { 
        document3.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k?T4Rn 97i-(", "k?T4Rn 97i-(");
      Document document1 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(0);
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      ParseSettings parseSettings1 = new ParseSettings(false, true);
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings(parseSettings0);
      parser1.setTrackErrors((-3580));
      document1.parser(parser0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document0.html(charArrayWriter0);
      // Undeclared exception!
      try { 
        document1.is("Children collection to be inserted must not be null.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = new Document("pF");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Parser.htmlParser();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      document0.getElementsByAttributeValueStarting("y3", "ScriptDataDoubleEscapedLessthanSign");
      document1.charset();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Charset.defaultCharset();
      document_OutputSettings1.clone();
      Document document2 = document1.ownerDocument();
      MockFileWriter mockFileWriter0 = new MockFileWriter("class", true);
      // Undeclared exception!
      document2.outerHtmlHead(mockFileWriter0, 10878, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = new Document("Q('yiT*}!7,]");
      Document document1 = document0.ownerDocument();
      Element element0 = document1.tagName("disabled");
      document1.getElementsContainingOwnText("7[hLB'OBU?n {Z");
      document1.nodeName();
      document0.className();
      document0.parents();
      int int0 = (-4525);
      // Undeclared exception!
      try { 
        element0.childNode((-4525));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = new Document("pF");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      ParseSettings parseSettings1 = new ParseSettings(true, true);
      Parser parser1 = parser0.settings(parseSettings1);
      Parser parser2 = parser1.setTrackErrors((-3580));
      Document document2 = document1.parser(parser2);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document2.html(charArrayWriter0);
      document2.is("pF");
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$AttributeWithValueNot", "org.jsoup.select.Evaluator$AttributeWithValueNot");
      Document document1 = document0.normalise();
      Element element0 = document1.text("org.jsoup.select.Evaluator$AttributeWithValueNot");
      element0.clearAttributes();
      element0.val("P^?c");
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("!&2]", "");
      Element element0 = document0.head();
      element0.getElementsByAttributeValueEnding(",TXW<(]V\"A}AZ", "x>~zsx/Ksc}uv8:");
      document0.id();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.prependElement("S_v8L/s");
      element0.getElementsByAttributeValueMatching("G 6?D7Krh#)wmKL$B", (Pattern) null);
      Elements elements0 = document0.nextElementSiblings();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      element1.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      element1.childNodeSize();
      element1.siblingElements();
      element0.data();
      Element element2 = element0.html("Cap.nY;gG8H9&:w");
      element2.nextElementSiblings();
      Parser parser0 = Parser.xmlParser();
      parser0.parseInput("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      document0.normalise();
      // Undeclared exception!
      try { 
        element2.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Tag tag0 = Tag.valueOf("@_");
      Element element0 = new Element(tag0, "@_");
      CDataNode cDataNode0 = new CDataNode("@_");
      cDataNode0.text("@_");
      Node node0 = cDataNode0.shallowClone();
      element0.setParentNode(node0);
      element0.getElementsMatchingText("@_");
      element0.getElementsByAttributeValueMatching("@_", "@_");
      element0.baseUri();
      element0.children();
      element0.getElementsByAttributeValueMatching((String) null, (Pattern) null);
      element0.text();
      // Undeclared exception!
      try { 
        element0.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$AttributeWithValueNot", "org.jsoup.select.Evaluator$AttributeWithValueNot");
      Document document1 = document0.normalise();
      String string0 = "P$";
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      String string1 = ".";
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Tag tag0 = Tag.valueOf(".", parseSettings0);
      Attributes attributes0 = new Attributes();
      document1.prepend("Split offset must not be greater than current text length");
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parse("*", "w");
      String string0 = ",E^[,@n^3dxY{u";
      Element element0 = document0.head();
      element0.id();
      Document document1 = new Document("#root");
      document1.getElementsByAttributeStarting("w");
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter("", "#");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // #
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockPrintWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      String string0 = "*";
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      parseSettings0.normalizeAttribute("I");
      Tag tag0 = Tag.valueOf("*", parseSettings0);
      Element element0 = new Element(tag0, "*");
      element0.dataset();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Element element1 = new Element(tag0, "I");
      element0.val();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      String string1 = "m#DE)";
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueStarting("m#DE)", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Document.createShell("LXj6l4");
      document0.classNames();
      document0.previousElementSiblings();
      document0.nextElementSiblings();
      Document document1 = document0.clone();
      document0.appendTo(document1);
      assertEquals(1, document0.siblingIndex());
      
      Document document2 = Parser.parseBodyFragment("LXj6l4", "LXj6l4");
      String string0 = document2.text();
      assertEquals("LXj6l4", string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$AttributeWithValueNot", "org.jsoup.select.Evaluator$AttributeWithValueNot");
      Document document1 = document0.normalise();
      Pattern pattern0 = Pattern.compile("org.jsoup.select.Evaluator$AttributeWithValueNot", 512);
      document1.getElementsMatchingText(pattern0);
      Element element0 = document1.text("org.jsoup.select.Evaluator$AttributeWithValueNot");
      document0.val("P^?c");
      boolean boolean0 = element0.hasText();
      assertTrue(boolean0);
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueNot", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("`? n0{*IxS=]C173i", "G 6?D7Krh#)wmKL$B");
      Document document1 = document0.normalise();
      document1.previousElementSibling();
      assertEquals("G 6?D7Krh#)wmKL$B", document1.baseUri());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "*");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      parseSettings0.normalizeAttribute("I");
      Tag tag0 = Tag.valueOf("*", parseSettings0);
      Element element0 = new Element(tag0, "*");
      element0.dataset();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Element element1 = new Element(tag0, "I");
      element0.val();
      Parser parser0 = Parser.xmlParser();
      parser0.setTrackErrors((-3848));
      Parser parser1 = parser0.settings(parseSettings0);
      parser1.settings(parseSettings0);
      Parser.xmlParser();
      Parser.htmlParser();
      Locale locale0 = Locale.JAPAN;
      Document document0 = Parser.parseBodyFragment("*", ">a3AAs2&|");
      document0.head();
      element1.val("");
      document0.appendText("i");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Tag tag0 = Tag.valueOf("br");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "br", (Attributes) null);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag.valueOf("br", parseSettings0);
      pseudoTextElement0.getElementsByIndexLessThan(10877);
      Element element0 = pseudoTextElement0.prependElement("\"");
      Element element1 = pseudoTextElement0.val("*");
      element1.cssSelector();
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      element0.is((Evaluator) evaluator_IsLastOfType0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Element element2 = pseudoTextElement0.classNames((Set<String>) linkedHashSet0);
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      // Undeclared exception!
      try { 
        element2.insertChildren(2147483645, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      byte[] byteArray0 = new byte[4];
      byteArray0[0] = (byte)33;
      byteArray0[1] = (byte)28;
      byteArray0[2] = (byte)1;
      byteArray0[3] = (byte)5;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Document document0 = Parser.parseBodyFragmentRelaxed("@_", "@_");
      Document document1 = document0.normalise();
      document1.text("@_");
      // Undeclared exception!
      try { 
        document0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser1 = parser0.settings(parseSettings0);
      Document document0 = parser1.parseInput("systemId", "systemId");
      document0.previousElementSiblings();
      document0.nextElementSiblings();
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      assertTrue(attributes1.equals((Object)attributes0));
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.normalise();
      document0.attr("c<)bYGRKj", true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset.defaultCharset();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      document0.getElementsByAttributeValueNot("tWJHM", "P$");
      Tag tag0 = Tag.valueOf("P$", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "", attributes0);
      Document.createShell("");
      String string0 = document0.tagName();
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = "k?T4Rn 97i-(";
      Document document0 = Parser.parseBodyFragment("k?T4Rn 97i-(", "k?T4Rn 97i-(");
      Document document1 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      Document document2 = document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(0);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      document1.getElementsByAttributeValueStarting("class", "class");
      Charset charset0 = document2.charset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      // Undeclared exception!
      try { 
        document2.outerHtmlHead((Appendable) null, 0, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-43), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      Element element0 = document0.prependElement("S_v8L/s");
      element0.getElementsByAttributeValueMatching("G 6?D7Krh#)wmKL$B", (Pattern) null);
      Elements elements0 = document0.nextElementSiblings();
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      element1.getElementsContainingOwnText("org.jsoup.select.Evaluator$ContainsOwnText");
      element1.childNodeSize();
      element1.siblingElements();
      element0.data();
      element0.html("Cap.nY;gG8H9&:w");
      document0.text();
      element0.elementSiblingIndex();
      element1.parent();
      // Undeclared exception!
      try { 
        document0.selectFirst("Cap.nY;gG8H9&:w org.jsoup.select.Evaluator$ContainsOwnText");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'Cap.nY;gG8H9&:w org.jsoup.select.Evaluator$ContainsOwnText': unexpected token at ';gG8H9&:w org.jsoup.select.Evaluator$ContainsOwnText'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Tag tag0 = Tag.valueOf("@_");
      Element element0 = new Element(tag0, "@_");
      CDataNode cDataNode0 = new CDataNode("@_");
      cDataNode0.text("@_");
      CDataNode cDataNode1 = new CDataNode("@_");
      Node node0 = cDataNode1.shallowClone();
      element0.setParentNode(node0);
      element0.getElementsMatchingText(",au\"^+^9KaN:w");
      String string0 = "*";
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching(",au\"^+^9KaN:w", "*");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: *
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("-cgepw0lT#KYCoC D", "              ");
      document0.getElementsByIndexEquals(10338);
      document0.normalise();
      // Undeclared exception!
      try { 
        document0.selectFirst(":has(%s)");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '%s': unexpected token at '%s'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = new Document("textarea");
      Document document1 = (Document)document0.prependText("textarea");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(1500);
      Parser parser2 = parser1.settings(parseSettings0);
      parser2.settings(parseSettings0);
      Parser parser3 = Parser.xmlParser();
      Document document2 = parser3.parseInput("systemId", "textarea");
      Document document3 = document1.clone();
      document3.getElementsByClass("html");
      assertEquals(1, document0.childNodeSize());
      
      String string0 = document2.cssSelector();
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      String string0 = "*";
      Document document0 = Document.createShell("*");
      Document document1 = document0.ownerDocument();
      document1.childNodesAsArray();
      Element element0 = document1.head();
      document0.prependElement("(6TqLO+y;!w)");
      element0.siblingElements();
      element0.siblingElements();
      document0.nextElementSibling();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      PipedWriter pipedWriter1 = null;
      try {
        pipedWriter1 = new PipedWriter(pipedReader0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      String string0 = "select";
      Element element0 = new Element("select");
      element0.text();
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      linkedList0.iterator();
      element0.getElementsMatchingOwnText("");
      element0.attr("", "");
      element0.elementSiblingIndex();
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueEnding((String) null, "~E_^Z@wvk6l:o\"\"7F");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser1 = parser0.settings(parseSettings0);
      Document document0 = parser1.parseInput("systemId", "systemId");
      Elements elements0 = document0.getElementsByClass("systemId");
      assertTrue(elements0.isEmpty());
      
      document0.selectFirst("systemId");
      assertEquals("systemId", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      String string0 = "WCzf;pg]93Ij{mQ";
      Document document0 = Parser.parseBodyFragment("WCzf;pg]93Ij{mQ", "WCzf;pg]93Ij{mQ");
      Document document1 = document0.clone();
      Elements elements0 = document1.getElementsByIndexEquals((-2878));
      // Undeclared exception!
      try { 
        document1.insertChildren(2565, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      String string0 = "";
      Document document0 = parser0.parseInput("", "");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Charset charset0 = Charset.defaultCharset();
      document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Document document2 = document1.outputSettings(document_OutputSettings2);
      Document document3 = document2.ownerDocument();
      document2.siblingElements();
      // Undeclared exception!
      try { 
        document3.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Tag.valueOf("OU:NX,%%-#rO");
      Attribute attribute0 = new Attribute("OU:NX,%%-#rO", "#root");
      CDataNode cDataNode0 = new CDataNode("#root");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("html", true);
      Attributes attributes2 = attributes1.put("html", (String) null);
      attributes2.spliterator();
      Attributes attributes3 = attributes2.put(attribute0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      attributes2.forEach(consumer0);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      parseSettings0.normalizeAttribute("OU:NX,%%-#rO");
      Tag tag0 = Tag.valueOf("OU:NX,%%-#rO");
      FormElement formElement0 = new FormElement(tag0, "html", attributes3);
      Element.preserveWhitespace(cDataNode0);
      String string0 = "";
      formElement0.doSetBaseUri("html");
      formElement0.getElementsContainingText((String) null);
      attributes1.keys = null;
      // Undeclared exception!
      try { 
        formElement0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k?T4Rn 97i-(", "k?T4Rn 97i-(");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "Enpz");
      document1.getElementById(">*nQ'2*q2");
      Document document2 = document0.normalise();
      Document.OutputSettings document_OutputSettings2 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax1 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings0.syntax(document_OutputSettings_Syntax1);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.charset(charset0);
      document_OutputSettings0.clone();
      document_OutputSettings4.outline(false);
      Document document3 = document2.outputSettings(document_OutputSettings1);
      document3.children();
      // Undeclared exception!
      try { 
        document3.after("k?T4Rn 97i-(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!&2]", "");
      Element element0 = document0.getElementById("\n * ");
      assertNull(element0);
      
      Element element1 = document0.tagName("=`s,dcU~]:|31");
      assertEquals(1, element1.childNodeSize());
      
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Parser parser0 = Parser.xmlParser();
      Document document2 = parser0.parseInput("!&2]", "V AjSS3)~)LYO*]+0<]");
      assertEquals("V AjSS3)~)LYO*]+0<]", document2.baseUri());
      
      Elements elements0 = document0.getElementsByClass("V AjSS3)~)LYO*]+0<]");
      assertTrue(elements0.isEmpty());
      
      String string0 = document1.cssSelector();
      assertEquals("=`s,dcu~]||31", string0);
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings(parseSettings0);
      Parser parser2 = parser1.setTrackErrors(1787);
      Document document0 = parser2.parseInput("t,bUPlZ<K*ThI", "textarea");
      Elements elements0 = document0.getElementsByClass("systemId");
      assertTrue(elements0.isEmpty());
      
      String string0 = document0.cssSelector();
      assertEquals("#root", string0);
      assertEquals("textarea", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Charset charset0 = Charset.defaultCharset();
      document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Document document2 = document1.outputSettings(document_OutputSettings2);
      Document document3 = document2.ownerDocument();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("P$", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "", attributes0);
      document3.setParentNode(element0);
      Document.createShell("");
      document0.tagName();
      Elements elements0 = document3.getElementsByTag("#root");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      String string0 = "7&#s14|_Wc";
      Attributes attributes0 = new Attributes();
      attributes0.iterator();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "7&#s14|_Wc", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Document document0 = new Document("pF");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Parser parser1 = parser0.settings(parseSettings0);
      Parser parser2 = parser1.setTrackErrors((-3580));
      Document document2 = document1.parser(parser2);
      document2.is("pF");
      assertEquals("pF", document2.baseUri());
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@s+47>SuIBVxfY", "");
      Document document1 = document0.clone();
      document1.getElementsByAttributeValueMatching("6VIN0V--", "6VIN0V--");
      document0.prependChild(document1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document2 = document1.outputSettings(document_OutputSettings0);
      int int0 = 124;
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.utf;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      Element element0 = document2.appendText("A}F7nW9(|xq2nlN3|EI");
      element0.nextElementSibling();
      document_OutputSettings0.indentAmount(124);
      document2.append("@s+47>SuIBVxfY");
      // Undeclared exception!
      try { 
        document2.select("@s+47>SuIBVxfY");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '@s+47>SuIBVxfY': unexpected token at '@s+47>SuIBVxfY'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.prependText("");
      Attributes attributes0 = new Attributes();
      String string0 = "value";
      Attributes attributes1 = attributes0.put("value", "Q9;za#2X/}V($#sZx");
      attributes1.addAll(attributes0);
      Attributes attributes2 = attributes1.put("d7O D-g`?F^Qnm^'A", false);
      FormElement formElement0 = null;
      try {
        formElement0 = new FormElement((Tag) null, "", attributes2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      String string0 = "k?T4Rn 97i-(";
      Document document0 = Parser.parseBodyFragment("k?T4Rn 97i-(", "k?T4Rn 97i-(");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Entities.CoreCharset entities_CoreCharset0 = Entities.CoreCharset.ascii;
      document_OutputSettings0.coreCharset = entities_CoreCharset0;
      Document document2 = document1.outputSettings(document_OutputSettings1);
      Element element0 = document2.head();
      element0.id();
      String string1 = "";
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Document document0 = Document.createShell(" (~R!A%.F@muz");
      String string0 = "org.jsoup.nodes.Element$NodeList";
      String string1 = "qM";
      // Undeclared exception!
      try { 
        document0.wrap("{sV7G]#=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Document document0 = new Document("textarea");
      Document document1 = (Document)document0.prependText("");
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(1500);
      Parser parser2 = parser1.settings(parseSettings0);
      parser2.settings(parseSettings0);
      Parser parser3 = Parser.xmlParser();
      parser3.parseInput("systZmId", "textarea");
      document1.clone();
      document0.selectFirst("textarea");
      document1.doSetBaseUri((String) null);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("T", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("T", "T");
      String string0 = "Pt\"0?=iM-Re^)-c.";
      Attribute attribute0 = new Attribute("Pt\"0?=iM-Re^)-c.", "Pt\"0?=iM-Re^)-c.");
      attributes1.spliterator();
      Attributes attributes2 = attributes1.put(attribute0);
      Consumer<Object> consumer0 = (Consumer<Object>) mock(Consumer.class, new ViolatedAssumptionAnswer());
      attributes0.forEach(consumer0);
      parseSettings0.normalizeAttribute("Pt\"0?=iM-Re^)-c.");
      FormElement formElement0 = new FormElement(tag0, "T", attributes2);
      Element.preserveWhitespace(formElement0);
      String string1 = "";
      formElement0.doSetBaseUri("");
      formElement0.getElementsContainingText("");
      // Undeclared exception!
      try { 
        formElement0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      String string0 = "G 6?D7Krh#)wmKL$B";
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$ContainsOwnText", "G 6?D7Krh#)wmKL$B");
      String string1 = ",E^[,@n^3dxY{u";
      document0.text();
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Document document0 = Document.createShell("LXj6l4");
      Set<String> set0 = document0.classNames();
      Element element0 = document0.classNames(set0);
      assertEquals("LXj6l4", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.hasAttributes();
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      String string0 = ">FXb9/H,DJ)`";
      Document document0 = parser0.parseInput(">FXb9/H,DJ)`", ">FXb9/H,DJ)`");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = null;
      // Undeclared exception!
      try { 
        document1.outputSettings((Document.OutputSettings) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("WCzf;pg]93Ij{mQ", "WCzf;pg]93Ij{mQ");
      Document document1 = document0.clone();
      Document document2 = document1.normalise();
      // Undeclared exception!
      try { 
        document2.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.body();
      // Undeclared exception!
      try { 
        element0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Tag tag0 = Tag.valueOf("open");
      CDataNode cDataNode0 = new CDataNode("open");
      Attributes attributes0 = cDataNode0.attributes();
      String string0 = ":nth-child(%d)";
      attributes0.putIgnoreCase(":nth-child(%d)", "");
      cDataNode0.text("");
      Element element0 = new Element(tag0, "~~I}0EMN@^}U", attributes0);
      element0.className();
      element0.tag();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "br";
      stringArray0[1] = "open";
      stringArray0[2] = "~~I}0EMN@^}U";
      // Undeclared exception!
      try { 
        cDataNode0.after("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test365()  throws Throwable  {
      String string0 = "select";
      Element element0 = new Element("select");
      element0.text();
      int int0 = 2915;
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      linkedList0.iterator();
      // Undeclared exception!
      try { 
        element0.insertChildren(2915, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test366()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Parser parser1 = parser0.settings(parseSettings0);
      Document document0 = parser1.parseInput("systemId", "systemId");
      Elements elements0 = document0.getElementsByClass("systemId");
      assertTrue(elements0.isEmpty());
      
      String string0 = document0.cssSelector();
      assertEquals("#root", string0);
      assertEquals("systemId", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test367()  throws Throwable  {
      Node node0 = null;
      Element.preserveWhitespace((Node) null);
      String string0 = null;
      Document document0 = null;
      try {
        document0 = new Document((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test368()  throws Throwable  {
      Element element0 = new Element("tbody");
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.flush();
      StringWriter stringWriter1 = stringWriter0.append((CharSequence) "tbody", 0, 0);
      StringWriter stringWriter2 = stringWriter1.append((CharSequence) "tbody");
      stringWriter2.getBuffer();
      // Undeclared exception!
      try { 
        stringWriter2.write("tbody", 537, 60);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test369()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!&2]", "");
      Element element0 = document0.getElementById("\n * ");
      assertNull(element0);
      
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(false);
      document1.outputSettings(document_OutputSettings4);
      Elements elements0 = document1.children();
      assertEquals(1, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test370()  throws Throwable  {
      Document document0 = Parser.parse("", "_vt_Pwp=. -O--5");
      Document document1 = document0.normalise();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Element element0 = document2.head();
      element0.attr("C+kDNwT3NQ", false);
      element0.tagName();
      assertEquals("_vt_Pwp=. -O--5", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test371()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      String string0 = "";
      Document document0 = parser0.parseInput("", "");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Charset charset0 = Charset.defaultCharset();
      document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset(charset0);
      Document document2 = document1.outputSettings(document_OutputSettings2);
      Document document3 = document2.ownerDocument();
      // Undeclared exception!
      try { 
        document3.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test372()  throws Throwable  {
      Tag tag0 = Tag.valueOf("OU:NX,%%-#rO");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attributes attributes2 = attributes1.put("a'<Wq~J$&OH", true);
      Element element0 = new Element(tag0, "a'<Wq~J$&OH", attributes2);
      Elements elements0 = element0.getElementsContainingText("a'<Wq~J$&OH");
      assertTrue(elements0.isEmpty());
      assertEquals("a'<Wq~J$&OH", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test373()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attributes attributes2 = attributes1.put("", "UD0*SJAp3p/Hy$");
      Attributes attributes3 = attributes2.put("org.jsoup.select.Evaluator$IsNthOfType", false);
      Element element0 = new Element(tag0, "Children collection to be inserted must not be null.", attributes3);
      // Undeclared exception!
      try { 
        element0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test374()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$AttributeWithValueNot", "org.jsoup.select.Evaluator$AttributeWithValueNot");
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = document0.normalise();
      Element element0 = document1.text("org.jsoup.select.Evaluator$AttributeWithValueNot");
      Element element1 = element0.val("P^?c");
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueNot", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test375()  throws Throwable  {
      Tag tag0 = Tag.valueOf("x7@!K|_6(eAB#D");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("x7@!K|_6(eAB#D", true);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "x7@!K|_6(eAB#D", attributes1);
      CDataNode cDataNode0 = new CDataNode("x7@!K|_6(eAB#D");
      Node node0 = cDataNode0.doClone(pseudoTextElement0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.after(node0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test376()  throws Throwable  {
      String string0 = "PLuzj";
      Document document0 = Parser.parseBodyFragmentRelaxed("PLuzj", "");
      document0.clone();
      Appendable appendable0 = null;
      int int0 = 0;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(0);
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      document0.childNodes = (List<Node>) linkedList0;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test377()  throws Throwable  {
      String string0 = "Qr=yn)ZSPboW-&,=E";
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("Qr=yn)ZSPboW-&,=E", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      Attribute attribute0 = new Attribute("Qr=yn)ZSPboW-&,=E", "Qr=yn)ZSPboW-&,=E");
      Attributes attributes2 = attributes1.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "Qr=yn)ZSPboW-&,=E", attributes2);
      attributes1.hasKeyIgnoreCase("");
      Parser parser0 = Parser.xmlParser();
      String string1 = "";
      ParseErrorList parseErrorList0 = parser0.getErrors();
      Parser.parseBodyFragmentRelaxed("", ":nth-child(%d)");
      Parser.parseFragment("", (Element) formElement0, "value", parseErrorList0);
      parser0.parseInput("", "Qr=yn)ZSPboW-&,=E");
      // Undeclared exception!
      try { 
        formElement0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test378()  throws Throwable  {
      Document document0 = Document.createShell("-I,71yM");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      document_OutputSettings2.prepareEncoder();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      Document document2 = document1.clone();
      // Undeclared exception!
      try { 
        document2.select("-I,71yM");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '-I,71yM': unexpected token at '-I,71yM'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test379()  throws Throwable  {
      String string0 = "@_";
      Tag tag0 = Tag.valueOf("@_");
      Element element0 = new Element(tag0, "@_");
      CDataNode cDataNode0 = new CDataNode("@_");
      cDataNode0.text("@_");
      Node node0 = cDataNode0.shallowClone();
      element0.setParentNode(node0);
      element0.getElementsMatchingText("@_");
      element0.getElementsByAttributeValueMatching("@_", "@_");
      element0.baseUri();
      element0.children();
      element0.getElementsByAttributeValueMatching((String) null, (Pattern) null);
      // Undeclared exception!
      try { 
        element0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test380()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      parseSettings0.normalizeAttribute("#");
      Tag tag0 = Tag.valueOf("*", parseSettings0);
      Element element0 = new Element(tag0, "*");
      element0.dataset();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
      element0.val();
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      Tag.valueOf("*", parseSettings0);
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element0;
      // Undeclared exception!
      try { 
        element0.insertChildren(4726, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
