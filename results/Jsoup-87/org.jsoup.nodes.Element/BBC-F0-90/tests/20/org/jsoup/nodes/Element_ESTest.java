/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:41:21 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("SKIP_ENTIRELY", "|/u2g&.|l");
      Element element0 = document0.toggleClass(",");
      element0.toggleClass("Y))( Ol.C:'j|i");
      element0.hasClass("span");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      Element element0 = document0.head();
      document0.parentNode = (Node) element0;
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0OX_&b9(QRL]5Y[ck", "0OX_&b9(QRL]5Y[ck");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuffer0, (-372), document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(byteArrayOutputStream0, false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(mockPrintWriter0, 13, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Commen:0tEndBang");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parse("#7@qpB", "#7@qpB");
      Document document1 = Parser.parseBodyFragmentRelaxed("#7@qpB", "#7@qpB");
      document0.prependChild(document1);
      document1.wrap("f|;RP68E^\")BW?G<{");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yc/qHr+*6H", "Pattern syntax error: ");
      Element element0 = document0.head();
      element0.wrap("yc/qHr+*6H");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "IMrP(PrXHEIPI]");
      Element element0 = document0.body();
      element0.wrap("8>:]Y3M");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Tag tag0 = Tag.valueOf("0O@_&btYgQR),Y[cOz");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "0O@_&btYgQR),Y[cOz", attributes0);
      pseudoTextElement0.wholeText();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parse("3 <$BY[Z<UAf((i3.I", "3 <$BY[Z<UAf((i3.I");
      document0.setSiblingIndex((-282));
      document0.val("$+");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parse("&:'u]/N>`y2p&~|^y]", "<UTA#EUAJ#");
      Element element0 = document0.body();
      element0.val((String) null);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parse("j", "/A");
      Element element0 = document0.appendElement("/A");
      element0.val("=4K1Z61u0b=r}g28!W");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parse("#7@qpB", "#7@qpB");
      document0.val("#7@qpB");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.body();
      element0.toggleClass(":[vEp!(6jDQ2B");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parse("0OX_&b9(QRL]5Y[cO", "0OX_&b9(QRL]5Y[cO");
      document0.setSiblingIndex((-1580));
      document0.toggleClass("Cr8ebd:U<RZ-=j*;j");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Document.createShell("T821;w4f-hs");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.text("bM/;@[%pXt~ l9g");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#", "#");
      Element element0 = document0.head();
      element0.text("d5cWV>0");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parse("sn$v?_8OQze", "&k2nG)<Zv@r~tC@Q|A");
      document0.text("head");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yc/qHr+*6H", "Pattern syntax error: ");
      Element element0 = document0.head();
      element0.text();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("class", "@");
      document0.siblingIndex = (-1432352094);
      document0.tagName("[}3wJ ");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("d/H3VUWlsNYwY", " Rf1}bt@C");
      document0.tagName("body");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parse("j", "s+");
      Element element0 = document0.appendElement("s+");
      element0.tagName("s+");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("MG7oA[~Znf75N", "&38?{Ked60p-?1");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parse("br", "s+");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parse("IE", "IE");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      pseudoTextElement0.tag();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parse("GtyNcbF<l[Th(N5xy", "GtyNcbF<l[Th(N5xy");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      document0.selectFirst("c");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parse(",yI@zJdL&iJ)`w>jJ", ",b");
      document0.selectFirst(",b");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("ko", "ko");
      document0.appendElement("ko");
      document0.selectFirst("ko");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      document0.select("#root");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      Element element0 = document0.body();
      element0.removeClass("disabled");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      Element element0 = document0.head();
      element0.removeClass("disabled");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.removeClass("");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Element element0 = new Element("textarea");
      Element.preserveWhitespace(element0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parse("j", "s+");
      Element element0 = document0.appendElement("s+");
      element0.prependText("@(+Zy#8");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("disabled", "disabled");
      Element element0 = document0.tagName("disabled");
      element0.siblingIndex = (-55);
      element0.prependText("4y)oDe0p,Jt@ R");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("LHY6LA", "");
      Element element0 = document0.head();
      Element element1 = element0.append("6%[");
      element1.prependText("6%[");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "br", attributes0);
      pseudoTextElement0.prependElement("form");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("j", "j");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("class", "@");
      document0.siblingIndex = (-1432352094);
      document0.prepend("@");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parse("j", "s+");
      Element element0 = document0.body();
      element0.prepend("s+");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0OX_&bt(QR*)]5Y[cOz", "0OX_&bt(QR*)]5Y[cOz");
      Element element0 = document0.appendElement("0OX_&bt(QR*)]5Y[cOz");
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("j", "j");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("j", "org.jsoup.nodes.Element$1");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hC~LkZ5dlGxg|]S$6x", "\r\n");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yc/qHr+*6H", "Pattern syntax error: ");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parse("j", "s+");
      Element element0 = document0.appendElement("s+");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000048");
      document0.parentNode = (Node) document0;
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`o", "`o");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parse("j", "org.jsoup.nodes.Element$1");
      document0.prependChild(document0);
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Document.createShell("#$iTUS6]gc](W[@G");
      Element element0 = document0.appendElement("Kg");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parse("0OX_&b9(QRL]5Y[cO", "0OX_&b9(QRL]5Y[cO");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Document.createShell("T821;w4f-hs");
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("B805e77^UMv", "textarea");
      document0.is((Evaluator) evaluator_AttributeWithValueNot0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ko", "ko");
      Element element0 = document0.appendElement("ko");
      element0.is("ko");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parse("0OX_&b9(QRL]5Y[cO", "0OX_&b9(QRL]5Y[cO");
      Element element0 = document0.body();
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      element0.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parse("ko", "ko");
      Element element0 = document0.appendElement("ko");
      Elements elements0 = element0.getElementsContainingOwnText("{&AQ-k*r9onr3VwHe`");
      element0.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Tag tag0 = Tag.valueOf("hwjflldp");
      CDataNode cDataNode0 = new CDataNode("hwjflldp");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "hwjflldp", attributes0);
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      formElement0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("disabled", "disabled");
      Element element0 = document0.tagName("disabled");
      element0.siblingIndex = (-55);
      document0.html("java.lang.string@0000000081");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "Patterp synJax error& ");
      Element element0 = document0.body();
      element0.html("textarea");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("br");
      Document document0 = parser0.parseInput((Reader) stringReader0, "br");
      MockPrintStream mockPrintStream0 = new MockPrintStream("dw|");
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockPrintStream0, charsetEncoder0);
      document0.html(outputStreamWriter0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Tag tag0 = Tag.valueOf("|");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "#", attributes0);
      element0.html();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Tag tag0 = Tag.valueOf("|");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "#", attributes0);
      element0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parse("j", "j");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "br", attributes0);
      pseudoTextElement0.getElementsMatchingText("1so*t6n3");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("br");
      Document document0 = parser0.parseInput((Reader) stringReader0, "br");
      document0.getElementsMatchingText("br");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "Patterp synJax error& ");
      Pattern pattern0 = Pattern.compile("", 183);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = new Document("CommentEndBang");
      document0.getElementsMatchingOwnText("CommentEndBang");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("J0=>m", "J0=>m");
      document0.getElementsContainingOwnText("");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parse("2^R)Q%+*9~[}n<J1qAU", "2^R)Q%+*9~[}n<J1qAU");
      Element element0 = document0.appendElement("2^R)Q%+*9~[}n<J1qAU");
      element0.getElementsByTag("2^R)Q%+*9~[}n<J1qAU");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parse("j", "org.jsoup.nodes.Element$1");
      document0.getElementsByIndexLessThan(21);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Document.createShell("G?");
      document0.getElementsByIndexGreaterThan(124);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parse(",", "s+");
      Element element0 = document0.toggleClass(",");
      element0.toggleClass("s+");
      document0.getElementsByClass("s+");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000048");
      document0.getElementsByAttributeValueNot("\n", "\n");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".dw#h/;_9<zfk");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(",", "LCgQ");
      FormElement formElement0 = new FormElement(tag0, ".dw#h/;_9<zfk", attributes1);
      formElement0.getElementsByAttributeValueContaining(",", "LCgQ");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      document0.attr("#root", true);
      document0.getElementsByAttributeStarting("#root");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "Pattern syntax error: ");
      document0.prependChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      Element element0 = document0.head();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("?=05]d&\\%WZF", "?=05]d&\\%WZF");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Document.createShell("0OX_&b9(QR*]5Y[cOz");
      document0.parentNode = (Node) document0;
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yc/qHr+*6H", "Pattern syntax error: ");
      Element element0 = document0.head();
      element0.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("8vA4lX\"", parseSettings0);
      Element element0 = new Element(tag0, "S5sD;B");
      element0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Document.createShell("][9P%M@RTKl-jV:diA");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0OX_&b9(QR*)]5Y[cOz", "0OX_&b9(QR*)]5Y[cOz");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      Set<String> set0 = document0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      Element element0 = document0.head();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1]C", "Pattern syntax error: ");
      Element element0 = document0.toggleClass("Pattern syntax error: ");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parse("GpV1l)uNs0=aG)5;", "GpV1l)uNs0=aG)5;");
      Element element0 = document0.toggleClass("(rrh96xkdHM}_!_!2+");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ko", "ko");
      Element element0 = document0.head();
      element0.children();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y}k#G]%Sc:Kt;7YoT", "Y}k#G]%Sc:Kt;7YoT");
      Element element0 = document0.prependElement("Y}k#G]%Sc:Kt;7YoT");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse("j", "j");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("GtyNcbF<l[Th(N5xy", "GtyNcbF<l[Th(N5xy");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parse("2^R)Q%+*9~[}n<J1qAU", "2^R)Q%+*9~[}n<J1qAU");
      Element element0 = document0.appendElement("2^R)Q%+*9~[}n<J1qAU");
      element0.before((Node) document0);
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("0OX_&b9(QR*]5Y[cOz");
      document0.parentNode = (Node) document0;
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      Document document1 = new Document("&S{/]%Xgzidc4?k3lJ7");
      document0.parentNode = (Node) document1;
      document0.before("html");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(",b", "id");
      Element element0 = document0.body();
      element0.before("s+");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", ":XP?F");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Tag tag0 = Tag.valueOf("S>6VV*|7>DZ");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "dH#l^]>RpY", attributes0);
      pseudoTextElement0.attributes();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = new Document("CommentEndBang");
      Element element0 = document0.html("0jDJnSjF/{@KNaY_j");
      element0.appendTo(document0);
      element0.attr("#root", true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.body();
      element0.attr("Pattern syntax error: ", "_Uu1{k *Ka");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Tag tag0 = Tag.valueOf("hwjflldp");
      CDataNode cDataNode0 = new CDataNode("hwjflldp");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "hwjflldp", attributes0);
      formElement0.attr("hwjflldp", "basefont");
      formElement0.getElementsByAttribute("hwjflldp");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "Pattern syntax error: ");
      Element element0 = document0.head();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parse("j", "s+");
      Element element0 = document0.appendElement("s+");
      element0.appendText("hDU7k(6A25dc");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      Element element0 = document0.head();
      element0.appendText("#root");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parse("sn$v?_8OQze", "&k2nG)<Zv@r~tC@Q|A");
      document0.appendElement("head");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parse("0OX_&b9(QRL]5Y[cO", "0OX_&b9(QRL]5Y[cO");
      document0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parse("0OX_&b9(QRL]5Y[cO", "0OX_&b9(QRL]5Y[cO");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      element1.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = new Document("head");
      Document document1 = document0.normalise();
      LinkedHashSet<CDataNode> linkedHashSet0 = new LinkedHashSet<CDataNode>();
      Element element0 = document1.insertChildren(1, (Collection<? extends Node>) linkedHashSet0);
      element0.siblingIndex = 1;
      element0.append("[IG)1Ar");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parse("j", "j");
      document0.setSiblingIndex((-1));
      document0.append("0>2CHT");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = new Document("");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("][9P%M@RTKl-jV:diA", "][9P%M@RTKl-jV:diA");
      Document document1 = (Document)document0.append("][9P%M@RTKl-jV:diA");
      document1.reparentChild(document1);
      document1.after((Node) document1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yc/qHr+*6H", "Pattern syntax error: ");
      Document document1 = document0.clone();
      document1.reparentChild(document0);
      document0.after("yc/qHr+*6H");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parse("0OX_&b9(QRL]5Y[cO", "0OX_&b9(QRL]5Y[cO");
      Element element0 = document0.body();
      element0.after("0OX_&b9(QRL]5Y[cO");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Document.createShell("8");
      document0.siblingIndex = (-1);
      document0.addClass("|");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Document.createShell("G]hp+cY/.zjc}2#@u");
      Element element0 = document0.body();
      element0.addClass("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Document.createShell("8");
      document0.parentNode = (Node) document0;
      document0.addClass("|");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parse("0OX_&b9(QR*]5Y[cOz", "0OX_&b9(QR*]5Y[cOz");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.wrap("0OX_&b9(QR*]5Y[cOz");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-h)0/CKS~yV{@F:", "-h)0/CKS~yV{@F:");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.val("143");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Tag tag0 = Tag.valueOf("hwjflldp");
      CDataNode cDataNode0 = new CDataNode("hwjflldp");
      Attributes attributes0 = cDataNode0.attributes();
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "hwjflldp", attributes0);
      // Undeclared exception!
      try { 
        formElement0.val("hwjflldp");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Tag tag0 = Tag.valueOf("hwjflldp");
      CDataNode cDataNode0 = new CDataNode("hwjflldp");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.keys = null;
      FormElement formElement0 = new FormElement(tag0, "hwjflldp", attributes0);
      // Undeclared exception!
      try { 
        formElement0.val();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = new Document("head");
      // Undeclared exception!
      try { 
        document0.text("head");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("&S{/]%Xgzidc4?k3lJ7", "&S{/]%Xgzidc4?k3lJ7");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Document.createShell("k.o");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Document.createShell("0OX_&b9(QR*)]5Y[cOz");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.tagName("0OX_&b9(QR*)]5Y[cOz");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      Element element0 = document0.head();
      document0.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("RuEwVb", "Pattern syntax error: ");
      DataNode dataNode0 = new DataNode("a_^V)UV/Q%", "a_^V)UV/Q%");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      // Undeclared exception!
      try { 
        document0.selectFirst("&S{/]%Xgzidc4?k3lJ7");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '&S{/]%Xgzidc4?k3lJ7': unexpected token at '&S{/]%Xgzidc4?k3lJ7'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = new Document(">33OR\"U(M2%Q");
      // Undeclared exception!
      try { 
        document0.selectFirst(">33OR\"U(M2%Q");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'Q'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.select(".c-2X<Q7UnH");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '.c-2X<Q7UnH': unexpected token at '<Q7UnH'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("LHY6LA", "");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parse("3 <$BY[Z<UAf((i3.I", "3 <$BY[Z<UAf((i3.I");
      Comment comment0 = new Comment("A]]", "Pattern syntax error: ");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Document.createShell("0OX_&bt(QR*)]5Y[cOz");
      document0.childNodes = null;
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("      ", "S5sD;B");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("S5sD;B", "      ", false);
      Element element0 = document0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(element0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ko", "ko");
      Element element0 = document0.appendElement("ko");
      List<Node> list0 = Parser.parseFragment("ko", (Element) document0, "/a");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.prependText("ko");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.prependElement("org.jsoup.nodes.Node$OuterHtmlVisitor");
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.NodeUtils", "body");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependElement("plaintext");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "Patterp synJax error& ");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      Element element0 = document0.head();
      document0.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        document0.prependChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yc/qHr+*6H", "Pattern syntax error: ");
      Element element0 = document0.head();
      Element element1 = element0.after((Node) document0);
      // Undeclared exception!
      element1.prepend("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parse("Dy%) CwXM", "Dy%) CwXM");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      DocumentType documentType0 = new DocumentType("", "", "", "");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]", "Pattern syntax error: ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("body");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(476);
      // Undeclared exception!
      document0.outerHtmlTail(mockPrintStream0, 476, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = new Document("bp");
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[2];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, (byte) (-78), document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Document.createShell("][9P%M@RTKl-jV:diA");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 0, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("BeforeAttributeName", "BeforeAttributeName");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("BeforeAttributeName");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintWriter0, (-274), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parse("j", "s+");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, 3, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Document.createShell("y i");
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(1482);
      // Undeclared exception!
      document0.outerHtmlHead(charBuffer0, 67, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("id", "id");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "id");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 0, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 58, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[$9+L:)w%nT(OtP\"", "#root");
      MockFile mockFile0 = new MockFile("[$9+L:)w%nT(OtP\"");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintWriter0, 1, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("GpV1l)uNs0=aG)5;", "GpV1l)uNs0=aG)5;");
      StringBuffer stringBuffer0 = new StringBuffer((CharSequence) "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringBuffer0, (-332), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parse("0OX_&b9(QRL]5Y[cO", "0OX_&b9(QRL]5Y[cO");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      PipedWriter pipedWriter0 = new PipedWriter();
      try { 
        document0.outerHtmlHead(pipedWriter0, 4, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse("j", "org.jsoup.nodes.Element$1");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("missing semicolon", "missing semicolon");
      document0.parentNode = (Node) document0;
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IsRoot0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Document.createShell("kmm1kf");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("J0=>m", "sn$v?_8OQze");
      // Undeclared exception!
      try { 
        document0.is("sn$v?_8OQze");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'sn$v?_8OQze': unexpected token at '$v?_8OQze'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("GpV1l)uNs0=aG)5;", "GpV1l)uNs0=aG)5;");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.is("class");
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = new Document("#w/v=9@f ");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Document document1 = document0.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document1.childNodes = null;
      List<DataNode> list0 = document0.dataNodes();
      // Undeclared exception!
      try { 
        document2.insertChildren(1730, (Collection<? extends Node>) list0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parse("0OX_&b9(QR*]5Y[cOz", "0OX_&b9(QR*]5Y[cOz");
      Pattern pattern0 = Pattern.compile("");
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parse("0OX_&b9(QR*]5Y[cOz", "0OX_&b9(QR*]5Y[cOz");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Element element0 = new Element("&S{/]%Xgzidc4?k3lJ7");
      // Undeclared exception!
      try { 
        element0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ig_u#t,hj", "5u)*d/rh8g-LVGn");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.html((BufferedWriter) null);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.appendText("br");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "br");
      // Undeclared exception!
      try { 
        element1.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parse("j", "j");
      // Undeclared exception!
      try { 
        document0.html((MockPrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "l/kh:27'3?w<<N'x&TS");
      TextNode textNode0 = new TextNode(":not(");
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hwjflldp", "!");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.hasText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",I}#3u2i:H'58", "Uuo4'z~mB`Eh`R");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      document0.setSiblingIndex((-2467));
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3 <$BY[Z<UAf((i3.I", "3 <$BY[Z<UAf((i3.I");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u", "u");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hwjflldp", "hwjflldp");
      TextNode textNode0 = new TextNode("hwjflldp");
      document0.setParentNode(textNode0);
      Pattern pattern0 = Pattern.compile("java.lang.string@0000000077");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText(pattern0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parse("0OX_&b9(QR*]5Y[cOz", "%M,gd7QMs:Z\b?U");
      Element element0 = document0.appendElement("0OX_&b9(QR*]5Y[cOz");
      element0.setSiblingIndex((-1265));
      Pattern pattern0 = Pattern.compile("reversed", 32);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText(pattern0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yc/qHr+*6H", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("&S{/]%Xgzidc4?k3lJ7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: &S{/]%Xgzidc4?k3lJ7
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("missing semicolon", "w1rcv");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("w1rcv");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("`o", "`o");
      TextNode textNode0 = new TextNode("`o", "`o");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("`o");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ko", "ko");
      Element element0 = document0.appendElement("ko");
      element0.setSiblingIndex((-1544));
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("ko");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parse("java.lg.string@000000004", "java.lg.string@000000004");
      document0.siblingIndex = (-917);
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("java.lg.string@000000004");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parse("qV", "qV");
      Element element0 = document0.appendElement("qV");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByClass("qV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("");
      Document document0 = parser0.parseInput((Reader) stringReader0, "");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parse("ko", "ko");
      Element element0 = document0.head();
      element0.setSiblingIndex((-953));
      // Undeclared exception!
      try { 
        element0.getElementsByClass("ue(o+jjl-i<>w8hr3");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("br");
      Document document0 = parser0.parseInput((Reader) stringReader0, "br");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "&S{/]%Xgzidc4?k3lJ7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Tag tag0 = Tag.valueOf("*z!'c{xF}JfFob6P$<");
      Attributes attributes0 = new Attributes();
      attributes0.put("*z!'c{xF}JfFob6P$<", true);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "*z!'c{xF}JfFob6P$<", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttributeValueMatching("*z!'c{xF}JfFob6P$<", (Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$AttributeWithValueMatching", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Element element0 = new Element(" ]&{dz");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("#root", " ]&{dz");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error:  ]&{dz
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ]&{dz", "Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("textarea", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Document.createShell("][9P%M@RTKl-jV:diA");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("head", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Tag tag0 = Tag.valueOf("menu");
      CDataNode cDataNode0 = new CDataNode("&n{7'");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, ":7k?zj9=2", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValue((String) null, "}#3TE\u0001~2w&((){");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parse("ko", "ko");
      Element element0 = document0.head();
      element0.setSiblingIndex((-953));
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValue("ko", "video");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("8vA4lX\"", parseSettings0);
      Element element0 = new Element(tag0, "S5sD;B");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("J0=>m", "J0=>m");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      DocumentType documentType0 = new DocumentType("", "1m", "", "1m");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Document.createShell("C-3Q!*`x6vZy)");
      DataNode dataNode0 = new DataNode("C-3Q!*`x6vZy)");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".~\"3|k", "java.lang.string@0000000089");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parse("0OX_&b9(QRL]5Y[cO", "0OX_&b9(QRL]5Y[cO");
      Element element0 = document0.head();
      element0.toggleClass("0OX_&b9(QRL]5Y[cO");
      document0.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'head.java.lang.String@0000000072': unexpected token at '@0000000072'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parse("TY=Bz(Q njv!%r8-',", "TY=Bz(Q njv!%r8-',");
      Element element0 = document0.body();
      element0.tagName("TY=Bz(Q njv!%r8-',");
      document0.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'r'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parse("TY=Bz(Q njv!%r8-',", "TY=Bz(Q njv!%r8-',");
      CDataNode cDataNode0 = new CDataNode(";v&kDHd/@E/o3#'59fy");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Document.createShell("0OX_&b9(QR*]5Y[cOz");
      Element element0 = document0.head();
      document0.parentNode = (Node) element0;
      element0.siblingIndex = (-1722149673);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Document.createShell("][9P%M@RTKl-jV:diA");
      // Undeclared exception!
      try { 
        document0.child((-1644953643));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{{a", "{{a");
      DocumentType documentType0 = new DocumentType("{{a", "wX[j+Ca;5@vhSloXGt~", "2O+y;g/");
      documentType0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.before((Node) documentType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      Element element0 = document0.head();
      document0.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        element0.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.before("html");
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Document.createShell("_<WDXB");
      CDataNode cDataNode0 = new CDataNode("4z5offx^u%<:Y:\"A");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.before("0OX_&b9(QR*]5Y[cOz");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Document.createShell(".$8qRQ^`7B_l|8?");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.attr("", "");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      Element element0 = document0.head();
      document0.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.appendElement("");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parse("qV", "qV");
      List<Node> list0 = Parser.parseXmlFragment("qV", "qV");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement("qV");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Element element0 = new Element(" ]&{dz");
      // Undeclared exception!
      try { 
        element0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      Element element0 = document0.head();
      document0.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        document0.appendChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("br");
      Document document0 = parser0.parseInput((Reader) stringReader0, "br");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.append("textarea");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Document.createShell("][9P%M@RTKl-jV:diA");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "Pattern syntax error: ");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      try { 
        element0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.after("");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0OX_&b9(QRL]5Y[cO", "0OX_&b9(QRL]5Y[cO");
      Element element0 = new Element("0OX_&b9(QRL]5Y[cO");
      document0.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        document0.after("0OX_&b9(QRL]5Y[cO");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("body");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "textarea");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parse("radio", "radio");
      Element element0 = document0.appendElement("radio");
      element0.html((PipedWriter) null);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Element element0 = new Element("br");
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000048");
      document0.hasClass("QWK");
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Document.createShell("][9P%M@RTKl-jV:diA");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("][9P%M@RTKl-jV:diA");
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = new Document("");
      document0.append("ep[");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "Pattern syntax error: ");
      document0.append("Pattern syntax error: ");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = new Document("html");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parse("ez-^[lBht=", "ez-^[lBht=");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      Element element0 = document0.head();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse("j", "s+");
      Element element0 = document0.appendElement("s+");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Document.createShell("java.lag.string0000000048");
      DataNode dataNode0 = new DataNode("java.lag.string0000000048");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parse("0OX_&b9(QRL]5Y[cO", "0OX_&b9(QRL]5Y[cO");
      document0.parentNode = (Node) document0;
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parse("3 <$BY[Z<UAf((i3.I", "3 <$BY[Z<UAf((i3.I");
      document0.removeAttr("M%R\"phRYD>S-");
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parse("j", "j");
      document0.toggleClass("?=p2ySJHU");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ko", "ko");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parse("GpV1l)uNs0=aG)5;", "GpV1l)uNs0=aG)5;");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = new Document("java.lang.string@0000000048");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parse("0OX_&b9(QRL]5Y[cO", "0OX_&b9(QRL]5Y[cO");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Document.createShell("0OX_&b9(QR*]5Y[cOz");
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("missing semicolon", "missing semicolon");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      document0.is((Evaluator) evaluator_IsRoot0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Tag tag0 = Tag.valueOf("*z!'c{xF}JfFob6P$<");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "*z!'c{xF}JfFob6P$<", attributes0);
      pseudoTextElement0.getElementsByAttributeValueMatching("*z!'c{xF}JfFob6P$<", (Pattern) null);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("j", "org.jsoup.nodes.Element$1");
      document0.select("html");
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parse("j", "org.jsoup.nodes.Element$1");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0OX_&bt(QR*)]5Y[cOz", "0OX_&bt(QR*)]5Y[cOz");
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Document.createShell("G?");
      document0.title("<html>\n <head></head>\n <body></body>\n</html>");
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = new Element("br");
      element0.parentNode = (Node) element1;
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Pattern syntax error: ", "Pattern syntax error: ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("textarea");
      FormElement formElement0 = new FormElement(tag0, "z+=b&mq|7(et~bfip*", attributes0);
      // Undeclared exception!
      try { 
        formElement0.val((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Tag tag0 = Tag.valueOf("0O@_&btYgQR),Y[cOz");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "0O@_&btYgQR),Y[cOz", attributes0);
      Element element0 = pseudoTextElement0.prependElement("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      document0.toggleClass("#root");
      document0.toggleClass("r$;j`xfI51");
      document0.toggleClass("r$;j`xfI51");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      document0.toggleClass("H{T=_u<[V`xwS");
      document0.toggleClass("H{T=_u<[V`xwS");
      document0.hasClass("java.lang.string@0000000047");
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000048");
      document0.toggleClass("java.lang.string@0000000048");
      document0.toggleClass("java.lang.string@0000000048");
      document0.hasClass("java.lang.string@0000000048");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      Element element0 = document0.toggleClass("=wN(\"#dP']&6A|l");
      element0.toggleClass(" > ");
      element0.hasClass("H{T=_u<[V`xwS");
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Document.createShell("0OX_&b9(QR*]5Y[cOz");
      document0.toggleClass("2C!-j\"!zl+");
      document0.toggleClass("0OX_&b9(QR*]5Y[cOz");
      document0.getElementsByClass("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      document0.toggleClass("#root");
      document0.hasClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d", "d");
      document0.toggleClass("d");
      document0.hasClass("org.jsoup.parser.TokeniserState");
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.toggleClass("0d8^bg");
      document0.hasClass("br");
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("hwjflldp", "hwjflldp");
      Comment comment0 = new Comment("head", "java.lang.string@0000000047");
      document0.appendChild(comment0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000089", "java.lang.string@0000000089");
      DataNode dataNode0 = new DataNode("_!m9mxly >Ym:");
      document0.prependChild(dataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`o", "`o");
      DataNode dataNode0 = DataNode.createFromEncoded("-aMOFPqw+\"4", "`o");
      document0.prependChild(dataNode0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.prependText("");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parse("0OX_&b9(QR*]5Y[cOz", "0OX_&b9(QR*]5Y[cOz");
      document0.parentNode = (Node) document0;
      Element.preserveWhitespace(document0.parentNode);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000048", "java.lang.string@0000000048");
      Element element0 = document0.prependText("java.lang.string@0000000048");
      List<Node> list0 = element0.childNodesCopy();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("java.lang.string@0000000048");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("br");
      element0.before("Pattern syntax error: ");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.appendElement("br");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parse("j", "s+");
      Pattern pattern0 = Pattern.compile("s+", 32);
      document0.title("s+");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("n#5t\"Mfv^T", "'g+Q");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("n#5t\"Mfv^T", false);
      document0.appendChild(xmlDeclaration0);
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parse("j", "s+");
      Element element0 = document0.appendElement("s+");
      CDataNode cDataNode0 = new CDataNode("NTX;@7");
      element0.replaceWith(cDataNode0);
      Pattern pattern0 = Pattern.compile("j");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "id");
      document0.append("!]X0+G{>");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse("j", "org.jsoup.nodes.Element$1");
      Element element0 = document0.body();
      document0.prependChild(element0);
      document0.getElementsContainingText("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$2", "br");
      document0.appendElement("br");
      Pattern pattern0 = Pattern.compile(".dw#h/;_9<zfk");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ko", "ko");
      document0.appendElement("ko");
      document0.getElementsContainingText("ko");
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parse(",", "s+");
      DocumentType documentType0 = new DocumentType("ST3nK", "ST3nK", ",");
      document0.prependChild(documentType0);
      Pattern pattern0 = Pattern.compile("s+");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "Pattern syntax error: ");
      document0.getElementById("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Document.createShell("0OX_&b9(QR*)]5Y[cOz");
      document0.parentNode = (Node) document0;
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yc/qHr+*6H", "Pattern syntax error: ");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = new Document("CommentEndBang");
      document0.appendTo(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Document.createShell("][9P%M@RTKl-jV:diA");
      document0.reparentChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parse("j", "s+");
      Element element0 = document0.body();
      Elements elements0 = element0.nextElementSiblings();
      assertTrue(elements0.isEmpty());
      assertEquals("s+", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("J0=>m", "sn$v?_8OQze");
      document0.previousElementSibling();
      assertEquals("sn$v?_8OQze", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yc/qHr+*6H", "Pattern syntax error: ");
      Element element0 = document0.head();
      Element element1 = element0.attr("yc/qHr+*6H", false);
      Element element2 = element1.nextElementSibling();
      assertNotNull(element2);
      
      Element element3 = element2.doClone(element0);
      assertEquals("Pattern syntax error: ", element3.baseUri());
      assertEquals(1, element2.childNodeSize());
      assertNotSame(element3, element2);
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("J0=>m", "sn$v?_8OQze");
      document0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
      assertEquals("sn$v?_8OQze", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parse("ko", "ko");
      document0.siblingElements();
      assertEquals("ko", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yc/qHr+*6H", "Pattern syntax error: ");
      Element element0 = document0.head();
      Elements elements0 = element0.siblingElements();
      assertEquals("Pattern syntax error: ", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ko", "ko");
      Element element0 = document0.head();
      element0.after(",FZ[XPQ $>@)WhU{");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(1)", string0);
      assertEquals("ko", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.toggleClass("Pattern syntax error: ");
      element0.cssSelector();
      assertEquals(1, element0.childNodeSize());
      assertEquals("Pattern syntax error: ", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parse("j", "org.jsoup.nodes.Element$1");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.insertChildren(339, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Element element0 = new Element("br");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        element0.insertChildren((int) (byte) (-90), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parse("0OX_&b9(QRL]5Y[cO", "0OX_&b9(QRL]5Y[cO");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parse("", "D,@seKxOsupBM]^");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(0, nodeArray0);
      assertEquals("D,@seKxOsupBM]^", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#", "#");
      LinkedHashSet<CDataNode> linkedHashSet0 = new LinkedHashSet<CDataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren(78, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Document.createShell("][9P%M@RTKl-jV:diA");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-2702), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Elemet$1", "org.jsoup.nodes.Elemet$1");
      LinkedHashSet<PseudoTextElement> linkedHashSet0 = new LinkedHashSet<PseudoTextElement>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      assertEquals("org.jsoup.nodes.Elemet$1", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      DataNode dataNode0 = new DataNode("VF\",aPlw5`mUe+<S", "2{+");
      nodeArray0[5] = (Node) dataNode0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.dataNodes();
      assertEquals(2, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("d/H3VUWlsNYwY", " Rf1}bt@C");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(" Rf1}bt@C", document0.baseUri());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parse("2^R)Q%+*9~[}n<J1qAU", "2^R)Q%+*9~[}n<J1qAU");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("2^R)Q%+*9~[}n<J1qAU", document0.baseUri());
      assertTrue(list0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = new Document("CommentEndBang");
      Element element0 = document0.html("0jDJnSjF/{@KNaY_j");
      element0.appendTo(document0);
      element0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      assertEquals(1, elements0.size());
      assertEquals("&S{/]%Xgzidc4?k3lJ7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("J0=>m", "sn$v?_8OQze");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-4193));
      assertEquals("sn$v?_8OQze", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parse("0OX_&b9(QRL]5Y[cO", "0OX_&b9(QRL]5Y[cO");
      Element element0 = document0.selectFirst("body");
      assertEquals("0OX_&b9(QRL]5Y[cO", element0.baseUri());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("J0=>m", "sn$v?_8OQze");
      document0.getElementsByTag("2WYY;{7&l~w|nZu");
      assertEquals(1, document0.childNodeSize());
      assertEquals("sn$v?_8OQze", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parse("j", "s+");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("|l9z['i,UBw}<bPl6`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: |l9z['i,UBw}<bPl6`
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parse("ko", "ko");
      Elements elements0 = document0.getAllElements();
      assertEquals(4, elements0.size());
      assertEquals("ko", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(",b", "id");
      // Undeclared exception!
      try { 
        document0.before("s+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parse("&:'u]/N>`y2p&~|^y]", "<UTA#EUAJ#");
      document0.getElementsByAttribute("'{");
      assertEquals("<UTA#EUAJ#", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parse("{kdu+*GXpOP 'EM-WU", "JL1ujVo,+iU|");
      Elements elements0 = document0.getElementsByAttributeValueNot("Gr!##[\"@a", "#root");
      assertEquals(4, elements0.size());
      assertEquals("JL1ujVo,+iU|", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("j", "j");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parse("GtyNcbF<l[Th(N5xy", "GtyNcbF<l[Th(N5xy");
      Element element0 = document0.shallowClone();
      assertEquals("GtyNcbF<l[Th(N5xy", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("8vA4lX\"", parseSettings0);
      Element element0 = new Element(tag0, "S5sD;B");
      element0.doSetBaseUri("br");
      assertEquals("br", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yc/qHr+*6H", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yc/qHr+*6H", "Pattern syntax error: ");
      document0.getElementsByAttributeValueContaining("Pattern syntax error: ", "Pattern syntax error: ");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Pattern syntax error: ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parse("j", "org.jsoup.nodes.Element$1");
      document0.getElementsByAttributeValueMatching("org.jsoup.nodes.Element$1", "ayA9");
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("8vA4lX\"", parseSettings0);
      Element element0 = new Element(tag0, "S5sD;B");
      element0.getElementsByAttributeValueEnding(" ", "S5sD;B");
      assertEquals("S5sD;B", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ko", "ko");
      document0.is("ko");
      assertEquals("ko", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Document.createShell("D&@M3@eUDG@^Cabh\";");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("<}v3UgXLDOTOUc", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parse("j", "org.jsoup.nodes.Element$1");
      Elements elements0 = document0.getElementsMatchingOwnText("j");
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "Pattern syntax error: ");
      Elements elements0 = document0.getElementsByIndexEquals(257);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertEquals("Pattern syntax error: ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parse("{kdu+*GXpOP 'EM-WU", "JL1ujVo,+iU|");
      document0.getElementsByAttributeStarting("R4%1P'Ao>E^5/T");
      assertEquals(1, document0.childNodeSize());
      assertEquals("JL1ujVo,+iU|", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0OX_&b9(QRL]5Y[cO", "0OX_&b9(QRL]5Y[cO");
      // Undeclared exception!
      try { 
        document0.after("0OX_&b9(QRL]5Y[cO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parse("0OX_&b9(QR*]5Y[cOz", "%M,gd7QMs:Z\b?U");
      Pattern pattern0 = Pattern.compile("reversed", 32);
      document0.getElementsMatchingOwnText(pattern0);
      assertEquals("%M,gd7QMs:Z\b?U", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("0OX_&bt(QR*)]5Y[cOz", "0OX_&bt(QR*)]5Y[cOz");
      Element element0 = document0.prepend("");
      assertEquals("0OX_&bt(QR*)]5Y[cOz", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Document.createShell("&S{/]%Xgzidc4?k3lJ7");
      document0.getElementsByAttributeValueStarting("QlO,O;Uf", "body");
      assertEquals(1, document0.childNodeSize());
      assertEquals("&S{/]%Xgzidc4?k3lJ7", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parse("ko", "ko");
      document0.getElementsByAttributeValue("ko", "video");
      assertEquals("ko", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parse("radio", "radio");
      String string0 = document0.wholeText();
      assertEquals("radio", document0.baseUri());
      assertEquals("radio", string0);
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Document.createShell("0OX_&b9(QR*]5Y[cOz");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Element element0 = new Element(" ]&{dz");
      Elements elements0 = element0.getElementsByIndexLessThan(97692013);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "IMrP(PrXHEIPI]");
      document0.dataset();
      assertEquals("IMrP(PrXHEIPI]", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("j", "j");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Document document0 = new Document("'qmbu(X?[,z'0Q");
      // Undeclared exception!
      try { 
        document0.child(0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "Pattern syntax error: ");
      document0.previousElementSiblings();
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Document document0 = Parser.parse("j", "j");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Document document0 = Parser.parse("Pattern syntax error: ", "IMrP(PrXHEIPI]");
      // Undeclared exception!
      try { 
        document0.wrap("8>:]Y3M");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Document document0 = Document.createShell("HRH=X}IXd(lac]9N");
      document0.id();
      assertEquals("HRH=X}IXd(lac]9N", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }
}
