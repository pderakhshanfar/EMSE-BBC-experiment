/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:50:41 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.FilterOutputStream;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Document.createShell("DX<Il}ri%");
      document0.toggleClass("DX<Il}ri%");
      document0.hasClass("h");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parse("b", "b");
      Document document1 = new Document("b");
      document0.setParentNode(document1);
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Element element0 = new Element("|5ll.lqC3*%oCwCy");
      Document document0 = new Document("_lju");
      Document document1 = document0.normalise();
      element0.appendTo(document1);
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren((-2), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Document.createShell("DX<Il}ri%");
      Pattern pattern0 = Pattern.compile("DX<Il}ri%", (-1010136969));
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      document0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Element element0 = new Element("|5ll.lqC3*%oCwCy");
      element0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Element element0 = new Element("|5ll.lqC3]*%oCwCy");
      Document document0 = new Document("|5ll.lqC3]*%oCwCy");
      document0.appendTo(element0);
      document0.wrap("LOAxJ<?rc/dpY29j");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("u!|f6w|.X>j", "u!|f6w|.X>j");
      Element element0 = document0.prependElement("u!|f6w|.X>j");
      element0.wrap("<u!|f6w|.x>j></u!|f6w|.x>j>\n<html>\n <head></head>\n <body>\n  u!|f6w|.X&gt;j\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Document.createShell("MWex_cGTIm}");
      document0.title("ae6p");
      Element element0 = document0.head();
      element0.wrap("6,)A{8");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell("vF");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "`gBWizQ@zRM'v");
      Element element0 = document0.body();
      element0.val("iH`'Yy]K-");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("~", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "~", attributes0);
      Element element0 = pseudoTextElement0.val("~");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/r", "/r");
      Element element0 = document0.body();
      element0.toggleClass("b");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", "ScriptDataEscapedLessthanSign");
      Element element0 = document0.body();
      element0.text("ScriptDataEscapedLessthanSign");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell("vF");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("h7", "h7");
      Element element0 = document0.body();
      element0.tagName("h7");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parse("u!|f6w|.X>j", "u!|f6w|.X>j");
      Element element0 = document0.prependElement("u!|f6w|.X>j");
      element0.tagName("Cs\";b!V4WS fMk Ni");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Ujf<F?L9ci-#\"[");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "Ujf<F?L9ci-#\"[", attributes0);
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Document.createShell("uS/8BV9N]4oz59-;");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.parser.ParseError");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "`", attributes0);
      pseudoTextElement0.tag();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("DX<Il}ri%");
      document0.selectFirst("8XhPu");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parse("\"svDyS,!Oi?:@O%\"1 ", "textarea");
      document0.prependElement("ScriptDataEscapedEndTagOpen");
      document0.selectFirst("ScriptDataEscapedEndTagOpen");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = new Document("head");
      document0.select("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("progress", "progress");
      document0.prependElement("progress");
      document0.select("progress");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zys5zWXpd`", "<![CDATA[");
      Element element0 = document0.body();
      element0.removeClass("<![CDATA[");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parse("$Dg.AG2td Xlr=@H", "]P*mlOuG`QoaIU)J5");
      document0.prependChild(document0);
      document0.removeClass("<");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = new Document("LP>b/nR/k0@0{L'G^");
      document0.removeClass("LP>b/nR/k0@0{L'G^");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b", "b");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      Element element0 = document0.head();
      nodeArray0[7] = (Node) element0;
      nodeArray0[8] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.prependElement("br");
      document0.prependElement("c(m6E-73{z~_8g");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Element element0 = new Element("|5ll.lqC3]*%oCwCy");
      Document document0 = new Document("_lju");
      Document document1 = document0.normalise();
      Element element1 = element0.appendTo(document1);
      element1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("r", "r");
      Element element0 = document0.body();
      element0.prependText("78Xs?,xBAL`");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.prependElement("html");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b", "b");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/r", "/r");
      Element element0 = document0.body();
      element0.prepend("/r");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Document.createShell("DuIR");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/r", "/r");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("head", "head");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.prependElement("br");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Document.createShell("gILNtE(<D5");
      document0.appendChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("org.jsoup.parser.HtmlTreeBuilderState$Constants", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ":y&^LF", attributes0);
      formElement0.text("x_8.54JN:gFn?o'-i|a");
      formElement0.ownText();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Document.createShell("He=772Vk?N(qX@/.2V2");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.appendTo(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Document.createShell("/r");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "`gBWizQ@zRM'v");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      document0.is((Evaluator) evaluator_AllElements0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("java.lang.string@0000000057", "W");
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText("html");
      document0.is((Evaluator) evaluator_ContainsOwnText0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Element element0 = new Element("*d-U?LTc0mh");
      element0.is("*");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.tagName("html");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) element0;
      document0.insertChildren((-2), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = new Document("_lju");
      document0.normalise();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren((-2), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = new Document("head");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = new Document("LP>b/nR/k0@0{L'G^");
      Pattern pattern0 = Pattern.compile("LP>b/nR/k0@0{L'G^", 124);
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      document0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f:", "");
      document0.setSiblingIndex((-1057));
      document0.html("f:");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parse("ScriptDataEscapedDashDash", "ScriptDataEscapedDashDash");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(1);
      document0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = new Document("LP>b/nR/k0@0{L'G^");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = new Document("");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("th", (-1));
      Document document0 = Parser.parseBodyFragment("th", "br");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bW", "bW");
      document0.getElementsMatchingText("          ");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parse("u!|f6w|.X>j", "u!|f6w|.X>j");
      Pattern pattern0 = Pattern.compile("u!|f6w|.X>j");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Document.createShell("DX<Il}ri%");
      document0.getElementsMatchingOwnText("");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = new Document("head");
      document0.getElementsByTag("Us");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      formElement0.getElementsByTag("br");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document("_lju");
      Document document1 = document0.normalise();
      document1.getElementsByIndexLessThan(2830);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Document.createShell("DuIR");
      document0.getElementsByIndexGreaterThan((-552));
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Dz0U");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("Dz0U", "org.jsoup.nodes.Element$NodeList");
      FormElement formElement0 = new FormElement(tag0, "Dz0U", attributes1);
      formElement0.getElementsByAttributeValueStarting("Dz0U", "org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = new Document("_lju");
      document0.getElementsByAttributeValueNot("_lju", "       ");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("(pZ/4]pBC+Aqxh<U", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("(pZ/4]pBC+Aqxh<U", "(pZ/4]pBC+Aqxh<U");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "(pZ/4]pBC+Aqxh<U", attributes1);
      formElement0.getElementsByAttributeValueEnding("(pZ/4]pBC+Aqxh<U", "(pZ/4]pBC+Aqxh<U");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Tag tag0 = Tag.valueOf("java.lang.string@0000000058 :contains smi^");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("java.lang.string@0000000058 :contains smi^", "java.lang.string@0000000055 o$o<6mnx");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "java.lang.string@0000000055 o$o<6mnx", attributes1);
      pseudoTextElement0.getElementsByAttributeStarting("java.lang.string@0000000058 :contains smi^");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parse("|5ll.lqC3]*%oCwCy", "|5ll.lqC3]*%oCwCy");
      Element element0 = document0.appendTo(document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("h7", "h7");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      Comment comment0 = new Comment("br");
      element0.doClone(comment0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Document.createShell("V/v");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Document.createShell("DX<Il}ri%");
      Document document1 = new Document("DX<Il}ri%");
      document1.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "java.lang.string@0000000058 :contains smi^");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = new Document("'w&P:w>\"<Jau");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.appendTo(document0);
      Locale locale0 = new Locale("doctypesystemidentifier_singlequoted", "br", "Character");
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Document.createShell("/r");
      Element element0 = document0.head();
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("He=77@V?N(qX@/.2V2", "He=77@V?N(qX@/.2V2");
      document0.toggleClass(":has(el) subselect must not be empty");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Document.createShell("DX<Il}ri%");
      Element element0 = document0.toggleClass("DX<Il}ri%");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = new Document("LP>b/nR/k0@0{L'G^");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = new Document("\"F;|gg5aJ6Ddg\"");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<8)}", "Ty`$LB");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parse("s+", "9");
      document0.reparentChild(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("He=77@V?N(qX@/.2V2", "He=77@V?N(qX@/.2V2");
      Element element0 = document0.appendChild(document0);
      document0.before((Node) element0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.prependElement("br");
      document0.empty();
      Element element1 = element0.attr("B\":X9dZARwlR", "B\":X9dZARwlR");
      element1.before("9!jlHh`Guh',vn");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.prependElement("br");
      element0.before("9!jlHh`Guh',vn");
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/r", "/r");
      Element element0 = document0.body();
      element0.before("");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parse("b", "b");
      Element element0 = document0.appendTo(document0);
      element0.attr("b", false);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~;?^7qYHcMBj*>hpb", "~;?^7qYHcMBj*>hpb");
      document0.setSiblingIndex((-1110026255));
      document0.attr("~;?^7qYHcMBj*>hpb", false);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.head();
      element0.attr("br", false);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "u!|f6w|.x>j");
      Element element0 = document0.body();
      element0.attr("u!|f6w|.x>j", "v-n5.C4>pr<9-");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "`gBWizQ@zRM'v");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      element1.appendText("nBo`8%]C@QIz})=8");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parse("$Dg.AG2td Xlr=@H", "]P*mlOuG`QoaIU)J5");
      document0.setSiblingIndex((-885));
      document0.appendText("");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      Element element0 = document0.head();
      element0.appendText("nBo`8%]C@QIz})=8");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = new Document("\"F;|gg5aJ6Ddg\"");
      document0.appendElement("+");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "");
      document0.appendElement("html");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.head();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = new Document("");
      Comment comment0 = new Comment("S)?G}vU(i=[");
      document0.appendChild(comment0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "textarea");
      Element element0 = document0.body();
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000088 reqnan:sy-ntg", "0\"|}N");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Document.createShell("uS/8BV9N]4oz59-;");
      Element element0 = document0.body();
      element0.after("uS/8BV9N]4oz59-;");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Element element0 = new Element("|5ll.lqC3]*%oCwCy");
      Document document0 = new Document("|5ll.lqC3]*%oCwCy");
      Document document1 = document0.normalise();
      document1.appendTo(element0);
      document0.after("JvTjJ_BrebL_55I3");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("@l`_&i+y1rRCBoSzZk^", "html");
      document0.appendTo(document0);
      document0.addClass("Y5SG");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      element1.addClass("br");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Element element0 = new Element("|5ll.lqC3]*%oCwCy");
      Document document0 = new Document("|5ll.lqC3]*%oCwCy");
      document0.appendTo(element0);
      Element element1 = document0.after((Node) element0);
      // Undeclared exception!
      element1.val("");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      // Undeclared exception!
      try { 
        document0.val("br");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element");
      CDataNode cDataNode0 = new CDataNode("je?M");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "je?M", attributes1);
      String[] stringArray0 = new String[1];
      attributes1.vals = stringArray0;
      // Undeclared exception!
      try { 
        pseudoTextElement0.val("textarea");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Document.createShell("br");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = new Document("'w&P:w>\"<Jau");
      // Undeclared exception!
      try { 
        document0.text("'w&P:w>\"<Jau");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Document.createShell("DuIR");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parse("bW", "bW");
      Element element0 = document0.prependElement("bW");
      List<Node> list0 = Parser.parseXmlFragment("bW", "{\"");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parse("open", "lBX%XAB1bO=HAiv^|N");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.tagName(">");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("xwPGCw]Enk\"Lbi`u(C[", "#root");
      // Undeclared exception!
      try { 
        document0.tagName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.prependElement("br");
      document0.empty();
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = new Document("LP>b/nR/k0@0{L'G^");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Document.createShell("DuIR");
      // Undeclared exception!
      try { 
        document0.select("DuIR");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'DuIR': unexpected token at 'uIR'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = new Document("|5ll.lqC3]*%oCwCy");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Document.createShell("br");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", "00Edzv8Y<J&Zt0tsAc.");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.prependElement("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("DuIR");
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parse("sW7*cn*+PFJ$", "sW7*cn*+PFJ$");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3s>", "3s>");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.prepend("9F<>g7@m!Tv8}f$>Y");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("o}YV%)@'bYpv", "o}YV%)@'bYpv");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Document.createShell("bW");
      Comment comment0 = new Comment("bW");
      Element element0 = document0.doClone(comment0);
      // Undeclared exception!
      try { 
        element0.prepend("java.lang.string@0000000082 :has(el) subselect must not br empty");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b", "b");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("Must be true", true);
      document0.parentNode = (Node) xmlDeclaration0;
      // Undeclared exception!
      try { 
        document0.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse("ScriptDataEnTagOpen", "ScriptDataEnTagOpen");
      MockPrintStream mockPrintStream0 = new MockPrintStream("ScriptDataEnTagOpen");
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintStream0, 3574, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Document.createShell("He=772Vk?N(qX@/.2V2");
      MockPrintStream mockPrintStream0 = new MockPrintStream("WM&*");
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockPrintStream0, 1105);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(bufferedOutputStream0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintWriter0, (-2104), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("x9M{zH)E5G&g&-<", "u!|f6w|.x>j");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "u!|f6w|.x>j");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 62, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      CharBuffer charBuffer0 = CharBuffer.allocate(72);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 72, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parse("Ab", "Ab");
      MockPrintStream mockPrintStream0 = new MockPrintStream("7sA/kcVL6G154{l");
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintStream0, (-1421), (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parse("u\"b9e.tOXU:Mto", "u\"b9e.tOXU:Mto");
      MockPrintStream mockPrintStream0 = new MockPrintStream("#root");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintStream0, (-430), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "u!|f6w|.x>j");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|>", "");
      // Undeclared exception!
      try { 
        document0.is("|>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '|>': unexpected token at '|>'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse("b", "b");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.is("CommentEndDash");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "`gBWizQ@zRM'v");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">W=zbNx;D", ">W=zbNx;D");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse("#1A!85w[O{&$LyHA>", "#1A!85w[O{&$LyHA>");
      CharBuffer charBuffer0 = CharBuffer.allocate(62);
      // Undeclared exception!
      try { 
        document0.html((Appendable) charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Element element0 = new Element("|5ll.lqC3]*%oCwCy");
      Document document0 = new Document("|5ll.lqC3]*%oCwCy");
      document0.appendTo(element0);
      document0.after((Node) element0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#", "#");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = new Document("h}FTU1QeG");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("\"{sHV H(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: \"{sHV H(
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("java.lang.string@0000000057", "W");
      Element element0 = document0.addClass("value");
      TextNode textNode0 = new TextNode(".");
      element0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("value");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Document.createShell("br");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "hOVxU6OvjsXK");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Document.createShell("Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("oy`)1!7(:!7PD!^?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: oy`)1!7(:!7PD!^?
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parse("bW", "bW");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("bW");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parse("0[FG>R,l)KLDGVz`.8[", "H@IlHO$+$");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByTag("9;:\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("<", "Data");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("Jsr7OeB5v7", "Jsr7OeB5v7");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting((String) null, "Jsr7OeB5v7");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("Z|jAE#J:Vs", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("textarea", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("", "PSt*q)Xq;^");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: PSt*q)Xq;^
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("50H'}Qd=5:U{409.+O", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = new Document("br");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", " %/5TC<lOPQn2k");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Document.createShell("DuIR");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("</", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parse("u\"b9e.tOXU:Mto", "u\"b9e.tOXU:Mto");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("$Dg.AG2td Xlr=@H", "]P*mlOuG`QoaIU)J5");
      Element element0 = document0.createElement("org.jsoup.select.StructuralEvaluator$Root");
      Element element1 = document0.prependChild(element0);
      element0.setSiblingIndex((-885));
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeStarting(":R/ 3/87");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Tag tag0 = Tag.valueOf("F~RVu");
      CDataNode cDataNode0 = new CDataNode("s");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "s", attributes0);
      Element element1 = element0.appendText("NZf<!?^hOK{vEp z");
      List<Node> list0 = element0.childNodesCopy();
      element1.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.getElementsByAttribute("#root");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parse("2r+@qaD?MY+`Yn", "(aO");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Document.createShell("|5ll.lqC3]*%oCwCy");
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "`gBWizQ@zRM'v");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Tag tag0 = Tag.valueOf("b");
      Element element0 = new Element(tag0, "!X-@g-i(K\"\t", (Attributes) null);
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        element0.dataNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Element element0 = new Element("|5ll.lqC3]*%oCwCy");
      Document document0 = new Document("|5ll.lqC3]*%oCwCy");
      Element element1 = document0.appendTo(element0);
      document0.toggleClass("E}bu.\u0002IQj");
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '#root.java.lang.String@0000000032': unexpected token at '@0000000032'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      CDataNode cDataNode0 = new CDataNode("textarea");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Document.createShell("DX<Il}ri%");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = new Document("|5ll.lqC3]*%oCwCy");
      // Undeclared exception!
      try { 
        document0.child(1411);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1411, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parse("s+", "9");
      Element element0 = document0.appendElement("bW");
      element0.reparentChild(document0);
      // Undeclared exception!
      try { 
        element0.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Document.createShell("_Qs4ll<mh*W");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.before("java.lang.string@0000000078 o$o<6mnx");
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bW", "bW");
      Element element0 = document0.prependElement("bW");
      List<Node> list0 = element0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.before("bW");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Element element0 = new Element("|5ll.lqC3]*%oCwCy");
      Document document0 = new Document("|5ll.lqC3]*%oCwCy");
      document0.appendTo(element0);
      Document document1 = document0.normalise();
      document1.siblingIndex = 29;
      // Undeclared exception!
      try { 
        document0.before("Insert position out of bounds.");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 29, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("dfn", "textarea");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("DX<Il}ri%", "Eu#");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.attr("_lju", "DX<Il}ri%");
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("vF");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = new Document("_lju");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = new Document("|5l.lqC3]*%oCwy");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.appendElement((String) null);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Element element0 = new Element("|5ll.lqC3]*%oCwCy");
      // Undeclared exception!
      try { 
        element0.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.prependElement("br");
      Element element1 = document0.empty();
      // Undeclared exception!
      try { 
        element1.appendChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Document.createShell("DX<Il}ri%");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Document.createShell("He=772V?N(qX@/.2V2");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.append("&quot;");
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Document.createShell("DX<Il}ri%");
      document0.appendTo(document0);
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Document.createShell("He=77@V?N(qX@/.2V2");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.after(":has(el) subselect must not be empty");
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("$GK8&0c1]TE~:.8");
      Document document0 = parser0.parseInput((Reader) stringReader0, "$GK8&0c1]TE~:.8");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "device", (Attributes) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = new Document("br");
      document0.html((MockFileWriter) null);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = new Document("\"F;|gg5aJ6Ddg\"");
      document0.hasClass("wIG.w;Qi$U");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Document.createShell("/r");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "`gBWizQ@zRM'v");
      Element element0 = document0.body();
      element0.data();
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b", "b");
      Element element0 = document0.body();
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "`gBWizQ@zRM'v");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Document.createShell("uS/8BV9N]4oz59-;");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Document.createShell("}jq~BxteVTX");
      Element element0 = document0.body();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Document.createShell("DX<Il}ri%");
      Element element0 = document0.prependElement("DX<Il}ri%");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Document.createShell("DX<Il}ri%");
      document0.appendTo(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/r", "/r");
      Element element0 = document0.body();
      element0.html("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = new Document("head");
      Element element0 = document0.attr("head", "head");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Document.createShell("DX<Il}ri%");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/r", "/r");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("grCit@DYf4Gr", parseSettings0);
      Element element0 = new Element(tag0, "grCit@DYf4Gr");
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "#");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("]Ee^RJk", "0U_AlsM<");
      Pattern pattern0 = Pattern.compile("#root", (-1110026255));
      document0.getElementsByAttributeValueMatching("8^_NcM3+ Xg6q&M3b", pattern0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("X>", "X>");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(byteArrayOutputStream0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(filterOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(mockPrintStream0, 126, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.prependElement("br");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Document.createShell("MWex_cGTIm}");
      document0.title("ae6p");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parse("/r", "/r");
      // Undeclared exception!
      try { 
        document0.html((BufferedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = new Document("br");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(charArrayWriter0, 32, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      CDataNode cDataNode0 = new CDataNode("b");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "map", attributes0);
      pseudoTextElement0.val("b");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "u!|f6w|.x>j");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Document.createShell("DX<Il}ri%");
      Element element0 = document0.toggleClass("DX<Il}ri%");
      document0.toggleClass("DX<Il}ri%");
      element0.toggleClass("DX<Il}ri%");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Document.createShell("gILNtE(<D5");
      document0.toggleClass("mH");
      document0.addClass(" />");
      document0.hasClass("/r");
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Document.createShell("DX<Il}ri%");
      document0.toggleClass("DX<Il}ri%");
      Element element0 = document0.toggleClass("DX<Il}ri%");
      element0.hasClass("scriptdataescapedendtagopen");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.toggleClass(":has(el) subselect must not be empty");
      document0.toggleClass("br");
      Element element0 = document0.addClass(":has(el) subselect must not be empty");
      element0.hasClass("br");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.toggleClass("br");
      document0.toggleClass(" ");
      document0.hasClass("b/|*!?|JQpjtuksn");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Document.createShell("DX<Il}ri%");
      Element element0 = document0.toggleClass("DX<Il}ri%");
      element0.toggleClass("Pattern syntax error: ");
      element0.hasClass("scriptdataescapedendtagopen");
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Document.createShell("|5ll.lqC3]*%oCwCy");
      Element element0 = document0.toggleClass("|5ll.lqC3]*%oCwCy");
      element0.hasClass("DoctypeSystemIdentifier_singleQuoted");
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Document.createShell("DX<Il}ri%");
      Element element0 = document0.toggleClass("DX<Il}ri%");
      element0.hasClass("scriptdataescapedendtagopen");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parse("b", "b");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "");
      document0.text("");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("b", "b");
      Document document1 = Parser.parse("b", "b");
      document1.appendTo(document0);
      document0.parentNode = (Node) document1;
      document0.text();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = new Document("br");
      document0.prependElement("br");
      document0.prependElement("br");
      Pattern pattern0 = Pattern.compile("br");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("RQ>?M,|hq`Y", "RQ>?M,|hq`Y");
      CDataNode cDataNode0 = new CDataNode("ol");
      document0.prependChild(cDataNode0);
      document0.getElementsMatchingOwnText("=D");
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bW", "bW");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("fallback", false);
      document0.prependChild(xmlDeclaration0);
      document0.getElementsContainingOwnText("bW");
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Attributes$Dataset$EntrySet", "org.jsoup.nodes.Attributes$Dataset$EntrySet");
      Element element0 = document0.append("org.jsoup.nodes.Attributes$Dataset$EntrySet");
      Pattern pattern0 = Pattern.compile(" > ");
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      Element element0 = document0.append("Pattern syntax error: ");
      Pattern pattern0 = Pattern.compile(" > ");
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parse("u\"b9e.tOXU:Mto", "u\"b9e.tOXU:Mto");
      Comment comment0 = new Comment("u\"b9e.tOXU:Mto", "u\"b9e.tOXU:Mto");
      Element element0 = document0.prependChild(comment0);
      element0.getElementsContainingText("u\"b9e.tOXU:Mto");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.getElementById("br");
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Element element0 = new Element("|5ll.lqC3]*%oCwCy");
      Document document0 = new Document("|5ll.lqC3]*%oCwCy");
      document0.appendTo(element0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/r", "/r");
      Element element0 = document0.body();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.prependElement("br");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Document.createShell("He=772Vk?N(qX@/.2V2");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Document.createShell("DX<Il}ri%");
      Element element0 = document0.head();
      element0.before((Node) document0);
      document0.nextElementSiblings();
      assertTrue(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Element element0 = new Element("|5ll.lqC3]*%oCwCy");
      Element element1 = element0.nextElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      formElement0.siblingElements();
      assertEquals("br", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.prependElement("br");
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals("br", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/r", "/r");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("/r", element0.baseUri());
      assertEquals("html > body", string0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Document.createShell("He=772Vk?N(qX@/.2V2");
      document0.toggleClass(":has(el) subselect must not be empty");
      document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("He=772Vk?N(qX@/.2V2", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = new Document("\"F;|gg5aJ6Ddg\"");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        document0.insertChildren((-740), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Document.createShell("");
      Node[] nodeArray0 = new Node[4];
      // Undeclared exception!
      try { 
        document0.insertChildren(1158, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("Children collection to be inserted must not be null.", 124);
      Document document0 = Document.createShell("br");
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      Element element0 = document0.insertChildren((-1), (Collection<? extends Node>) elements0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("br", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = new Document("LP>b/nR/k0@0{L'G^");
      Elements elements0 = document0.getElementsByAttributeValue("5#SI-:`VIhg5eT~ij", "+");
      // Undeclared exception!
      try { 
        document0.insertChildren((-1625949436), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = new Document("\"F;|gg5aJ6Ddg\"");
      Elements elements0 = document0.getElementsByAttributeValue("+", "<+></+>");
      // Undeclared exception!
      try { 
        document0.insertChildren(1684, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("b", "b");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("b", document0.baseUri());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/r", "/r");
      Element element0 = document0.body();
      List<TextNode> list0 = element0.textNodes();
      assertEquals("/r", element0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Document.createShell("V/v");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("V/v", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.body();
      document0.appendTo(element0);
      assertEquals(2, element0.childNodeSize());
      
      document0.lastElementSibling();
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = new Document("LP>b/nR/k0@0{L'G^");
      Elements elements0 = document0.getElementsByIndexGreaterThan(21);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "#");
      // Undeclared exception!
      try { 
        document0.selectFirst("#");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = new Document("|5ll.lqC3]*%oCwCy");
      document0.getAllElements();
      assertEquals("|5ll.lqC3]*%oCwCy", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/r", "/r");
      // Undeclared exception!
      try { 
        document0.before("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parse("u!|f6w|.X>j", "u!|f6w|.X>j");
      document0.getElementsByAttribute("#root");
      assertEquals("u!|f6w|.X>j", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Document.createShell("He=772Vk?N(qX@/.2V2");
      document0.getElementsByAttributeValueNot("He=772Vk?N(qX@/.2V2", ":has(el) subselect must not be empty");
      assertEquals(1, document0.childNodeSize());
      assertEquals("He=772Vk?N(qX@/.2V2", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = new Document("\"F;|9g5$J6Ddg\"");
      Element element0 = document0.shallowClone();
      assertEquals("\"F;|9g5$J6Ddg\"", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.doSetBaseUri("V'GU7/6e 3N{T");
      assertEquals("V'GU7/6e 3N{T", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000088 reqnan:sy-ntg", "0\"|}N");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parse("u!|f6w|.X>j", "u!|f6w|.X>j");
      assertEquals(1, document0.childNodeSize());
      
      document0.title("u!|f6w|.X>j");
      Elements elements0 = document0.getElementsMatchingText("u!|f6w|.X>j");
      assertEquals("u!|f6w|.X>j", document0.baseUri());
      assertEquals(5, elements0.size());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", "ScriptDataEscapedLessthanSign");
      document0.getElementsByAttributeValueContaining("\f)PUmQP<WxO=EalqF", "OjZanqCWn");
      assertEquals("ScriptDataEscapedLessthanSign", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = new Document("LP>b/nR/k0@0{L'G^");
      Elements elements0 = document0.getElementsContainingText("LP>b/nR/k0@0{L'G^");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parse("b", "b");
      Elements elements0 = document0.getElementsByClass("m:e/,.wb?");
      assertEquals("b", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = new Document("\"F;|gg5aJ6Ddg\"");
      document0.getElementsByAttributeValueEnding("\"F;|gg5aJ6Ddg\"", "head");
      assertEquals("\"F;|gg5aJ6Ddg\"", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parse("b", "b");
      document0.is("CommentEndDash");
      assertEquals(1, document0.childNodeSize());
      assertEquals("b", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.getElementsByAttributeValueMatching("JF7@%6'.Fc3:GY$aV", "br");
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/r", "/r");
      Elements elements0 = document0.getElementsByIndexEquals(13);
      assertEquals(1, document0.childNodeSize());
      assertEquals("/r", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Document.createShell("He=772V?N(qX@/.2V2");
      document0.getElementsByAttributeStarting("Qy*`J+o|k'oHm");
      assertEquals("He=772V?N(qX@/.2V2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("u!|f6w|.X>j", "u!|f6w|.X>j");
      Element element0 = document0.prependElement("Tag name must not be empty.");
      Element element1 = element0.firstElementSibling();
      assertEquals(2, document0.childNodeSize());
      assertSame(element0, element1);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("grCit@DYf4Gr", parseSettings0);
      Element element0 = new Element(tag0, "grCit@DYf4Gr");
      element0.getElementsByIndexLessThan((-1725));
      assertEquals("grCit@DYf4Gr", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      // Undeclared exception!
      try { 
        document0.after("textarea");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Document.createShell("bW");
      document0.prepend("java.lang.string@0000000082 :has(el) subselect must not br empty");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parse("b", "b");
      // Undeclared exception!
      try { 
        document0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Dz0U");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Dz0U", attributes0);
      formElement0.getElementsByAttributeValueStarting("Dz0U", "org.jsoup.nodes.Element$NodeList");
      assertEquals("Dz0U", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "");
      String string0 = document0.wholeText();
      assertEquals("br", string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Document.createShell("DX<Il}ri%");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Element element0 = new Element(" > ");
      String string0 = element0.baseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/r", "/r");
      Elements elements0 = document0.getElementsContainingOwnText("ins");
      assertEquals(1, document0.childNodeSize());
      assertEquals("/r", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parse("F?Zm<Jn\"]3N", "F?Zm<Jn\"]3N");
      document0.dataset();
      assertEquals("F?Zm<Jn\"]3N", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("$GK8&0W1]TE~b.88", "tz{]l|{XgkzZk=*");
      assertEquals(1, document0.childNodeSize());
      
      document0.html("");
      assertEquals("tz{]l|{XgkzZk=*", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("r", "r");
      document0.prependText("78Xs?,xBAL`");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.child((-1533));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/r", "/r");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("/r", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Document.createShell("MWex_cGTIm}");
      // Undeclared exception!
      try { 
        document0.wrap("6,)A{8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }
}
