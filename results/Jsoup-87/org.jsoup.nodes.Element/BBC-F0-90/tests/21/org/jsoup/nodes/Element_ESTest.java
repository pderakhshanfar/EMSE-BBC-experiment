/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:40:57 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("lMQmR+oT&MK4-v|", "lMQmR+oT&MK4-v|");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("lMQmR+oT&MK4-v|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("lMQmR+oT&MK4-v|", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("lMQmR+oT&MK4-v|"));
      assertNotNull(set0);
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      
      Document document1 = (Document)document0.classNames(set0);
      assertFalse(set0.contains("lMQmR+oT&MK4-v|"));
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("lMQmR+oT&MK4-v|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("lMQmR+oT&MK4-v|", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals("lMQmR+oT&MK4-v|", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("lMQmR+oT&MK4-v|", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document1.hasClass("artle");
      assertFalse(set0.contains("lMQmR+oT&MK4-v|"));
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("lMQmR+oT&MK4-v|", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("lMQmR+oT&MK4-v|", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("US-ASCII", charset0.toString());
      assertTrue(charset0.isRegistered());
      assertTrue(charset0.canEncode());
      assertEquals("US-ASCII", charset0.displayName());
      assertEquals("US-ASCII", charset0.name());
      assertEquals(14, set0.size());
      assertFalse(set0.isEmpty());
      assertEquals("lMQmR+oT&MK4-v|", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("lMQmR+oT&MK4-v|", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("type");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.isBlock());
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("%d>nPY`", "=;=E7wR");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parse("pe&</F=IF", "");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.getElementsByAttributeValue("*KJ", "br");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = new Document("o&4");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("o&4", document0.baseUri());
      assertEquals("o&4", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("o&4", document0.baseUri());
      assertEquals("o&4", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("o&4", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("o&4", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.empty();
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("o&4", document0.baseUri());
      assertEquals("o&4", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("o&4", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("o&4", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("o&4", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("o&4", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      document1.parentNode = (Node) document0;
      assertEquals("o&4", document0.baseUri());
      assertEquals("o&4", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("o&4", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertEquals("o&4", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.parentNode.hasParent());
      assertEquals(0, document1.parentNode.siblingIndex());
      
      Elements elements0 = document0.nextElementSiblings();
      assertNotNull(elements0);
      assertEquals("o&4", document0.baseUri());
      assertEquals("o&4", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertSame(document0, document1);
      assertSame(document0, document2);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parse("lMQmR+oT&MK4|", "lMQmR+oT&MK4|");
      assertNotNull(document0);
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertEquals("lMQmR+oT&MK4|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      document0.nodelistChanged();
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertEquals("lMQmR+oT&MK4|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Tag tag0 = Tag.valueOf("h");
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertEquals("h", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("h", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "h", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isKnownTag());
      assertEquals("h", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("h", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("h", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("h", formElement0.baseUri());
      assertEquals("h", formElement0.nodeName());
      
      List<Node> list0 = formElement0.ensureChildNodes();
      assertNotNull(list0);
      assertFalse(tag0.isKnownTag());
      assertEquals("h", tag0.toString());
      assertFalse(tag0.isData());
      assertEquals("h", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertEquals("h", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("h", formElement0.baseUri());
      assertEquals("h", formElement0.nodeName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("String must not be empty", document0.location());
      assertEquals("String must not be empty", document0.baseUri());
      
      Element element0 = document0.appendElement("cd");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("String must not be empty", document0.location());
      assertEquals("String must not be empty", document0.baseUri());
      assertEquals("String must not be empty", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("cd", element0.nodeName());
      assertEquals("cd", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.wrap("basefont");
      assertNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("String must not be empty", document0.location());
      assertEquals("String must not be empty", document0.baseUri());
      assertEquals("String must not be empty", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("cd", element0.nodeName());
      assertEquals("cd", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Document.createShell("br");
      assertNotNull(document0);
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.wrap("br");
      assertNotNull(element1);
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("br", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parse("idj?!ll!#", "idj?!ll!#");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("idj?!ll!#", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("idj?!ll!#", document0.location());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("idj?!ll!#", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("idj?!ll!#", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("idj?!ll!#", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      
      Element element1 = element0.wrap("html");
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("idj?!ll!#", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("idj?!ll!#", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("idj?!ll!#", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("idj?!ll!#", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell("html");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("html", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("html", document0.baseUri());
      
      String string0 = document0.wholeText();
      assertNotNull(string0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("html", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("html", document0.baseUri());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "'D[i$7GPNR|v");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.val("'D[i$7GPNR|v");
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertEquals("'D[i$7GPNR|v", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parse("lMQmR+oT&MK4|", "lMQmR+oT&MK4|");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("lMQmR+oT&MK4|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.val("lMQmR+oT&MK4|");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("lMQmR+oT&MK4|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("lMQmR+oT&MK4|", document1.baseUri());
      assertEquals("lMQmR+oT&MK4|", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.val();
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("lMQmR+oT&MK4|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertEquals("lMQmR+oT&MK4|", string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`?G8B$", "`?G8B$");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("`?G8B$", document0.location());
      assertEquals("`?G8B$", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      document0.setSiblingIndex((-2218));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("`?G8B$", document0.location());
      assertEquals((-2218), document0.siblingIndex());
      assertEquals("`?G8B$", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.toggleClass("`?G8B$");
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("`?G8B$", document0.location());
      assertEquals((-2218), document0.siblingIndex());
      assertEquals("`?G8B$", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-2218), document1.siblingIndex());
      assertEquals("`?G8B$", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("`?G8B$", document1.location());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parse("lMQmR+oT&MK4-v|", "lMQmR+oT&MK4-v|");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("lMQmR+oT&MK4-v|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("lMQmR+oT&MK4-v|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("lMQmR+oT&MK4-v|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("lMQmR+oT&MK4-v|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("lMQmR+oT&MK4-v|", element0.baseUri());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.text("java.lang.string@0000000067 cp367 csascii iso-ir-6 artle iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals("lMQmR+oT&MK4-v|", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("lMQmR+oT&MK4-v|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("lMQmR+oT&MK4-v|", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("lMQmR+oT&MK4-v|", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("frame", "frame");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("frame", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("frame", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.appendElement("id");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("frame", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("frame", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("frame", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("id", element0.nodeName());
      assertEquals("id", element0.tagName());
      
      Element element1 = element0.text("frame");
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals("frame", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("frame", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("frame", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("id", element0.nodeName());
      assertEquals("id", element0.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("id", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("frame", element1.baseUri());
      assertEquals("id", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("frame", "frame");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("frame", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("frame", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.text("frame");
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("frame", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("frame", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("frame", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("frame", document1.location());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parse("pe&</F=IF", "");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("pe&", string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7meGPNR|v", "");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.tagName("'D[i$7meGPNR|v");
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("'d[i$7megpnr|v", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("'d[i$7megpnr|v", element0.tagName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("'d[i$7megpnr|v", element1.tagName());
      assertEquals("'d[i$7megpnr|v", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = new Document("#root");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      
      Document document1 = (Document)document0.tagName("#root");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "java.lang.string@0000000045");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.tagName("html");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("html", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("html", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("M<Fg$4oz37rPm-<4$V", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals("M<Fg$4oz37rPm-<4$V", tag0.toString());
      assertEquals("M<Fg$4oz37rPm-<4$V", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      
      CDataNode cDataNode0 = new CDataNode("w6");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "M<Fg$4oz37rPm-<4$V", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals("M<Fg$4oz37rPm-<4$V", tag0.toString());
      assertEquals("M<Fg$4oz37rPm-<4$V", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals("M<Fg$4oz37rPm-<4$V", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("M<Fg$4oz37rPm-<4$V", formElement0.baseUri());
      assertEquals("M<Fg$4oz37rPm-<4$V", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      
      String string0 = formElement0.tagName();
      assertNotNull(string0);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals("M<Fg$4oz37rPm-<4$V", tag0.toString());
      assertEquals("M<Fg$4oz37rPm-<4$V", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals("M<Fg$4oz37rPm-<4$V", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("M<Fg$4oz37rPm-<4$V", formElement0.baseUri());
      assertEquals("M<Fg$4oz37rPm-<4$V", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals("M<Fg$4oz37rPm-<4$V", string0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("String must not be empty", document0.location());
      assertEquals("String must not be empty", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.appendElement("br");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("String must not be empty", document0.location());
      assertEquals("String must not be empty", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("String must not be empty", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.nodeName());
      
      Tag tag0 = element0.tag();
      assertNotNull(tag0);
      assertFalse(document0.hasParent());
      assertEquals("String must not be empty", document0.location());
      assertEquals("String must not be empty", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("String must not be empty", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.nodeName());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isSelfClosing());
      assertEquals("br", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("br", tag0.getName());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7meGPNR|v", "");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      
      Tag tag0 = element0.tag();
      assertNotNull(tag0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isData());
      assertEquals("body", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("String must not be empty", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("String must not be empty", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Tag tag0 = document0.tag();
      assertNotNull(tag0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("String must not be empty", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("String must not be empty", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("", element0.baseUri());
      
      Element element1 = element0.shallowClone();
      assertNotNull(element1);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("hks,]U", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("hks,]u", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("hks,]u", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      
      CDataNode cDataNode0 = new CDataNode("A~;p#ty");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "html", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("hks,]u", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("hks,]u", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("html", formElement0.baseUri());
      assertEquals("hks,]u", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("hks,]u", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      
      Element element0 = formElement0.selectFirst("html");
      assertNull(element0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("hks,]u", tag0.getName());
      assertFalse(tag0.isSelfClosing());
      assertEquals("hks,]u", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("html", formElement0.baseUri());
      assertEquals("hks,]u", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("hks,]u", formElement0.tagName());
      assertFalse(formElement0.isBlock());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("ShuK", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("shuk", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("shuk", tag0.getName());
      assertTrue(tag0.isInline());
      
      CDataNode cDataNode0 = new CDataNode("ShuK");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "ShuK", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("shuk", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("shuk", tag0.getName());
      assertTrue(tag0.isInline());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("ShuK", formElement0.baseUri());
      assertEquals("shuk", formElement0.tagName());
      assertEquals("shuk", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      
      Element element0 = formElement0.selectFirst("ShuK");
      assertNotNull(element0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("shuk", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("shuk", tag0.getName());
      assertTrue(tag0.isInline());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("ShuK", formElement0.baseUri());
      assertEquals("shuk", formElement0.tagName());
      assertEquals("shuk", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("shuk", element0.nodeName());
      assertEquals("shuk", element0.tagName());
      assertEquals("ShuK", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parse("type", ":nth-child(%d)");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(":nth-child(%d)", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(":nth-child(%d)", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document0.select("#root");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals(":nth-child(%d)", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(":nth-child(%d)", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("lMQmR+oT&MK4|", "9d0N-&zVoylZ");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("9d0N-&zVoylZ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("9d0N-&zVoylZ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.select("html");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("9d0N-&zVoylZ", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("9d0N-&zVoylZ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parse("baseftnt", "_");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("_", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("_", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      document0.siblingIndex = (-4356);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("_", document0.location());
      assertEquals("_", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals((-4356), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.removeClass("Q2FC3X0");
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("_", document0.location());
      assertEquals("_", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals((-4356), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals((-4356), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("_", document1.baseUri());
      assertEquals("_", document1.location());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">XiFh\"m2'G`NmQ'I", ">XiFh\"m2'G`NmQ'I");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(">XiFh\"m2'G`NmQ'I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(">XiFh\"m2'G`NmQ'I", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(">XiFh\"m2'G`NmQ'I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(">XiFh\"m2'G`NmQ'I", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(">XiFh\"m2'G`NmQ'I", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      
      Element element1 = element0.removeClass("java.lang.string@0000000076");
      assertNotNull(element1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(">XiFh\"m2'G`NmQ'I", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(">XiFh\"m2'G`NmQ'I", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(">XiFh\"m2'G`NmQ'I", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals(">XiFh\"m2'G`NmQ'I", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parse("type", "type");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("type", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.appendElement("type");
      assertNotNull(element0);
      assertEquals("type", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("type", element0.nodeName());
      assertEquals("type", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("type", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.removeClass("noembed");
      assertNotNull(element1);
      assertEquals("type", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("type", element0.nodeName());
      assertEquals("type", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("type", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("type", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("type", element1.baseUri());
      assertEquals("type", element1.tagName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parse("type", "type");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("type", document0.baseUri());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("type", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("type", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      
      Element element1 = element0.after((Node) document0);
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("type", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals("type", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("type", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = document0.previousElementSibling();
      assertNotNull(element2);
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("type", document0.baseUri());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.tagName());
      assertEquals("type", element2.baseUri());
      assertEquals(1, element2.siblingIndex());
      assertEquals("body", element2.nodeName());
      assertEquals(1, element2.childNodeSize());
      assertTrue(element2.hasParent());
      assertSame(element2, element0);
      assertSame(element2, element1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("pe&</F=IF", "");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertTrue(document0.hasParent());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.previousElementSibling();
      assertNotNull(element0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("html", element0.nodeName());
      assertEquals("html", element0.tagName());
      assertEquals("", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "'D[i$7GPNR|v");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document0.location());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.prependChild(document0);
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertTrue(element0.isBlock());
      assertEquals(2, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("'D[i$7GPNR|v", element1.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "'D[i$7GPNR|v");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.prependChild(document0);
      assertNotNull(document1);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("'D[i$7GPNR|v", document1.location());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Element element0 = new Element("basefont");
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("basefont", element0.tagName());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("basefont", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      
      element0.siblingIndex = (-1841414303);
      assertEquals(0, element0.childNodeSize());
      assertEquals("basefont", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals((-1841414303), element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("basefont", element0.nodeName());
      
      Element element1 = element0.prepend("basefont");
      assertNotNull(element1);
      assertEquals(1, element0.childNodeSize());
      assertEquals("basefont", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals((-1841414303), element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("basefont", element0.nodeName());
      assertEquals("basefont", element1.tagName());
      assertEquals("basefont", element1.nodeName());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals((-1841414303), element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000066 cp367 csascii qhg6k8c& ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us", "java.lang.string@0000000066 cp367 csascii qhg6k8c& ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      
      Element element1 = element0.prepend("ascii7");
      assertNotNull(element1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Element element0 = new Element("basefont");
      assertNotNull(element0);
      assertEquals("basefont", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("basefont", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      Element element1 = element0.prepend("");
      assertNotNull(element1);
      assertEquals("basefont", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("basefont", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("basefont", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("basefont", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse("type", "org.jsoup.nodes.Element$NodeList");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document0.parents();
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      
      Elements elements0 = element0.parents();
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse(".}X%Aw4:VJ8O^", ".}X%Aw4:VJ8O^");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(".}X%Aw4:VJ8O^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".}X%Aw4:VJ8O^", document0.baseUri());
      
      Element element0 = document0.parent();
      assertNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(".}X%Aw4:VJ8O^", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".}X%Aw4:VJ8O^", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Element element0 = new Element("*|");
      assertNotNull(element0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("*|", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("*|", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      
      element0.setSiblingIndex(1);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("*|", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("*|", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.appendElement("=G{b6v");
      assertNotNull(element1);
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("*|", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("*|", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals("=g{b6v", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("=g{b6v", element1.tagName());
      assertTrue(element1.hasParent());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      
      Element element2 = element1.parent();
      assertNotNull(element2);
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("*|", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("*|", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals("=g{b6v", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("=g{b6v", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("*|", element2.tagName());
      assertEquals("", element2.baseUri());
      assertEquals("*|", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
      assertFalse(element2.isBlock());
      assertEquals(1, element2.childNodeSize());
      assertFalse(element2.hasParent());
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertNotSame(element2, element1);
      assertSame(element2, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Document.createShell("&#xa0;");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("&#xa0;", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("&#xa0;", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.shallowClone();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("&#xa0;", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("&#xa0;", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("&#xa0;", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.nodeName());
      
      element0.reparentChild(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("&#xa0;", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("&#xa0;", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("&#xa0;", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("#root", element0.nodeName());
      
      Element element1 = document0.parent();
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("&#xa0;", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("&#xa0;", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("#root", element1.tagName());
      assertEquals("&#xa0;", element1.baseUri());
      assertEquals("#root", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Document.createShell("n;w$X");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("n;w$X", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("n;w$X", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("n;w$X", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("n;w$X", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("n;w$X", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.parent();
      assertNotNull(element1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("n;w$X", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("n;w$X", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("n;w$X", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("n;w$X", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("html", element1.nodeName());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("html", element1.tagName());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000116", "head");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.prependText("head");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("head", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("head", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.ownText();
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertSame(document0, document1);
      assertEquals("head", string0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":<!tiDr^[<2", "x");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("x", document0.baseUri());
      assertEquals("x", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      String string0 = document0.nodeName();
      assertNotNull(string0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("x", document0.baseUri());
      assertEquals("x", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#document", string0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Document.createShell("lMQmR+oT&MK4|");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("lMQmR+oT&MK4|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("lMQmR+oT&MK4|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", element0.tagName());
      assertEquals("lMQmR+oT&MK4|", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      
      Elements elements0 = element0.nextElementSiblings();
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("lMQmR+oT&MK4|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("head", element0.tagName());
      assertEquals("lMQmR+oT&MK4|", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Document.createShell("'D[i$7GPNR|v");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.appendElement("}`");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertEquals("}`", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("}`", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.lastElementSibling();
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertEquals("}`", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("}`", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("}`", element1.tagName());
      assertEquals("'D[i$7GPNR|v", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("}`", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("idj?!ll!#", "idj?!ll!#");
      assertNotNull(document0);
      assertEquals("idj?!ll!#", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("idj?!ll!#", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("idj?!ll!#", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("idj?!ll!#", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("idj?!ll!#", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      
      boolean boolean0 = element0.isBlock();
      assertEquals("idj?!ll!#", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("idj?!ll!#", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("idj?!ll!#", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parse("pe&</F=IF", "");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Pattern pattern0 = Pattern.compile(".f~|Wx^@}", (-1924));
      assertNotNull(pattern0);
      assertEquals(".f~|Wx^@}", pattern0.pattern());
      assertEquals((-1924), pattern0.flags());
      assertEquals(".f~|Wx^@}", pattern0.toString());
      
      Evaluator.AttributeWithValueMatching evaluator_AttributeWithValueMatching0 = new Evaluator.AttributeWithValueMatching((String) null, pattern0);
      assertNotNull(evaluator_AttributeWithValueMatching0);
      assertEquals(".f~|Wx^@}", pattern0.pattern());
      assertEquals((-1924), pattern0.flags());
      assertEquals(".f~|Wx^@}", pattern0.toString());
      
      boolean boolean0 = document0.is((Evaluator) evaluator_AttributeWithValueMatching0);
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(".f~|Wx^@}", pattern0.pattern());
      assertEquals((-1924), pattern0.flags());
      assertEquals(".f~|Wx^@}", pattern0.toString());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parse("type", "type");
      assertNotNull(document0);
      assertEquals("type", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.appendElement("type");
      assertNotNull(element0);
      assertEquals("type", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("type", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("type", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("type", element0.nodeName());
      
      boolean boolean0 = element0.is("type");
      assertEquals("type", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("type", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("type", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("type", element0.nodeName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("lMQmR+oT&MK4|", "9d0N-&zVoylZ");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("9d0N-&zVoylZ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("9d0N-&zVoylZ", document0.baseUri());
      
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      Document document1 = (Document)document0.insertChildren(0, nodeArray0);
      assertNotNull(document1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("9d0N-&zVoylZ", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("9d0N-&zVoylZ", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals(1, document1.siblingIndex());
      assertEquals("9d0N-&zVoylZ", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("9d0N-&zVoylZ", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(2, nodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parse("type", "type");
      assertNotNull(document0);
      assertEquals("type", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      
      Node[] nodeArray0 = new Node[0];
      Document document1 = (Document)document0.insertChildren(0, nodeArray0);
      assertNotNull(document1);
      assertEquals("type", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("type", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("type", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, nodeArray0.length);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "java.lang.string@0000000045");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      LinkedList<Element> linkedList0 = new LinkedList<Element>();
      assertNotNull(linkedList0);
      assertEquals(0, linkedList0.size());
      
      boolean boolean0 = linkedList0.add((Element) document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, linkedList0.size());
      assertTrue(boolean0);
      
      Document document1 = (Document)document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertNotNull(document1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, linkedList0.size());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("wE", parseSettings0);
      assertNotNull(tag0);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("wE", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("wE", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Element element0 = new Element(tag0, "/", attributes0);
      assertNotNull(element0);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("wE", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("wE", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, attributes0.size());
      assertEquals(0, element0.siblingIndex());
      assertEquals("wE", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("/", element0.baseUri());
      assertEquals("wE", element0.nodeName());
      
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      assertNotNull(linkedHashSet0);
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      assertNotNull(element1);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("wE", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("wE", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals(0, attributes0.size());
      assertEquals(0, element0.siblingIndex());
      assertEquals("wE", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("/", element0.baseUri());
      assertEquals("wE", element0.nodeName());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("wE", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("/", element1.baseUri());
      assertEquals("wE", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parse("type", "type");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      document0.setSiblingIndex(62);
      assertEquals(1, document0.childNodeSize());
      assertEquals(62, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.html("vE0-KjML.D?c0");
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(62, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("type", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("type", document1.location());
      assertEquals(62, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parse("pe&</F=IF", "");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      
      StringWriter stringWriter0 = new StringWriter();
      assertNotNull(stringWriter0);
      assertEquals("", stringWriter0.toString());
      
      StringWriter stringWriter1 = document0.html(stringWriter0);
      assertNotNull(stringWriter1);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertEquals("\n<html>\n <head></head>\n <body>\n  pe&amp;\n </body>\n</html>", stringWriter0.toString());
      assertEquals("\n<html>\n <head></head>\n <body>\n  pe&amp;\n </body>\n</html>", stringWriter1.toString());
      assertSame(stringWriter0, stringWriter1);
      assertSame(stringWriter1, stringWriter0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("<html>\n <head></head>\n <body>\n  'D[i$7GPNR|v\n </body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")", ")");
      assertNotNull(document0);
      assertEquals(")", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.html("");
      assertNotNull(document1);
      assertEquals(")", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(")", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(")", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(")", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.html();
      assertNotNull(string0);
      assertEquals(")", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals(")", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertSame(document0, document1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.Evaluator$Id");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("#root", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      
      FormElement formElement0 = new FormElement(tag0, "S{3xYw$D3", attributes0);
      assertNotNull(formElement0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("S{3xYw$D3", formElement0.baseUri());
      assertEquals("#root", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("#root", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      
      boolean boolean0 = formElement0.hasAttributes();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("S{3xYw$D3", formElement0.baseUri());
      assertEquals("#root", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("#root", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parse("type", "type");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      boolean boolean0 = document0.hasAttributes();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parse("pe&</F=IF", "");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Pattern pattern0 = Pattern.compile("body", 17);
      assertNotNull(pattern0);
      assertEquals("body", pattern0.toString());
      assertEquals(17, pattern0.flags());
      assertEquals("body", pattern0.pattern());
      
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertNotNull(elements0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("body", pattern0.toString());
      assertEquals(17, pattern0.flags());
      assertEquals("body", pattern0.pattern());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("type", "type");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Elements elements0 = document0.getElementsMatchingText("type");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Document.createShell("&#xa0;");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("&#xa0;", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("&#xa0;", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Pattern pattern0 = Pattern.compile("G", 137);
      assertNotNull(pattern0);
      assertEquals("G", pattern0.toString());
      assertEquals("G", pattern0.pattern());
      assertEquals(137, pattern0.flags());
      
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("&#xa0;", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("&#xa0;", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("G", pattern0.toString());
      assertEquals("G", pattern0.pattern());
      assertEquals(137, pattern0.flags());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("String must not be empty", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("String must not be empty", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.getElementsContainingText("basefont");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("String must not be empty", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("String must not be empty", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("type", "type");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsByTag("type");
      assertNotNull(elements0);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.prependElement("UeF1Xzu^o+% D");
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("uef1xzu^o+% d", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("uef1xzu^o+% d", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      
      Elements elements0 = document0.getElementsByTag("UeF1Xzu^o+% D");
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Elements elements0 = document0.getElementsByIndexLessThan((-1384));
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Element element0 = new Element("*|");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("*|", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("*|", element0.nodeName());
      
      Elements elements0 = element0.getElementsByIndexGreaterThan((-18603944));
      assertNotNull(elements0);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("*|", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("*|", element0.nodeName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000045", "M%.40WT^");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("M%.40WT^", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("M%.40WT^", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.addClass("M%.40WT^");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("M%.40WT^", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("M%.40WT^", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("M%.40WT^", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("M%.40WT^", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("java.lang.string@0000000045");
      assertNotNull(document2);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("M%.40WT^", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("M%.40WT^", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.hasParent());
      assertEquals("M%.40WT^", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("M%.40WT^", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Elements elements0 = document1.getElementsByClass("java.lang.string@0000000045");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("M%.40WT^", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("M%.40WT^", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("M%.40WT^", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("M%.40WT^", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = new Document("pe&</F=IF");
      assertNotNull(document0);
      assertEquals("pe&</F=IF", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("pe&</F=IF", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      
      Elements elements0 = document0.getElementsByAttributeValueStarting("pe&</F=IF", "P}d;");
      assertNotNull(elements0);
      assertEquals("pe&</F=IF", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("pe&</F=IF", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Tag tag0 = Tag.valueOf("basefont");
      assertNotNull(tag0);
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals("basefont", tag0.getName());
      assertEquals("basefont", tag0.toString());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      
      Element element0 = new Element(tag0, "java.lang.string@0000000050");
      assertNotNull(element0);
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals("basefont", tag0.getName());
      assertEquals("basefont", tag0.toString());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("basefont", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("basefont", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      
      Elements elements0 = element0.getElementsByAttributeValueNot("#", " ");
      assertNotNull(elements0);
      assertTrue(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals("basefont", tag0.getName());
      assertEquals("basefont", tag0.toString());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("basefont", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("basefont", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document0.getElementsByAttributeValueNot("'D[i$7GPNR|v", "'D[i$7GPNR|v");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse("ct", "9X/1)ujZG");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("9X/1)ujZG", document0.location());
      assertEquals("9X/1)ujZG", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Document document1 = (Document)document0.addClass("B<Y]S");
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("9X/1)ujZG", document0.location());
      assertEquals("9X/1)ujZG", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("9X/1)ujZG", document1.baseUri());
      assertEquals("9X/1)ujZG", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Pattern pattern0 = Pattern.compile("", 1297);
      assertNotNull(pattern0);
      assertEquals("", pattern0.toString());
      assertEquals(1361, pattern0.flags());
      assertEquals("", pattern0.pattern());
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("class", pattern0);
      assertNotNull(elements0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("9X/1)ujZG", document0.location());
      assertEquals("9X/1)ujZG", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", pattern0.toString());
      assertEquals(1361, pattern0.flags());
      assertEquals("", pattern0.pattern());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Tag tag0 = Tag.valueOf("-dr)Y`>-ZDb1ZR");
      assertNotNull(tag0);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("-dr)Y`>-ZDb1ZR", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("-dr)Y`>-ZDb1ZR", tag0.getName());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("Ilk[SLJh>", " x");
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      Element element0 = new Element(tag0, "oym*", attributes0);
      assertNotNull(element0);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("-dr)Y`>-ZDb1ZR", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("-dr)Y`>-ZDb1ZR", tag0.getName());
      assertEquals(1, attributes0.size());
      assertEquals(0, element0.childNodeSize());
      assertEquals("-dr)Y`>-ZDb1ZR", element0.nodeName());
      assertEquals("oym*", element0.baseUri());
      assertEquals("-dr)Y`>-ZDb1ZR", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      
      Elements elements0 = element0.getElementsByAttributeStarting("Ilk[SLJh>");
      assertNotNull(elements0);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertEquals("-dr)Y`>-ZDb1ZR", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("-dr)Y`>-ZDb1ZR", tag0.getName());
      assertEquals(1, attributes0.size());
      assertEquals(0, element0.childNodeSize());
      assertEquals("-dr)Y`>-ZDb1ZR", element0.nodeName());
      assertEquals("oym*", element0.baseUri());
      assertEquals("-dr)Y`>-ZDb1ZR", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(attributes0, attributes1);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Tag tag0 = Tag.valueOf("h");
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertEquals("h", tag0.getName());
      assertTrue(tag0.isInline());
      assertEquals("h", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Attributes attributes1 = attributes0.put("O,*uQ~d %bKi>IE&", "h");
      assertNotNull(attributes1);
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "h", attributes1);
      assertNotNull(formElement0);
      assertFalse(tag0.isData());
      assertEquals("h", tag0.getName());
      assertTrue(tag0.isInline());
      assertEquals("h", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("h", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("h", formElement0.baseUri());
      assertEquals("h", formElement0.nodeName());
      
      Elements elements0 = formElement0.getElementsByAttribute("O,*uQ~d %bKi>IE&");
      assertNotNull(elements0);
      assertFalse(tag0.isData());
      assertEquals("h", tag0.getName());
      assertTrue(tag0.isInline());
      assertEquals("h", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals(1, attributes0.size());
      assertEquals(1, attributes1.size());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("h", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("h", formElement0.baseUri());
      assertEquals("h", formElement0.nodeName());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parse("lMQmR+oT&MK4-v|", "lMQmR+oT&MK4-v|");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("lMQmR+oT&MK4-v|", document0.baseUri());
      assertEquals("lMQmR+oT&MK4-v|", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("lMQmR+oT&MK4-v|", document0.baseUri());
      assertEquals("lMQmR+oT&MK4-v|", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("lMQmR+oT&MK4-v|", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals("lMQmR+oT&MK4-v|", document0.baseUri());
      assertEquals("lMQmR+oT&MK4-v|", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("lMQmR+oT&MK4-v|", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals("head", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("lMQmR+oT&MK4-v|", element1.baseUri());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = new Document("basefont");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("basefont", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("basefont", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      document0.setSiblingIndex((-862));
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("basefont", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("basefont", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals((-862), document0.siblingIndex());
      
      Document document1 = (Document)document0.empty();
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("basefont", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("basefont", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals((-862), document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("basefont", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("basefont", document1.location());
      assertEquals((-862), document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "'D[i$7GPNR|v");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document0.location());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      
      Element element1 = element0.empty();
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("'D[i$7GPNR|v", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("pe", "pe");
      assertNotNull(document0);
      assertEquals("pe", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("pe", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("pe", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("pe", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("pe", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      
      int int0 = element0.elementSiblingIndex();
      assertEquals("pe", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("pe", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("pe", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Document.createShell(":nth-child(%d)");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(":nth-child(%d)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":nth-child(%d)", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(":nth-child(%d)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":nth-child(%d)", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(":nth-child(%d)", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      
      Element element1 = element0.doClone(document0);
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals(":nth-child(%d)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":nth-child(%d)", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertEquals(":nth-child(%d)", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertEquals(":nth-child(%d)", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("</", "eH\")ee");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("eH\")ee", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("eH\")ee", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.doClone((Node) null);
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("eH\")ee", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("eH\")ee", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("eH\")ee", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("eH\")ee", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("frame", "frame");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("frame", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("frame", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Element element0 = document0.appendElement("id");
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("frame", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("frame", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("frame", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("id", element0.nodeName());
      assertEquals("id", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      Element element1 = element0.doClone(document0);
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("frame", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("frame", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("frame", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("id", element0.nodeName());
      assertEquals("id", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("id", element1.nodeName());
      assertEquals("frame", element1.baseUri());
      assertEquals("id", element1.tagName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      
      Element element2 = element1.nextElementSibling();
      assertNotNull(element2);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("frame", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("frame", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("frame", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("id", element0.nodeName());
      assertEquals("id", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("id", element1.nodeName());
      assertEquals("frame", element1.baseUri());
      assertEquals("id", element1.tagName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("frame", element2.baseUri());
      assertEquals(0, element2.childNodeSize());
      assertEquals("id", element2.nodeName());
      assertEquals(1, element2.siblingIndex());
      assertTrue(element2.hasParent());
      assertEquals("id", element2.tagName());
      assertFalse(element2.isBlock());
      assertSame(element0, element2);
      assertNotSame(element0, element1);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "'D[i$7GPNR|v");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.clone();
      assertNotNull(element1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("'D[i$7GPNR|v", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("6Wu?7)", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertEquals("6wu?7)", tag0.getName());
      assertEquals("6wu?7)", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      
      CDataNode cDataNode0 = new CDataNode("uu)");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "WMO_qf,Sm2i`XSJ", attributes0);
      assertNotNull(pseudoTextElement0);
      assertFalse(tag0.preserveWhitespace());
      assertEquals("6wu?7)", tag0.getName());
      assertEquals("6wu?7)", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("6wu?7)", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("WMO_qf,Sm2i`XSJ", pseudoTextElement0.baseUri());
      assertEquals("6wu?7)", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      
      Element element0 = pseudoTextElement0.clone();
      assertNotNull(element0);
      assertFalse(tag0.preserveWhitespace());
      assertEquals("6wu?7)", tag0.getName());
      assertEquals("6wu?7)", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("6wu?7)", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("WMO_qf,Sm2i`XSJ", pseudoTextElement0.baseUri());
      assertEquals("6wu?7)", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("WMO_qf,Sm2i`XSJ", element0.baseUri());
      assertEquals("6wu?7)", element0.tagName());
      assertEquals("6wu?7)", element0.nodeName());
      assertNotSame(pseudoTextElement0, element0);
      assertNotSame(element0, pseudoTextElement0);
      assertFalse(element0.equals((Object)pseudoTextElement0));
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "'D[i$7GPNR|v");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      
      Charset charset0 = document0.charset();
      assertNotNull(charset0);
      assertFalse(document0.hasParent());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("'D[i$7GPNR|v"));
      assertNotNull(set0);
      assertFalse(document0.hasParent());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      
      Element element1 = element0.classNames(set0);
      assertFalse(set0.contains("'D[i$7GPNR|v"));
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(charset0.canEncode());
      assertEquals("UTF-8", charset0.toString());
      assertEquals("UTF-8", charset0.displayName());
      assertTrue(charset0.isRegistered());
      assertEquals("UTF-8", charset0.name());
      assertFalse(set0.isEmpty());
      assertEquals(2, set0.size());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("'D[i$7GPNR|v", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parse("#p Pkk%LR", "#p Pkk%LR");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#p Pkk%LR", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#p Pkk%LR", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#p Pkk%LR", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#p Pkk%LR", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#p Pkk%LR", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals("#p Pkk%LR", document1.location());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Locale locale0 = Locale.FRANCE;
      assertNotNull(locale0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertFalse(set0.contains("#p Pkk%LR"));
      assertNotNull(set0);
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      
      Document document2 = (Document)document0.classNames(set0);
      assertFalse(set0.contains("#p Pkk%LR"));
      assertNotNull(document2);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#p Pkk%LR", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#p Pkk%LR", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("fr", locale0.getLanguage());
      assertEquals("fra", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("fr_FR", locale0.toString());
      assertEquals("FR", locale0.getCountry());
      assertEquals("FRA", locale0.getISO3Country());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertEquals("#p Pkk%LR", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(2, document2.childNodeSize());
      assertEquals("#p Pkk%LR", document2.location());
      assertTrue(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = new Document("lMQmR+oT&MK4|");
      assertNotNull(document0);
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("lMQmR+oT&MK4|", document0.location());
      assertFalse(document0.hasParent());
      
      Charset charset0 = Charset.defaultCharset();
      assertNotNull(charset0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      
      Set<String> set0 = charset0.aliases();
      assertFalse(set0.contains("lMQmR+oT&MK4|"));
      assertNotNull(set0);
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      
      Document document1 = (Document)document0.classNames(set0);
      assertFalse(set0.contains("lMQmR+oT&MK4|"));
      assertNotNull(document1);
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("lMQmR+oT&MK4|", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(charset0.canEncode());
      assertTrue(charset0.isRegistered());
      assertEquals("US-ASCII", charset0.toString());
      assertEquals("US-ASCII", charset0.name());
      assertEquals("US-ASCII", charset0.displayName());
      assertFalse(set0.isEmpty());
      assertEquals(14, set0.size());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("lMQmR+oT&MK4|", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("lMQmR+oT&MK4|", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("lMQmR+oT&MK4|", "9d0N-&zVoylZ");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("9d0N-&zVoylZ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("9d0N-&zVoylZ", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.toggleClass("lMQmR+oT&MK4|");
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("9d0N-&zVoylZ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("9d0N-&zVoylZ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("9d0N-&zVoylZ", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("9d0N-&zVoylZ", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Set<String> set0 = document1.classNames();
      assertFalse(set0.contains("lMQmR+oT&MK4|"));
      assertNotNull(set0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("9d0N-&zVoylZ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("9d0N-&zVoylZ", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("9d0N-&zVoylZ", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("9d0N-&zVoylZ", document1.baseUri());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = new Document(")");
      assertNotNull(document0);
      assertEquals(")", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")", document0.location());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.toggleClass("java.lang.string@0000000045");
      assertNotNull(document1);
      assertEquals(")", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(")", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(")", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document1.className();
      assertNotNull(string0);
      assertEquals(")", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(")", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(")", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Element element0 = new Element("basefont");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("basefont", element0.nodeName());
      assertEquals("basefont", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      
      Elements elements0 = element0.children();
      assertNotNull(elements0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("basefont", element0.nodeName());
      assertEquals("basefont", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell("idj?!ll!#");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("idj?!ll!#", document0.location());
      assertEquals("idj?!ll!#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Elements elements0 = document0.children();
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("idj?!ll!#", document0.location());
      assertEquals("idj?!ll!#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput("org.jsoup.select.Evaluator$AttributeWithValueStarting", "org.jsoup.select.Evaluator$AttributeWithValueStarting");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueStarting", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueStarting", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.createElement(":eq(");
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueStarting", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueStarting", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(":eq(", element0.tagName());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueStarting", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(":eq(", element0.nodeName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      int int0 = element0.childNodeSize();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueStarting", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueStarting", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(":eq(", element0.tagName());
      assertEquals("org.jsoup.select.Evaluator$AttributeWithValueStarting", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(":eq(", element0.nodeName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Document.createShell("idj?!ll!#");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("idj?!ll!#", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("idj?!ll!#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      int int0 = document0.childNodeSize();
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("idj?!ll!#", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("idj?!ll!#", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("`?G|E$", "`?G|E$");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("`?G|E$", document0.location());
      assertEquals("`?G|E$", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.child(0);
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("`?G|E$", document0.location());
      assertEquals("`?G|E$", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("`?G|E$", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("html", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">qV7P18;8:>~YI1>", "R");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("R", document0.location());
      assertEquals("R", document0.baseUri());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("R", document0.location());
      assertEquals("R", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("R", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.before((Node) document0);
      assertNotNull(element1);
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("R", document0.location());
      assertEquals("R", document0.baseUri());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("R", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals(2, element1.siblingIndex());
      assertEquals("R", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("type", "type");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("type", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("type", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.appendElement("type");
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("type", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("type", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("type", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("type", element0.baseUri());
      assertEquals("type", element0.nodeName());
      
      Element element1 = element0.before((Node) document0);
      assertNotNull(element1);
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("type", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("type", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("type", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("type", element0.baseUri());
      assertEquals("type", element0.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("type", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(2, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("type", element1.tagName());
      assertEquals("type", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Document.createShell("`");
      assertNotNull(document0);
      assertEquals("`", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("`", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Document document1 = Parser.parse("`", "`");
      assertNotNull(document1);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("`", document1.baseUri());
      assertEquals("`", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      document1.parentNode = (Node) document0;
      assertEquals("`", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("`", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("`", document1.baseUri());
      assertEquals("`", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertFalse(document1.parentNode.hasParent());
      
      Document document2 = (Document)document1.before("`");
      assertNotNull(document2);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("`", document1.baseUri());
      assertEquals("`", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("`", document2.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals("`", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parse("type", "type");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.appendElement("type");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertEquals("type", element0.baseUri());
      assertEquals("type", element0.nodeName());
      assertEquals("type", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.before("type");
      assertNotNull(element1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertEquals("type", element0.baseUri());
      assertEquals("type", element0.nodeName());
      assertEquals("type", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("type", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("type", element1.baseUri());
      assertEquals("type", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.location());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      
      Element element1 = element0.before("1+'FzYQC <)X7nG}");
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertEquals(3, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(3, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("Insert position out of bounds.", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("C$m {C&:UDQqy*f7", "9d0N-&zVoylZ");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("9d0N-&zVoylZ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("9d0N-&zVoylZ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      String string0 = document0.baseUri();
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("9d0N-&zVoylZ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("9d0N-&zVoylZ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("9d0N-&zVoylZ", string0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      String string0 = document0.baseUri();
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Document.createShell("");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      
      Document document1 = (Document)document0.toggleClass("type");
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Attributes attributes0 = document1.attributes();
      assertNotNull(attributes0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(1, attributes0.size());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "'D[i$7GPNR|v");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.tagName());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      
      Element element1 = element0.attr("org.jsoup.helper.W3CDom$W3CBuilder", true);
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("body", element0.tagName());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals("'D[i$7GPNR|v", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parse("pe&</F=IF", "");
      assertNotNull(document0);
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertEquals("", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.attr("", false);
      assertNotNull(document2);
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals("#root", document2.tagName());
      assertEquals(2, document2.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertTrue(document2.hasParent());
      assertEquals("", document2.location());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Element element0 = new Element("GpGfX`7Oa");
      assertNotNull(element0);
      assertEquals("GpGfX`7Oa", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("GpGfX`7Oa", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      
      Element element1 = element0.attr("org.jsoup.nodes.Element$1", true);
      assertNotNull(element1);
      assertEquals("GpGfX`7Oa", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("GpGfX`7Oa", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("GpGfX`7Oa", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("GpGfX`7Oa", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "'D[i$7GPNR|v");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      
      Element element1 = element0.prependText("%JdNPo");
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("'D[i$7GPNR|v", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      Element element2 = element1.attr("nobr", "%JdNPo");
      assertNotNull(element2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("'D[i$7GPNR|v", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertTrue(element2.hasParent());
      assertEquals(1, element2.siblingIndex());
      assertEquals("'D[i$7GPNR|v", element2.baseUri());
      assertEquals("body", element2.nodeName());
      assertEquals(2, element2.childNodeSize());
      assertTrue(element2.isBlock());
      assertEquals("body", element2.tagName());
      assertSame(element0, element1);
      assertSame(element0, element2);
      assertSame(element1, element2);
      assertSame(element1, element0);
      assertSame(element2, element1);
      assertSame(element2, element0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell("type");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.createElement("type");
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("type", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("type", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("type", element0.tagName());
      assertFalse(element0.hasParent());
      
      Element element1 = element0.attr("type", "#root");
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("type", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("type", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("type", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("type", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("type", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("type", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Z)x)+s`5 Ol.[", "Z)x)+s`5 Ol.[");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Z)x)+s`5 Ol.[", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Z)x)+s`5 Ol.[", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Z)x)+s`5 Ol.[", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Z)x)+s`5 Ol.[", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Z)x)+s`5 Ol.[", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("label", parseSettings0);
      assertNotNull(tag0);
      assertEquals("label", tag0.getName());
      assertEquals("label", tag0.toString());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "java.lang.string@0000000084 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us body", attributes0);
      assertNotNull(pseudoTextElement0);
      assertEquals("label", tag0.getName());
      assertEquals("label", tag0.toString());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals(0, attributes0.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("label", pseudoTextElement0.nodeName());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertEquals("label", pseudoTextElement0.tagName());
      
      Element element1 = element0.appendTo(pseudoTextElement0);
      assertNotNull(element1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Z)x)+s`5 Ol.[", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Z)x)+s`5 Ol.[", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Z)x)+s`5 Ol.[", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("label", tag0.getName());
      assertEquals("label", tag0.toString());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals(0, attributes0.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.isBlock());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("label", pseudoTextElement0.nodeName());
      assertEquals(1, pseudoTextElement0.childNodeSize());
      assertEquals("label", pseudoTextElement0.tagName());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertEquals("Z)x)+s`5 Ol.[", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = new Document(".}X%Aw4:VJ8O^");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(".}X%Aw4:VJ8O^", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(".}X%Aw4:VJ8O^", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = Parser.parse(".}X%Aw4:VJ8O^", "R@ E`");
      assertNotNull(document1);
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("R@ E`", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("R@ E`", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      Document document2 = (Document)document0.appendTo(document1);
      assertNotNull(document2);
      assertEquals(1, document0.siblingIndex());
      assertEquals(".}X%Aw4:VJ8O^", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(".}X%Aw4:VJ8O^", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("R@ E`", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertEquals("R@ E`", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertTrue(document2.hasParent());
      assertEquals(".}X%Aw4:VJ8O^", document2.baseUri());
      assertEquals(1, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(".}X%Aw4:VJ8O^", document2.location());
      assertSame(document0, document2);
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertNotSame(document1, document2);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7ERy4F=4", "7ERy4F=4");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("7ERy4F=4", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7ERy4F=4", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      document0.setSiblingIndex((-1436010313));
      assertEquals((-1436010313), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("7ERy4F=4", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("7ERy4F=4", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.appendText("7ERy4F=4");
      assertNotNull(document1);
      assertEquals((-1436010313), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("7ERy4F=4", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("7ERy4F=4", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7ERy4F=4", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("7ERy4F=4", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals((-1436010313), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      
      Element element1 = element0.appendText("");
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7ERy4F=4", "7ERy4F=4");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7ERy4F=4", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7ERy4F=4", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      document0.parentNode = (Node) document0;
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7ERy4F=4", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("7ERy4F=4", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertTrue(document0.parentNode.hasParent());
      
      Document document1 = (Document)document0.appendText("7ERy4F=4");
      assertNotNull(document1);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("7ERy4F=4", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("7ERy4F=4", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("7ERy4F=4", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("7ERy4F=4", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parse("lMQmR+oT&MK4|", "lMQmR+oT&MK4|");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("lMQmR+oT&MK4|", document0.location());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.appendElement("body");
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("lMQmR+oT&MK4|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("lMQmR+oT&MK4|", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'D[i$7GPNR|v", "'D[i$7GPNR|v");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("'D[i$7GPNR|v", document0.location());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      
      Element element1 = element0.appendChild(document0);
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(2, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      assertEquals(2, element1.childNodeSize());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("'D[i$7GPNR|v", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Tag tag0 = Tag.valueOf("td");
      assertNotNull(tag0);
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("td", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertEquals("td", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "dk0vG.j9Xq", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("td", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertEquals("td", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertEquals("td", formElement0.tagName());
      assertEquals("dk0vG.j9Xq", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals("td", formElement0.nodeName());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      
      Element element0 = formElement0.append(":nth-child(%d)");
      assertNotNull(element0);
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertEquals("td", tag0.getName());
      assertTrue(tag0.canContainBlock());
      assertEquals("td", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertEquals("td", formElement0.tagName());
      assertEquals("dk0vG.j9Xq", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals("td", formElement0.nodeName());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals("dk0vG.j9Xq", element0.baseUri());
      assertEquals("td", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("td", element0.nodeName());
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("String must not be empty", document0.location());
      assertEquals("String must not be empty", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      
      Element element0 = document0.appendElement("br");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("String must not be empty", document0.location());
      assertEquals("String must not be empty", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("String must not be empty", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      
      Element element1 = element0.append("");
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals("String must not be empty", document0.location());
      assertEquals("String must not be empty", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("String must not be empty", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("br", element1.tagName());
      assertEquals("String must not be empty", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("br", element1.nodeName());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("6C/DZOlAo", "6C/DZOlAo");
      assertNotNull(document0);
      assertEquals("6C/DZOlAo", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("6C/DZOlAo", document0.location());
      
      document0.parentNode = (Node) document0;
      assertEquals("6C/DZOlAo", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("6C/DZOlAo", document0.location());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertTrue(document0.parentNode.hasParent());
      
      DataNode dataNode0 = new DataNode("02WHvV|52sV", "");
      assertNotNull(dataNode0);
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      
      Document document1 = (Document)document0.after((Node) dataNode0);
      assertNotNull(document1);
      assertEquals("6C/DZOlAo", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("6C/DZOlAo", document0.location());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(1, dataNode0.siblingIndex());
      assertTrue(dataNode0.hasParent());
      assertEquals("6C/DZOlAo", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("6C/DZOlAo", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parse("lMQmR+oT&MK4|", "lMQmR+oT&MK4|");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("lMQmR+oT&MK4|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.appendElement("%^");
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("lMQmR+oT&MK4|", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("lMQmR+oT&MK4|", element0.baseUri());
      assertEquals("%^", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("%^", element0.tagName());
      assertFalse(element0.isBlock());
      
      Element element1 = element0.after((Node) document0);
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("lMQmR+oT&MK4|", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("lMQmR+oT&MK4|", element0.baseUri());
      assertEquals("%^", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("%^", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("lMQmR+oT&MK4|", element1.baseUri());
      assertEquals("%^", element1.tagName());
      assertEquals("%^", element1.nodeName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parse("'QR}RjisAI4", "type");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals("type", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.createElement("br");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals("type", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("type", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      
      Document document1 = (Document)document0.appendTo(element0);
      assertNotNull(document1);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals("type", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("type", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("type", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("type", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.after("type");
      assertNotNull(document2);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals("type", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("type", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("type", document2.location());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parse("type", "type");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.appendElement("type");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("type", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("type", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("type", element0.tagName());
      
      Element element1 = element0.after("type");
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.baseUri());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("type", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("type", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("type", element0.tagName());
      assertEquals("type", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("type", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("type", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`?G|E$", "`?G|E$");
      assertNotNull(document0);
      assertEquals("`?G|E$", document0.baseUri());
      assertEquals("`?G|E$", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      
      document0.siblingIndex = (-3846);
      assertEquals("`?G|E$", document0.baseUri());
      assertEquals((-3846), document0.siblingIndex());
      assertEquals("`?G|E$", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.addClass("`?G|E$");
      assertNotNull(document1);
      assertEquals("`?G|E$", document0.baseUri());
      assertEquals((-3846), document0.siblingIndex());
      assertEquals("`?G|E$", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals("`?G|E$", document1.location());
      assertEquals((-3846), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("`?G|E$", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.toggleClass("`?G|E$");
      assertNotNull(document2);
      assertEquals("`?G|E$", document0.baseUri());
      assertEquals((-3846), document0.siblingIndex());
      assertEquals("`?G|E$", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document2.hasParent());
      assertEquals((-3846), document2.siblingIndex());
      assertEquals("`?G|E$", document2.baseUri());
      assertEquals("`?G|E$", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = document2.hasClass("java.lang.string@0000000045");
      assertEquals("`?G|E$", document0.baseUri());
      assertEquals((-3846), document0.siblingIndex());
      assertEquals("`?G|E$", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document2.hasParent());
      assertEquals((-3846), document2.siblingIndex());
      assertEquals("`?G|E$", document2.baseUri());
      assertEquals("`?G|E$", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "'D[i$7GPNR|v");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document0.location());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      
      Element element1 = element0.addClass("'D[i$7GPNR|v");
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("'D[i$7GPNR|v", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000045", "M%.40WT^");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("M%.40WT^", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("M%.40WT^", document0.location());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.prependElement("M%.40WT^");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("M%.40WT^", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("M%.40WT^", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("M%.40WT^", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("m%.40wt^", element0.tagName());
      assertEquals("m%.40wt^", element0.nodeName());
      
      Element element1 = element0.addClass(":matchText");
      assertNotNull(element1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("M%.40WT^", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("M%.40WT^", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("M%.40WT^", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("m%.40wt^", element0.tagName());
      assertEquals("m%.40wt^", element0.nodeName());
      assertEquals("M%.40WT^", element1.baseUri());
      assertEquals("m%.40wt^", element1.nodeName());
      assertEquals("m%.40wt^", element1.tagName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'D[i$7GPNR|v", "'D[i$7GPNR|v");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("'D[i$7GPNR|v", document0.location());
      
      Document document1 = (Document)document0.appendChild(document0);
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("'D[i$7GPNR|v", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      document1.wrap("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("type", "type");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("type", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("type", "type");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals("type", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals("type", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("type", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.parentNode = (Node) document0;
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals("type", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("type", document1.baseUri());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.parentNode.hasParent());
      assertEquals(0, document1.parentNode.siblingIndex());
      
      // Undeclared exception!
      document1.val("lmqmr+ot&mk4f|");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Document.createShell("ELB -L'/%Lv8aMA4");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ELB -L'/%Lv8aMA4", document0.location());
      assertEquals("ELB -L'/%Lv8aMA4", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.settings((ParseSettings) null);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document1 = document0.parser(parser1);
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ELB -L'/%Lv8aMA4", document0.location());
      assertEquals("ELB -L'/%Lv8aMA4", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("ELB -L'/%Lv8aMA4", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("ELB -L'/%Lv8aMA4", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        document0.val("xEen1U");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("type", "type");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("type", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = new Document("'D[i$7GPNR|v");
      assertNotNull(document0);
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.text("'D[i$7GPNR|v");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`?G|E$", "`?G|E$");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("`?G|E$", document0.location());
      assertEquals("`?G|E$", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse("type", "org.jsoup.nodes.Element$NodeList");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document1 = document0.parser(parser0);
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.location());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.parentNode = (Node) document0;
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertTrue(document1.parentNode.hasParent());
      
      // Undeclared exception!
      document0.tagName("br");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      
      Document document1 = (Document)document0.removeClass("Insert position out of bounds.");
      assertNotNull(document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document1.head();
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.parentNode = (Node) element0;
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals("", document1.baseUri());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element0.tagName());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertTrue(document1.parentNode.hasParent());
      
      // Undeclared exception!
      try { 
        document1.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parse("\"et", "\"et");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("\"et", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\"et", document0.baseUri());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.selectFirst("Children collection to be inserted must not be null.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parse("lMQmR+oT&MK4|", "lMQmR+oT&MK4|");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("lMQmR+oT&MK4|", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("type", "org.jsoup.nodes.Element$NodeList");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parse("\"et", "\"et");
      assertNotNull(document0);
      assertEquals("\"et", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("\"et", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("i;wV:GS3X{Z}nn)Ka[", "i;wV:GS3X{Z}nn)Ka[");
      assertNotNull(document0);
      assertEquals("i;wV:GS3X{Z}nn)Ka[", document0.location());
      assertEquals("i;wV:GS3X{Z}nn)Ka[", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      CDataNode cDataNode0 = new CDataNode("i;wV:GS3X{Z}nn)Ka[");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      document0.parentNode = (Node) cDataNode0;
      assertEquals("i;wV:GS3X{Z}nn)Ka[", document0.location());
      assertEquals("i;wV:GS3X{Z}nn)Ka[", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertFalse(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("type", "type");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("type", document1.location());
      assertEquals("type", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.parentNode = (Node) document0;
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("type", document0.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("type", document1.location());
      assertEquals("type", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertTrue(document1.parentNode.hasParent());
      
      // Undeclared exception!
      document0.prependElement("type");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Tag tag0 = Tag.valueOf("basefot");
      assertNotNull(tag0);
      assertEquals("basefot", tag0.getName());
      assertEquals("basefot", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      
      Element element0 = new Element(tag0, "basefot");
      assertNotNull(element0);
      assertEquals("basefot", tag0.getName());
      assertEquals("basefot", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertEquals("basefot", element0.baseUri());
      assertEquals("basefot", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("basefot", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      // Undeclared exception!
      try { 
        element0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.parser.Token$Tag");
      assertNotNull(tag0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertEquals("org.jsoup.parser.Token$Tag", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", tag0.toString());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "#", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertEquals("org.jsoup.parser.Token$Tag", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("#", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Tag", formElement0.nodeName());
      
      CDataNode cDataNode0 = new CDataNode((String) null);
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Node node0 = cDataNode0.doClone(formElement0);
      assertNotNull(node0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertEquals("org.jsoup.parser.Token$Tag", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.parser.Token$Tag", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("#", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals("org.jsoup.parser.Token$Tag", formElement0.tagName());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("org.jsoup.parser.Token$Tag", formElement0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertEquals(0, node0.siblingIndex());
      assertTrue(node0.hasParent());
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertFalse(node0.equals((Object)cDataNode0));
      
      // Undeclared exception!
      try { 
        formElement0.prependChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/>g", "/>g");
      assertNotNull(document0);
      assertEquals("/>g", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/>g", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("type", "type");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("type", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("type", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("type", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("type", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.parentNode = (Node) document0;
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("type", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("type", document1.location());
      assertEquals("type", document1.baseUri());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertTrue(document1.parentNode.hasParent());
      
      // Undeclared exception!
      document1.prepend("type");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = new Document("&C}");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("&C}", document0.location());
      assertEquals("&C}", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      
      List<Node> list0 = Parser.parseXmlFragment("&C}", "+hL, H_,W!8");
      assertNotNull(list0);
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      
      document0.childNodes = list0;
      assertFalse(document0.hasParent());
      assertEquals("&C}", document0.location());
      assertEquals("&C}", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, document0.childNodes.size());
      assertFalse(document0.childNodes.isEmpty());
      
      // Undeclared exception!
      try { 
        document0.prepend("&C}");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("lMQmR+oT&MK4-v|", "lMQmR+oT&MK4-v|");
      assertNotNull(document0);
      assertEquals("lMQmR+oT&MK4-v|", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("lMQmR+oT&MK4-v|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Element element0 = new Element("basefont");
      assertNotNull(element0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("basefont", element0.nodeName());
      assertEquals("basefont", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      
      DocumentType documentType0 = new DocumentType("85}qmaIS", "basefont", "java.lang.string@0000000055", "8^1_~2|fvJ", "&U:h0IW");
      assertNotNull(documentType0);
      assertEquals("#doctype", documentType0.nodeName());
      assertFalse(documentType0.hasParent());
      assertEquals(0, documentType0.siblingIndex());
      
      element0.setParentNode(documentType0);
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("basefont", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("basefont", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#doctype", documentType0.nodeName());
      assertFalse(documentType0.hasParent());
      assertEquals(0, documentType0.siblingIndex());
      
      // Undeclared exception!
      try { 
        element0.prepend("basefont");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("lMQmR+oT&MK4-v|", "lMQmR+oT&MK4-v|");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("lMQmR+oT&MK4-v|", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("lMQmR+oT&MK4-v|", document0.location());
      assertFalse(document0.hasParent());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1360);
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1360, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1360, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      // Undeclared exception!
      document0.outerHtmlTail(charArrayWriter0, 1360, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("textarea", "java.lang.string@0000000077");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(0, charBuffer0.position());
      assertEquals(1, charBuffer0.limit());
      assertFalse(charBuffer0.isReadOnly());
      assertTrue(charBuffer0.hasRemaining());
      assertFalse(charBuffer0.isDirect());
      assertEquals("\u0000", charBuffer0.toString());
      assertEquals(1, charBuffer0.length());
      assertEquals(1, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(1, charBuffer0.capacity());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(1, charArray0.length);
      assertArrayEquals(new char[] {'\u0000'}, charArray0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 6, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/>g", "/>g");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("/>g", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/>g", document0.location());
      assertEquals("#document", document0.nodeName());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charArrayWriter0, 0, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000045", "IVvr");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("IVvr", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("IVvr", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("org.jsoup.nodes.Entities$1");
      assertNotNull(mockPrintStream0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintStream0, (-4162), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Element element0 = new Element("`");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("`", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("`", element0.nodeName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      try { 
        element0.outerHtmlTail(pipedWriter0, 5944, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Element element0 = new Element("1@0nVhW?hh");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      assertNotNull(byteArrayOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      assertNotNull(dataOutputStream0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(dataOutputStream0);
      assertNotNull(outputStreamWriter0);
      assertEquals(0, byteArrayOutputStream0.size());
      assertEquals("", byteArrayOutputStream0.toString());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(120);
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(120, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(120, document_OutputSettings1.indentAmount());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      // Undeclared exception!
      element0.outerHtmlHead(outputStreamWriter0, 120, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pe&</F=IF", "pe&</F=IF");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("pe&</F=IF", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("pe&</F=IF", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      StringBuffer stringBuffer0 = new StringBuffer("pe&</F=IF");
      assertNotNull(stringBuffer0);
      assertEquals("pe&</F=IF", stringBuffer0.toString());
      assertEquals(10, stringBuffer0.length());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringBuffer0, 0, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = new Document("noresize");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("noresize", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("noresize", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charArrayWriter0, (-1625949436), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Element element0 = new Element("basefont");
      assertNotNull(element0);
      assertEquals("basefont", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("basefont", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      try { 
        element0.outerHtmlHead(pipedWriter0, 53, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.stringk0000000045 java.lang.stringk0000000045", "java.lang.stringk0000000045 java.lang.stringk0000000045");
      assertNotNull(document0);
      assertEquals("java.lang.stringk0000000045 java.lang.stringk0000000045", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("java.lang.stringk0000000045 java.lang.stringk0000000045", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Comment comment0 = new Comment("java.lang.stringk0000000045 java.lang.stringk0000000045");
      assertNotNull(comment0);
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      
      Document document1 = (Document)document0.doClone(comment0);
      assertNotNull(document1);
      assertEquals("java.lang.stringk0000000045 java.lang.stringk0000000045", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("java.lang.stringk0000000045 java.lang.stringk0000000045", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("java.lang.stringk0000000045 java.lang.stringk0000000045", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("java.lang.stringk0000000045 java.lang.stringk0000000045", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      // Undeclared exception!
      try { 
        document1.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("String must not be empty", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("String must not be empty", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "'D[i$7GPNR|v");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parse("MQR+oT&MK4|", "MQR+oT&MK4|");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("MQR+oT&MK4|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("MQR+oT&MK4|", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.is(" >\"");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '\"': unexpected token at '\"'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("type", "type");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals("type", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals("type", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("type", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("type", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.parentNode = (Node) document0;
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals("type", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("type", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("type", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertTrue(document1.parentNode.hasParent());
      assertEquals(0, document1.parentNode.siblingIndex());
      
      // Undeclared exception!
      document0.is("class");
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".}X%Aw4:VJ8O^");
      assertNotNull(tag0);
      assertEquals(".}X%Aw4:VJ8O^", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals(".}X%Aw4:VJ8O^", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      
      CDataNode cDataNode0 = new CDataNode("");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, ".}X%Aw4:VJ8O^", attributes0);
      assertNotNull(formElement0);
      assertEquals(".}X%Aw4:VJ8O^", tag0.getName());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertEquals(".}X%Aw4:VJ8O^", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(".}X%Aw4:VJ8O^", formElement0.nodeName());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals(".}X%Aw4:VJ8O^", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(".}X%Aw4:VJ8O^", formElement0.tagName());
      
      Document document0 = Parser.parse(".}X%Aw4:VJ8O^", ".}X%Aw4:VJ8O^");
      assertNotNull(document0);
      assertEquals(".}X%Aw4:VJ8O^", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(".}X%Aw4:VJ8O^", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) formElement0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) cDataNode0;
      nodeArray0[5] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("type", "type");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("type", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("type", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.parentNode = (Node) document0;
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("type", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("type", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertTrue(document1.parentNode.hasParent());
      
      // Undeclared exception!
      document0.html("type");
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = new Document("?}x E9\"*g&");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("?}x E9\"*g&", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("?}x E9\"*g&", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parse("type", "org.jsoup.nodes.Element$NodeList");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("type", "org.jsoup.nodes.Element$NodeList");
      assertNotNull(document0);
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document1 = document0.parser(parser0);
      assertNotNull(document1);
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.location());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.parentNode = (Node) document0;
      assertTrue(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(parser0.isTrackErrors());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertTrue(document1.parentNode.hasParent());
      
      // Undeclared exception!
      document0.html((StringWriter) null);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("w__4|E$", "w__4|E$");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("w__4|E$", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("w__4|E$", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertNotNull(charBuffer0);
      assertEquals(8, charBuffer0.remaining());
      assertTrue(charBuffer0.hasArray());
      assertEquals(8, charBuffer0.capacity());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertEquals(8, charBuffer0.length());
      assertEquals(8, charBuffer0.limit());
      assertEquals(0, charBuffer0.arrayOffset());
      assertFalse(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.isDirect());
      assertEquals(0, charBuffer0.position());
      assertEquals(8, charArray0.length);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parse("idj?!ll!#", "idj?!ll!#");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("idj?!ll!#", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("idj?!ll!#", document0.location());
      assertEquals("#document", document0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.html((PipedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`?G8B$", "`?G8B$");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`?G8B$", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("`?G8B$", document0.location());
      
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`?G8B$", document0.baseUri());
      assertEquals("`?G8B$", document0.location());
      assertEquals(4, nodeArray0.length);
      
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Document.createShell("`?G|E$");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("`?G|E$", document0.location());
      assertEquals("`?G|E$", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.appendElement("cd");
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("`?G|E$", document0.location());
      assertEquals("`?G|E$", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("`?G|E$", element0.baseUri());
      assertEquals("cd", element0.tagName());
      assertEquals("cd", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      
      List<Node> list0 = document0.childNodesCopy();
      assertNotNull(list0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("`?G|E$", document0.location());
      assertEquals("`?G|E$", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      element0.childNodes = list0;
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("`?G|E$", document0.location());
      assertEquals("`?G|E$", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, element0.childNodeSize());
      assertEquals("`?G|E$", element0.baseUri());
      assertEquals("cd", element0.tagName());
      assertEquals("cd", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(2, element0.childNodes.size());
      assertFalse(element0.childNodes.isEmpty());
      
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parse("gA,AyK?N2O<*2(!", "gA,AyK?N2O<*2(!");
      assertNotNull(document0);
      assertEquals("gA,AyK?N2O<*2(!", document0.location());
      assertEquals("gA,AyK?N2O<*2(!", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      CDataNode cDataNode0 = new CDataNode((String) null);
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      document0.setParentNode(cDataNode0);
      assertEquals("gA,AyK?N2O<*2(!", document0.location());
      assertEquals("gA,AyK?N2O<*2(!", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">XiFh\"m2'G`NmQ'I", "}2[5fS");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("}2[5fS", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("}2[5fS", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("}2[5fS", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("}2[5fS", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("}2[5fS", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      
      element0.setSiblingIndex((-3020));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("}2[5fS", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("}2[5fS", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals((-3020), element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("}2[5fS", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'D[i$7GPNR|v", "textarea");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("basfont", parseSettings0);
      assertNotNull(tag0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertEquals("basfont", tag0.toString());
      assertEquals("basfont", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      
      Element element0 = new Element(tag0, "PdT:Roa)_l:pq|gd");
      assertNotNull(element0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertEquals("basfont", tag0.toString());
      assertEquals("basfont", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("PdT:Roa)_l:pq|gd", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("basfont", element0.tagName());
      assertEquals("basfont", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parse("csascii", "org.jsoup.nodes.Element$2");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$2", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$2", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "'D[i$7GPNR|v");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("'D[i$7GPNR|v");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 'D[i$7GPNR|v
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("basefont", "basefont");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("basefont", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("basefont", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      CDataNode cDataNode0 = new CDataNode("basefont");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      
      document0.setParentNode(cDataNode0);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("basefont", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("basefont", document0.location());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("basefont");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = new Document("h");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("h", document0.location());
      assertEquals("h", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.appendElement("h");
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("h", document0.location());
      assertEquals("h", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("h", element0.baseUri());
      assertEquals("h", element0.tagName());
      assertEquals("h", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      
      element0.setSiblingIndex((-777));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("h", document0.location());
      assertEquals("h", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("h", element0.baseUri());
      assertEquals((-777), element0.siblingIndex());
      assertEquals("h", element0.tagName());
      assertEquals("h", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText("\"");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6type", "6type");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("6type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6type", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Document.createShell("type");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("3z%:(X1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 3z%:(X1
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parse("`", "`");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("`", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("`", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("`", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("`", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.siblingIndex = (-2320);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("`", document0.location());
      assertEquals((-2320), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals((-2320), document1.siblingIndex());
      assertEquals("`", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("`", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      
      document1.parentNode = (Node) document1;
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("`", document0.location());
      assertEquals((-2320), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals((-2320), document1.siblingIndex());
      assertEquals("`", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("`", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals((-2320), document1.parentNode.siblingIndex());
      assertTrue(document1.parentNode.hasParent());
      
      // Undeclared exception!
      try { 
        document1.getElementsMatchingOwnText("`");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Document.createShell("`?G|E$");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("`?G|E$", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`?G|E$", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.appendElement("cd");
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("`?G|E$", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`?G|E$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("cd", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("`?G|E$", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("cd", element0.tagName());
      assertFalse(element0.isBlock());
      
      List<Node> list0 = document0.childNodesCopy();
      assertNotNull(list0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("`?G|E$", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`?G|E$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      
      element0.childNodes = list0;
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("`?G|E$", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("`?G|E$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("cd", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("`?G|E$", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("cd", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(list0.isEmpty());
      assertEquals(2, list0.size());
      assertEquals(2, element0.childNodes.size());
      assertFalse(element0.childNodes.isEmpty());
      
      // Undeclared exception!
      try { 
        element0.getElementsContainingOwnText("F-gMc:$ZEVMV8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("p7*CsnZF%x%W^> ;#", "p7*CsnZF%x%W^> ;#");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("p7*CsnZF%x%W^> ;#", document0.baseUri());
      assertEquals("p7*CsnZF%x%W^> ;#", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = document0.prependElement("dl");
      assertNotNull(element0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("p7*CsnZF%x%W^> ;#", document0.baseUri());
      assertEquals("p7*CsnZF%x%W^> ;#", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("p7*CsnZF%x%W^> ;#", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("dl", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("dl", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      
      element0.siblingIndex = (int) (byte) (-62);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("p7*CsnZF%x%W^> ;#", document0.baseUri());
      assertEquals("p7*CsnZF%x%W^> ;#", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("p7*CsnZF%x%W^> ;#", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("dl", element0.tagName());
      assertEquals((-62), element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("dl", element0.nodeName());
      assertTrue(element0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("p7*CsnZF%x%W^> ;#");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "");
      assertNotNull(document0);
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">XiFh\"m2'G`NmQ'I", "}2[5fS");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("}2[5fS", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("}2[5fS", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("}2[5fS", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("}2[5fS", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("}2[5fS", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      
      element0.setSiblingIndex((-3020));
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("}2[5fS", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("}2[5fS", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("}2[5fS", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals((-3020), element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.getElementsByTag("java.lang.string@0000000077");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot((String) null, "f\" miZ[E}7] ^iam?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[.S/{");
      assertNotNull(tag0);
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("[.S/{", tag0.toString());
      assertEquals("[.S/{", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      
      Element element0 = new Element(tag0, "XU<SWF\"D&J0TaA", (Attributes) null);
      assertNotNull(element0);
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("[.S/{", tag0.toString());
      assertEquals("[.S/{", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("XU<SWF\"D&J0TaA", element0.baseUri());
      assertEquals("[.S/{", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("[.S/{", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      
      element0.childNodes = null;
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("[.S/{", tag0.toString());
      assertEquals("[.S/{", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("XU<SWF\"D&J0TaA", element0.baseUri());
      assertEquals("[.S/{", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("[.S/{", element0.nodeName());
      
      Pattern pattern0 = Pattern.compile("[.S/{", 65535);
      assertNotNull(pattern0);
      assertEquals(65535, pattern0.flags());
      assertEquals("[.S/{", pattern0.pattern());
      assertEquals("[.S/{", pattern0.toString());
      
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("XU<SWF\"D&J0TaA", pattern0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parse("pe&</F=IF", "");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching((String) null, "[j`|jDD_zK=G2.4");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: [j`|jDD_zK=G2.4
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Document.createShell("`?G|E$");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("`?G|E$", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("`?G|E$", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.appendElement("cd");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("`?G|E$", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("`?G|E$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("cd", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("cd", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("`?G|E$", element0.baseUri());
      
      List<Node> list0 = document0.childNodesCopy();
      assertNotNull(list0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("`?G|E$", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("`?G|E$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      
      element0.childNodes = list0;
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("`?G|E$", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("`?G|E$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, element0.childNodeSize());
      assertEquals("cd", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("cd", element0.tagName());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("`?G|E$", element0.baseUri());
      assertEquals(2, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(element0.childNodes.isEmpty());
      assertEquals(2, element0.childNodes.size());
      
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueEnding("`?G|E$", "cd");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".}X%Aw4:VJ8O^");
      assertNotNull(tag0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(".}X%Aw4:VJ8O^", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals(".}X%Aw4:VJ8O^", tag0.getName());
      
      CDataNode cDataNode0 = new CDataNode("");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, ".}X%Aw4:VJ8O^", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(".}X%Aw4:VJ8O^", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals(".}X%Aw4:VJ8O^", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(".}X%Aw4:VJ8O^", formElement0.nodeName());
      assertEquals(".}X%Aw4:VJ8O^", formElement0.tagName());
      assertEquals(".}X%Aw4:VJ8O^", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueEnding("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parse("\"et", "\"et");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("\"et", document0.location());
      assertEquals("\"et", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("\"et", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = new Document("");
      assertNotNull(document0);
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Document.createShell("Tgxom1");
      assertNotNull(document0);
      assertEquals("Tgxom1", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tgxom1", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parse("lMQmR+oT&MK4F|", "lMQmR+oT&MK4F|");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("lMQmR+oT&MK4F|", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("lMQmR+oT&MK4F|", document0.baseUri());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.stringk0000000045 java.lang.stringk0000000045", "java.lang.stringk0000000045 java.lang.stringk0000000045");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("java.lang.stringk0000000045 java.lang.stringk0000000045", document0.location());
      assertEquals("java.lang.stringk0000000045 java.lang.stringk0000000045", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Comment comment0 = new Comment("java.lang.stringk0000000045 java.lang.stringk0000000045");
      assertNotNull(comment0);
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      
      Document document1 = (Document)document0.doClone(comment0);
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("java.lang.stringk0000000045 java.lang.stringk0000000045", document0.location());
      assertEquals("java.lang.stringk0000000045 java.lang.stringk0000000045", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("java.lang.stringk0000000045 java.lang.stringk0000000045", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("java.lang.stringk0000000045 java.lang.stringk0000000045", document1.location());
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      NodeFilter.FilterResult nodeFilter_FilterResult0 = NodeFilter.FilterResult.CONTINUE;
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn(nodeFilter_FilterResult0, (NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).tail(any(org.jsoup.nodes.Node.class) , anyInt());
      Document document2 = (Document)document1.filter(nodeFilter0);
      assertNotNull(document2);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("java.lang.stringk0000000045 java.lang.stringk0000000045", document0.location());
      assertEquals("java.lang.stringk0000000045 java.lang.stringk0000000045", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("java.lang.stringk0000000045 java.lang.stringk0000000045", document1.baseUri());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("java.lang.stringk0000000045 java.lang.stringk0000000045", document1.location());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("java.lang.stringk0000000045 java.lang.stringk0000000045", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals("java.lang.stringk0000000045 java.lang.stringk0000000045", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertTrue(document2.hasParent());
      assertEquals(1, document2.childNodeSize());
      assertNotSame(document0, document2);
      assertNotSame(document0, document1);
      assertSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      // Undeclared exception!
      try { 
        document2.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "'D[i$7GPNR|v");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      
      Element element1 = element0.toggleClass("'D[i$7GPNR|v");
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("'D[i$7GPNR|v", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'body.java.lang.String@0000000054': unexpected token at '@0000000054'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", "&_]BHmO!>BN!=");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("&_]BHmO!>BN!=", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("&_]BHmO!>BN!=", document0.baseUri());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("M<Fg$4oz37rPm-<4$V", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("M<Fg$4oz37rPm-<4$V", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("M<Fg$4oz37rPm-<4$V", tag0.getName());
      
      CDataNode cDataNode0 = new CDataNode("w6");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "M<Fg$4oz37rPm-<4$V", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("M<Fg$4oz37rPm-<4$V", tag0.toString());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("M<Fg$4oz37rPm-<4$V", tag0.getName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals("M<Fg$4oz37rPm-<4$V", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals("M<Fg$4oz37rPm-<4$V", formElement0.baseUri());
      assertEquals("M<Fg$4oz37rPm-<4$V", formElement0.nodeName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      
      // Undeclared exception!
      try { 
        formElement0.child(96);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 96, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "b_Eo*+%yqEH");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("b_Eo*+%yqEH", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("b_Eo*+%yqEH", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.child((-2409));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parse("pe&</F=IF", "pe&</F=IF");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("pe&</F=IF", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("pe&</F=IF", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      document0.setParentNode(document0);
      assertEquals("pe&</F=IF", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("pe&</F=IF", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      document0.before("br");
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "'D[i$7GPNR|v");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("'D[i$7GPNR|v", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("type", "type");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.location());
      
      Document document1 = (Document)document0.appendTo(document0);
      assertNotNull(document1);
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("type", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("type", document1.location());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("type", document1.baseUri());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      document0.attr("tag name must not be empty.", "*=");
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">qV7P18;8:>~YI1>", "R");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("R", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("R", document0.baseUri());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.attr((String) null, "R");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Element element0 = new Element("basefont");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertEquals("basefont", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("basefont", element0.tagName());
      
      List<Node> list0 = element0.childNodes();
      assertNotNull(list0);
      assertFalse(element0.isBlock());
      assertEquals("basefont", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("basefont", element0.tagName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      
      element0.childNodes = list0;
      assertFalse(element0.isBlock());
      assertEquals("basefont", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("basefont", element0.tagName());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertEquals(0, element0.childNodes.size());
      assertTrue(element0.childNodes.isEmpty());
      
      // Undeclared exception!
      try { 
        element0.appendTo(element0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("T38Y}*k@Ua", "NfnbrI7:MP<;\u0003k");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("NfnbrI7:MP<;\u0003k", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("NfnbrI7:MP<;\u0003k", document0.location());
      
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")", ")");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(")", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(")", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      document0.addChildren(nodeArray0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(")", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.siblingIndex());
      assertEquals(")", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals(8, nodeArray0.length);
      
      // Undeclared exception!
      document0.appendElement("%^");
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Document document0 = parser0.parseInput(":Patchext", "SA");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("SA", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("SA", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      List<Node> list0 = Parser.parseXmlFragment("SA", ":Patchext");
      assertNotNull(list0);
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      
      document0.childNodes = list0;
      assertFalse(parser0.isTrackErrors());
      assertEquals("SA", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("SA", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(1, document0.childNodes.size());
      assertFalse(document0.childNodes.isEmpty());
      
      // Undeclared exception!
      try { 
        document0.appendElement(":Patchext");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      document0.childNodes = null;
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$1", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.appendElement("org.jsoup.nodes.Element$1");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element$NodeList");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      
      cDataNode0.parentNode = (Node) cDataNode0;
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertTrue(cDataNode0.hasParent());
      assertTrue(cDataNode0.parentNode.hasParent());
      assertEquals(0, cDataNode0.parentNode.siblingIndex());
      
      Element element0 = new Element("SJ4G ");
      assertNotNull(element0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("SJ4G", element0.nodeName());
      assertEquals("SJ4G", element0.tagName());
      
      // Undeclared exception!
      try { 
        element0.appendChild(cDataNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Element element0 = new Element("Qd");
      assertNotNull(element0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("Qd", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Qd", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      
      CDataNode cDataNode0 = new CDataNode("org.jsoup.parser.tokenqueue");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      Node node0 = cDataNode0.doClone(element0);
      assertNotNull(node0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("Qd", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Qd", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertTrue(node0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertFalse(node0.equals((Object)cDataNode0));
      
      // Undeclared exception!
      try { 
        element0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000066 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 article iso_646.irv:1991 iso646-us ibm367 646 us", "qm\"M45[u&E^");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("qm\"M45[u&E^", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("qm\"M45[u&E^", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parse("type", "org.jsoup.nodes.Element$NodeList");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.parser((Parser) null);
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.location());
      assertEquals("#document", document1.nodeName());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.parentNode = (Node) document0;
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertTrue(document1.parentNode.hasParent());
      
      // Undeclared exception!
      document1.append(",1IdjXAmb");
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("Dk4e>\"<?ats6[o8i]", "Dk4e>\"<?ats6[o8i]");
      assertNotNull(document0);
      assertEquals("Dk4e>\"<?ats6[o8i]", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Dk4e>\"<?ats6[o8i]", document0.location());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Comment comment0 = new Comment("'f'y(g~*f{h4p)?han");
      assertNotNull(comment0);
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      assertNotNull(xmlDeclaration0);
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      
      document0.parentNode = (Node) xmlDeclaration0;
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals("Tag name must not be empty.", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      
      // Undeclared exception!
      try { 
        document0.append("Tag name must not be empty.");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = new Document("o&4");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.childNodeSize());
      assertEquals("o&4", document0.location());
      assertEquals("o&4", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("o&4", document0.location());
      assertEquals("o&4", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("o&4", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("o&4", document1.baseUri());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.parentNode = (Node) document0;
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("o&4", document0.location());
      assertEquals("o&4", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("o&4", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("o&4", document1.baseUri());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertTrue(document1.parentNode.hasParent());
      
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("type", "type");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("type", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("type", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      document1.parentNode = (Node) document0;
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("type", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("type", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertTrue(document1.parentNode.hasParent());
      
      // Undeclared exception!
      document1.after("type");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[7S2'{IZ", "`");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("`", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("`", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.appendElement("`");
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("`", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("`", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("`", element0.tagName());
      assertEquals("`", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("`", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      
      Document document1 = (Document)document0.empty();
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("`", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("`", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("`", document1.location());
      assertEquals("`", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      // Undeclared exception!
      try { 
        element0.after(">|[)xw}OXK)ve-Ot");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(" > ", document0.location());
      assertEquals(" > ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      
      CDataNode cDataNode0 = new CDataNode(" > ");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      
      document0.parentNode = (Node) cDataNode0;
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(" > ", document0.location());
      assertEquals(" > ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      
      // Undeclared exception!
      try { 
        document0.after("org.jsoup.select.Evaluator$IsNthChild");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("'t#5O@#oM", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("'t#5o@#om", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("'t#5o@#om", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      
      Element element0 = new Element(tag0, "'t#5O@#oM");
      assertNotNull(element0);
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("'t#5o@#om", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertEquals("'t#5o@#om", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("'t#5o@#om", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("'t#5O@#oM", element0.baseUri());
      assertEquals("'t#5o@#om", element0.nodeName());
      
      // Undeclared exception!
      try { 
        element0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "type");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("String must not be empty", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("String must not be empty", document0.location());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.appendElement("cd");
      assertNotNull(element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("String must not be empty", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("String must not be empty", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("cd", element0.nodeName());
      assertEquals("String must not be empty", element0.baseUri());
      assertEquals("cd", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      
      BufferedWriter bufferedWriter0 = element0.html((BufferedWriter) null);
      assertNull(bufferedWriter0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("String must not be empty", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("String must not be empty", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("cd", element0.nodeName());
      assertEquals("String must not be empty", element0.baseUri());
      assertEquals("cd", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parse("`?G|E$", "`?G|E$");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("`?G|E$", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("`?G|E$", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = document0.hasClass("`?G|E$");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("`?G|E$", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("`?G|E$", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parse("lMQmR+oT&MK4|", "lMQmR+oT&MK4|");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("lMQmR+oT&MK4|", document0.location());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.prependText(">F6<>u9O");
      assertNotNull(document1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("lMQmR+oT&MK4|", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("lMQmR+oT&MK4|", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertEquals("lMQmR+oT&MK4|", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("lMQmR+oT&MK4|", document0.location());
      assertFalse(document0.hasParent());
      assertSame(document0, document1);
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.prependText("");
      assertNotNull(document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasText();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertSame(document0, document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      
      boolean boolean0 = element0.hasText();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Insert position out of bounds.", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'d[i$7gpnr|v", "'D[4$7GPNR|L");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("'D[4$7GPNR|L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("'D[4$7GPNR|L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      int int0 = document0.elementSiblingIndex();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("'D[4$7GPNR|L", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("'D[4$7GPNR|L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parse("pe&</F=IF", "");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.createElement("pe&</F=IF");
      assertNotNull(element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("pe&</F=IF", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("pe&</F=IF", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      
      Document document1 = (Document)document0.appendTo(element0);
      assertNotNull(document1);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals("pe&</F=IF", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("pe&</F=IF", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element1 = document0.previousElementSibling();
      assertNull(element1);
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000066 cp367 csascii iso-ir-6 #root iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us", "java.lang.string@0000000066 cp367 csascii iso-ir-6 #root iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = element0.previousElementSibling();
      assertNotNull(element1);
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ype", "ype");
      assertNotNull(document0);
      assertEquals("ype", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("ype", document0.location());
      
      Document document1 = Document.createShell("ype");
      assertNotNull(document1);
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ype", document1.baseUri());
      assertEquals("ype", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      document1.parentNode = (Node) document0;
      assertEquals("ype", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("ype", document0.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ype", document1.baseUri());
      assertEquals("ype", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.parentNode.siblingIndex());
      assertFalse(document1.parentNode.hasParent());
      
      Element element0 = document1.nextElementSibling();
      assertNull(element0);
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("ype", document1.baseUri());
      assertEquals("ype", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("type", "type");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.head();
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("type", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      
      Element element1 = element0.html("type");
      assertNotNull(element1);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("type", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("type", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parse("pe&</F=IF", "");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Attributes attributes0 = document0.attributes();
      assertNotNull(attributes0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, attributes0.size());
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = new Document(")");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(")", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")", document0.baseUri());
      
      String string0 = document0.className();
      assertNotNull(string0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(")", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")", document0.baseUri());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Pattern pattern0 = Pattern.compile("", 3252);
      assertNotNull(pattern0);
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertEquals(3252, pattern0.flags());
      
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertEquals("", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", pattern0.toString());
      assertEquals("", pattern0.pattern());
      assertEquals(3252, pattern0.flags());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$NodeList", "idj?!ll!#");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("idj?!ll!#", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("idj?!ll!#", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      
      String string0 = document0.ownText();
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("idj?!ll!#", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("idj?!ll!#", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Document.createShell("idj?!ll!#");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("idj?!ll!#", document0.location());
      assertEquals("idj?!ll!#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      boolean boolean0 = document0.isBlock();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("idj?!ll!#", document0.location());
      assertEquals("idj?!ll!#", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Element element0 = new Element("command");
      assertNotNull(element0);
      assertEquals("command", element0.nodeName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("command", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      
      Document document0 = Parser.parseBodyFragment("Qc;6%8|o5R4h", "?CL<");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("?CL<", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("?CL<", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Element element1 = element0.prependChild(document0);
      assertNotNull(element1);
      assertEquals("command", element0.nodeName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("command", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("?CL<", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("?CL<", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("command", element1.nodeName());
      assertEquals("command", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Document.createShell("idj?!ll!#");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("idj?!ll!#", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("idj?!ll!#", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      String string0 = document0.text();
      assertNotNull(string0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("idj?!ll!#", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("idj?!ll!#", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "java.lang.string@0000000045");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      String string0 = document0.id();
      assertNotNull(string0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parse("pe&</F=IF", "");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Set<String> set0 = document0.classNames();
      assertFalse(set0.contains(""));
      assertNotNull(set0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Element element0 = new Element("basefont");
      assertNotNull(element0);
      assertEquals("basefont", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("basefont", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      
      Element element1 = element0.prepend("basefont");
      assertNotNull(element1);
      assertEquals("basefont", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("basefont", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("basefont", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("basefont", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      String string0 = element1.toString();
      assertNotNull(string0);
      assertEquals("basefont", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("basefont", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals("basefont", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("basefont", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("<basefont>basefont</basefont>", string0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "G");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("G", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(43);
      assertNotNull(charArrayWriter0);
      assertEquals("", charArrayWriter0.toString());
      assertEquals(0, charArrayWriter0.size());
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertNotNull(document_OutputSettings1);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      document0.outerHtmlTail(charArrayWriter0, 43, document_OutputSettings1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("G", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("G", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("</#root>", charArrayWriter0.toString());
      assertEquals(8, charArrayWriter0.size());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Element element0 = new Element("basefont");
      assertNotNull(element0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("basefont", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("basefont", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      
      MockFile mockFile0 = new MockFile("basefont");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      assertNotNull(document_OutputSettings1);
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      element0.outerHtmlHead(mockPrintWriter0, (-778), document_OutputSettings0);
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("basefont", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("basefont", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.canExecute());
      assertTrue(mockFile0.isFile());
      assertEquals("basefont", mockFile0.getName());
      assertTrue(mockFile0.canWrite());
      assertFalse(mockFile0.isHidden());
      assertNull(mockFile0.getParent());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertEquals(0L, mockFile0.length());
      assertTrue(mockFile0.exists());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertFalse(mockFile0.isAbsolute());
      assertEquals("basefont", mockFile0.toString());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Document.createShell("c}");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("c}", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("c}", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) " <')", 4, 4);
      assertNotNull(charBuffer0);
      assertTrue(charBuffer0.isReadOnly());
      assertFalse(charBuffer0.hasRemaining());
      assertEquals(4, charBuffer0.position());
      assertEquals(0, charBuffer0.remaining());
      assertEquals(4, charBuffer0.limit());
      assertEquals(0, charBuffer0.length());
      assertEquals(4, charBuffer0.capacity());
      assertEquals("", charBuffer0.toString());
      assertFalse(charBuffer0.hasArray());
      assertFalse(charBuffer0.isDirect());
      
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parse("`?G#|E$", "artle");
      assertNotNull(document0);
      assertEquals("artle", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("artle", document0.location());
      
      Element element0 = document0.appendElement("br");
      assertNotNull(element0);
      assertEquals("artle", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("artle", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("artle", element0.baseUri());
      assertEquals("br", element0.nodeName());
      
      Element element1 = element0.appendElement("basefont");
      assertNotNull(element1);
      assertEquals("artle", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("artle", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("artle", element0.baseUri());
      assertEquals("br", element0.nodeName());
      assertEquals("artle", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("basefont", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("basefont", element1.tagName());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
      
      String string0 = element1.toString();
      assertNotNull(string0);
      assertEquals("artle", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("artle", document0.location());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("artle", element0.baseUri());
      assertEquals("br", element0.nodeName());
      assertEquals("artle", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("basefont", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("basefont", element1.tagName());
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertEquals("<basefont>", string0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parse("`?G#|E$", "artle");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("artle", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("artle", document0.location());
      
      Element element0 = document0.appendElement("br");
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("artle", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("artle", document0.location());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("artle", element0.baseUri());
      assertEquals("br", element0.nodeName());
      
      String string0 = element0.toString();
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("artle", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("artle", document0.location());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("artle", element0.baseUri());
      assertEquals("br", element0.nodeName());
      assertEquals("<br>", string0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Element element0 = new Element("basefont");
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("basefont", element0.nodeName());
      assertEquals("basefont", element0.tagName());
      
      MockFile mockFile0 = new MockFile("basefont");
      assertNotNull(mockFile0);
      
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      assertNotNull(mockPrintWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertNotNull(document_OutputSettings0);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertNotNull(document_OutputSettings1);
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      
      element0.outerHtmlHead(mockPrintWriter0, (-778), document_OutputSettings1);
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("basefont", element0.nodeName());
      assertEquals("basefont", element0.tagName());
      assertEquals("basefont", mockFile0.toString());
      assertFalse(mockFile0.isHidden());
      assertEquals(0L, mockFile0.getUsableSpace());
      assertTrue(mockFile0.canWrite());
      assertEquals(0L, mockFile0.length());
      assertEquals(0L, mockFile0.getFreeSpace());
      assertFalse(mockFile0.isDirectory());
      assertEquals("basefont", mockFile0.getName());
      assertFalse(mockFile0.isAbsolute());
      assertEquals(1392409281320L, mockFile0.lastModified());
      assertNull(mockFile0.getParent());
      assertTrue(mockFile0.canExecute());
      assertEquals(0L, mockFile0.getTotalSpace());
      assertTrue(mockFile0.isFile());
      assertTrue(mockFile0.canRead());
      assertTrue(mockFile0.exists());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      assertNotNull(tag0);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.preserveWhitespace());
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", tag0.getName());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.formatAsBlock());
      
      Element element0 = new Element(tag0, "E");
      assertNotNull(element0);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.preserveWhitespace());
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", tag0.getName());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.formatAsBlock());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.nodeName());
      assertEquals("E", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      
      String string0 = element0.val();
      assertNotNull(string0);
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.preserveWhitespace());
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", tag0.getName());
      assertEquals("textarea", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.formatAsBlock());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("textarea", element0.nodeName());
      assertEquals("E", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000045", "M%.40WT^");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("M%.40WT^", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("M%.40WT^", document0.location());
      
      Document document1 = (Document)document0.addClass("M%.40WT^");
      assertNotNull(document1);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("M%.40WT^", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("M%.40WT^", document0.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("M%.40WT^", document1.baseUri());
      assertEquals("M%.40WT^", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("java.lang.string@0000000045");
      assertNotNull(document2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("M%.40WT^", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("M%.40WT^", document0.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("M%.40WT^", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("M%.40WT^", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      boolean boolean0 = document2.hasClass("java.lang.string@0000000045");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("M%.40WT^", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("M%.40WT^", document0.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("M%.40WT^", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertEquals("M%.40WT^", document2.baseUri());
      assertFalse(document2.updateMetaCharsetElement());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parse("%t9R", "%t9R");
      //  // Unstable assertion: assertNotNull(document0);
      //  // Unstable assertion: assertFalse(document0.isBlock());
      //  // Unstable assertion: assertEquals("#document", document0.nodeName());
      //  // Unstable assertion: assertEquals("#root", document0.tagName());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      //  // Unstable assertion: assertEquals(0, document0.siblingIndex());
      //  // Unstable assertion: assertEquals(1, document0.childNodeSize());
      //  // Unstable assertion: assertEquals("%t9R", document0.location());
      //  // Unstable assertion: assertFalse(document0.updateMetaCharsetElement());
      //  // Unstable assertion: assertFalse(document0.hasParent());
      //  // Unstable assertion: assertEquals("%t9R", document0.baseUri());
      
      Document document1 = (Document)document0.toggleClass("%t9R");
      //  // Unstable assertion: assertNotNull(document1);
      //  // Unstable assertion: assertFalse(document0.isBlock());
      //  // Unstable assertion: assertEquals("#document", document0.nodeName());
      //  // Unstable assertion: assertEquals("#root", document0.tagName());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      //  // Unstable assertion: assertEquals(0, document0.siblingIndex());
      //  // Unstable assertion: assertEquals(1, document0.childNodeSize());
      //  // Unstable assertion: assertEquals("%t9R", document0.location());
      //  // Unstable assertion: assertFalse(document0.updateMetaCharsetElement());
      //  // Unstable assertion: assertFalse(document0.hasParent());
      //  // Unstable assertion: assertEquals("%t9R", document0.baseUri());
      //  // Unstable assertion: assertEquals("#document", document1.nodeName());
      //  // Unstable assertion: assertFalse(document1.isBlock());
      //  // Unstable assertion: assertEquals(0, document1.siblingIndex());
      //  // Unstable assertion: assertFalse(document1.updateMetaCharsetElement());
      //  // Unstable assertion: assertEquals("%t9R", document1.baseUri());
      //  // Unstable assertion: assertEquals(1, document1.childNodeSize());
      //  // Unstable assertion: assertEquals("#root", document1.tagName());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      //  // Unstable assertion: assertFalse(document1.hasParent());
      //  // Unstable assertion: assertEquals("%t9R", document1.location());
      //  // Unstable assertion: assertSame(document0, document1);
      //  // Unstable assertion: assertSame(document1, document0);
      
      Element element0 = document1.prependElement("%t9R");
      //  // Unstable assertion: assertNotNull(element0);
      //  // Unstable assertion: assertFalse(document0.isBlock());
      //  // Unstable assertion: assertEquals("#document", document0.nodeName());
      //  // Unstable assertion: assertEquals("#root", document0.tagName());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      //  // Unstable assertion: assertEquals(0, document0.siblingIndex());
      //  // Unstable assertion: assertEquals("%t9R", document0.location());
      //  // Unstable assertion: assertFalse(document0.updateMetaCharsetElement());
      //  // Unstable assertion: assertEquals(2, document0.childNodeSize());
      //  // Unstable assertion: assertFalse(document0.hasParent());
      //  // Unstable assertion: assertEquals("%t9R", document0.baseUri());
      //  // Unstable assertion: assertEquals("#document", document1.nodeName());
      //  // Unstable assertion: assertFalse(document1.isBlock());
      //  // Unstable assertion: assertEquals(0, document1.siblingIndex());
      //  // Unstable assertion: assertFalse(document1.updateMetaCharsetElement());
      //  // Unstable assertion: assertEquals("%t9R", document1.baseUri());
      //  // Unstable assertion: assertEquals(2, document1.childNodeSize());
      //  // Unstable assertion: assertEquals("#root", document1.tagName());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      //  // Unstable assertion: assertFalse(document1.hasParent());
      //  // Unstable assertion: assertEquals("%t9R", document1.location());
      //  // Unstable assertion: assertEquals("%t9r", element0.nodeName());
      //  // Unstable assertion: assertEquals(0, element0.childNodeSize());
      //  // Unstable assertion: assertEquals(0, element0.siblingIndex());
      //  // Unstable assertion: assertEquals("%t9r", element0.tagName());
      //  // Unstable assertion: assertFalse(element0.isBlock());
      //  // Unstable assertion: assertEquals("%t9R", element0.baseUri());
      //  // Unstable assertion: assertTrue(element0.hasParent());
      //  // Unstable assertion: assertSame(document0, document1);
      //  // Unstable assertion: assertSame(document1, document0);
      
      Document document2 = (Document)document1.addClass("%t9R");
      //  // Unstable assertion: assertNotNull(document2);
      //  // Unstable assertion: assertFalse(document0.isBlock());
      //  // Unstable assertion: assertEquals("#document", document0.nodeName());
      //  // Unstable assertion: assertEquals("#root", document0.tagName());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      //  // Unstable assertion: assertEquals(0, document0.siblingIndex());
      //  // Unstable assertion: assertEquals("%t9R", document0.location());
      //  // Unstable assertion: assertFalse(document0.updateMetaCharsetElement());
      //  // Unstable assertion: assertEquals(2, document0.childNodeSize());
      //  // Unstable assertion: assertFalse(document0.hasParent());
      //  // Unstable assertion: assertEquals("%t9R", document0.baseUri());
      //  // Unstable assertion: assertEquals("#document", document1.nodeName());
      //  // Unstable assertion: assertFalse(document1.isBlock());
      //  // Unstable assertion: assertEquals(0, document1.siblingIndex());
      //  // Unstable assertion: assertFalse(document1.updateMetaCharsetElement());
      //  // Unstable assertion: assertEquals("%t9R", document1.baseUri());
      //  // Unstable assertion: assertEquals(2, document1.childNodeSize());
      //  // Unstable assertion: assertEquals("#root", document1.tagName());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      //  // Unstable assertion: assertFalse(document1.hasParent());
      //  // Unstable assertion: assertEquals("%t9R", document1.location());
      //  // Unstable assertion: assertFalse(document2.isBlock());
      //  // Unstable assertion: assertFalse(document2.hasParent());
      //  // Unstable assertion: assertEquals("%t9R", document2.location());
      //  // Unstable assertion: assertEquals("#root", document2.tagName());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      //  // Unstable assertion: assertEquals(0, document2.siblingIndex());
      //  // Unstable assertion: assertEquals("%t9R", document2.baseUri());
      //  // Unstable assertion: assertFalse(document2.updateMetaCharsetElement());
      //  // Unstable assertion: assertEquals("#document", document2.nodeName());
      //  // Unstable assertion: assertEquals(2, document2.childNodeSize());
      //  // Unstable assertion: assertSame(document0, document1);
      //  // Unstable assertion: assertSame(document0, document2);
      //  // Unstable assertion: assertSame(document1, document0);
      //  // Unstable assertion: assertSame(document1, document2);
      //  // Unstable assertion: assertSame(document2, document0);
      //  // Unstable assertion: assertSame(document2, document1);
      
      boolean boolean0 = document1.hasClass("java.lang.string@0000000055");
      //  // Unstable assertion: assertFalse(document0.isBlock());
      //  // Unstable assertion: assertEquals("#document", document0.nodeName());
      //  // Unstable assertion: assertEquals("#root", document0.tagName());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      //  // Unstable assertion: assertEquals(0, document0.siblingIndex());
      //  // Unstable assertion: assertEquals("%t9R", document0.location());
      //  // Unstable assertion: assertFalse(document0.updateMetaCharsetElement());
      //  // Unstable assertion: assertEquals(2, document0.childNodeSize());
      //  // Unstable assertion: assertFalse(document0.hasParent());
      //  // Unstable assertion: assertEquals("%t9R", document0.baseUri());
      //  // Unstable assertion: assertEquals("#document", document1.nodeName());
      //  // Unstable assertion: assertFalse(document1.isBlock());
      //  // Unstable assertion: assertEquals(0, document1.siblingIndex());
      //  // Unstable assertion: assertFalse(document1.updateMetaCharsetElement());
      //  // Unstable assertion: assertEquals("%t9R", document1.baseUri());
      //  // Unstable assertion: assertEquals(2, document1.childNodeSize());
      //  // Unstable assertion: assertEquals("#root", document1.tagName());
      //  // Unstable assertion: assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      //  // Unstable assertion: assertFalse(document1.hasParent());
      //  // Unstable assertion: assertEquals("%t9R", document1.location());
      //  // Unstable assertion: assertSame(document0, document1);
      //  // Unstable assertion: assertSame(document0, document2);
      //  // Unstable assertion: assertSame(document1, document0);
      //  // Unstable assertion: assertSame(document1, document2);
      //  // Unstable assertion: assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", "`");
      assertNotNull(document0);
      assertEquals("`", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("`", document0.baseUri());
      assertFalse(document0.isBlock());
      
      Document document1 = (Document)document0.addClass("          ");
      assertNotNull(document1);
      assertEquals("`", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("`", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("`", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("`", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("          ");
      assertNotNull(document2);
      assertEquals("`", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("`", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document2.hasParent());
      assertEquals("`", document2.baseUri());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("`", document2.location());
      assertEquals(1, document2.childNodeSize());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      boolean boolean0 = document0.hasClass("          ");
      assertEquals("`", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("`", document0.baseUri());
      assertFalse(document0.isBlock());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000045", "M%.40WT^");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("M%.40WT^", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("M%.40WT^", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.addClass("M%.40WT^");
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("M%.40WT^", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("M%.40WT^", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, document1.siblingIndex());
      assertEquals("M%.40WT^", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals("M%.40WT^", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document0.addClass("java.lang.string@0000000045");
      assertNotNull(document2);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("M%.40WT^", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("M%.40WT^", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("M%.40WT^", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("M%.40WT^", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      
      Document document3 = (Document)document0.toggleClass("java.lang.string@0000000045");
      assertNotNull(document3);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("M%.40WT^", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("M%.40WT^", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("M%.40WT^", document3.location());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("M%.40WT^", document3.baseUri());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertFalse(document3.hasParent());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertSame(document3, document1);
      
      boolean boolean0 = document0.hasClass("java.lang.string@0000000045");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("M%.40WT^", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("M%.40WT^", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parse("lMQmR+oT&MK4|", "lMQmR+oT&MK4|");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("lMQmR+oT&MK4|", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.toggleClass("lMQmR+oT&MK4|");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("lMQmR+oT&MK4|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("lMQmR+oT&MK4|", document1.location());
      assertEquals("lMQmR+oT&MK4|", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasClass("org.jsoup.nodes.Document$QuirksMode");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("lMQmR+oT&MK4|", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertSame(document0, document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" />", "`");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("`", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("`", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = (Document)document0.addClass("          ");
      assertNotNull(document1);
      assertFalse(document0.hasParent());
      assertEquals("`", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("`", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("`", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("`", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = document0.hasClass("          ");
      assertFalse(document0.hasParent());
      assertEquals("`", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("`", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertSame(document0, document1);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":<!tiDr^[<2", "x");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("x", document0.location());
      assertEquals("x", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      String string0 = document0.data();
      assertNotNull(string0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("x", document0.location());
      assertEquals("x", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("tiDr^[<2", string0);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Element element0 = new Element("basefont");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("basefont", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("basefont", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      
      DocumentType documentType0 = new DocumentType("basefont", "basefont", "-9MF^Vnkos*G2^!S~_");
      assertNotNull(documentType0);
      assertFalse(documentType0.hasParent());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      
      Element element1 = element0.appendChild(documentType0);
      assertNotNull(element1);
      assertEquals(0, element0.siblingIndex());
      assertEquals("basefont", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("basefont", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(documentType0.hasParent());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("basefont", element1.tagName());
      assertEquals("basefont", element1.nodeName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertSame(element0, element1);
      assertSame(element1, element0);
      
      boolean boolean0 = element1.hasText();
      assertEquals(0, element0.siblingIndex());
      assertEquals("basefont", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("basefont", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(documentType0.hasParent());
      assertEquals("#doctype", documentType0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals("basefont", element1.tagName());
      assertEquals("basefont", element1.nodeName());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parse("type", ":nth-child(%d)");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":nth-child(%d)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":nth-child(%d)", document0.location());
      
      boolean boolean0 = document0.hasText();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":nth-child(%d)", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":nth-child(%d)", document0.location());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      boolean boolean0 = Element.preserveWhitespace((Node) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "G");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("G", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.appendElement("br");
      assertNotNull(element0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("G", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("G", element0.baseUri());
      
      Elements elements0 = document0.getElementsMatchingOwnText("I");
      assertNotNull(elements0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("G", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("G", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!", "<!");
      assertNotNull(document0);
      assertEquals("<!", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<!", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      Elements elements0 = document0.getElementsContainingOwnText("7maWppjtArjp7g{f'->");
      assertNotNull(elements0);
      assertEquals("<!", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("<!", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = new Document("AKN]lb\"X[WJD$@ ?6");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("AKN]lb\"X[WJD$@ ?6", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("AKN]lb\"X[WJD$@ ?6", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = document0.normalise();
      assertNotNull(document1);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("AKN]lb\"X[WJD$@ ?6", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("AKN]lb\"X[WJD$@ ?6", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("AKN]lb\"X[WJD$@ ?6", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("AKN]lb\"X[WJD$@ ?6", document1.location());
      assertFalse(document1.hasParent());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Document document2 = (Document)document1.appendText("AKN]lb\"X[WJD$@ ?6");
      assertNotNull(document2);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("AKN]lb\"X[WJD$@ ?6", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("AKN]lb\"X[WJD$@ ?6", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("AKN]lb\"X[WJD$@ ?6", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("AKN]lb\"X[WJD$@ ?6", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("#document", document2.nodeName());
      assertEquals("AKN]lb\"X[WJD$@ ?6", document2.location());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("AKN]lb\"X[WJD$@ ?6", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      
      Document document3 = (Document)document0.prependText("Bs64$C|Ox8");
      assertNotNull(document3);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("AKN]lb\"X[WJD$@ ?6", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("AKN]lb\"X[WJD$@ ?6", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.siblingIndex());
      assertEquals("AKN]lb\"X[WJD$@ ?6", document3.location());
      assertEquals(3, document3.childNodeSize());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals("AKN]lb\"X[WJD$@ ?6", document3.baseUri());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document0);
      assertSame(document3, document2);
      
      Pattern pattern0 = Pattern.compile("Bs64$C|Ox8", 2930);
      assertNotNull(pattern0);
      assertEquals("Bs64$C|Ox8", pattern0.toString());
      assertEquals("Bs64$C|Ox8", pattern0.pattern());
      assertEquals(2930, pattern0.flags());
      
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("AKN]lb\"X[WJD$@ ?6", document0.location());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("AKN]lb\"X[WJD$@ ?6", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Bs64$C|Ox8", pattern0.toString());
      assertEquals("Bs64$C|Ox8", pattern0.pattern());
      assertEquals(2930, pattern0.flags());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`?G8B$", "`?G8B$");
      assertNotNull(document0);
      assertEquals("`?G8B$", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("`?G8B$", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      CDataNode cDataNode0 = new CDataNode("java.lang.string@0000000045");
      assertNotNull(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Document document1 = (Document)document0.appendChild(cDataNode0);
      assertNotNull(document1);
      assertEquals("`?G8B$", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("`?G8B$", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertTrue(cDataNode0.hasParent());
      assertEquals(1, cDataNode0.siblingIndex());
      assertEquals("`?G8B$", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("`?G8B$", document1.baseUri());
      assertEquals(2, document1.childNodeSize());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsMatchingText("<html>\n <head></head>\n <body>\n  `?G8B$\n </body>\n</html><![CDATA[java.lang.string@0000000045]]>");
      assertNotNull(elements0);
      assertEquals("`?G8B$", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("`?G8B$", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.prependText("264D!.^");
      assertNotNull(document1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("", document1.location());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Elements elements0 = document0.getElementsContainingText("");
      assertNotNull(elements0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(4, elements0.size());
      assertFalse(elements0.isEmpty());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")", ")");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(")", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Element element0 = document0.appendElement("%^");
      assertNotNull(element0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(")", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(")", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("%^", element0.nodeName());
      assertEquals("%^", element0.tagName());
      
      Elements elements0 = document0.getElementsContainingText(")");
      assertNotNull(elements0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(")", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")", ")");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(")", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(")", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      document0.title(")");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(")", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(")", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      Elements elements0 = document0.getElementsContainingText(")");
      assertNotNull(elements0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(")", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(")", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(elements0.isEmpty());
      assertEquals(5, elements0.size());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("i;wV:GS3X{Z}nn)Ka[", "i;wV:GS3X{Z}nn)Ka[");
      assertNotNull(document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("i;wV:GS3X{Z}nn)Ka[", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("i;wV:GS3X{Z}nn)Ka[", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.appendElement("br");
      assertNotNull(element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("i;wV:GS3X{Z}nn)Ka[", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("i;wV:GS3X{Z}nn)Ka[", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("i;wV:GS3X{Z}nn)Ka[", element0.baseUri());
      assertEquals("br", element0.nodeName());
      
      Elements elements0 = document0.getElementsMatchingText("br");
      assertNotNull(elements0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("i;wV:GS3X{Z}nn)Ka[", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("i;wV:GS3X{Z}nn)Ka[", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("String must not be empty", "String must not be empty");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("String must not be empty", document0.location());
      assertEquals("String must not be empty", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.getElementById("String must not be empty");
      assertNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("String must not be empty", document0.location());
      assertEquals("String must not be empty", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parse("type", "type");
      assertNotNull(document0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("type", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      
      Element element1 = element0.lastElementSibling();
      assertNotNull(element1);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("type", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element1.childNodeSize());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("type", element1.baseUri());
      assertSame(element0, element1);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parse("type", "type");
      assertNotNull(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("type", parseSettings0);
      assertNotNull(tag0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("type", tag0.toString());
      assertEquals("type", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("type", tag0.toString());
      assertEquals("type", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("textarea", formElement0.baseUri());
      assertEquals("type", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("type", formElement0.nodeName());
      
      Document document1 = (Document)document0.appendTo(formElement0);
      assertNotNull(document1);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("type", tag0.toString());
      assertEquals("type", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("textarea", formElement0.baseUri());
      assertEquals("type", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("type", formElement0.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("type", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("type", document1.location());
      assertTrue(document1.hasParent());
      assertFalse(document1.isBlock());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element0 = document0.lastElementSibling();
      assertNull(element0);
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/>g", "/>g");
      assertNotNull(document0);
      assertEquals("/>g", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/>g", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Document document1 = Parser.parseBodyFragmentRelaxed("/>g", "/>g");
      assertNotNull(document1);
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("/>g", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("/>g", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertNotSame(document1, document0);
      assertFalse(document1.equals((Object)document0));
      
      document1.parentNode = (Node) document0;
      assertEquals("/>g", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/>g", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("/>g", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("/>g", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.parentNode.hasParent());
      assertEquals(0, document1.parentNode.siblingIndex());
      
      Document document2 = (Document)document1.before((Node) document0);
      assertNotNull(document2);
      assertEquals("/>g", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("/>g", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("/>g", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("/>g", document1.location());
      assertTrue(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertEquals("/>g", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("/>g", document2.location());
      assertTrue(document2.hasParent());
      assertFalse(document2.isBlock());
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertNotSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertNotSame(document2, document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document0));
      
      Document document3 = (Document)document0.firstElementSibling();
      assertNotNull(document3);
      assertEquals("/>g", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("/>g", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertTrue(document3.hasParent());
      assertEquals("#document", document3.nodeName());
      assertEquals("/>g", document3.location());
      assertEquals(2, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertFalse(document3.isBlock());
      assertEquals("/>g", document3.baseUri());
      assertSame(document0, document3);
      assertNotSame(document0, document1);
      assertNotSame(document0, document2);
      assertSame(document3, document0);
      assertNotSame(document3, document2);
      assertNotSame(document3, document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document0.equals((Object)document2));
      assertFalse(document3.equals((Object)document2));
      assertFalse(document3.equals((Object)document1));
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parse("pe&</F=IF", "");
      assertNotNull(document0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.createElement("pe&</F=IF");
      assertNotNull(element0);
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertEquals("pe&</F=IF", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("pe&</F=IF", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      
      Document document1 = (Document)document0.appendTo(element0);
      assertNotNull(document1);
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.isBlock());
      assertEquals("pe&</F=IF", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("pe&</F=IF", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("", document1.location());
      assertEquals("#document", document1.nodeName());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      Element element1 = document0.firstElementSibling();
      assertNull(element1);
      assertEquals("", document0.location());
      assertEquals("", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertSame(document0, document1);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Document.createShell("type");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      Element element0 = document0.previousElementSibling();
      assertNull(element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("type", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("type", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Document.createShell("body");
      Element element0 = document0.body();
      Elements elements0 = element0.previousElementSiblings();
      assertEquals(1, elements0.size());
      assertEquals("body", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/>g", "/>g");
      Document document1 = Parser.parseBodyFragmentRelaxed("/>g", "/>g");
      document1.parentNode = (Node) document0;
      document1.before((Node) document0);
      Element element0 = document1.nextElementSibling();
      assertEquals("/>g", element0.baseUri());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "'D[i$7GPNR|v");
      document0.nextElementSibling();
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Document.createShell("idj?!ll!#");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("idj?!ll!#", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      Elements elements0 = document0.siblingElements();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "'D[i$7GPNR|v");
      Element element0 = document0.body();
      element0.after("'D[i$7GPNR|v");
      String string0 = element0.cssSelector();
      assertEquals("html > body:nth-child(2)", string0);
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("pe&</F=IF", "");
      Element element0 = document0.createElement("pe&</F=IF");
      document0.appendTo(element0);
      assertEquals(1, element0.childNodeSize());
      
      String string0 = document0.cssSelector();
      assertEquals("pe&</F=IF > #root", string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parse("pe&</F=IF", "");
      document0.appendTo(document0);
      String string0 = document0.cssSelector();
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parse("pe&</F=IF", "");
      document0.toggleClass("org.jsoup.parser.Token$Character");
      String string0 = document0.cssSelector();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Element element0 = new Element("GpGfX`7Oa");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        element0.insertChildren(516, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parse("pe&</F=IF", "");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1432352094), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "");
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>(78);
      // Undeclared exception!
      try { 
        document0.insertChildren(78, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Document.createShell("html");
      Elements elements0 = document0.getElementsByIndexEquals((-3901));
      // Undeclared exception!
      try { 
        document0.insertChildren((-3901), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Document.createShell("class");
      LinkedList<Element> linkedList0 = new LinkedList<Element>();
      Element element0 = document0.insertChildren(1, (Collection<? extends Node>) linkedList0);
      assertEquals(1, element0.childNodeSize());
      assertEquals("class", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Document.createShell("idj?!ll!#");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
      assertEquals("idj?!ll!#", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "'D[i$7GPNR|v");
      Element element0 = document0.body();
      List<TextNode> list0 = element0.textNodes();
      assertEquals("'D[i$7GPNR|v", element0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("i;wV:GS3X{Z}nn)Ka[", "i;wV:GS3X{Z}nn)Ka[");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("i;wV:GS3X{Z}nn)Ka[", document0.baseUri());
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parse("lMQmR+oT&MK4|", "lMQmR+oT&MK4|");
      Elements elements0 = document0.getElementsByIndexGreaterThan(19);
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Document.createShell("body");
      Element element0 = document0.selectFirst("body");
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parse("`", "`");
      Document document1 = document0.normalise();
      document1.parentNode = (Node) document1;
      Elements elements0 = document1.getElementsMatchingOwnText("`");
      assertEquals("`", document1.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parse("type", "type");
      document0.is("type");
      assertEquals("type", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(":matchText", parseSettings0);
      Element element0 = new Element(tag0, ":matchText");
      element0.getAllElements();
      assertEquals(":matchText", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Insert position out of bounds.", "Insert position out of bounds.");
      // Undeclared exception!
      try { 
        document0.before("1+'FzYQC <)X7nG}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "");
      Elements elements0 = document0.getElementsByAttribute("'D[i$7GPNR|v");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7/F=4", "7/F=4");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("'", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`?G|E$", "`?G|E$");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("type", "type");
      document0.doSetBaseUri("D/ ^");
      assertEquals("D/ ^", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ScriptDataEscapedEndTagOpen", "Unexpected token [%s] when in state [%s]");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">XiFh\"m2'G`NmQ'I", ">XiFh\"m2'G`NmQ'I");
      document0.getElementsByAttributeValueContaining("                ", "                ");
      assertEquals(1, document0.childNodeSize());
      assertEquals(">XiFh\"m2'G`NmQ'I", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parse("ct", "9X/1)ujZG");
      Pattern pattern0 = Pattern.compile("", 1297);
      document0.getElementsByAttributeValueMatching("class", pattern0);
      assertEquals("9X/1)ujZG", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000045", "M%.40WT^");
      Elements elements0 = document0.getElementsByClass("java.lang.string@0000000045");
      assertEquals("M%.40WT^", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Document.createShell("`?G|E$");
      document0.getElementsByAttributeValueEnding("`?G|E$", "cd");
      assertEquals("`?G|E$", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ScriptDataDoubleEscapedDash", "tUpe");
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("ScriptDataDoubleEscapedDash", "org.jsoup.nodes.Element$1");
      document0.is((Evaluator) evaluator_AttributeWithValueNot0);
      assertEquals("tUpe", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parse("pe&</F=IF", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("%d>nPY`", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Element element0 = new Element("basefont");
      Element element1 = element0.val("basefont");
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parse("idj?!ll!#", "idj?!ll!#");
      // Undeclared exception!
      try { 
        document0.wrap("idj?!ll!#");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'D[i$7GPNR|v", "'D[i$7GPNR|v");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      assertEquals(3, elements0.size());
      assertEquals("'D[i$7GPNR|v", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Document.createShell("n;w$X");
      document0.getElementsByAttributeStarting("#`'!t8giIG/b?qLfs++");
      assertEquals("n;w$X", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parse("lMQmR+oT&MK4|", "lMQmR+oT&MK4|");
      Elements elements0 = document0.getElementsByIndexLessThan(141);
      assertEquals("lMQmR+oT&MK4|", document0.baseUri());
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[7S2'{IZ", "`");
      // Undeclared exception!
      try { 
        document0.after(">|[)xw}OXK)ve-Ot");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "5xU7? jv<C!k");
      document0.prepend("org.jsoup.nodes.Element$2");
      document0.child(0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      // Undeclared exception!
      try { 
        document0.select("(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '(': unexpected token at '('
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parse("Hd.(:", "strong");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("'", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gA,AyKN2O*2(!", "gA,AyKN2O*2(!");
      Element element0 = document0.html("aabXP[wVq");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.dataNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parse(":matchText", ":matchText");
      String string0 = document0.wholeText();
      DocumentType documentType0 = new DocumentType(":matchText", ":matchText", ":matchText", string0, string0);
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText(":matchText");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parse("lMQmR+oT&MK4|", "lMQmR+oT&MK4|");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Document.createShell("class");
      document0.getElementsContainingOwnText("");
      assertEquals(1, document0.childNodeSize());
      assertEquals("class", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("type", "type");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("type", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val("textarea");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Document.createShell("body");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("body", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!", "<!");
      document0.getElementsMatchingText("Children collection to be inserted must not be null.");
  }
}
