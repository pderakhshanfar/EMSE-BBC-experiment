/*
 * This file was automatically generated by EvoSuite
 * Sun Mar 07 19:50:57 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("Mm>=u)7B5Lh-H62~R", "Mm>=u)7B5Lh-H62~R");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      document0.getElementsByClass("Ve){xy9B_|iJow8\"");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Element element0 = new Element("=i3e%/c");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("GI(KI~xo0n_Kqth u~<", ",o14)o-f");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ,o14)o-f
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Element element0 = new Element("DQmUS^`.6j");
      Element element1 = element0.appendElement("DQmUS^`.6j");
      element0.empty();
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=|03w", "");
      Elements elements0 = document0.getElementsContainingText("=|03w");
      document0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = new Document("=i3e%/~c");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parse("zzhKf2wa4~#:lxq", ":root");
      document0.doSetBaseUri(":root");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Element element0 = new Element(",~@yaXNn8");
      Document document0 = Document.createShell(",~@yaXNn8");
      Element element1 = element0.doClone(document0);
      element1.wrap("&amp;");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "=|03w");
      Element element0 = document0.body();
      element0.wrap("=|03w");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Element element0 = new Element("systdmZd");
      element0.setSiblingIndex((-1972));
      element0.val("systdmZd");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Document.createShell("em");
      Element element0 = document0.head();
      element0.val("xHjR");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = new Document("E*W$F l ^*ey7B<");
      document0.val("E*W$F l ^*ey7B<");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parse("SZ", "SZ");
      document0.siblingIndex = (-4653);
      document0.toggleClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=|03w", "");
      Element element0 = document0.body();
      element0.toggleClass("[%s=%s]");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = new Document("[");
      document0.toggleClass("n9iH");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("systemI", "gi3e%/~c");
      Document document1 = document0.clone();
      document1.siblingIndex = (-23);
      document1.text("gi3e%/~c");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      element0.text("7m:pJTXB&B!C@C8dS");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      document0.text("7m:pJTXB&B!C@C8dS");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Element element0 = new Element("=i3e%/c");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.setSiblingIndex((-1129));
      document0.tagName("br");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AfterAttributeName", "AfterAttributeName");
      document0.tagName("section");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.appendElement("br");
      Element element1 = element0.val("6fOY9Nc@sQ");
      element1.tagName("br");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pg", "mn]z");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parse("bgsound", "bgsound");
      Element element0 = document0.appendElement("bgsound");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsou.examples.HtmlToPlainTex\"$FormatingVisitor", "Children collection to be inserted must not be null.");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parse("bgsound", "bgsound");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=|03w", "");
      document0.selectFirst("form");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("OfZ=A&", "OfZ=A&");
      document0.selectFirst("body");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parse("zzhKf2wa4~#:lxq", ":root");
      document0.select("html");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      element0.removeClass("xM0/'U?(7,G");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = new Document("Patern ytax er0ror: ");
      document0.removeClass("Patern ytax er0ror: ");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      Elements elements0 = element0.previousElementSiblings();
      Element element1 = document0.insertChildren(1, (Collection<? extends Node>) elements0);
      Element element2 = element1.appendElement("br");
      element2.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=|03w", "");
      Element element0 = document0.body();
      Element element1 = element0.wrap("=|03w");
      Element element2 = (Element)element1.nextSibling();
      element2.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parse("OfZ=A&", "OfZ=A&");
      Element element0 = document0.body();
      element0.prependText("OfZ=A&");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AfterAttributeName", "AfterAttributeName");
      Element element0 = document0.head();
      element0.prependText("org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = new Document("i");
      DocumentType documentType0 = new DocumentType("-\"hoozfrm}5awpw", "4*L LLi|wPO?1tx", "java.lang.string@0000000085", "org.jsoup.nodes.Entities$1");
      document0.setParentNode(documentType0);
      document0.prependText("3y<v<%c==>qLEe");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Element element0 = new Element("=i3e%/c");
      element0.prependElement("body");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element");
      CDataNode cDataNode0 = new CDataNode("Y>{ `8d#+]t2>=3YQ");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Y>{ `8d#+]t2>=3YQ", attributes0);
      pseudoTextElement0.setSiblingIndex((-6367));
      pseudoTextElement0.prependChild(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      element0.prepend("3dScW");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element");
      CDataNode cDataNode0 = new CDataNode("Y>{ `8d#+]t2>=3YQ");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Y>{ `8d#+]t2>=3YQ", attributes0);
      pseudoTextElement0.setSiblingIndex((-6367));
      pseudoTextElement0.prepend("Y>{ `8d#+]t2>=3YQ");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("bgsound", "bgsound");
      Element element0 = document0.head();
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("v[RRL", "v[RRL");
      Element element0 = document0.appendElement("v[RRL");
      Element element1 = document0.doClone(element0);
      element1.parents();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Element element0 = new Element("Patern ytax er0ror: ");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = new Document("Lcl>lmu<3iEwDDi69");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      TextNode textNode0 = new TextNode("Lcl>lmu<3iEwDDi69", "Lcl>lmu<3iEwDDi69");
      nodeArray0[4] = (Node) textNode0;
      nodeArray0[5] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.doClone(document0);
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Document.createShell("<!DOCTYPE");
      document0.appendText("UiWMGvdI~ye~sMme@C");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parse("HY1R|2,g.%|e2;>$1{", "HY1R|2,g.%|e2;>$1{");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "F");
      Element element0 = document0.body();
      Element element1 = document0.head();
      Document document1 = new Document("");
      element0.before((Node) document1);
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=|03w", "");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=|03w", "");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = new Document("systdmZd");
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      document0.is((Evaluator) evaluator_AllElements0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Element element0 = new Element("systemId");
      element0.is("systemId");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = new Document("value");
      document0.is("value");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Document document1 = new Document(".");
      CDataNode cDataNode0 = new CDataNode("Tag name must not be empty.");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) cDataNode0;
      nodeArray0[1] = (Node) document1;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parse("HY1R|2,g.%|e2;>$1{", "HY1R|2,g.%|e2;>$1{");
      Element element0 = document0.appendElement("HY1R|2,g.%|e2;>$1{");
      Node[] nodeArray0 = new Node[0];
      element0.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bs", "bs");
      Element element0 = document0.appendElement("bs");
      Elements elements0 = document0.getElementsContainingOwnText("bs");
      element0.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parse("v5Rrl", "v5Rrl");
      document0.setSiblingIndex((-702));
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(",~@yaXNn8", ",~@yaXNn8");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parse("u", "u");
      MockFileWriter mockFileWriter0 = new MockFileWriter("3{,uU}?yqsbS#.;]A");
      document0.html(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = new Document("value");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("K", "Na9]uVx6!J-");
      document0.getElementsByAttributeStarting("pR{J>Yl");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("U}1%d9%", ">");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Pattern pattern0 = Pattern.compile("br");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parse("bgsound", "bgsound");
      Pattern pattern0 = Pattern.compile("Unexpected count of entities loaded", (-873));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Document.createShell("<!DOCTYPE");
      document0.appendText("UiWMGvdI~ye~sMme@C");
      document0.getElementsMatchingOwnText("[%s=%s]");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("               ", "");
      document0.getElementsContainingText(" ");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = new Document(",n q+\"8Md.");
      document0.getElementsByTag("#root");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parse("ii", "ii");
      document0.getElementsByIndexLessThan(24);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Element element0 = new Element("=i3e%/c");
      element0.getElementsByIndexGreaterThan((-476));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=|03w", "");
      document0.getElementsByIndexEquals(1384);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse("SZ", "SZ");
      document0.addClass("SZ");
      document0.getElementsByClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("               ", "");
      document0.getElementsByAttributeValueNot("n=N5j>YuYtON/`<tba", "               ");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parse("zzhKf2wa4~#:lxq", ":root");
      Element element0 = document0.addClass(":root");
      element0.getElementsByAttributeValueMatching("class", "");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("v5Rrl", "v5Rrl");
      document0.getElementsByAttributeValue("v5Rrl", "v5Rrl");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Element element0 = new Element("=i3e%/c");
      Element element1 = element0.attr("w", "6$mtn");
      element1.getElementsByAttributeStarting("w");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Tag tag0 = Tag.valueOf("tnextapea");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("tnextapea", "tnextapea");
      attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "tnextapea", attributes0);
      formElement0.getElementsByAttribute("tnextapea");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("v5Rrl", "v5Rrl");
      Element element0 = document0.appendElement("v5Rrl");
      document0.prependText("F");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Document.createShell("defer");
      document0.prependChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "");
      Element element0 = document0.head();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("(nX&)*ei", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("  ");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "(nX&)*ei", attributes0);
      formElement0.siblingIndex = (-474);
      formElement0.empty();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell(",~@yaXNn8");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("v[RRL", "v[RRL");
      document0.setSiblingIndex((-5896));
      document0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AfterAttributeName", "AfterAttributeName");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Element element0 = new Element("jbody");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "");
      Element element0 = document0.body();
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parse("zzhKf2wa4~#:lxq", ":root");
      Element element0 = document0.addClass(":root");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ol", " 8X_Q*yyL");
      document0.toggleClass("Zp9'=zr,|$u-[:_]2");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Element element0 = new Element("q2Eq1CjY{KX{*=");
      element0.children();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Tag tag0 = Tag.valueOf("`F%+'f$-Br[oOH");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "`F%+'f$-Br[oOH", attributes0);
      pseudoTextElement0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("audio", "audio");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Element element0 = new Element(",~@yaXNn8");
      Document document0 = Document.createShell(",~@yaXNn8");
      Element element1 = element0.doClone(document0);
      element1.before((Node) element0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = new Document(",~@yaXN|8");
      Element element0 = document0.doClone(document0);
      element0.before(" />");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      element0.before("");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Tag tag0 = Tag.valueOf("RC<hv");
      Element element0 = new Element(tag0, "y`d:#C} h*MF%s");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Element element0 = new Element("=i3e%/c");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be inserted must not be null.", "body");
      Element element0 = document0.toggleClass("n=N5j>YuYtON/`<tba");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      element0.attr("=ie%~c", true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=i3e%/~c", "pk &(]-");
      Element element0 = document0.head();
      element0.attr("=i3e%/~c", false);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parse("audio", "audio");
      document0.attr("audio", true);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=|03w", "");
      Element element0 = document0.body();
      Element element1 = element0.wrap("=|03w");
      Element element2 = (Element)element1.nextSibling();
      element2.attr("Pattern syntax error: ", "=|03w");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=|03w", "");
      Element element0 = document0.body();
      element0.appendTo(element0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Element element0 = new Element("=i3e%/c");
      Element element1 = element0.shallowClone();
      element0.appendTo(element1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000048", "(");
      document0.siblingIndex = (-1644953643);
      document0.appendText("I'h?Q?p22edS");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=|03w", "");
      Element element0 = document0.body();
      element0.appendText("S=X3b@smG&A0(3");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      document0.appendElement("section");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("ScriptDataDoubleEscapedDash", "D U]u[IJ}(&G Df");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("v5Rrl", "v5Rrl");
      document0.siblingIndex = (-1302);
      document0.append("v5Rrl");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "");
      Element element0 = document0.body();
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Element element0 = new Element("ascii");
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Children collection to be insertd must nt be null.", ",~@yaXNn8");
      Element element0 = document0.appendElement("Children collection to be insertd must nt be null.");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(";f", ";f");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parse("bgsound", "bgsound");
      Element element0 = document0.appendElement("=\"");
      element0.after("<=\"></=\">");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Document.createShell("</");
      Element element0 = document0.head();
      element0.after("</");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      element0.after("br");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parse("=|03w", "");
      Element element0 = document0.body();
      element0.addClass(":nth-child(");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parse("SZ", "SZ");
      document0.siblingIndex = (-4653);
      document0.addClass("SZ");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "");
      Element element0 = document0.head();
      element0.addClass("3dScW");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.examples.HtmlToPlainText$FormattingVisitor", "Children collection to be inserted must not be null.");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.wrap("org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = new Document("sjstd``Fad");
      TextNode textNode0 = new TextNode("sjstd``Fad");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.wrap("br");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parse("v5Rrl", "v5Rrl");
      document0.setSiblingIndex((-218));
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.wholeText();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Element element0 = new Element("systemId");
      Node[] nodeArray0 = new Node[7];
      DataNode dataNode0 = DataNode.createFromEncoded("systemId", "systemId");
      nodeArray0[0] = (Node) dataNode0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) element0;
      nodeArray0[6] = (Node) element0;
      element0.addChildren(nodeArray0);
      // Undeclared exception!
      element0.val("systemId");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parse("zzhKf2wa4~#:lxq", ":root");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = new Document("org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
      // Undeclared exception!
      try { 
        document0.text("</");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bgsound", "bgsound");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parse("bs", "bs");
      Element element0 = document0.appendElement("bs");
      List<Node> list0 = Parser.parseXmlFragment("@>ZQq%q|N_", "bs");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O`?e", "O`?e");
      TextNode textNode0 = TextNode.createFromEncoded(".", "vAu");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("33", "head");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.tagName("63sRi6Q*P");
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parse("J?.X*09o", "value");
      // Undeclared exception!
      try { 
        document0.tagName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G`w+8{]rK+s8", "v5Rrl");
      Element element0 = document0.appendElement("Q]");
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bs", "bs");
      DataNode dataNode0 = new DataNode("bs", "re'qSr-~syr64B");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":%s(%dn)");
      Element element0 = new Element(tag0, ":%s(%dn)");
      // Undeclared exception!
      try { 
        element0.selectFirst(":%s(%dn)");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query ':%s(%dn)': unexpected token at ':%s(%dn)'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=|03w", "");
      // Undeclared exception!
      try { 
        document0.select("6:$d#P?Z");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '6:$d#P?Z': unexpected token at ':$d#P?Z'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Document.createShell("em");
      // Undeclared exception!
      try { 
        document0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Element element0 = new Element("=i3e%/c");
      // Undeclared exception!
      try { 
        element0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      CDataNode cDataNode0 = new CDataNode("@GU_{,E");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" X|@NQNWE5p'Rr", " X|@NQNWE5p'Rr");
      document0.childNodes = null;
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Split offset must not be greater than current text length", "textarea");
      DataNode dataNode0 = new DataNode("textarea");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parse("l]\"m9mwx>s6\u0006npp", "l]\"m9mwx>s6\u0006npp");
      DocumentType documentType0 = new DocumentType("l]\"m9mwx>s6\u0006npp", "l]\"m9mwx>s6\u0006npp", "l]\"m9mwx>s6\u0006npp", "=");
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(document0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parse("K6%R ^/@_EC", "K6%R ^/@_EC");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.parser.ParseErrorList", "org.jsoup.parser.ParseErrorList");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prependElement((String) null);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Element element0 = new Element("=i3e%/c");
      Element element1 = element0.attr("", "6$mtn");
      List<Node> list0 = Parser.parseFragment("Insert position out of bounds.", element0, "");
      element1.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.prependElement("body");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("$b]cQ:S|<.* dYR", "$b]cQ:S|<.* dYR");
      CDataNode cDataNode0 = new CDataNode("class");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("$b]cQ:S|<.* dYR", true);
      Node node0 = cDataNode0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.prependChild(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("v5Rr_", "v5Rr_");
      Element element0 = document0.appendElement("Q]");
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        element0.prependChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("HG)'[q\"!", "method");
      Element element0 = document0.appendElement("method");
      element0.siblingIndex = (-32782130);
      // Undeclared exception!
      try { 
        document0.prependChild(element0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("v5Rrl", "v5Rrl");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prepend("v5Rrl");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = new Document("i");
      DocumentType documentType0 = new DocumentType("-\"hoozfrm}5awpw", "4*L LLi|wPO?1tx", "java.lang.string@0000000085", "org.jsoup.nodes.Entities$1");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.prepend("tEISJ&YfHW^)DE]4`");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(";f", ";f");
      Comment comment0 = new Comment(";f");
      Element element0 = document0.doClone(comment0);
      // Undeclared exception!
      try { 
        element0.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parse("SZ", "SZ");
      MockFileWriter mockFileWriter0 = new MockFileWriter(".", true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(227);
      // Undeclared exception!
      document0.outerHtmlTail(mockFileWriter0, 227, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Document.createShell("ii");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "ii");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 68, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "java.lang.string@0000000008 cp367 csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 ,~@yaxnn8 ibm367 646 us");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      document0.outerHtmlTail(stringWriter0, 2147483645, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{bAc40@gr:|B$Tbh{f", "");
      Charset charset0 = document0.charset();
      MockFile mockFile0 = new MockFile("]u846eY1p/I3d9?Vt", "iAl~cfGv=");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0, true);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0, charset0);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(outputStreamWriter0, 25, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("v5Rrl", "v5Rrl");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintStream mockPrintStream0 = new MockPrintStream(pipedOutputStream0, false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintStream0, (-1246), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gi3e%/~c", "gi3e%/~c");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, 634, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Element element0 = new Element("bgsound");
      MockPrintStream mockPrintStream0 = new MockPrintStream("bgsound");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(402);
      // Undeclared exception!
      element0.outerHtmlHead(mockPrintStream0, 402, document_OutputSettings2);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/v5Rrl", "/v5Rrl");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "/v5Rrl");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 2, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Document.createShell("systdmZd");
      Charset charset0 = document0.charset();
      ByteBuffer byteBuffer0 = charset0.encode("org.jsoup.select.StructuralEvaluator$Parent");
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 40, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Document.createShell("|4)O)NC1PG");
      MockFileWriter mockFileWriter0 = new MockFileWriter("}o_.}JRUc");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockFileWriter0, (-602), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      CDataNode cDataNode0 = new CDataNode((String) null);
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parse("zzhKf2wa4~#:lxq", ":root");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = new Document("sjstd``Fad");
      TextNode textNode0 = new TextNode("sjstd``Fad");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("vR>l", "vR>l");
      document0.setParentNode(document0);
      Evaluator.IsNthLastOfType evaluator_IsNthLastOfType0 = new Evaluator.IsNthLastOfType((-1), 40);
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IsNthLastOfType0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "F");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000084 cp367 csascii iso-ir-6 ascii ve){xy9b_|ijow8\" ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us", "image");
      Element element0 = document0.prepend("java.lang.string@0000000084 cp367 csascii iso-ir-6 ascii ve){xy9b_|ijow8\" ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.is("7");
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Document.createShell("L<[o29ml7@");
      TextNode textNode0 = new TextNode((String) null);
      Element element0 = document0.doClone(textNode0);
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Element element0 = new Element(",~@yaXNn8");
      Document document0 = Document.createShell(",~@yaXNn8");
      Element element1 = element0.doClone(document0);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) element1;
      CDataNode cDataNode0 = new CDataNode("body");
      nodeArray0[1] = (Node) cDataNode0;
      nodeArray0[2] = (Node) element1;
      nodeArray0[3] = (Node) element1;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(I/52<uO`", "ayUbfR]");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html("M::ai9D}t~a");
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Document.createShell("vAu");
      Element element0 = document0.addClass("org.jsoup.nodes.Element$2");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.html("org.jsoup.nodes.Element$2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      DataNode dataNode0 = new DataNode(":nth-child(%d)", ".");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.html("aY^}");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$IsFirstChild", "T'F-+{Ur*N:$9zku[U");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      Element element1 = element0.after((Node) document0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("0z2CjR%u>zDuBr|");
      // Undeclared exception!
      element1.html(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("%@eb:~wx,e", "POST");
      // Undeclared exception!
      try { 
        document0.html((StringWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.examples.HtmlToPlainText$FormattingVisitor", "org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset((Charset) null);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      // Undeclared exception!
      try { 
        document1.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Document.createShell(",~@yaXNn8");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("M::ai9D}t~a", "M::ai9D}t~a");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("PV.8", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("value");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "PV.8", attributes0);
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("HFT.:a]_Bq{x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: HFT.:a]_Bq{x
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.examples.HtmlToPlainText$FormattingVisitor", "org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
      DataNode dataNode0 = new DataNode("org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(";f", "embed");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("zShh{jY#6j$", parseSettings0);
      Element element0 = new Element(tag0, "*,0j@~Vp<G ");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText("*,0j@~Vp<G ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: *,0j@~Vp<G 
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("v5Rrl", "v5Rrl");
      DataNode dataNode0 = new DataNode("Q]", "Q]");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("$i%HGo8Hx%Z<Z9");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("HG)'[q\"!", "method");
      Element element0 = document0.appendElement("method");
      element0.siblingIndex = (-32782130);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("v5Rrl");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", ".");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("|p3(mV");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(",fq{d+K#_;D.", ",fq{d+K#_;D.");
      Comment comment0 = new Comment(",fq{d+K#_;D.", ",fq{d+K#_;D.");
      document0.parentNode = (Node) comment0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText(",fq{d+K#_;D.");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Document.createShell("ii");
      Element element0 = document0.appendElement("ii");
      element0.setSiblingIndex((-4109));
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("ii");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsByTag("s+");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.appendElement("br");
      element0.setSiblingIndex((-1129));
      // Undeclared exception!
      try { 
        document0.getElementsByTag("br");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Document.createShell("L<[o29ml7@");
      TextNode textNode0 = new TextNode((String) null);
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.getElementsByIndexGreaterThan(0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element");
      CDataNode cDataNode0 = new CDataNode("Y>{ `8d#+]t2>=3YQ");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Y>{ `8d#+]t2>=3YQ", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = new Document("value");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting((String) null, "*}>ihO*yGxnJ2z/w@0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Element element0 = new Element("=i3e%/c");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueNot("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Tag tag0 = Tag.valueOf("wO%R[c1bIx~1}I");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("~O(} 92cEJ l7oNm* ]", "main");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.nodes.Comment", attributes1);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttributeValueMatching("~O(} 92cEJ l7oNm* ]", (Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$AttributeWithValueMatching", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("q2Eq1CjY{KX{*=", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parse("v5Rrl", "v5Rrl");
      Element element0 = document0.appendElement("v5Rrl");
      element0.setSiblingIndex((-1412));
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("f!\"OPm-", "#root");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "_");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding((String) null, "optgroup");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parse("7)|-uOvLU", "7)|-uOvLU");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("'", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{bAc40@gr:|B$Tbh{f", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("9svI", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Document.createShell("defer");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("defer", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Element element0 = new Element("=i3e%/~c");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "Pattern syntax error:");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementById("Insert position out of bounds.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "body");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "BJC+yEx7sW*o");
      TextNode textNode0 = TextNode.createFromEncoded("{e", "#");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Document.createShell("m");
      CDataNode cDataNode0 = new CDataNode("z&%F/*]ozH9K]BHu|W");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xsystdmZd", "xsystdmZd");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Element element0 = new Element(",~@yaXNn8");
      Element element1 = element0.appendElement(",~@yaXNn8");
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Element element0 = new Element("systdmZd");
      CDataNode cDataNode0 = new CDataNode("systdmZd");
      element0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Element element0 = new Element("systemId");
      // Undeclared exception!
      try { 
        element0.child(1889);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1889, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "");
      // Undeclared exception!
      try { 
        document0.child((-1722149673));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Document.createShell("v5Rrl");
      DocumentType documentType0 = new DocumentType("v5Rrl", "v5Rrl", "V", "");
      documentType0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.before((Node) documentType0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!xaj5oM`1 Ittrm8ys", "!xaj5oM`1 Ittrm8ys");
      Element element0 = document0.appendElement("x");
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        element0.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.before("br");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = new Document(" /x8>t");
      Comment comment0 = new Comment("       ", " ");
      document0.parentNode = (Node) comment0;
      // Undeclared exception!
      try { 
        document0.before("       ");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("v5Rrl", "v5Rrl");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.attr("v5Rrl", "Q]");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{bAc40@gr:|B$Tbh{f", "");
      // Undeclared exception!
      try { 
        document0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = new Document("v[RRL");
      Element element0 = document0.doClone(document0);
      // Undeclared exception!
      try { 
        element0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parse("zzhKf2wa4~#:lxq", "zzhKf2wa4~#:lxq");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$IndexLessThan", "org.jsoup.select.Evaluator$IndexLessThan");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.examples.HtmlToPlainText$FormattingVisitor", "org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.appendElement("");
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("v5Rrl", "v5Rrl");
      List<Node> list0 = Parser.parseFragment("v5Rrl", (Element) document0, "Fi63x3BH~cyH");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement("v5Rrl");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput("bd", "bd");
      // Undeclared exception!
      try { 
        document0.appendElement("v~Ph");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Tag tag0 = Tag.valueOf("XF t/V5");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "org.jsoup.nodes.Element$1", attributes0);
      // Undeclared exception!
      try { 
        element0.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.appendElement("br");
      List<Node> list0 = element0.childNodes();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.appendChild(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "body");
      Element element0 = document0.body();
      Element element1 = element0.doClone(document0);
      // Undeclared exception!
      try { 
        element0.appendChild(element1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{.bC", "{.bC");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(",~@yaXNn8", ",~@yaXNn8");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.append(",~@yaXNn8");
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parse("bgsound", "bgsound");
      Element element0 = document0.appendElement("bgsound");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      List<Node> list0 = Parser.parseFragment("bgsound", element0, "_O4", parseErrorList0);
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.append("bgsound");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("gCv5[", ")MIEF1)fo}");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Element element0 = new Element("=i3e%/~c");
      element0.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        element0.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sysQmZd", "org.jsoup.select.Evaluator$IsFirstOfType");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.after("sysQmZd");
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Tag tag0 = Tag.valueOf("-$i@4");
      FormElement formElement0 = new FormElement(tag0, ",1'4", (Attributes) null);
      Element element0 = formElement0.prependElement("y%]V'eq,;KF$;4kOW ");
      formElement0.empty();
      // Undeclared exception!
      try { 
        element0.after(",7Y$iqD]_DZO`");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Document.createShell("br");
      Comment comment0 = new Comment("L", "%");
      Element element0 = document0.doClone(comment0);
      // Undeclared exception!
      try { 
        element0.after("_eqF</{x");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("@\"K)MA5k|vy5G=#^N,1");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "PV.8", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Document.createShell("vAu");
      CharBuffer charBuffer0 = CharBuffer.allocate(42);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = new Document("v5Rl");
      document0.html((MockPrintWriter) null);
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parse("bgsound", "bgsound");
      document0.hasClass("");
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = new Document("v5Rl");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      element0.data();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=|03w", "");
      Element element0 = document0.body();
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(",~@yaXNn8", ",~@yaXNn8");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" X|@NQNWE5p'Rr", " X|@NQNWE5p'Rr");
      document0.setParentNode(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("-", "embed");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "");
      Element element0 = document0.body();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      element0.html("KrvF=msk");
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("}z^d~I", "}z^d~I");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("xsystdmZd", "xsystdmZd");
      Pattern pattern0 = Pattern.compile("xsystdmZd", 25);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "Pattern syntax error:");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bs", "bs");
      Pattern pattern0 = Pattern.compile(".");
      document0.getElementsByAttributeValueMatching("java.lang.string@0000000056", pattern0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse("K6%R ^/@_EC", "K6%R ^/@_EC");
      document0.select("br");
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parse("bgsound", "bgsound");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = new Document("i");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=i3e%/~c", "pk &(]-");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rcdataendtagname", "rcdataendtagname");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      document0.html();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parse("Mm>=u)7B5Lh-H62~R", "Mm>=u)7B5Lh-H62~R");
      StringBuilder stringBuilder0 = new StringBuilder(1309);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuilder0, 1309, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("            ", "br");
      document0.appendElement("br");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Element element0 = new Element("bgsound");
      MockPrintStream mockPrintStream0 = new MockPrintStream("bgsound");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(true);
      element0.outerHtmlHead(mockPrintStream0, 402, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Q/_r>%JT`hl", "sup");
      Element element0 = document0.appendElement("sup");
      element0.appendElement("sup");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = new Document("v5Rrl");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, (-2030), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "%B:RXCFKd OBN", attributes0);
      // Undeclared exception!
      try { 
        formElement0.val((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", ":contains(");
      Element element0 = document0.createElement("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Document.createShell("SZ");
      Element element0 = document0.addClass("SZ");
      document0.toggleClass("SZ");
      element0.toggleClass("SZ");
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      document0.addClass(")MIEF1)fo}");
      document0.toggleClass("#root");
      document0.hasClass("#root");
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.toggleClass("V;k{");
      element0.addClass("autofocus");
      document0.toggleClass("br");
      document0.hasClass("autofocus");
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Document.createShell("SZ");
      document0.addClass("SZ");
      document0.toggleClass("SZ");
      document0.hasClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sysFdmZd", "sysFdmZd");
      document0.addClass("Rn(z<2R[Qh,rCe^");
      document0.toggleClass("        ");
      document0.hasClass("sysFdmZd");
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Mm>=u)7B5Lh-H62~R", "Mm>=u)7B5Lh-H62~R");
      document0.addClass("yF9HSw");
      document0.hasClass("org.jsoup.nodes.FormElement");
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      document0.addClass(")MIEF1)fo}");
      document0.hasClass("#root.java.lang.String@0000000094.textarea");
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parse("ii", "ii");
      CDataNode cDataNode0 = new CDataNode("ii");
      document0.appendChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("v5Rrl", "v5Rrl");
      DataNode dataNode0 = new DataNode("&pW", "v5Rrl");
      document0.appendChild(dataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parse("systdmZd", "systdmZd");
      DataNode dataNode0 = new DataNode("ln|dlA:8#<w@cp!(d:$");
      document0.prependChild(dataNode0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!xaj5oM`1 Ittrm8ys", "!xaj5oM`1 Ittrm8ys");
      document0.setParentNode(document0);
      document0.getElementsMatchingText("7");
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      document0.appendElement("br");
      document0.appendElement("br");
      document0.getElementsContainingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      document0.getElementsContainingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Element element0 = new Element("systdmZd");
      CDataNode cDataNode0 = new CDataNode("systdmZd");
      Element element1 = element0.appendChild(cDataNode0);
      element1.getElementsMatchingText("systdmZd");
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(",~@yaXNny8", ",~@yaXNny8");
      document0.title(",~@yaXNny8");
      document0.getElementsMatchingText(",~@yaXNny8");
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Document.createShell("systdmZd");
      DataNode dataNode0 = new DataNode("systdmZd");
      Element element0 = document0.prependChild(dataNode0);
      element0.getElementsContainingOwnText("systdmZd");
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parse("v5Rrl", "v5Rrl");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parse("<html>\n <head></head>\n <body>\n  v5Rrl\n </body>\n</html>\n<q]></q]>", "method");
      Element element0 = document0.append("<html>\n <head></head>\n <body>\n  v5Rrl\n </body>\n</html>\n<q]></q]>");
      element0.getElementsMatchingText(",~@yaXNn8");
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parse("cf'qQo1GFm", "W6sl@3Z7n5e..nEL");
      document0.appendElement("br");
      document0.getElementsMatchingText("D^z'g4Vua0trn");
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Document.createShell(",~@yaXNn8");
      document0.prepend(",~@yaXNn8");
      Evaluator.ContainsText evaluator_ContainsText0 = new Evaluator.ContainsText("@%kX_");
      document0.is((Evaluator) evaluator_ContainsText0);
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("v5Rrl", "v5Rrl");
      Comment comment0 = new Comment("!4gj<9zspx`n;a");
      Element element0 = document0.prependChild(comment0);
      Pattern pattern0 = Pattern.compile("!4gj<9zspx`n;a", 1122);
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = new Document("E*W$F l ^*ey7B<");
      document0.getElementById(".`$8PG{@=");
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parse("bgsound", "bgsound");
      Element element0 = document0.appendElement("bgsound");
      Element element1 = element0.lastElementSibling();
      element1.siblingIndex = (-873);
      Pattern pattern0 = Pattern.compile("Unexpected count of entities loaded", (-873));
      // Undeclared exception!
      try { 
        element1.getElementsMatchingOwnText(pattern0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=|03w", "");
      Element element0 = document0.body();
      Element element1 = element0.wrap("=|03w");
      Node node0 = element1.nextSibling();
      node0.remove();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Element element0 = new Element("=i3e%/c");
      element0.appendTo(element0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{.bC", "{.bC");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parse("v5Rrl", "v5Rrl");
      document0.setParentNode(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("-", "embed");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("embed", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Tag tag0 = Tag.valueOf("RC<hv");
      Element element0 = new Element(tag0, "y`d:#C} h*MF%s");
      element0.nextElementSibling();
      assertEquals("y`d:#C} h*MF%s", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = new Document("xnfno");
      DocumentType documentType0 = new DocumentType(")jxE3 4O64Q8A_{", ")jxE3 4O64Q8A_{", "8`VMo3G,7OXRk*~^KX", "8`VMo3G,7OXRk*~^KX");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("M::ai9D}t~a", "M::ai9D}t~a");
      Element element0 = document0.appendTo(document0);
      Elements elements0 = element0.siblingElements();
      assertEquals("M::ai9D}t~a", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parse("zzhKf2wa4~#:lxq", ":root");
      document0.siblingElements();
      assertEquals(":root", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.examples.HtmlToPlainText$FormattingVisitor", "Children collection to be inserted must not be null.");
      Element element0 = document0.body();
      Element element1 = element0.wrap("org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
      String string0 = element1.cssSelector();
      assertEquals("html > head:nth-child(2) > body:nth-child(1)", string0);
      assertEquals("Children collection to be inserted must not be null.", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      document0.addClass(")MIEF1)fo}");
      document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("AfterAttributeName", "AfterAttributeName");
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        document0.insertChildren(32, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-2312), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Element element0 = new Element("=i3e%/c");
      Elements elements0 = element0.getElementsByTag("z{nF-^6_)&0d'+");
      // Undeclared exception!
      try { 
        element0.insertChildren(2948, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = new Document("Patern ytax er0ror: ");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-385), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      DataNode dataNode0 = DataNode.createFromEncoded("org.jsoup.nodes.Attributes$Dataset$DatasetIterator", "_");
      document0.appendChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertTrue(list0.contains(dataNode0));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("cite", "cite");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, list0.size());
      assertEquals("cite", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      List<TextNode> list0 = document0.textNodes();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parse("OfZ=A&", "OfZ=A&");
      document0.prepend("i!-%");
      document0.child(0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("syst6}emZd", "syst6}emZd");
      Elements elements0 = document0.getElementsByIndexGreaterThan(6);
      assertTrue(elements0.isEmpty());
      assertEquals("syst6}emZd", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Element element0 = new Element("systemZd");
      Element element1 = element0.selectFirst("systemZd");
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("{K", "{K");
      // Undeclared exception!
      try { 
        document0.is("s_TYZi0[)-d\u0002+r$%L");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'L'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G`w+8{]rK+s8", "v5Rrl");
      document0.getAllElements();
      assertEquals("v5Rrl", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = new Document(",~@yaXN|8");
      // Undeclared exception!
      try { 
        document0.before(" />");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      document0.getElementsByAttribute("br");
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Element element0 = new Element("ascii");
      Elements elements0 = element0.getElementsByAttributeValueNot("D Af@DE", "java.lang.string@0000000038 #root csascii iso-ir-6 ascii iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us");
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("}z^d~I", "}z^d~I");
      DocumentType documentType0 = new DocumentType("html", "PUBLIC", "html", "");
      // Undeclared exception!
      try { 
        document0.after((Node) documentType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("33", "head");
      document0.getElementsByAttributeValueContaining("$QL}bdH@mmA *", "63sRi6Q*P");
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Q/_r>%JT`hl", "sup");
      document0.getElementsByAttributeValueEnding("sup", "Q/_r>%JT`hl");
      assertEquals("sup", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = new Document("[");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_IsRoot0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parse("v5Rrl", "v5Rrl");
      document0.getElementsByAttributeValueMatching("f!\"OPm-", "#root");
      assertEquals("v5Rrl", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{bAc40@gr:|B$Tbh{f", "");
      Document document1 = (Document)document0.val("iAl~cfGv=");
      assertFalse(document1.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      assertEquals("br", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("F%xw$");
      Document document0 = parser0.parseInput((Reader) stringReader0, "");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{bAc40@gr:|B$Tbh{f", "");
      Elements elements0 = document0.getElementsByIndexLessThan((-1260));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Document.createShell("</");
      // Undeclared exception!
      try { 
        document0.after("</");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("HG)'[q\"!", "method");
      Elements elements0 = document0.getElementsMatchingOwnText("v5Rrl");
      assertEquals(0, elements0.size());
      assertEquals("method", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      assertEquals(1, element0.siblingIndex());
      
      String string0 = element0.cssSelector();
      assertEquals("br", element0.baseUri());
      assertEquals("html > body", string0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      document0.getElementsByAttributeValueStarting("br", "br");
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Element element0 = new Element("sjstd``d");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValue("\"", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Document document0 = Document.createShell("bgsound");
      document0.wholeText();
      assertEquals("bgsound", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!xaj5oM`1 Ittrm8ys", "!xaj5oM`1 Ittrm8ys");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Element element0 = new Element(",~@yaXNn8");
      Document document0 = Document.createShell(",~@yaXNn8");
      List<DataNode> list0 = document0.dataNodes();
      element0.insertChildren(0, (Collection<? extends Node>) list0);
      assertEquals(",~@yaXNn8", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("sysFdmZd", "sysFdmZd");
      document0.addClass("Rn(z<2R[Qh,rCe^");
      document0.hasClass("sysFdmZd");
      assertEquals("sysFdmZd", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Document document0 = Parser.parse("audio", "audio");
      document0.dataset();
      assertEquals("audio", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Document document0 = Document.createShell("bgsound");
      document0.prependText("");
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Document document0 = Parser.parse("OfZ=A&", "OfZ=A&");
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.child(0);
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      assertEquals("OfZ=A&", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Document document0 = Parser.parse("v5Rrl", "v5Rrl");
      document0.previousElementSiblings();
      assertEquals("v5Rrl", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Evaluator$IndexLessThan", "org.jsoup.select.Evaluator$IndexLessThan");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.wrap("#root");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("-", "embed");
      document0.nextElementSiblings();
  }
}
