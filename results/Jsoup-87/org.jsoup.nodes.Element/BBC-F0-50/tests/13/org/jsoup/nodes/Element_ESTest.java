/*
 * This file was automatically generated by EvoSuite
 * Fri Jul 30 08:43:25 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("#", " ");
      document0.attr("class", "Pattern syntax error: ");
      document0.addClass("#");
      document0.getElementsByClass("B3PTB3]pot");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parse("pattern syntax i^wzqq ", "pattern syntax i^wzqq ");
      document0.getElementsByAttributeValueEnding("%>=4jbz*", "html");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("menuitem", "menuitem");
      document0.appendElement("`|:A");
      Element element0 = document0.appendElement("menuitem");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(":nth-child(", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ":nth-child(", attributes0);
      Document document0 = Document.createShell(":nth-child(");
      Element element0 = document0.doClone(pseudoTextElement0);
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("O(`$", "syntax");
      Node[] nodeArray0 = new Node[9];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1985), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("&`9'iOTfu7u$");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(mockPrintWriter0, 221, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("xbkmdaj[");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "xbkmdaj[", attributes0);
      StringBuilder stringBuilder0 = new StringBuilder(19);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      pseudoTextElement0.outerHtmlHead(stringBuilder0, 19, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("US-ASCII", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "US-ASCII", attributes0);
      pseudoTextElement0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = new Document("script");
      Element element0 = document0.appendElement("script");
      element0.wrap("_5bm|bh");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.head();
      CDataNode cDataNode0 = new CDataNode("body");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("]|}b.RML$");
      FormElement formElement0 = new FormElement(tag0, "gHgv[JKFP,N9:O", attributes0);
      element0.after((Node) formElement0);
      formElement0.wrap("radio");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.head();
      element0.wrap("value");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ot*'nUh/[4*DBiBp&", "ot*'nUh/[4*DBiBp&");
      Element element0 = document0.body();
      element0.wrap("<body>\n ot*'nUh/[4*DBiBp&amp;\n</body>");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ot*'nUh/[4*DBiBp&", "ot*'nUh/[4*DBiBp&");
      Element element0 = document0.appendElement("Tag name must not be empty.");
      element0.val("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ER", "ER");
      document0.setSiblingIndex((-2868));
      document0.val("H");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$Id");
      Element element0 = document0.appendElement("script");
      element0.val((String) null);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("[\tyQ", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("value", "[\tyQ", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "[\tyQ", attributes1);
      pseudoTextElement0.val();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Tag tag0 = Tag.valueOf("f&lxVvKqT<f1");
      FormElement formElement0 = new FormElement(tag0, "f&lxVvKqT<f1", (Attributes) null);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "$G\",<<tJ)>~#l-kCr9", attributes0);
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) pseudoTextElement0;
      nodeArray0[1] = (Node) formElement0;
      pseudoTextElement0.insertChildren(0, nodeArray0);
      formElement0.toggleClass("u");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parse("?t", " ");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.siblingIndex = (-907);
      document0.toggleClass("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a>", "a>");
      Element element0 = document0.head();
      element0.toggleClass("JMOT,");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ot*'nUh/[4*DBiBp&", "={)SS@dS");
      Element element0 = document0.body();
      element0.text("class");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      document0.setParentNode(document0);
      document0.text("value");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("#");
      document0.text("#");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell("2");
      document0.siblingIndex = (-766);
      document0.tagName("2");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Tag tag0 = Tag.valueOf("f&lxVvKqT<f1");
      CDataNode cDataNode0 = new CDataNode("iLydMt}:;o");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, " ", attributes0);
      formElement0.tagName("tbody");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@XMoX", "@XMoX");
      Document document1 = Document.createShell("@XMoX");
      document0.appendTo(document1);
      document0.tagName("br");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("US-ASCII", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "US-ASCII", attributes0);
      pseudoTextElement0.tagName();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Element element0 = new Element("menuitem");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.Evaluator$Id", "org.jsoup.select.Evaluator$Id");
      Element element0 = document0.appendElement("script");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("#root", "bmT&?]HWAc&#7Lf|");
      document0.selectFirst("#root");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Document.createShell("?ghoyxl|f5!{`");
      document0.selectFirst("body");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ot*'nUh/[4*DB<iBp&", "ot*'nUh/[4*DB<iBp&");
      Element element0 = document0.appendElement("mO");
      element0.selectFirst("mO");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Element element0 = new Element("R");
      element0.select("R");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Document.createShell(":matches");
      document0.setSiblingIndex((-3353));
      document0.removeClass("");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.body();
      element0.removeClass("Index must be numeric");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Tag tag0 = Tag.valueOf("!u:Y7n}uodB=ex~S");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Pattern syntax error: ", attributes0);
      formElement0.removeClass(";+kqSAnx)Eic");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.appendElement("q\"q0jVK^!7GR*H4");
      document0.prependText("valueQRN^zuO");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = new Document("script");
      Element element0 = document0.appendElement("script");
      document0.prependElement("u T#`R.P");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ot*'nUh/[4*DBiBp&", "={)SS@dS");
      Element element0 = document0.body();
      element0.prependText("l{");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("US-ASCII", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "US-ASCII", attributes0);
      pseudoTextElement0.siblingIndex = 15;
      CDataNode cDataNode0 = new CDataNode("US-ASCII");
      pseudoTextElement0.prependChild(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("iV0C+p,ZV", "iV0C+p,ZV");
      Element element0 = document0.body();
      element0.prependChild(element0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.body();
      element0.prepend("xbkMaJ[");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.head();
      element0.prepend("value");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("class", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "aside", attributes0);
      formElement0.prepend("");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@XMoX", "@XMoX");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<!--", "Pattern syntax error: ");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Document document1 = new Document("org.jsoup.nodes.Element$2");
      document0.setParentNode(document1);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ot*'nUh/[4*DBiBp&", "org.jsoup.select.Evaluator");
      Element element0 = document0.appendElement("q\"q0jVK^!7GR*H4");
      document0.setParentNode(element0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ar", "ar");
      Element element0 = document0.body();
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|n`Ie`Xzom", "|n`Ie`Xzom");
      Tag tag0 = document0.tag();
      CDataNode cDataNode0 = new CDataNode("#");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "UO", attributes0);
      pseudoTextElement0.nodeName();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("menuitem", "menuitem");
      Element element0 = document0.doClone(document0);
      document0.prependElement("menuitem");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("'|'igoa3n<olcl.:d5", "menuitem");
      Element element0 = document0.appendElement("'|'igoa3n<olcl.:d5");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a>", "a>");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|n`Ie`Xzom", "|n`Ie`Xzom");
      Tag tag0 = document0.tag();
      CDataNode cDataNode0 = new CDataNode("#");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#", attributes0);
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      pseudoTextElement0.is((Evaluator) evaluator_IsEmpty0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("class", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("textarea");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "aside", attributes0);
      formElement0.is("class");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@XMoX", "@XMoX");
      Node[] nodeArray0 = document0.childNodesAsArray();
      document0.appendTo(document0);
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode(" P");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(" P", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.select.Evaluator$IndexGreaterThan", attributes0);
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      pseudoTextElement0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parse("menuitem", "menuitem");
      Element element0 = document0.appendElement("<6?}-$? w( SD:,HpM");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      element0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parse("?t", " ");
      Element element0 = document0.body();
      element0.html("i@K6u$-<pGL^");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Element element0 = new Element("If>vcEaPh5@A(#*:\"B/");
      element0.siblingIndex = (-3048);
      element0.html("^s+");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|n`Ie`Xzom", "|n`Ie`Xzom");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("class", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "aside", attributes0);
      File file0 = MockFile.createTempFile("cd@Ok", "s+");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      formElement0.html(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Element element0 = new Element("US-ASCII");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = new Document("{h`");
      document0.addClass("f&lxVvKqT<f1");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("value", "value");
      Pattern pattern0 = Pattern.compile("V~9X");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".", ".");
      Element element0 = document0.text("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
      element0.getElementsMatchingText("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ot*'nUh/[4*DBiBp&", "={)SS@dS");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Element element0 = new Element("q1Qv%XyuvYP(a_w");
      element0.getElementsMatchingOwnText("");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      document0.getElementsContainingText("value");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|n`Ie`Xzom", "|n`Ie`Xzom");
      document0.getElementsContainingOwnText("|n`Ie`Xzom");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@XMoX", "@XMoX");
      document0.getElementsByTag("xNs37:<%4Tz9");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|n`Ie`Xzom", "|n`Ie`Xzom");
      document0.getElementsByTag("#root");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ar", "ar");
      document0.getElementsByIndexLessThan(1351);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ar", "ar");
      document0.getElementsByIndexGreaterThan(58);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Document.createShell("class");
      document0.attr("class", "Pattern syntax error: ");
      document0.getElementsByAttributeValueStarting("class", "Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse("?t", " ");
      document0.getElementsByAttributeValueNot("JJTXX?SH*/nQitePSsJ", " ");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("Z?td", "html");
      document0.getElementsByAttributeValueNot("body", "#root");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("-", "-");
      document0.attr("+AS^", "-");
      document0.getElementsByAttributeValueMatching("+AS^", "");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("menuitem", "menuitem");
      Element element0 = document0.attr("menuitem", "menuitem");
      element0.getElementsByAttributeValueEnding("menuitem", "menuitem");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Document.createShell("class");
      document0.attr("class", "Pattern syntax error: ");
      document0.getElementsByAttributeValueContaining("class", "Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uCJA(y1%~]o", "uCJA(y1%~]o");
      document0.attr("uCJA(y1%~]o", "org.jsoup.nodes.Element$1");
      document0.getElementsByAttributeValue("uCJA(y1%~]o", "org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.attr("org.jsoup.nodes.Element", true);
      document0.getElementsByAttributeStarting("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("l.j7cJ", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("m32Z@47|)<`", "java.lang.string@0000000165 syntax i^wzqq ?t", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      Element element0 = new Element(tag0, "7egA", attributes1);
      element0.getElementsByAttribute("m32Z@47|)<`");
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.head();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.head();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = new Document("menuitem");
      document0.setSiblingIndex((-1790205693));
      document0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.head();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ot*'nUh/[4*DBiBp&", "={)SS@dS");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ot*'nUh/[4*DBiBp&", "ot*'nUh/[4*DBiBp&");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Element element0 = new Element("iNd");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[en(`/8~F<TGpH4>Dd", "[en(`/8~F<TGpH4>Dd");
      document0.siblingIndex = (-466);
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.body();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[en(`/8~F<TGpH4>Dd", "[en(`/8~F<TGpH4>Dd");
      document0.setParentNode(document0);
      Locale locale0 = Locale.KOREAN;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      document0.toggleClass("value");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("m32Z@47|)<`", "m32Z@47|)<`");
      document0.addClass("m32Z@47|)<`");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Element element0 = new Element("#feV+}&A_e9");
      element0.children();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "br", (Attributes) null);
      formElement0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ot*'nUh/[4*DBiBp&", "ot*'nUh/[4*DBiBp&");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ot*'nUh/[4*DB<iBp&", "ot*'nUh/[4*DB<iBp&");
      Element element0 = document0.appendElement("ot*'nUh/[4*DB<iBp&");
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parse("?t", "?t");
      Element element0 = document0.doClone(document0);
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Document.createShell("US-ASCII");
      Element element0 = document0.body();
      element0.before("MdN]Rj3SQ");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("m32Z@47|)<`", "m32Z@47|)<`");
      Element element0 = document0.doClone(document0);
      element0.before("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parse("#root", "bmT&?]HWAc&#7Lf|");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Element element0 = new Element("fWpBWp`L`'");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.toggleClass("value");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ar", "ar");
      Element element0 = document0.body();
      element0.attr("", false);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a>", "a>");
      Element element0 = document0.head();
      element0.attr("a>", true);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = new Document("menuitem");
      document0.setSiblingIndex((-1790205693));
      document0.attr("+", "menuitem");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Document.createShell(":nth-child(%d)");
      Element element0 = document0.body();
      document0.appendTo(element0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ot*'nUh/[4*DBiBp&", "={)SS@dS");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|n`Ie`Xzom", "|n`Ie`Xzom");
      Tag tag0 = document0.tag();
      CDataNode cDataNode0 = new CDataNode("#");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "UO", attributes0);
      pseudoTextElement0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("legend", "Q?/qNoD'@C-");
      Element element0 = document0.prependElement(">z");
      document0.prependElement("java.lang.string@0000000133 syntax i^wzqq ?t");
      element0.appendText("#root");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.head();
      element0.appendText("value");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Element element0 = new Element("menuitem");
      element0.appendText("menuitem");
      element0.selectFirst("menuitem");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("US-ASCII");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("head");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "InSelectInTable", attributes0);
      pseudoTextElement0.appendChild(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("class", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "aside", attributes0);
      Document document0 = new Document("\"s0");
      document0.appendChild(formElement0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("9XH$I!_ctQ#ro6", "");
      Element element0 = document0.append("hf1.cE-WU");
      element0.siblingIndex = 24;
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Tag tag0 = Tag.valueOf("O#*[P");
      CDataNode cDataNode0 = new CDataNode("v:cD");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "O#*[P", attributes0);
      Element element0 = pseudoTextElement0.html("v:cD");
      element0.siblingIndex = (-1546);
      element0.append("v:cD");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.head();
      element0.append("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Tag tag0 = Tag.valueOf("US-ASCII");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "US-ASCII", attributes0);
      pseudoTextElement0.append("");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.doClone(document0);
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ot*'nUh/[4*DBiBp&", "ot*'nUh/[4*DBiBp&");
      Element element0 = document0.body();
      DocumentType documentType0 = new DocumentType("body", "body", "body");
      element0.after((Node) documentType0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Document.createShell("4[|pTuR'H+(e[+~:MK");
      Document document1 = Parser.parseBodyFragment("4[|pTuR'H+(e[+~:MK", "4[|pTuR'H+(e[+~:MK");
      document1.setParentNode(document0);
      document1.after("n@ Bus%L@X@4yuy;ih");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.head();
      element0.after("value");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ER", "ER");
      document0.siblingIndex = (-1560);
      document0.addClass(":TRfa");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r4e>t", "r4e>t");
      Element element0 = document0.body();
      element0.addClass("\"xl_sjejs{");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.StructuralEvaluator$PreviousSibling", "value");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.wrap("org.jsoup.select.StructuralEvaluator$PreviousSibling");
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a>", "a>");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.val("r>");
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.vals = null;
      Tag tag0 = Tag.valueOf("xbkmdaj[");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "xbkmdaj[", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.val("#&6k?;<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Tag tag0 = Tag.valueOf("r4e>t");
      CDataNode cDataNode0 = new CDataNode("r4e>t");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "r4e>t", attributes0);
      String[] stringArray0 = new String[0];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        pseudoTextElement0.val(",/yYs0|");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ot*'nUh/[4*DBiBp&", "={)SS@dS");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("value", "value");
      Element element0 = document0.empty();
      // Undeclared exception!
      try { 
        element0.text("id");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Tag tag0 = Tag.valueOf("ot*'nuuh/[4*d<ibp&");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "ot*'nuuh/[4*d<ibp&", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!(GrMX1HI3", "!(GrMX1HI3");
      Element element0 = document0.appendElement("mO");
      List<Node> list0 = Parser.parseXmlFragment("mO", "!(GrMX1HI3");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("4[|pTuR'H+(e[+~:MK", "4[|pTuR'H+(e[+~:MK");
      TextNode textNode0 = TextNode.createFromEncoded("4[|pTuR'H+(e[+~:MK");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ER", "ER");
      Element element0 = document0.appendElement("ER");
      element0.siblingIndex = (-1742);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = new Document("#&k?;<");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.tagName("xd T8BN@uTQ{4dF:&");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("class", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "aside", attributes0);
      // Undeclared exception!
      try { 
        formElement0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Document document1 = new Document("org.jsoup.nodes.Element$2");
      document0.setParentNode(document1);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = new Document("|n`Ie`Xzom");
      CDataNode cDataNode0 = new CDataNode("#");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Document.createShell(":matches");
      // Undeclared exception!
      try { 
        document0.selectFirst("d!gw$o@oP%TN^LDzNT");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'd!gw$o@oP%TN^LDzNT': unexpected token at '!gw$o@oP%TN^LDzNT'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Tag tag0 = Tag.valueOf("f&lxVvKqT<f1");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "<%3|u@", (Attributes) null);
      // Undeclared exception!
      try { 
        pseudoTextElement0.select("}.h[;l*h{D{rY)*");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '}.h[;l*h{D{rY)*': unexpected token at '}.h[;l*h{D{rY)*'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|n`Ie`Xzom", "|n`Ie`Xzom");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("zQ>5zE0j}Ehwe:vm^HD", parseSettings0);
      Element element0 = new Element(tag0, "zQ>5zE0j}Ehwe:vm^HD");
      // Undeclared exception!
      try { 
        element0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ot*'nUh/[4*DBiBp&", "ot*'nUh/[4*DBiBp&");
      CDataNode cDataNode0 = new CDataNode("ot*'nUh/[4*DBiBp&");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("</", "</");
      TextNode textNode0 = new TextNode("attributeDoubleValueCharsSorted", "{1odbfB_zySv\"");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000105 syntax i^wzqq ?t", "menuitem");
      DataNode dataNode0 = new DataNode("java.lang.string@0000000105 syntax i^wzqq ?t", " ");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(document0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parse("?t", "?t");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prependElement("^T@");
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("?t", " ");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a>", "a>");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a>", "a>");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prepend("a>");
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|n`Ie`Xzom", "|n`Ie`Xzom");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("d7F", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("~sCz~*{@R");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "d7F", attributes0);
      formElement0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        formElement0.prepend("~sCz~*{@R");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Element element0 = new Element("menuitem");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("menuitem", true);
      element0.parentNode = (Node) xmlDeclaration0;
      // Undeclared exception!
      try { 
        element0.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[Rn(j/81F|<TGpH4>Dd", "[Rn(j/81F|<TGpH4>Dd");
      StringBuilder stringBuilder0 = new StringBuilder("[Rn(j/81F|<TGpH4>Dd");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      document0.outerHtmlTail(stringBuilder0, 32768, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Document.createShell("attributeDoubleValueCharsSorted");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, (-683), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parse("?t", " ");
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuilder0, (-2443), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("w_", "w_");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, 443, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = new Document("`5SC.Z(@");
      CharBuffer charBuffer0 = CharBuffer.allocate(106);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 1828, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ot*'nUh/[4*DBiBp&", "ot*'nUh/[4*DBiBp&");
      CharBuffer charBuffer0 = CharBuffer.allocate(6);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 694, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("menuitem", "menuitem");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, 8364, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parse(":matches(", "java.lang.string@0000000106 syntax i^wzqq ?t");
      TextNode textNode0 = new TextNode("US-ASCII", ":matches(");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Document.createShell("XpSaerX@[94WFf_y9gW");
      Element element0 = document0.body();
      element0.after((Node) document0);
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IsLastChild0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("", "p 1;");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Evaluator$Id");
      // Undeclared exception!
      try { 
        document0.is((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ot*!h/[4*DBiPp&", "ot*!h/[4*DBiPp&");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.is("width must be > 0");
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Document.createShell("kkzX:$LSAXF<h7*o#G");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      TextNode textNode0 = new TextNode("TzoM='a&e~klNZI=", "kkzX:$LSAXF<h7*o#G");
      nodeArray0[6] = (Node) textNode0;
      nodeArray0[7] = (Node) document0;
      textNode0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Tag tag0 = Tag.valueOf("G.7nR+");
      FormElement formElement0 = new FormElement(tag0, "class", (Attributes) null);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "+#HCxM(;vP;yq_", attributes0);
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) formElement0;
      nodeArray0[1] = (Node) pseudoTextElement0;
      nodeArray0[2] = (Node) pseudoTextElement0;
      nodeArray0[3] = (Node) pseudoTextElement0;
      nodeArray0[4] = (Node) formElement0;
      // Undeclared exception!
      try { 
        pseudoTextElement0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parse("class", " ");
      Elements elements0 = document0.children();
      // Undeclared exception!
      try { 
        document0.insertChildren(1, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parse("&/r:(cOzgoj .", "/Kl}ZX3d2");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.html("j@");
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = new Document("US-ASCII");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = new Document("class");
      DocumentType documentType0 = new DocumentType((String) null, "`e\r+lue.lw", (String) null, (String) null);
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.html("li");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ot*'nUh/[4*DBiBp&", "={)SS@dS");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", " ");
      document0.setParentNode(document0);
      StringWriter stringWriter0 = new StringWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0, 14);
      // Undeclared exception!
      document0.html(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$NodeList", "3]");
      char[] charArray0 = new char[5];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parse("pattern syntax i^wzqq ", "pattern syntax i^wzqq ");
      // Undeclared exception!
      try { 
        document0.html((MockPrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", " ");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("id", "2@nIaQu@soC%~6*");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4", "org.jsoup.select.Evaluator$IndexLessThan");
      CDataNode cDataNode0 = new CDataNode((String) null);
      document0.setParentNode(cDataNode0);
      Pattern pattern0 = Pattern.compile("4", 938);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText(pattern0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.parser.HtmlTreeBuilderState$24");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Element element0 = new Element("q1Qv%XyuvYP(W_w");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText("q1Qv%XyuvYP(W_w");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: q1Qv%XyuvYP(W_w
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@XMoX", "@XMoX");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Tag tag0 = Tag.valueOf("fQ&lxVvKqT<f1");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "fQ&lxVvKqT<f1", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText(")@pH^;lot}[i(z)dk");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: )@pH^;lot}[i(z)dk
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("menuitem", "menuitem");
      DocumentType documentType0 = new DocumentType("menuitem", "menuitem", "menuitem", (String) null, (String) null);
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("6n");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", " ");
      DataNode dataNode0 = new DataNode(";NCc#", "");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText(";NCc#");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("w_", "w_");
      Comment comment0 = new Comment("w_", (String) null);
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("#document");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a>", "a>");
      Element element0 = document0.head();
      element0.siblingIndex = (-105);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("a>");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8jJ#Dx#k", "'$w273GmPW");
      DataNode dataNode0 = DataNode.createFromEncoded("ap{7\"0Xb~k7:+Bnm$(", "ap{7\"0Xb~k7:+Bnm$(");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals((-3));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ins", "US-ASCII");
      // Undeclared exception!
      try { 
        document0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Tag tag0 = Tag.valueOf("DOCTYPE");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "DOCTYPE", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueStarting((String) null, "wa");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("class", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "class", attributes0);
      attributes0.put("6/!", true);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttributeValueMatching("6/!", (Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$AttributeWithValueMatching", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Tag tag0 = Tag.valueOf("p 1;");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "=%?X/9kFT3gUPSV8ozT", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttributeValueMatching("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|n`Ie`Xzom", "|n`Ie`Xzom");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("", "m32z@47|)<`");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: m32z@47|)<`
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "value");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding((String) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(".", ".");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", " ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("dW/eW& ):", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("m32Z@47|)<`", "m32Z@47|)<`");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.head();
      List<Node> list0 = Parser.parseFragment("f&lxVvKqT<f1", element0, "f&lxVvKqT<f1");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("JMOT,");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Element element0 = new Element("q1Qv%XyuvYP(a_w");
      // Undeclared exception!
      try { 
        element0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("class", "class");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementById("class");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("itemscope", "org.jsoup.select.StructuralEvaluator$PreviousSibling");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.head();
      element0.setSiblingIndex((-3107));
      // Undeclared exception!
      try { 
        document0.getElementById("value");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5SwUQ_\"K1K %", "script");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("?t", "?t");
      TextNode textNode0 = TextNode.createFromEncoded("*gm]M1B0\"x#i`W", "org.jsoup.select.Evaluator$Id");
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ot*'nUh/[4*DBiBp&", "ot*'nUh/[4*DBiBp&");
      DocumentType documentType0 = new DocumentType("<html>\n <head></head>\n <body>\n  ot*'nUh/[4*DBiBp&amp;\n </body>\n</html>\n<tag name must not be empty.></tag name must not be empty.>", "ot*'nUh/[4*DBiBp&", (String) null, ".C");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "class");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Element element0 = new Element("K-UmanM7%; \"gj/`");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      element0.addChildren(nodeArray0);
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'K-UmanM7%;': unexpected token at '%;'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = new Document("");
      DataNode dataNode0 = DataNode.createFromEncoded("p 1;", "u");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">6Cx[~1x{[?L[D$@nnh", "%zbcq+");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Element element0 = new Element("iNd");
      // Undeclared exception!
      try { 
        element0.child(14);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 14, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|n`Ie`Xzom", "|n`Ie`Xzom");
      Tag tag0 = document0.tag();
      CDataNode cDataNode0 = new CDataNode(" ");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "I", attributes0);
      // Undeclared exception!
      try { 
        formElement0.child((-1613));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Document.createShell("menuitem");
      CDataNode cDataNode0 = new CDataNode("menuitem");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.before((Node) document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a>", "a>");
      Element element0 = document0.head();
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        element0.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4[|pTuR'H+(e[~:MK", "4[|pTuR'H+(e[~:MK");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.before("4[|pTuR'H+(e[~:MK");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a>", "a>");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.attr("a>", "java.lang.string@0000000125 syntax error: br");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ScriptDataEscapedEndTagOpen", "ScriptDataEscapedEndTagOpen");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "Pattern syntax error: ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("class", "class");
      DocumentType documentType0 = new DocumentType("ctkass", "h>E*?kbMq*@'", "h>E*?kbMq*@'");
      Element element0 = document0.doClone(documentType0);
      // Undeclared exception!
      try { 
        element0.appendTo(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]s=qT,N#qXjk-", "]s=qT,N#qXjk-");
      Tag tag0 = Tag.valueOf("]s=qT,N#qXjk-");
      CDataNode cDataNode0 = new CDataNode("]s=qT,N#qXjk-");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, ") &Z}", attributes0);
      document0.parentNode = (Node) formElement0;
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$Id");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.appendElement("%zbcq+");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parse("_{SCn/S<", "_{SCn/S<");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement("ER");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$1");
      // Undeclared exception!
      try { 
        document0.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("US-ASCII", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "US-ASCII", attributes0);
      Document document0 = Parser.parse("US-ASCII", "US-ASCII");
      Element element0 = document0.doClone(pseudoTextElement0);
      // Undeclared exception!
      try { 
        element0.appendChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("US-ASCII", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "US-ASCII", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parse("?t", " ");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.append("f7x`geB.J");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Tag tag0 = Tag.valueOf("f&lxVvKqT<f1");
      FormElement formElement0 = new FormElement(tag0, "<NsH", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[%s=%s]", "[%s=%s]");
      CDataNode cDataNode0 = new CDataNode("<html>\n <head></head>\n <body>\n  [%s=%s]\n </body>\n</html>");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.append("Pattern syntax error: ");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.body();
      // Undeclared exception!
      try { 
        element0.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!(GrMX1HI3", "!(GrMX1HI3");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.after("]:'=D?24Eg");
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Element element0 = new Element("E");
      Document document0 = Parser.parseBodyFragment("E", "");
      element0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.after("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Document.createShell("value");
      DocumentType documentType0 = new DocumentType("#", "=;JVSuKyj[u /7", "org.jsoup.nodes.Element", "#");
      Element element0 = document0.doClone(documentType0);
      // Undeclared exception!
      try { 
        element0.after("defer");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("cT20g4+g/1Qt[[3 OiZ");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("(", parseSettings0);
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "#feV+}&A_e9");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.head();
      element0.html((CharArrayWriter) null);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("?t", "class");
      document0.attr("class", "Pattern syntax error: ");
      document0.hasClass("%zbcq+");
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parse("?t", " ");
      document0.attr("class", "Pattern syntax error: ");
      document0.hasClass("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Element element0 = new Element("q1Qv%XyuvYP(a_w");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(" ", "E~bK$osihz6Y4V8Ha");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("?t", "#&k?;<");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ot*'nUh/[4*DBiBp&", "={)SS@dS");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ot*'nUh/[4*DBiBp&", "ot*'nUh/[4*DBiBp&");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("menuitem", "menuitem");
      Element element0 = document0.appendElement("menuitem");
      Element element1 = element0.doClone(document0);
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("menuitem", "menuitem");
      Element element0 = document0.appendElement("menuitem");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("m32Z@47|)<`", "m32Z@47|)<`");
      Element element0 = document0.doClone(document0);
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("#root", "bmT&?]HWAc&#7Lf|");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ar", "ar");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Document.createShell("XpSaerX@[94WFf_y9gW");
      Evaluator.IsLastChild evaluator_IsLastChild0 = new Evaluator.IsLastChild();
      document0.is((Evaluator) evaluator_IsLastChild0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("class", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "class", attributes0);
      pseudoTextElement0.getElementsByAttributeValueMatching("6/!", (Pattern) null);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = new Document("f&lxVvKqT<f1");
      document0.select("bdi");
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("w}cOXy7t6k+UKJz+", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      pseudoTextElement0.id();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("0O0u5O$5XA", "(([+-])?(d+)?)n(s*([+-])?s*d+)?");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("menuitem", "menuitem");
      document0.prependElement("menuitem");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = new Document("script");
      Element element0 = document0.appendElement("script");
      element0.prependElement("script");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Element element0 = new Element("menuitem");
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Document.createShell("</k}bxf%v,N");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "</k}bxf%v,N");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5SwUQ_\"K1K %", "script");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings0);
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      Element element0 = document0.createElement("textarea");
      element0.val("<html>\n <head></head>\n <body>\n  textarea\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("textarea");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "rQ'Qtl8WJ,zKd\"H{", attributes0);
      pseudoTextElement0.val();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parse("?t", " ");
      Element element0 = document0.attr("class", "Pattern syntax error: ");
      document0.addClass("?t");
      element0.toggleClass("?t");
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      document0.toggleClass("Kdk<NlAk");
      Element element0 = document0.toggleClass("value");
      element0.hasClass("JMOT,");
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      document0.toggleClass("Kdk<NlAk");
      document0.hasClass("JMOT,");
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parse("class", " ");
      document0.attr("class", " ");
      document0.hasClass("pattern");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Document.createShell("class");
      document0.attr("class", "Pattern syntax error: ");
      document0.getElementsByClass("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zb#e)", "zb#e)");
      CDataNode cDataNode0 = new CDataNode((String) null);
      document0.prependChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Tag tag0 = Tag.valueOf("</");
      Element element0 = new Element(tag0, "?j]1}t;*:e=>{", (Attributes) null);
      Comment comment0 = new Comment("br", "?j]1}t;*:e=>{");
      element0.prependChild(comment0);
      element0.data();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@XMoX", "@XMoX");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Tag tag0 = Tag.valueOf("menuitem");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "menuitem", (Attributes) null);
      Comment comment0 = new Comment("?p(`{]J:Q0OU3<?");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      pseudoTextElement0.prependChild(xmlDeclaration0);
      pseudoTextElement0.hasText();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ar", "ar");
      Element element0 = document0.text("");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("zb#e)", "zb#e)");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ot*'nUh/[4*DBiBp&", "org.jsoup.select.Evaluator");
      document0.setParentNode(document0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!", "<!");
      document0.appendElement("br");
      document0.getElementsMatchingOwnText("[%s=%s]");
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("4~]66P*s/L+Rvt>z");
      Document document0 = parser0.parseInput((Reader) stringReader0, "9V]B X{]&M;O");
      CDataNode cDataNode0 = new CDataNode("/%Az@1v]*L7b u/:SS");
      document0.prependChild(cDataNode0);
      Pattern pattern0 = Pattern.compile("pP@|RRJ=~", 251);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("m32Z@47|)<`", "m32Z@47|)<`");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ot*'nUh/[e*DBiBp&", "ot*'nUh/[e*DBiBp&");
      Element element0 = document0.append("ot*'nUh/[e*DBiBp&");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Pattern syntax error: ", "28:8+'vquvhe");
      document0.append("28:8+'vquvhe");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parse("?t", " ");
      Element element0 = document0.prepend("r>");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ar", "ar");
      document0.title("ar");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parse("id", "2@nIaQu@soC%~6*");
      document0.appendElement("br");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<!--", "Pattern syntax error: ");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      document0.getElementById("Index must be numeric");
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "iLydMt}:;o");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ot*'nUh/[4*DBiBp&", "={)SS@dS");
      Element element0 = document0.body();
      element0.setParentNode(document0);
      Element element1 = element0.attr("8 Xx*\"lI]P)B(", "ot*'nUh/[4*DBiBp&");
      element1.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ot*'nUh/[4*DB<iBp&", "ot*'nUh/[4*DB<iBp&");
      Element element0 = document0.appendElement("mO");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a>", "a>");
      document0.setParentNode(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parse("9!*wpqmV|3?!15Y", "`^;D_a/");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.nextElementSibling();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Element element0 = new Element("menuitem");
      Comment comment0 = new Comment("menuitem", "menuitem");
      element0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        element0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tr", "tr");
      document0.siblingElements();
      assertEquals("tr", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Document.createShell("?ghoyxl|f5!{`");
      Element element0 = document0.body();
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals("?ghoyxl|f5!{`", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ot*'nUh/[4*DB<iBp&", "ot*'nUh/[4*DB<iBp&");
      Element element0 = document0.body();
      element0.after(":nth-child(%d)");
      String string0 = element0.cssSelector();
      assertEquals("html > body:nth-child(2)", string0);
      assertEquals("ot*'nUh/[4*DB<iBp&", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("iLydMt}:;o", "<NsH");
      document0.addClass("<NsH");
      document0.cssSelector();
      assertEquals("<NsH", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@XMoX", "@XMoX");
      Node[] nodeArray0 = document0.childNodesAsArray();
      Element element0 = document0.insertChildren(0, nodeArray0);
      assertEquals("@XMoX", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("US-ASCII", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "US-ASCII", attributes0);
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        pseudoTextElement0.insertChildren(1433, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=l?]B_n$&5Z_h_$", "=l?]B_n$&5Z_h_$");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      // Undeclared exception!
      try { 
        document0.insertChildren(1217, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ot*'nUh/[4*DBiBp&", "={)SS@dS");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1590), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parse("menuitem", "menuitem");
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertEquals("menuitem", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parse("clas", "clas");
      DataNode dataNode0 = DataNode.createFromEncoded(" > ", " > ");
      document0.prependChild(dataNode0);
      assertEquals(0, dataNode0.siblingIndex());
      
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("clas", document0.baseUri());
      assertTrue(list0.contains(dataNode0));
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("value", "value");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("value", document0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$NodeList", "3]");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("3]", document0.baseUri());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("m32Z@47|)<`", "m32Z@47|)<`");
      document0.getElementsByIndexEquals(0);
      document0.nextSibling();
      document0.dataNodes();
      Element.preserveWhitespace((Node) null);
      Document document1 = (Document)document0.attr("iLydMt}:;o", "iLydMt}:;o");
      document0.getElementsByIndexEquals(0);
      document1.dataset();
      document1.childNode(0);
      Document document2 = new Document("2g");
      document1.setParentNode(document0);
      document2.reparentChild(document0);
      document0.isBlock();
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.previousElementSibling();
      linkedHashSet0.stream();
      document2.hasClass("This is a searchable index. Enter search keywords: ");
      // Undeclared exception!
      try { 
        document0.prependChild(document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Document.createShell("4[|pTuR'H+(e[+~:MK");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-178189562));
      assertEquals(4, elements0.size());
      assertEquals(1, document0.childNodeSize());
      assertEquals("4[|pTuR'H+(e[+~:MK", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      Elements elements0 = document0.getElementsMatchingText("tr");
      assertEquals("value", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Attributes attributes0 = new Attributes();
      String string0 = "\\uBM5mq;]eT5*2#_G6";
      Tag tag0 = Tag.valueOf(string0, parseSettings0);
      Element element0 = new Element(tag0, "y:q_X.", attributes0);
      element0.getAllElements();
      assertEquals("y:q_X.", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Element element0 = new Element("US-ASCII");
      // Undeclared exception!
      try { 
        element0.before("US-ASCII");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("menuitem", "menuitem");
      document0.getElementsByAttribute("menuitem");
      assertEquals(1, document0.childNodeSize());
      assertEquals("menuitem", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = new Document("#root");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("head", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ot*'nUh/[4*DBiBp&", "ot*'nUh/[4*DBiBp&");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Element element0 = new Element("US-ASCII");
      Element element1 = element0.shallowClone();
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ot*'nUh/[4*DB<iBp&", "ot*'nUh/[4*DB<iBp&");
      document0.doSetBaseUri("ot*'nUh/[4*DB<iBp&");
      assertEquals("ot*'nUh/[4*DB<iBp&", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ot*'nUh/[4*DBiBp&", "ot*'nUh/[4*DBiBp&");
      DocumentType documentType0 = new DocumentType("body", "body", "body");
      // Undeclared exception!
      try { 
        document0.after((Node) documentType0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parse("id", "2@nIaQu@soC%~6*");
      document0.title(" >EErNy@");
      String string0 = document0.toString();
      assertEquals("2@nIaQu@soC%~6*", document0.baseUri());
      assertEquals("<html>\n <head>\n  <title> &gt;EErNy@</title>\n </head>\n <body>\n  id\n </body>\n</html>", string0);
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Document.createShell("class");
      document0.getElementsByAttributeValueContaining("class", "Pattern syntax error: ");
      assertEquals("class", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", " ");
      Elements elements0 = document0.getElementsContainingText(";NCc#");
      assertEquals(" ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a>", "a>");
      document0.is("pattern");
      assertEquals("a>", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parse("-", "-");
      document0.getElementsByAttributeValueMatching("+AS^", "");
      assertEquals("-", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parse("class", " ");
      Elements elements0 = document0.getElementsByIndexEquals((-515));
      assertEquals(" ", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("value", "value");
      document0.getElementsByAttributeStarting("value");
      assertEquals("value", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ot*'nUh/[4*DBiBp&", "ot*'nUh/[4*DBiBp&");
      Elements elements0 = document0.getElementsByIndexLessThan((-3107));
      assertEquals(1, document0.childNodeSize());
      assertEquals("ot*'nUh/[4*DBiBp&", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ot*'nUh/[4*DB<iBp&", "ot*'nUh/[4*DB<iBp&");
      // Undeclared exception!
      try { 
        document0.after(":nth-child(%d)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.prepend("org.jsoup.nodes.Element$2");
      element0.data();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ot*'nUh/[4*DB<iBp&", "ot*'nUh/[4*DB<iBp&");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertEquals("ot*'nUh/[4*DB<iBp&", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Document.createShell("class");
      document0.getElementsByAttributeValueStarting("class", "Pattern syntax error: ");
      assertEquals("class", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("uCJA(y1%~]o", "uCJA(y1%~]o");
      document0.getElementsByAttributeValue("uCJA(y1%~]o", "org.jsoup.nodes.Element$1");
      assertEquals("uCJA(y1%~]o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("r4e>t", "r4e>t");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Document.createShell(":matches");
      document0.wholeText();
      assertEquals(1, document0.childNodeSize());
      assertEquals(":matches", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Document.createShell("menuitem");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("w_", "w_");
      Elements elements0 = document0.getElementsContainingOwnText("#document");
      assertEquals(1, document0.childNodeSize());
      assertEquals("w_", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Document document0 = Document.createShell("#");
      Element element0 = document0.child(0);
      assertEquals("#", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Document document0 = Document.createShell("?ghoyxl|f5!{`");
      document0.previousElementSiblings();
      assertEquals("?ghoyxl|f5!{`", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.prependElement("br");
      document0.appendElement("br");
      document0.getElementsMatchingOwnText("br");
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "value");
      Pattern pattern0 = Pattern.compile("value");
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertEquals("value", document0.baseUri());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ot*'nUh/[e*DBiBp&", "ot*'nUh/[e*DBiBp&");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ot*'nUh/[4*DBiBp&", "ot*'nUh/[4*DBiBp&");
      // Undeclared exception!
      try { 
        document0.wrap("<body>\n ot*'nUh/[4*DBiBp&amp;\n</body>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Element element0 = new Element("menuitem");
      Elements elements0 = element0.nextElementSiblings();
      assertTrue(elements0.isEmpty());
  }
}
