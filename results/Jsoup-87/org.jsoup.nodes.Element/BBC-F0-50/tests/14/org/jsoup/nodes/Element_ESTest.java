/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 03:10:07 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("vddi|g", "dpewu*^]yn");
      document0.addClass("org.jsoup.nodes.Element$NodeList");
      document0.addClass("abs:");
      document0.hasClass("java.lang.string@0000000045");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell(", ");
      Element element0 = document0.createElement("<html>\n <head></head>\n <body></body>\n</html>");
      Element element1 = document0.doClone(element0);
      element1.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "`b,/0");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      MockFile mockFile0 = new MockFile("`b,/0", "`b,/0");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      document0.outerHtmlHead(mockPrintWriter0, 62, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = new Document("a]7)+aQ");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("QI]n/8DF4K", "~SD`OOJueBEdx");
      document0.doSetBaseUri("n\"R\"!]y\"-]U0D2$");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Document.createShell("tNj9'73$U85PG4j+2K");
      Parser parser0 = Parser.xmlParser();
      Document document1 = document0.parser(parser0);
      document1.wrap("area");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qW.", "qW.");
      Element element0 = document0.body();
      element0.wrap("qW.");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(", ", ", ");
      Element element0 = document0.body();
      element0.val("tH5");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Document.createShell(", ");
      Element element0 = document0.doClone(document0);
      element0.val(", ");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = new Document("s+");
      document0.val("h3");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("956QC3;p^ssa=[_G", "</");
      Element element0 = document0.head();
      element0.toggleClass("956QC3;p^ssa=[_G");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qW.", "qW.");
      Element element0 = document0.appendTo(document0);
      element0.toggleClass("h");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = new Document("AfterDoctypeSystemIdetifder");
      document0.toggleClass("AfterDoctypeSystemIdetifder");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdetifier");
      Element element0 = document0.body();
      element0.text("486e>|k]^");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Document.createShell(", ");
      Element element0 = document0.doClone(document0);
      element0.text("LiZ-[ut,!}Vb6@S0(");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("QI]n/8DF4K", "~SD`OOJueBEdx");
      document0.text("yS;L}");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("{tL>|1-b{Z1F", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "{tL>|1-b{Z1F", (Attributes) null);
      pseudoTextElement0.text();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = new Document("");
      document0.setSiblingIndex(58);
      document0.tagName("p2H!$=atM");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = new Document("u*6apQ-nTH)mo");
      document0.setSiblingIndex((-1800533407));
      document0.tagName("p2H!$=atM");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(", ", ", ");
      document0.tagName("head");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", " />");
      Element element0 = document0.head();
      element0.tagName(" />");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("or(.jsoup.nodes.Element$NodeLfst");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell(",5.");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(", ", ", ");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Document.createShell("\"dn8Bi|g");
      document0.selectFirst("J");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(",", ",");
      document0.select("U");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Document.createShell(":*ZtX{c(I<8bU");
      document0.setSiblingIndex((-3900));
      document0.removeClass("elfYuhr[u");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(", ", ", ");
      Element element0 = document0.body();
      element0.removeClass("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Document.createShell(":*ZtX{c(I<8bU");
      document0.removeClass("elfYuhr[u");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("E@*P.\"4]/x{", "E@*P.\"4]/x{");
      Document document1 = document0.clone();
      Element element0 = document0.head();
      element0.prependChild(document0);
      Element element1 = document1.appendTo(element0);
      element1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("U/", "x");
      Element element0 = document0.body();
      element0.prependText("");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Document.createShell("or(.jsoup.nodes.Element$NodeLfst");
      Element element0 = document0.appendTo(document0);
      Element element1 = document0.previousElementSibling();
      element0.prependChild(element1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("W{7~kR", "W{7~kR");
      Element element0 = document0.createElement(";p#a;`J<]Qnz5W/Gp");
      document0.prependChild(element0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("956QC3;p^ssa=[_G", "</");
      Element element0 = document0.head();
      element0.prepend("org.jsoup.internal.stringutil");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Document.createShell(", ");
      Element element0 = document0.doClone(document0);
      element0.prepend(".");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdentifier");
      document0.empty();
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(", ", ", ");
      Element element0 = document0.body();
      Element element1 = document0.doClone(element0);
      element1.parents();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parse("", "h");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("blockquote", "attributevalue_doublequoted");
      Element element0 = document0.body();
      document0.appendTo(element0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = new Document("rc'n");
      Document document1 = (Document)document0.doClone(document0);
      document1.parent();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = new Document("s+");
      document0.prependText("s+");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(", ", ", ");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdentifier");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qW.", "qW.");
      Element element0 = document0.appendTo(document0);
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qW", "qW");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Pattern pattern0 = Pattern.compile("", 15);
      Evaluator.Matches evaluator_Matches0 = new Evaluator.Matches(pattern0);
      document0.is((Evaluator) evaluator_Matches0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rc'n", "rc'n");
      Element element0 = document0.doClone(document0);
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      element0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("vddi|g", "vddi|g");
      document0.siblingIndex = 29;
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("vddi|g", "vddi|g");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = new Document("");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdentifier");
      document0.dataset();
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Document.createShell("~SD`OOJueBEdx");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("noresize", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "|p27I]Q-\"z'2]-~1;", attributes0);
      Pattern pattern0 = Pattern.compile(":", (-408));
      pseudoTextElement0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Tag tag0 = Tag.valueOf("WMdo5~:mE");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "WMdo5~:mE", attributes0);
      Element element1 = element0.prepend("~SD`OOJueBEdx");
      Pattern pattern0 = Pattern.compile("~SD`OOJueBEdx");
      element1.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Pattern pattern0 = Pattern.compile("blockquote", (-2239));
      Document document0 = Document.createShell("org.jsoup.internal.stringutil");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = new Document("");
      document0.getElementsMatchingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.getElementsContainingOwnText("<html>\n <head></head>\n <body></body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdetifier");
      document0.getElementsByTag(")");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Tag tag0 = Tag.valueOf("<html>\n <head></head>\n <body></body>\n</html>");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "aXxSoh", (Attributes) null);
      pseudoTextElement0.getElementsByTag("<html>\n <head></head>\n <body></body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(", ", ", ");
      document0.getElementsByIndexLessThan(1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Document.createShell(", ");
      document0.getElementsByIndexGreaterThan((-1110026255));
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.getElementsByAttributeValueMatching((String) null, "textarea");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("noresize", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.put("a", "noresize");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "AfterDoctypeSystemIdetifier", attributes0);
      pseudoTextElement0.getElementsByAttributeValueMatching("a", "");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = new Document("mUW!*U^bc![8,U\"7{");
      document0.getElementsByAttributeValueEnding("mUW!*U^bc![8,U\"7{", "oR*vMR.mOT1");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qW.", "qW.");
      document0.getElementsByAttributeValue("AfterDoctypeSystemIdentifier", "html");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      attributes0.put("iz~{_o[b", "datalist");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("iz~{_o[b", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "iz~{_o[b", attributes0);
      pseudoTextElement0.getElementsByAttributeStarting("iz~{_o[b");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qW.", "qW.");
      document0.appendTo(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parse("vddi|g", "dpewu*^]yn");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qW.", "qW.");
      Element element0 = document0.body();
      element0.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(",", ",");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("956QC3;p^ssa=[_G", "</");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("h9qmle+", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "", attributes0);
      element0.prependElement("org.jsoup.select.Evaluator$ContainsOwnText");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = new Document("iz~{_o[b");
      Element element0 = document0.val("iz~{_o[b");
      element0.siblingIndex = (-321);
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qW.", "qW.");
      Element element0 = document0.body();
      Set<String> set0 = element0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdentifier");
      document0.addClass(" }+cSDK>ot)%?5YB");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parse("", "org.jsoup.internal.stringutil");
      document0.addClass("");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parse("", "h");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Element element0 = new Element("~SD`OOJueBEdx");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = new Document("noframes");
      document0.normalise();
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parse("", "h");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("W{7~kR", "W{7~kR");
      Element element0 = document0.createElement(";p#a;`J<]Qnz5W/Gp");
      Element element1 = element0.doClone(document0);
      CDataNode cDataNode0 = new CDataNode("W{7~kR");
      element1.before((Node) cDataNode0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("textarea", ">m\u0002,Pdx7qci*Ch");
      document0.setParentNode(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdetifier");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("org.jsoup.select.Evaluator$Isroot", "");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(", ", ", ");
      Element element0 = document0.body();
      element0.attr("org.jsoup.nodes.Element$NodeList", false);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = new Document("~SD`OOJueBEdx");
      document0.attr("org.jsoup.nodes.Element$2", false);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.body();
      element0.attr("~ElKB`X]", "org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Document.createShell("or(.jsoup.nodes.Element$NodeLfst");
      Element element0 = document0.head();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(", ", ", ");
      Element element0 = document0.body();
      element0.appendText("html");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parse(", ", ", ");
      Element element0 = document0.appendElement(", ");
      element0.before("Cl");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = new Document("open");
      document0.appendElement("article");
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("or(.jsoup.nodes.Element$NodeLfst", "or(.jsoup.nodes.Element$NodeLfst");
      document0.appendTo(document0);
      Element element0 = document0.previousElementSibling();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("</", "</");
      CDataNode cDataNode0 = new CDataNode("9\"+U(LKK");
      document0.appendChild(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Document.createShell("~SD`OOueBPE");
      Element element0 = document0.body();
      element0.append("~SD`OOueBPE");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = new Document("body");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = new Document("or(.jsoup.nodes.Element$NodeLfst");
      Tag tag0 = Tag.valueOf("or(.jsoup.nodes.Element$NodeLfst");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "or(.jsoup.nodes.Element$NodeLfst", attributes0);
      document0.appendTo(element0);
      document0.after((Node) element0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse(", ", ", ");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdentifier");
      Element element0 = document0.body();
      element0.after("FX}DQl,lO_Fl)2o-/@");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3IX(AQo|+ai}Ul", "jqOXKk5=%gu");
      Element element0 = document0.prependElement("link");
      element0.after("jqOXKk5=%gu");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      Document document1 = new Document("iz~{_o[b");
      Element element0 = document0.appendTo(document1);
      element0.after("java.lang.string@0000000045 abs:");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qW.", "qW.");
      document0.setSiblingIndex((-414));
      document0.addClass("~SD`OOJueBEdx");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qW.", "qW.");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.wrap("4Ua2hwXlf#hYy=gnR");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Document.createShell(", ");
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parse("iz~{_o[b", "iz~{_o[b");
      Comment comment0 = new Comment("org.jsoup.select.Evaluator$IsRoot", "iz~{_o[b");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      Element element0 = document0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element0.wrap("y9ZJ>3FIsd_");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = new Document("s+");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.val("h3");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "g]l.h8Vn._4c>|*18x2", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.val((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("%V;(?)", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("iz~{_o[b", "[:(+''z{a5JorF'r4");
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.put(" />", false);
      String[] stringArray0 = new String[2];
      attributes2.vals = stringArray0;
      Attributes attributes3 = attributes2.put("%V;(?)", "");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "'(uao,", attributes3);
      // Undeclared exception!
      try { 
        pseudoTextElement0.val("keygen");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdetifier");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = new Document("W{7~kR");
      // Undeclared exception!
      try { 
        document0.text("br");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdentifier");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(", ", ", ");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.tagName("prs8");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdentifier");
      // Undeclared exception!
      try { 
        document0.tagName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(", ", ", ");
      Element element0 = document0.body();
      Element element1 = document0.doClone(element0);
      // Undeclared exception!
      try { 
        element1.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("noresize", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Qr~:{Ip<91j_y", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(", ", ", ");
      // Undeclared exception!
      try { 
        document0.select(".");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Tag tag0 = Tag.valueOf("X9#^qxjT._3?{$NDOaY");
      CDataNode cDataNode0 = new CDataNode("FX}DQl,lO_Fl)2o-/@");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "p", attributes0);
      // Undeclared exception!
      try { 
        formElement0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parse("X3fj/<eeD!", "X3fj/<eeD!");
      CDataNode cDataNode0 = new CDataNode("X3fj/<eeD!");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(", ", ", ");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.prependElement(", ");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("1v)~x@NX", "CC;4=d{CZ");
      List<Node> list0 = Parser.parseFragment("<html>\n <head></head>\n <body>\n  1v)~x@NX\n </body>\n</html>", (Element) document0, "CC;4=d{CZ");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependElement("#root");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000045", "iz~{_o[b");
      // Undeclared exception!
      try { 
        document0.prependElement("     ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("sortable", parseSettings0);
      Element element0 = new Element(tag0, "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        element0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(", ", ", ");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.prepend(", ");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("i", "i");
      Document document1 = document0.normalise();
      document1.childNodes = null;
      // Undeclared exception!
      try { 
        document1.prepend("k;.E+>p");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = new Document("rc'n");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "rc'n");
      document0.appendElement("rc'n");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(1624);
      // Undeclared exception!
      document0.outerHtmlTail(stringBuilder0, 8, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(", ", ", ");
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(1);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 56, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("noeize");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "noeize");
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, (-2347), (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 3809, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "`b,/0");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      MockFile mockFile0 = new MockFile("`b,/0", "`b,/0");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFile0);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintWriter0, (-2), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdetifier");
      TextNode textNode0 = TextNode.createFromEncoded("org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Document.createShell("html");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rc'n", "K");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("K", false);
      Element element0 = document0.doClone(xmlDeclaration0);
      // Undeclared exception!
      try { 
        element0.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("or(.jsoup.nodes.Element$NodeLfst", "or(.jsoup.nodes.Element$NodeLfst");
      Element element0 = document0.appendTo(document0);
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      // Undeclared exception!
      element0.is((Evaluator) evaluator_IsFirstChild0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("id", "id");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("</", "");
      // Undeclared exception!
      try { 
        document0.is("}@ER,");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '}@ER,': unexpected token at '}@ER,'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vddi|g", "|7`I%t7{ E_4hJ'2^");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parse("6uX9p>wT(~,/Rn#E8 ", "6+@'F'$");
      List<Node> list0 = document0.ensureChildNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), (Collection<? extends Node>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rc'n", "f");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.html("EXclv<G");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("AfterDoctypeSystemIdetifier", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "& '4A%Kk", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdetifier");
      DataNode dataNode0 = new DataNode("L");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.html("KJNu-Gb`WlG\"^cruD");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", " ");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("or(.jsoup.nodes.Element$NodeLfst", "or(.jsoup.nodes.Element$NodeLfst");
      document0.appendTo(document0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("title");
      // Undeclared exception!
      document0.html(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Document.createShell("or(.jsoup.nodes.Element$NodeLfst");
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(",", ",");
      // Undeclared exception!
      try { 
        document0.html((BufferedWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Document.createShell(">ExV5]_%U,0RMmf");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.html();
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qW.", "qW.");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = new Document("qW.");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = new Document("qW.");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("h)sn}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: h)sn}
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("956QC3;p^ssa=[_G", "</");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdetifier");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = new Document("u*6apQ-nTH)mo");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("u*6apQ-nTH)mo");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: u*6apQ-nTH)mo
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("or(.jsoup.nodes.Element$NodeLfst", "or(.jsoup.nodes.Element$NodeLfst");
      DocumentType documentType0 = new DocumentType("[%s*=%s]", "[%s*=%s]", "org.jsoup.nodes.Element$1", "or(.jsup.ods.elementnodelft", "[%s*=%s]");
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("or(.jsoup.nodes.Element$NodeLfst");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Tag tag0 = Tag.valueOf("=8>>");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Co", (Attributes) null);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^1", "^1");
      // Undeclared exception!
      try { 
        document0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "org.jsoup.parser.Token$EOF");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Document.createShell(":*ZtX{c(I<8bU");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("body", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Tag tag0 = Tag.valueOf("W{7~kR");
      Element element0 = new Element(tag0, "W{7~kR");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching((String) null, "W{7~kR");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: W{7~kR
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = new Document(",");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining(",", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Attributes");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "#");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(", ", ", ");
      Element element0 = document0.body();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementById("samp");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Document.createShell(":*ZtX{c(I<8bU");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdentifier");
      CDataNode cDataNode0 = new CDataNode("FX}DQl,lO_Fl)2o-/@");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("U/", "x");
      Element element0 = document0.body();
      element0.addClass("U/");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'body.java.lang.String@0000000054': unexpected token at '@0000000054'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdetifier");
      TextNode textNode0 = TextNode.createFromEncoded("AfterDoctypeSystemIdetifier", "AfterDoctypeSystemIdetifier");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"dn8Bi|g", "\"dn8Bi|g");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("plaintext", "plaintext");
      // Undeclared exception!
      try { 
        document0.child(8212);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8212, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qW.", "qW.");
      document0.appendTo(document0);
      document0.setSiblingIndex((-414));
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("i&(?", "i&(?");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.before("java.lang.string@0000000045 }abs:");
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(", ", ", ");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.attr(", ", "qZk");
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = new Document("rc'n");
      // Undeclared exception!
      try { 
        document0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Qr~:{Ip<91j_y", "Qr~:{Ip<91j_y");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse("", "h");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ojWJ{?xg!/*H_cF", "class");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("iz~{_o[b", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "iz~{_o[b", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("body", "body");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Document.createShell(", ");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("or(.jsoup.nodes.Element$NodeLfst", "or(.jsoup.nodes.Element$NodeLfst");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      try { 
        element0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(", ", ", ");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.after(", ");
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = new Document("\"dn8Bi|g");
      Element element0 = document0.doClone(document0);
      // Undeclared exception!
      try { 
        element0.after("\"dn8Bi|g");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Element element0 = new Element("27v9(:k");
      TextNode textNode0 = TextNode.createFromEncoded(")", ",");
      element0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        element0.after("27v9(:k");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parse("", "h");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[3];
      attributes0.keys = stringArray0;
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("iz~{_o[b", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "iz~{_o[b", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.addClass("iz~{_o[b");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "U%@8uAd_X4w[Se", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("u\"pKe<PTj%U5", "u\"pKe<PTj%U5");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "Y");
      document0.html(stringBuilder0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdetifier");
      Element element0 = document0.addClass(">N00");
      document0.addClass(">N00");
      element0.hasClass(">N00");
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdetifier");
      Element element0 = document0.addClass("FWf{T`_xZ8.JP#RIk8b");
      element0.hasClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Document.createShell("~SD`OOueBPE");
      document0.hasClass("~SD`OOueBPE");
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Element element0 = new Element("_W_|QGp7qJ7R=aF");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.appendText("?8^h/sB[>W|up5[)c");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.appendText("?8^?/sB[>W|up5[)c");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = new Document("W{7~kR");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qW.", "qW.");
      document0.appendTo(document0);
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parse("or(.jsoup.nodes.Element$NodeLfst", "or(.jsoup.nodes.Element$NodeLfst");
      document0.appendTo(document0);
      Element element0 = document0.previousElementSibling();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parse("or(.jsoup.nodes.Element$NodeLfst", "or(.jsoup.nodes.Element$NodeLfst");
      document0.appendTo(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Document.createShell(", ");
      Element element0 = document0.doClone(document0);
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Document.createShell("~SD`OOueBPE");
      Element element0 = document0.head();
      element0.html("b7-6GRrt(");
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse(", ", ", ");
      document0.removeAttr(", ");
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.dataset();
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = new Document("");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdetifier");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parse("", "h");
      Pattern pattern0 = Pattern.compile("", (-2239));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "`b,/0");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Document.createShell("tNj9'73$U85PG4j+2K");
      document0.attr("tNj9'73$U85PG4j+2K", "org.jsoup.select.Evaluator$Isroot");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qW", "qW");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(", ", ", ");
      Element element0 = document0.createElement(", ");
      document0.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qW.", "qW.");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("or(.jsoup.nodes.Element$NodeLfst", "or(.jsoup.nodes.Element$NodeLfst");
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      document0.is((Evaluator) evaluator_IsFirstChild0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parse("X_emqXp-f~>_S;@2^", "X_emqXp-f~>_S;@2^");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qwn5.", "KIjubB/E`m4+Hi$`XD:");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = new Document("4-4ME5*Fp");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(62);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0, false);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(mockPrintWriter0, 62, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parse("6^yj\"vxnlO]o%#+,", "6^yj\"vxnlO]o%#+,");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "6^yj\"vxnlO]o%#+,");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 24576, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdetifier");
      document0.title("AfterDoctypeSystemIdetifier");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(",", ",");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "AfterDoctypeSystemIdetifier", attributes0);
      pseudoTextElement0.val();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("vddi|g", "vddi|g");
      document0.addClass("org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.addClass("abs:");
      element0.toggleClass("abs:");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.toggleClass("<html>\n <head></head>\n <body></body>\n</html>");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = new Document("AfterDoctypeSystemIdetifder");
      document0.addClass("AfterDoctypeSystemIdetifder");
      document0.addClass("AfterDoctypeSystemIdetifder");
      document0.getElementsByClass("AfterDoctypeSystemIdetifder");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Document.createShell(", ");
      document0.addClass(", ");
      document0.addClass(", ");
      document0.hasClass(" }+cSDK>ot)%?5YB");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"dn8Bi|g", "\"dn8Bi|g");
      Element element0 = document0.addClass("\"dn8Bi|g");
      document0.addClass("Tag name must not be empty.");
      element0.hasClass("|WX");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"dn8Bi|g", "\"dn8Bi|g");
      Element element0 = document0.addClass("\"dn8Bi|g");
      element0.hasClass("|WX");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Document.createShell("\"dn8Bi|g");
      Element element0 = document0.addClass("\"dn8Bi|g");
      Element element1 = element0.addClass("\"dn8Bi|g");
      element1.getElementsByClass("java.lang.string@0000000047");
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdentifier");
      Element element0 = document0.addClass("AfterDoctypeSystemIdentifier");
      element0.hasClass("AfterDoctypeSystemIdentifier");
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parse("or(.jsoup.nodes.Element$NodeLfst", "or(.jsoup.nodes.Element$NodeLfst");
      Element element0 = document0.addClass("or(.jsoup.nodes.Element$NodeLfst");
      element0.getElementsByClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Tag tag0 = Tag.valueOf("u");
      CDataNode cDataNode0 = new CDataNode("u");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "u", attributes0);
      pseudoTextElement0.removeClass("O");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parse("", "h");
      Element element0 = document0.appendText("");
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(", ", ", ");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("rc'n", "f");
      document0.appendTo(document0);
      Element.preserveWhitespace(document0);
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(", ", ", ");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(", ", ", ");
      Element element0 = document0.appendText("u*6apQ-nTH)mo");
      element0.getElementsContainingText("34ry}tqpk++.r|ry|8");
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdetifier");
      document0.title("AfterDoctypeSystemIdetifier");
      Element element0 = document0.body();
      element0.wrap("-->");
      document0.getElementsContainingText("ejBMb4l");
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("or(.jsoup.nodes.Element$NodeLfst", "or(.jsoup.nodes.Element$NodeLfst");
      document0.title("or(.jsoup.nodes.Element$NodeLfst");
      document0.getElementsContainingText("or(.jsoup.nodes.Element$NodeLfst");
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = new Document("rc'n");
      document0.getElementById("rc'n");
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Document.createShell("\"dn8Bi|g");
      Element element0 = document0.doClone(document0);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Document.createShell(", ");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdentifier");
      Element element0 = document0.body();
      document0.appendTo(element0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      element1.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Document.createShell(">ExV5]_%U,0RMmf");
      Element element0 = document0.body();
      Element element1 = document0.appendTo(element0);
      element1.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Document.createShell("AfterDoctypeSystemIdetifier");
      Element element0 = document0.body();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(", ", ", ");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Tag tag0 = Tag.valueOf("gg])");
      Element element0 = new Element(tag0, ",5.");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Document.createShell("/{6`,l_k");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("/{6`,l_k", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("template", "N-edSUw");
      document0.siblingElements();
      assertEquals("N-edSUw", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(", ", ", ");
      document0.appendChild(document0);
      document0.siblingElements();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Document.createShell("/{6`,l_k");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals("/{6`,l_k", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("vddi|g", "vddi|g");
      document0.addClass("org.jsoup.nodes.Element$NodeList");
      document0.cssSelector();
      assertEquals("vddi|g", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Tag tag0 = Tag.valueOf("java.lang.string@0000000039");
      CDataNode cDataNode0 = new CDataNode("java.lang.string@0000000039");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("id", "java.lang.string@0000000039");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "id", attributes1);
      pseudoTextElement0.cssSelector();
      assertEquals("id", pseudoTextElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parse("", "h");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren(630, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parse("", "h");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren((-331), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("W_", "html");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(1, nodeArray0);
      assertEquals("html", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "`b,/0");
      Elements elements0 = document0.getElementsMatchingText("`b,/0");
      // Undeclared exception!
      try { 
        document0.insertChildren(17, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Document.createShell(", ");
      Elements elements0 = document0.parents();
      // Undeclared exception!
      try { 
        document0.insertChildren((-944), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = new Document("AfterDoctypeSystemIdetifier");
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      Element element0 = document0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
      assertEquals("AfterDoctypeSystemIdetifier", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parse("6^yj\"vxnlO]o%#+,", "6^yj\"vxnlO]o%#+,");
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
      assertEquals("6^yj\"vxnlO]o%#+,", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Document.createShell("or(.jsoup.nodes.Element$NodeLfst");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("or(.jsoup.nodes.Element$NodeLfst", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("org.jsoup.internal.stringut{l", "org.jsoup.internal.stringut{l");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, list0.size());
      assertEquals("org.jsoup.internal.stringut{l", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "`b,/0");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("`b,/0", document0.baseUri());
      assertEquals(0, list0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(", ", ", ");
      Elements elements0 = document0.getElementsByIndexGreaterThan(62);
      assertTrue(elements0.isEmpty());
      assertEquals(", ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parse("", "h");
      // Undeclared exception!
      try { 
        document0.selectFirst("?8^h/sB[>W|up5[)c");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '?8^h/sB[>W|up5[)c': unexpected token at '?8^h/sB[>W|up5[)c'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Elements elements0 = document0.getAllElements();
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Document.createShell("%Ob3P");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parse(", ", ", ");
      // Undeclared exception!
      try { 
        document0.before("Cl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = new Document("u*6apQ-nTH)mo");
      document0.getElementsByAttribute("ytu{66_-Lu");
      assertEquals("u*6apQ-nTH)mo", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Document.createShell(":*ZtX{c(I<8bU");
      document0.getElementsByAttributeValueNot("elfYuhr[u", ":*ZtX{c(I<8bU");
      assertEquals(1, document0.childNodeSize());
      assertEquals(":*ZtX{c(I<8bU", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Document.createShell("or(.jsoup.nodes.Element$NodeLfst");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.appendElement((String) null);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(", ", ", ");
      Element element0 = document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
      assertEquals(", ", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse(", ", ", ");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("template", "N-edSUw");
      document0.getElementsByAttributeValueContaining("(8F(L_San", "gvIeNLce,Gt{SU");
      assertEquals("N-edSUw", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Tag tag0 = Tag.valueOf("java.lang.string@0000000039");
      CDataNode cDataNode0 = new CDataNode("java.lang.string@0000000039");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "id", attributes0);
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element$2", 1196);
      pseudoTextElement0.getElementsByAttributeValueMatching("org.jsoup.nodes.Element$2", pattern0);
      assertEquals("id", pseudoTextElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Document.createShell("u+&wSb<VT{9PL%s&");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "nU2~3V.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Document.createShell("blockquote");
      document0.is("id");
      assertEquals(1, document0.childNodeSize());
      assertEquals("blockquote", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Tag tag0 = Tag.valueOf("W{7~kR");
      Element element0 = new Element(tag0, "W{7~kR");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("W{7~kR", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Tag tag0 = Tag.valueOf("8;ElOO?MR|_");
      CDataNode cDataNode0 = new CDataNode("");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "8;ElOO?MR|_", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.wrap("(2t{I[DId#F");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parse("X3fj/<eeD!", "X3fj/<eeD!");
      Elements elements0 = document0.getElementsByIndexEquals(21);
      assertEquals("X3fj/<eeD!", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("iz~{_o[b", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "iz~{_o[b", attributes0);
      pseudoTextElement0.getElementsByAttributeStarting("iz~{_o[b");
      assertEquals("iz~{_o[b", pseudoTextElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsByIndexLessThan((-4074));
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3IX(AQo|+ai}Ul", "jqOXKk5=%gu");
      // Undeclared exception!
      try { 
        document0.after("jqOXKk5=%gu");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = new Document("");
      Elements elements0 = document0.getElementsMatchingOwnText("");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("or(.jsoup.nodes.Element$NodeLfst", "or(.jsoup.nodes.Element$NodeLfst");
      document0.prepend("#root");
      document0.appendTo(document0);
      document0.previousElementSibling();
      assertEquals(3, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("template", "N-edSUw");
      document0.getElementsByAttributeValueStarting("template", "template");
      assertEquals("N-edSUw", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("template", "N-edSUw");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("zH", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Document.createShell("~SD`OOueBPE");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = new Document("");
      String string0 = document0.wholeText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("W{7~kR", "W{7~kR");
      CDataNode cDataNode0 = new CDataNode("W{7~kR");
      // Undeclared exception!
      try { 
        document0.before((Node) cDataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qwn5.", "KIjubB/E`m4+Hi$`XD:");
      Elements elements0 = document0.getElementsContainingOwnText("");
      assertEquals("KIjubB/E`m4+Hi$`XD:", document0.baseUri());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parse("or(.jsoup.nodes.Element$NodeLfst", "or(.jsoup.nodes.Element$NodeLfst");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "`b,/0");
      // Undeclared exception!
      try { 
        document0.child((-2067947214));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Tag tag0 = Tag.valueOf("=8>>");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Co", (Attributes) null);
      pseudoTextElement0.previousElementSiblings();
      assertEquals("Co", pseudoTextElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("QI]n/8DF4K", "~SD`OOJueBEdx");
      Elements elements0 = document0.getElementsMatchingText("QI]n/8DF4K");
      assertEquals("~SD`OOJueBEdx", document0.baseUri());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.appendText("?8^h/sB[>W|up5[)c");
      Elements elements0 = element0.getElementsContainingText("#root");
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Document.createShell("blockquote");
      Elements elements0 = document0.select(":last-child");
      assertEquals("blockquote", document0.baseUri());
      assertEquals(1, elements0.size());
  }
}
