/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 23:02:05 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.IOException;
import java.io.OutputStream;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&g*c%", "&g*c%");
      Comment comment0 = new Comment("s+", "H}k-1>]=`QY0}f");
      Element element0 = document0.appendChild(comment0);
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = new Document("t!");
      document0.toggleClass("t!");
      Element element0 = document0.toggleClass("f(!");
      element0.hasClass("~>6>Ox{{f");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Document.createShell("LBw*V|LWNa{.B");
      document0.prependElement("LBw*V|LWNa{.B");
      document0.appendChild(document0);
      document0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = new Document("aAbyJ");
      document0.parentNode = (Node) document0;
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cm&w:", "cm&w:");
      Node[] nodeArray0 = new Node[8];
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t!", "t!");
      LinkedHashSet<XmlDeclaration> linkedHashSet0 = new LinkedHashSet<XmlDeclaration>();
      document0.insertChildren(1, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&g*c%", "&g*c%");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(stringWriter0, 2218, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7Y8bMO-rP@<'vZ{'bL)", "7Y8bMO-rP@<'vZ{'bL)");
      File file0 = MockFile.createTempFile("7Y8bMO-rP@<'vZ{'bL)", "7Y8bMO-rP@<'vZ{'bL)");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(mockPrintStream0, 3, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Element element0 = new Element("2a=vr:mN5o}~");
      element0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("_", "_");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.doSetBaseUri("Z<Pw]4e~D3v");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("KeW=?", "KeW=?");
      document0.wrap("KeW=?");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = new Document("AttributeValue_singleQuoted");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t!", "t!");
      Element element0 = document0.body();
      element0.val("F}en*g_N$4");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Element element0 = new Element("CTNTINUE");
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("CTNTINUE", "CTNTINUE");
      element0.appendTo(document0);
      element0.val("CTNTINUE");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.siblingIndex = (-1424);
      document0.toggleClass("");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parse("VE]{Z]-3-", " [");
      Element element0 = document0.body();
      element0.toggleClass(" [");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Document.createShell(":er LUTP\"hTfd;");
      document0.appendTo(document0);
      document0.text("textarea");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parse("t!", "t!");
      Element element0 = document0.head();
      element0.text("t!");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse("t!", "t!");
      document0.text("t!");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Document.createShell("~>6>Ox{{f");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bp", "bp");
      Element element0 = document0.appendElement("bp");
      element0.tagName("bp");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Element element0 = new Element("~kJ7rxHvvR5B0A.wnd");
      element0.tagName();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Element element0 = new Element("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aN#yJ", "aN#yJ");
      document0.tagName("small");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "wy7O<}X%T1(47");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aN#yJ", "aN#yJ");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("tbody", "liO>1=;n");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("i", "i");
      document0.selectFirst("#root");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Element element0 = new Element("br");
      element0.selectFirst("br");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("body", "i=_#9$]");
      document0.selectFirst("body");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Element element0 = new Element("2a=vr:mN5o}~");
      element0.select("8yt");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("html");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "html", attributes0);
      element0.removeClass("html");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("#root", "-");
      Element element0 = document0.appendElement("L#iZHT/h:K[X.;haLi8");
      element0.removeClass("[|c{$q)$");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parse("#root", "-");
      Element element0 = document0.empty();
      element0.removeClass("[|c{$q)$");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Pattern syntax error: ", "Children collection to be inserted must not be null.");
      Element element0 = document0.prependText("C9");
      Element element1 = element0.appendElement(";IXk");
      element1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parse(";tmJ;U.%6", ";tmJ;U.%6");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bp", "bp");
      Element element0 = document0.appendElement("bp");
      element0.siblingIndex = (-265);
      element0.prependText("MM]+");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/G(kx", "/G(kx");
      Element element0 = document0.body();
      element0.prependText("2a=vr:mN5o}~");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aN#yJ", "aN#yJ");
      document0.prependElement("tr");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.appendElement("ls");
      Element element1 = new Element("org.jsoup.select.Evaluator$IndexGreaterThan");
      element0.prependChild(element1);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("ul", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "ul", attributes0);
      formElement0.prependChild(formElement0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Document.createShell("~>6>Ox{{f");
      Document document1 = Parser.parseBodyFragmentRelaxed("br", "2-?0/HRc=Imyaf|OL8N");
      document1.appendTo(document0);
      document1.prepend("2-?0/HRc=Imyaf|OL8N");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Element element0 = new Element("br");
      element0.setSiblingIndex((-782));
      element0.prepend("br");
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("tbody", "liO>1=;n");
      Element element0 = document0.head();
      element0.prepend("tbody");
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Tag tag0 = Tag.valueOf("reversed");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "reversed", attributes0);
      formElement0.prepend("");
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("u/uW(psBWZo]~8Fa*", "u/uW(psBWZo]~8Fa*");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("td!", "td!");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(}4?O1%g", " ");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aN#yJ", "aN#yJ");
      Element element0 = new Element("a");
      document0.appendChild(element0);
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aN#yJ", "aN#yJ");
      document0.appendChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parse("bW", "bW");
      Element element0 = document0.appendElement("bW");
      List<Node> list0 = Parser.parseXmlFragment("rp", "rp");
      element0.childNodes = list0;
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = new Document("xpcXyC");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Lk^Kd^~Zj-92.9,Wj:", "Lk^Kd^~Zj-92.9,Wj:");
      Element element0 = document0.body();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parse("Fgx%", "#cmmeat");
      Document document1 = new Document("#cmmeat");
      document0.appendChild(document1);
      document1.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t!", "t!");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("~C!@0-cfFkJQ@IX~F[", "P\f1-6M#L0C/Iy%^S");
      document0.is((Evaluator) evaluator_AttributeWithValueNot0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Element element0 = new Element("br");
      element0.is("br");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = new Document("G!cO(K");
      Node[] nodeArray0 = new Node[1];
      document0.html("^sr_lG(x|#;\"[MP");
      nodeArray0[0] = (Node) document0;
      document0.insertChildren(1, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      LinkedHashSet<XmlDeclaration> linkedHashSet0 = new LinkedHashSet<XmlDeclaration>();
      document0.insertChildren(1, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("id", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "id", attributes0);
      formElement0.siblingIndex = 4492;
      formElement0.html("s+");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Document.createShell("~>6>Ox{{f");
      MockFileWriter mockFileWriter0 = new MockFileWriter("7yW+i!_X78:");
      document0.html(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      Element element0 = document0.createElement("textarea");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Document.createShell("~>6>Ox{{f");
      document0.addClass("~>6>Ox{{f");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Document.createShell("~>6>Ox{{f");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(}4aO1%g", "Children collection to be inserted must not be null.");
      Pattern pattern0 = Pattern.compile("Children collection to be inserted must not be null.", (-4135));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Element element0 = new Element("br");
      element0.getElementsMatchingText("zbqy");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Document.createShell("");
      Pattern pattern0 = Pattern.compile("");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsMatchingOwnText("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t!", "t!");
      document0.getElementsContainingOwnText("T79{");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Element element0 = new Element("t!");
      element0.getElementsByTag("t!");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("td!", "td!");
      document0.getElementsByIndexLessThan((-1436010313));
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Document.createShell("\"%`O^Zkg:`Kx/");
      document0.getElementsByIndexGreaterThan(0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.getElementsByIndexEquals(58);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Document.createShell("id");
      document0.getElementsByAttributeValueStarting("id", "class");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("T806`>_n", "T806`>_n");
      document0.getElementsByAttributeValueNot("rV'8tWn^M6q=)4v", "       ");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t!", "t!");
      document0.getElementsByAttributeValueNot("sGike", "m#Mm$[!*");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("J", "J");
      document0.getElementsByAttributeValueContaining("0`AJ", "br");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Tag tag0 = Tag.valueOf("\"(Hg lCI/\"%");
      CDataNode cDataNode0 = new CDataNode("\"(Hg lCI/\"%");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("\"(Hg lCI/\"%", "\"n[VZl{Ns#f7sYtLf1");
      Element element0 = new Element(tag0, "\"(Hg lCI/\"%", attributes1);
      element0.getElementsByAttributeValue("\"(Hg lCI/\"%", "\"n[VZl{Ns#f7sYtLf1");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.attr("org.jsoup.nodes.Element", true);
      document0.getElementsByAttribute("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("DbW", "DbW");
      Element element0 = document0.body();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.siblingIndex = (-1424);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse("bW", "bW");
      Element element0 = document0.head();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Document.createShell("code");
      Element element0 = document0.appendChild(document0);
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")F>JJB", "\"");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      document0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qu]4>N-}", "org.jsoup.nodes.Element$NodeList");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EmY<P eTdhhUx|D?L[", "EmY<P eTdhhUx|D?L[");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = new Document("[%s]");
      Document document1 = document0.normalise();
      Element element0 = document1.head();
      Set<String> set0 = document0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parse("bW", "bW");
      Element element0 = document0.appendElement("bW");
      Set<String> set0 = element0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(")K~#0j{Wua'oGt", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "               ", attributes0);
      Locale locale0 = new Locale(")K~#0j{Wua'oGt", "V", "U(L=M");
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      formElement0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = new Document("CONTINUE");
      Element element0 = document0.toggleClass("7Y8bMO-rP@<'vZ{'bL)");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.normalise();
      document1.children();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = new Document("#comment");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Document.createShell(":erLnhTfdD;");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parse("body", "i=_#9$]");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("7Y8bMO-rP@<'vZ{'bL)");
      Element element0 = document0.prependElement("7Y8bMO-rP@<'vZ{'bL)");
      element0.before((Node) element0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.head();
      element0.before("GxoUy");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      Element element0 = document0.appendElement("meter");
      element0.before("~mdwd*sQ!AV)x.Gua/");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Document.createShell("$)");
      Parser parser0 = Parser.htmlParser();
      Document document1 = parser0.parseInput("T,{<p+KTMB", "org.jsoup.select.evaluator$isnthlastoftype");
      Element element0 = document0.appendTo(document1);
      element0.before("T,{<p+KTMB");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EmY<P eTdhhUx|D?L[", "EmY<P eTdhhUx|D?L[");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Tag tag0 = Tag.valueOf("6*_ZK]_H8?{oj");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("org.jsoup.select.Evaluator$IsOnlyOfType", "6*_ZK]_H8?{oj");
      Element element0 = new Element(tag0, "org.jsoup.select.Evaluator$IsOnlyOfType", attributes1);
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.siblingIndex = (-1424);
      document0.attr("", false);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "Z|k|TKLhbMjoJFK");
      Element element0 = document0.body();
      element0.attr("", true);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.html("");
      document0.attr("", false);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+p", "+p");
      document0.setSiblingIndex((-1150));
      document0.attr("+p", "4d60jq*>");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EmY<P eTdhhUx|D?L[", "EmY<P eTdhhUx|D?L[");
      Element element0 = document0.head();
      element0.attr("", "");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      Element element0 = document0.appendElement("meter");
      element0.attr("| ec*p", "scriptdatadoubleescapeddashdash");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parse("limitedQuirks", "limitedQuirks");
      document0.parentNode = (Node) document0;
      document0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parse(".l(h'Y~^Y(s),j[", ".l(h'Y~^Y(s),j[");
      Element element0 = document0.head();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = new Document("kjAg");
      document0.setSiblingIndex((-1728058791));
      document0.appendText("kjAg");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parse(";tmJ;U.%6", ";tmJ;U.%6");
      Element element0 = document0.body();
      element0.appendText(";tmJ;U.%6");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = new Document("#comment");
      document0.appendElement("details");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(}4?O1%g", " ");
      Element element0 = document0.body();
      element0.appendChild(element0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EmY<P eTdhhUx|D?L[", "EmY<P eTdhhUx|D?L[");
      Document document1 = document0.clone();
      document1.appendChild(document0);
      document0.append("EmY<P eTdhhUx|D?L[");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EmY<P eTdhhUx|D?L[", "EmY<P eTdhhUx|D?L[");
      document0.append("EmY<P eTdhhUx|D?L[");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = new Element("br");
      Element element1 = document0.appendChild(element0);
      element0.after((Node) element1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("([Z4WF[}*o.{m`KDW%Y", "([Z4WF[}*o.{m`KDW%Y");
      document0.parentNode = (Node) document0;
      TextNode textNode0 = new TextNode("([Z4WF[}*o.{m`KDW%Y");
      document0.after((Node) textNode0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      Element element0 = document0.appendElement("ls");
      element0.after("y4&`c^");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ls", "ls");
      Element element0 = document0.head();
      element0.after("ls");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.body();
      element0.after("br");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      document0.siblingIndex = (-1641265460);
      document0.addClass("~>6>Ox{{f");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bp", "bp");
      Element element0 = document0.body();
      element0.addClass("ODBAA/IPW*`4ga>aI|\"");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Element element0 = new Element("d");
      element0.addClass("d");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("94h8l6z-=/", "94h8l6z-=/");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.wrap("org.jsoup.parser.Token$Doctype");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Document.createShell("%K");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t!", "t!");
      Comment comment0 = new Comment("t!", "texpaArea");
      Document document1 = (Document)document0.doClone(comment0);
      // Undeclared exception!
      try { 
        document1.wrap("enn')U*T!=NGtYIX+");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.val("");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parse("limitedQuirks", "limitedQuirks");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      document0.parser(parser1);
      // Undeclared exception!
      try { 
        document0.val("limitedQuirks");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("plaintext");
      Attributes attributes0 = cDataNode0.attributes();
      attributes0.keys = null;
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("reversed", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "plaintext", attributes0);
      // Undeclared exception!
      try { 
        formElement0.val();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t!", "t!");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("~>6>Ox{{f", "~>6>Ox{{f");
      Element element0 = document0.body();
      document0.reparentChild(element0);
      // Undeclared exception!
      try { 
        document0.text("~>6>Ox{{f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&g*c%", "&g*c%");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.tagName("'BL\"[");
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = new Document("9?=ehqNG}5I+Iv#8/o&");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("id", "");
      CDataNode cDataNode0 = new CDataNode("8");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parse("G!cO(K", "G!cO(K");
      // Undeclared exception!
      try { 
        document0.selectFirst("~>6>Ox{{f");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t!", "t!");
      // Undeclared exception!
      try { 
        document0.select("t!");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 't!': unexpected token at '!'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parse("(}4aO1%g", "2a=vr:mN5o}~");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t!", "t!");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error: ", "Pattern syntax error: ");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependText("Pattern syntax error: ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Element element0 = new Element("(}4aO1%g");
      // Undeclared exception!
      try { 
        element0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.prependElement("");
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Element element0 = new Element("O2-N@r5_sYQW12");
      DocumentType documentType0 = new DocumentType("+FPXmN(X:hT!!Z", "+FPXmN(X:hT!!Z", "h[^50^o6mX");
      documentType0.setParentNode(element0);
      // Undeclared exception!
      try { 
        element0.prependChild(documentType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EmY<P eTdhhUx|D?L[", "EmY<P eTdhhUx|D?L[");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Element element0 = new Element("1<G");
      DataNode dataNode0 = new DataNode("1<G");
      element0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        element0.parent();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">I(T|Rn_21pJa", ">I(T|Rn_21pJa");
      StringBuilder stringBuilder0 = new StringBuilder(">I(T|Rn_21pJa");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      document0.outerHtmlTail(stringBuilder0, 12973, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Fgx%", "Fgx%");
      MockFile mockFile0 = new MockFile("Fgx%", "Fgx%");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockFileWriter0, 2027, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Document.createShell("M");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringWriter0, (-2832), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Tag tag0 = Tag.valueOf("bf0g");
      CDataNode cDataNode0 = new CDataNode(")I??'*$KS");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "bf0g", attributes0);
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        formElement0.outerHtmlTail(pipedWriter0, (-1436010313), document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Element element0 = new Element("2a=2vr:mN5o}~");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(charArrayWriter0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(382);
      // Undeclared exception!
      element0.outerHtmlHead(mockPrintWriter0, 8224, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Element element0 = new Element("b");
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(charBuffer0, (-2047), document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Could not parse attribute query '%s': unexpected token at '%s'");
      Element element0 = new Element(tag0, "Could not parse attribute query '%s': unexpected token at '%s'");
      Charset charset0 = Charset.defaultCharset();
      byte[] byteArray0 = new byte[3];
      ByteBuffer byteBuffer0 = ByteBuffer.wrap(byteArray0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(charBuffer0, (-2515), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("", "!C6Vr5UJ}Mx");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      PipedWriter pipedWriter0 = new PipedWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(pipedWriter0, 501);
      try { 
        document0.outerHtmlHead(bufferedWriter0, 501, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t!", "t!");
      Comment comment0 = new Comment("t!", "textarea");
      Element element0 = document0.doClone(comment0);
      // Undeclared exception!
      try { 
        element0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ls", "ls");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.is("@8zwCsX9;vHy+lG<4");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '@8zwCsX9;vHy+lG<4': unexpected token at '@8zwCsX9;vHy+lG<4'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&g*c%", "&g*c%");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.is("textarea");
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("%K", "%K");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(1, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cm&w:", "cm&w:");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.html("VT>%haIE9cFy^krhn");
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Document.createShell("lEB$0");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("class", "class");
      document0.reparentChild(document0);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream((OutputStream) null, 60);
      MockPrintStream mockPrintStream0 = new MockPrintStream(bufferedOutputStream0, true);
      // Undeclared exception!
      document0.html(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(")", ")");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ")");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Document.createShell("$7Ak-K");
      // Undeclared exception!
      try { 
        document0.html((MockFileWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Element element0 = new Element("GVIV1L5&iq!i5p");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        element0.hasText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = new Document("Index must be numeric");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parse(":nth-last-child(", ":nth-last-child(");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("(}4aO1%g", "2a=vr:mN5o}~");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("?-Nb|$\"e\t18");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ?-Nb|$\"e\t18
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("t!", "t!");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("T#root", "head");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse("(}4aO1%g", "2a=vr:mN5o}~");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("Q;,h1~Xo._4{JtL.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: Q;,h1~Xo._4{JtL.
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.appendElement("br");
      element0.setSiblingIndex((-1972));
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("br");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "#root");
      Element element0 = document0.head();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("$(NVMj");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Patter syntax error: ", "Patter syntax error: ");
      DataNode dataNode0 = new DataNode("I+x", "Patter syntax error: ");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("Patter syntax error: ");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t!", "t!");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse("class", "strike");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("WFQ0t:n;%r MAvA+:H", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Element element0 = new Element("d");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("<d class=\"java.lang.String@0000000010\"></d>", "{ybDx{,Mg;k]");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: {ybDx{,Mg;k]
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("c~", "c~");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("9j}HS\"x:l", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("%K", "%K");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("%K", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t!", "t!");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("t!", "org.jsoup.nodes.Element$1");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("KeW=?", "KeW=?");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t!", "t!");
      Comment comment0 = new Comment("t!", "texpaArea");
      Element element0 = document0.doClone(comment0);
      // Undeclared exception!
      try { 
        element0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Document.createShell(":er LnP\"hTfdD;");
      // Undeclared exception!
      try { 
        document0.child(2147483645);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2147483645, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parse("#root", "-");
      // Undeclared exception!
      try { 
        document0.child((-603));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parse("value", "W fz1F#&");
      document0.prependChild(document0);
      // Undeclared exception!
      document0.before("nHJ[A)r(BXE\"R0I");
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Tag tag0 = Tag.valueOf("reversed");
      CDataNode cDataNode0 = new CDataNode("reversed");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "reversed", attributes0);
      formElement0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        formElement0.before("Children collection to be inserted must not be null.");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Tag tag0 = Tag.valueOf("J1z~ZT0g,3o5/~[U?<");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "J1z~ZT0g,3o5/~[U?<", attributes0);
      // Undeclared exception!
      try { 
        formElement0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("code", "code");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.attr("id", "CTNTINUE");
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t!", "t!");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "t!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parse(".,de+1{V6?[Ol?[Ze", ".,de+1{V6?[Ol?[Ze");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("&ap;", "&ap;");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = parser0.parseFragmentInput("textarea", document0, "class");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendText("&ap;");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Document.createShell(":er LnP\"hTfdD;");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.appendElement("head");
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Document.createShell("~>6>Ox{{f");
      // Undeclared exception!
      try { 
        document0.appendElement("       ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = new Document("CONTINUE");
      CDataNode cDataNode0 = new CDataNode("(E?>T9jb2");
      Node node0 = cDataNode0.doClone(document0);
      // Undeclared exception!
      try { 
        document0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Tag tag0 = Tag.valueOf("2a=vr:mN5o}~");
      Element element0 = new Element(tag0, "4h`zd-!mc$doCO0J");
      // Undeclared exception!
      try { 
        element0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.append("bdo");
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.after(document0.parentNode);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.after("6o#");
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Document.createShell("~>6>Ox{{f");
      Element element0 = document0.shallowClone();
      element0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.after("N");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" AybHJ,GRWUMS^M", " AybHJ,GRWUMS^M");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("p\"l");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "p\"l", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "t!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = new Document("A{axhc)@P");
      document0.prependText("t!");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Tag tag0 = Tag.valueOf("[Ev>xKMiZ;)EUANqB");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "class", attributes0);
      formElement0.html((CharArrayWriter) null);
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = new Document("xpcXyC");
      document0.toggleClass("xpcXyC");
      document0.toggleClass("zbqy");
      document0.hasClass("zbqy");
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Document.createShell("~>6>Ox{{f");
      document0.hasClass("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Tag tag0 = Tag.valueOf("zbqy");
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "P]>,/Z I,x", attributes0);
      Element element0 = formElement0.toggleClass("[H9b^!g[");
      element0.hasClass("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Document.createShell("~>6>Ox{{f");
      Element element0 = document0.addClass("~>6>Ox{{f");
      Set<String> set0 = document0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(}4?O1%g", " ");
      document0.prependText("(}4?O1%g");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("td!", "td!");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cm&w:", "cm&w:");
      Element element0 = document0.appendChild(document0);
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.parentNode = (Node) document0;
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Document.createShell("lbG}JpElbCy)UG@3");
      Element element0 = document0.head();
      element0.html("lbG}JpElbCy)UG@3");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Document.createShell("LBw*V|LWNa{.B");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = new Document("CONTINUE");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aN#yJ", "aN#yJ");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t!", "t!");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Document.createShell("~>6>Ox{{f");
      document0.getElementsByIndexLessThan(787);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("u/uW(psBWZo]~8Fa*", "u/uW(psBWZo]~8Fa*");
      Pattern pattern0 = Pattern.compile("org.jsoup.select.Evaluator$IsRoot");
      Elements elements0 = document0.getElementsByAttributeValueMatching("org.jsoup.select.Evaluator$IsRoot", pattern0);
      Element element0 = document0.prependElement("u/uW(psBWZo]~8Fa*");
      element0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Element element0 = new Element("Ccommevt");
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("EmY<P eTdhhUx|D?L[", "EmY<P eTdhhUx|D?L[");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("i", "i");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Element element0 = new Element("a");
      element0.appendText("CSik>AuH|$p3y_");
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("(}4aO1%g", "Children collection to be inserted must not be null.");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, (-448), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aN#yJ", "aN#yJ");
      Element element0 = new Element("a");
      document0.appendChild(element0);
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.appendElement("br");
      element1.outerHtml();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "h}oJC'h");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Element element0 = new Element("#comment");
      element0.val("#comment");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Document.createShell("textarea");
      Element element0 = document0.createElement("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      Element element0 = document0.toggleClass("meter");
      document0.toggleClass("|%| ec*p");
      element0.hasClass("wbw");
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("reversed", "P}150;?BEp)<q!=;l");
      Element element0 = document0.toggleClass("reversed");
      element0.toggleClass("Should not be reachable");
      document0.hasClass("be");
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">YDr%0mU", "java.lang.string@0000000085 meter");
      document0.toggleClass(">YDr%0mU");
      document0.toggleClass("               ");
      document0.hasClass("java.lang.string@0000000085 meter");
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aN#yJ", "aN#yJ");
      Element element0 = document0.toggleClass("#root");
      element0.addClass("#root");
      document0.getElementsByClass("#root");
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t!", "t!");
      document0.addClass(":nth-child(%d)");
      document0.getElementsByClass("org.jsoup.parser.HtmlTreeBuilderState$24");
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aN#yJ", "aN#yJ");
      document0.toggleClass("#root");
      document0.getElementsByClass("#root");
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("Ccommevt");
      Document document0 = Parser.parse("Ccommevt", "nullChar");
      document0.prependChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.appendText("");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Document.createShell("~>6>Ox{{f");
      DataNode dataNode0 = new DataNode("Children collection to be inserted must not be null.");
      document0.appendChild(dataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(" ", " ");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7Y8bMO-rP@<'vZ{'bL)", "7Y8bMO-rP@<'vZ{'bL)");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.text("");
      document0.parentNode = (Node) element0;
      element0.getElementsContainingText("");
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      DataNode dataNode0 = new DataNode("c!gtgK^)^v7Xr2EB|g", "");
      Element.preserveWhitespace(dataNode0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.appendElement("br");
      document0.getElementsMatchingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("  f5ml-^y|K", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("Tag name must not be empty.");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "8Nl", attributes0);
      pseudoTextElement0.prependChild(cDataNode0);
      Pattern pattern0 = Pattern.compile("Tag name must not be empty.");
      pseudoTextElement0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#comment", "#comment");
      document0.title("&Y4BfcDH[3W G");
      document0.getElementsContainingOwnText("#comment");
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      Comment comment0 = new Comment("#root", "#root");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      document0.appendChild(xmlDeclaration0);
      Pattern pattern0 = Pattern.compile("V?`<^ZZ9:R", (-1110026255));
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Document.createShell("]i<;4H");
      document0.prependText("tr");
      document0.appendText("+uXN/%].|pg");
      document0.getElementsContainingText("!A'4OpiB");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = new Element("br");
      Element element1 = document0.appendChild(element0);
      Pattern pattern0 = Pattern.compile("br", 4);
      element1.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bp", "bp");
      document0.appendElement("bp");
      document0.getElementsContainingText("bp");
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&g*c%", "&g*c%");
      Comment comment0 = new Comment("s+", "H}k-1>]=`QY0}f");
      document0.appendChild(comment0);
      document0.getElementsContainingText((String) null);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.parentNode = (Node) document0;
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("code", "code");
      document0.appendChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.parentNode = (Node) document0;
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("td!", "td!");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, elements0.size());
      assertEquals("td!", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.previousElementSibling();
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#root");
      Element element0 = new Element(tag0, "#root");
      element0.nextElementSibling();
      assertEquals("#root", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Document.createShell("ZV0L:Ai||");
      document0.appendChild(document0);
      document0.nextElementSibling();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Document.createShell("~>6>Ox{{f");
      document0.siblingElements();
      assertEquals("~>6>Ox{{f", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Document.createShell("code");
      document0.appendChild(document0);
      document0.cssSelector();
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t!", "t!");
      document0.addClass("{VFzTvjw");
      document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("t!", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Tag tag0 = Tag.valueOf("J1z~ZT0g,3o5/~[U?<");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "J1z~ZT0g,3o5/~[U?<", attributes0);
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        formElement0.insertChildren(745, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Document.createShell("~>6>Ox{{f");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1618087686), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Node[] nodeArray0 = new Node[0];
      Document document1 = (Document)document0.insertChildren(1, nodeArray0);
      assertEquals("", document1.location());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parse(".l(h'Y~^Y(s),j[", ".l(h'Y~^Y(s),j[");
      LinkedHashSet<XmlDeclaration> linkedHashSet0 = new LinkedHashSet<XmlDeclaration>();
      // Undeclared exception!
      try { 
        document0.insertChildren(124, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.getElementsContainingText("");
      // Undeclared exception!
      try { 
        document0.insertChildren((-5571), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aAbyJ", "aAbyJ");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("aAbyJ", document0.baseUri());
      assertEquals(0, list0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("G!cO(K", "G!cO(K");
      document0.prependText("center");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("G!cO(K", document0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("t!", "t!");
      Element element0 = document0.appendText("t!");
      Element element1 = element0.prependChild(document0);
      Elements elements0 = element1.siblingElements();
      assertEquals(0, element1.siblingIndex());
      assertEquals(1, elements0.size());
      assertEquals("t!", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("_", "_");
      Elements elements0 = document0.getElementsByIndexGreaterThan(2203);
      assertEquals("_", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bp", "bp");
      document0.getElementsByTag("bp");
      assertEquals("bp", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parse("bW", "bW");
      Elements elements0 = document0.getElementsMatchingText("bW");
      assertEquals(3, elements0.size());
      assertEquals("bW", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("&g*c%", "&g*c%");
      document0.is("textarea");
      assertEquals("&g*c%", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("DbW", "DbW");
      document0.getAllElements();
      assertEquals("DbW", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parse("#root", "-");
      Element element0 = document0.removeClass("[|c{$q)$");
      assertEquals("-", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      // Undeclared exception!
      try { 
        document0.before("~mdwd*sQ!AV)x.Gua/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      document0.getElementsByAttribute("org.jsoup.nodes.Element");
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t!", "t!");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "t!");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("([Z4WF[}*o.{m`KDW%Y", "([Z4WF[}*o.{m`KDW%Y");
      TextNode textNode0 = new TextNode("([Z4WF[}*o.{m`KDW%Y");
      // Undeclared exception!
      try { 
        document0.after((Node) textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2a=2vr:mN5o}~", "2a=2vr:mN5o}~");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("f", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Document.createShell("~>6>Ox{{f");
      document0.getElementsByAttributeValueEnding("~>6>Ox{{f", "}Pvv7fgh/H8O?<Cq~#");
      assertEquals(1, document0.childNodeSize());
      assertEquals("~>6>Ox{{f", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Document.createShell("source");
      Evaluator.IsFirstChild evaluator_IsFirstChild0 = new Evaluator.IsFirstChild();
      document0.is((Evaluator) evaluator_IsFirstChild0);
      assertEquals("source", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("T806`>_n", "T806`>_n");
      document0.getElementsByAttributeValueMatching("", "T806`>_n");
      assertEquals("T806`>_n", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("94h8l6z-=/", "94h8l6z-=/");
      // Undeclared exception!
      try { 
        document0.wrap("org.jsoup.parser.Token$Doctype");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByIndexEquals(0);
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "Z|k|TKLhbMjoJFK");
      document0.getElementsByAttributeStarting("j@8KNP'@=K 9");
      assertEquals("Z|k|TKLhbMjoJFK", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aN#y", "aN#y");
      document0.prependElement("tlh#*EM");
      document0.parentNode = (Node) document0;
      document0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ls", "ls");
      // Undeclared exception!
      try { 
        document0.after("ls");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Elements elements0 = document0.select("head");
      assertFalse(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("t!", "t!");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("IEE<y;*g<'b6~0}", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aN#yJ", "aN#yJ");
      document0.getElementsByAttributeValue("aN#yJ", "a");
      assertEquals("aN#yJ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.wholeText();
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Document.createShell("7Y8bMO-rP@<'vZ{'bL)");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("id", "");
      Map<String, String> map0 = document0.dataset();
      assertEquals(0, map0.size());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val("textarea");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aN#yJ", "aN#yJ");
      Element element0 = document0.tagName("tr");
      assertEquals(1, element0.childNodeSize());
      assertEquals("aN#yJ", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cm&w:", "cm&w:");
      Element element0 = document0.child(0);
      assertEquals("cm&w:", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("code", "code");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("code", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7Y8bMO-rP@<'vZ{'bL)", "7Y8bMO-rP@<'vZ{'bL)");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Document.createShell("~>6>Ox{{f");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = new Document("%t)qQ'5,In");
      document0.children();
      assertEquals("%t)qQ'5,In", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7Y8bMO-rP@<'vZ{'bL)", "7Y8bMO-rP@<'vZ{'bL)");
      document0.getElementById("7Y8bMO-rP@<'vZ{'bL)");
  }
}
