/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:53:39 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = new Document("video");
      Element element0 = document0.addClass("Insert position out of }ons.");
      element0.addClass("Insert position out of }ons.");
      document0.getElementsByClass(".Pp[M!Iw");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "G9{px[");
      document0.getElementsByAttributeValueMatching("G9{px[", ":nth-child(%d)");
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("sLR/`q2av");
      Document document0 = parser0.parseInput((Reader) stringReader0, "sLR/`q2av");
      document0.reparentChild(document0);
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("tF", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "`hn#B6'3NQ:bl", attributes0);
      List<DataNode> list0 = formElement0.dataNodes();
      document0.insertChildren(0, (Collection<? extends Node>) list0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = new Document("/I9%m8e?");
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(pipedWriter0, (-493), document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parse("pykEg_-d%!", "p{9jia$3x+ .(^gg8");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(charArrayWriter0, 21, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Document.createShell("R+<OVN4}hHx\"");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      document0.doSetBaseUri((String) null);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "video");
      Document document1 = Document.createShell("G9{px[");
      document0.reparentChild(document1);
      document1.wrap("cOU6");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      Element element0 = document0.head();
      element0.wrap("#root");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parse("\"zEWst7]-N3", "\"zEWst7]-N3");
      Element element0 = document0.body();
      element0.wrap("\"zEWst7]-N3");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parse("video", "video");
      Element element0 = document0.body();
      element0.val("video");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("4<hgJW26");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("4<hgJW26");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "4<hgJW26", attributes0);
      pseudoTextElement0.val("4<hgJW26");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".pp[m!iw", ".pp[m!iw");
      document0.val("[%s!=%s]");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"zBEWs]-N3", "\"zBEWs]-N3");
      document0.setSiblingIndex((-906021636));
      document0.toggleClass("\"zBEWs]-N3");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@/d%z#D)K L,=?]@m", "@/d%z#D)K L,=?]@m");
      Element element0 = document0.body();
      element0.text("strong");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{p[", "G9{p[");
      Element element0 = document0.appendElement("=*\n%Fvax)9Oy9");
      element0.text("0vJKq;]|,Kq`@&o");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{p[", "G9{p[");
      document0.text("0vJKq;]|,Kq`@&o");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = new Document("g");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "G9{px[");
      Element element0 = document0.body();
      element0.tagName("listing");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = new Document("video");
      document0.tagName("s+");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "br", attributes0);
      element0.tagName();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "?6R", attributes0);
      formElement0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{KI(<1,HMr&", "{KI(<1,HMr&");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("y;]T@e'Lb`", "y;]T@e'Lb`");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XF5{,[:k8b", "XF5{,[:k8b");
      document0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "video");
      document0.selectFirst("video");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Tag tag0 = Tag.valueOf("dfn");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "dfn", attributes0);
      formElement0.selectFirst("dfn");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Document.createShell("idfeC");
      document0.prependElement("idfeC");
      document0.selectFirst("idfeC");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "video");
      document0.select("video");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "G9{px[");
      document0.select("body");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("idfeC", "idfeC");
      Element element0 = document0.body();
      element0.removeClass("idfeC");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.head();
      element0.removeClass("u.1r+,xf]+n*.");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Document.createShell("video");
      document0.appendChild(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("dl", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "dl", attributes0);
      element0.prependText("?(7eIPUAh~ |'2");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "G9{px[");
      Element element0 = document0.appendElement("=*\n%Fvax)9Oy9");
      Element element1 = element0.lastElementSibling();
      element1.prependText("PUBLIC");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = new Document("video");
      document0.prependElement("video");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vi7JC", "vi7JC");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Document.createShell("vi7dJC");
      Element element0 = document0.body();
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"zEWst7]-N3", "\"zEWst7]-N3");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse("y;T@e'Lb`", "y;T@e'Lb`");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"zEWst7]-N3", "\"zEWst7]-N3");
      Document document1 = Parser.parseBodyFragmentRelaxed("\"zEWst7]-N3", "byY~RvA4 <LY}mz}");
      document0.appendChild(document1);
      document1.parent();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Mbr", "Mbr");
      Element element0 = document0.body();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator", "org.jsoup.select.CombiningEvaluator");
      document0.prependText("{40[|ikP~8pnKR1OgY$");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("video", "video");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parse(" ", " ");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Document.createShell("Y@OoH0");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.select.CombiningEvaluator", "org.jsoup.select.CombiningEvaluator");
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan(128);
      document0.is((Evaluator) evaluator_IndexGreaterThan0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("dl", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "dl", attributes0);
      element0.is("dl");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "video");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("dl", "dl");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      document0.insertChildren(1, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|f9r;'at+4hN=gZ~", " />");
      Element element0 = document0.head();
      element0.html("|f9r;'at+4hN=gZ~");
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Document.createShell("video");
      Document document1 = Parser.parseBodyFragment("video", "systemId");
      document1.appendChild(document0);
      document0.html("systemId");
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("/I9%m8e?", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "/I9%m8e?", attributes0);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      formElement0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("28q!N", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "28q!N", attributes0);
      formElement0.html();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Tag tag0 = Tag.valueOf("on");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ";\"E=Y1ks7'z=E>", attributes0);
      formElement0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("sBR/`q2Rv");
      Document document0 = parser0.parseInput((Reader) stringReader0, "sBR/`q2Rv");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "G9{px[");
      Pattern pattern0 = Pattern.compile("head", (-1));
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("sLR/`q2av", "sLR/`q2av");
      document0.getElementsMatchingText("");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parse("plaintext", "plaintext");
      Pattern pattern0 = Pattern.compile("plaintext", 0);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("sLR/`q2av");
      Document document0 = parser0.parseInput((Reader) stringReader0, "sLR/`q2av");
      document0.getElementsMatchingOwnText("#data");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "br", attributes0);
      element0.getElementsContainingOwnText("Q4");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Document.createShell(".");
      document0.getElementsByTag("vf]");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("Insert position out of bounds.", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("a(oa_%");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Insert position out of bounds.", attributes0);
      pseudoTextElement0.getElementsByTag("insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "G9{px[");
      document0.html("tf");
      document0.getElementsByIndexLessThan(64);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Tag tag0 = Tag.valueOf("<.");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "<.", (Attributes) null);
      pseudoTextElement0.getElementsByIndexGreaterThan(3);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsByIndexEquals(1);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "G9{px[");
      document0.addClass("?-=(q~");
      document0.addClass("br");
      document0.getElementsByClass("br");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("4<hgJW26");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = Attribute.createFromEncoded("org.jsoup.nodes.Element$1", "4<hgJW26");
      attributes0.put(attribute0);
      Tag tag0 = Tag.valueOf("4<hgJW26");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "4<hgJW26", attributes0);
      pseudoTextElement0.getElementsByAttributeValueContaining("org.jsoup.nodes.Element$1", "4<hgJW26");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("h1");
      Document document0 = parser0.parseInput((Reader) stringReader0, "+NOL~6VKj+R");
      document0.getElementsByAttributeValue("})6", "#root");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("java.lang.string@0000000018 #root mi_z6:z6=j5@b", parseSettings0);
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("{4h&>j", true);
      FormElement formElement0 = new FormElement(tag0, "java.lang.string@0000000018 #root mi_z6:z6=j5@b", attributes1);
      formElement0.getElementsByAttribute("{4h&>j");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":#)Ua:]?b#=d", ":#)Ua:]?b#=d");
      Element element0 = document0.head();
      element0.setSiblingIndex(58);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parse("idfeC", "idfeC");
      Document document1 = Parser.parseBodyFragmentRelaxed("idfeC", "vs-ifZn1_XVvC<,AF");
      Element element0 = document0.appendChild(document1);
      element0.prependElement("vs-ifZn1_XVvC<,AF");
      document1.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.appendChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = new Document("fkjnYs+{MvOocr");
      document0.setSiblingIndex(46);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("h1", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "+NOL~6VKj+R", attributes0);
      formElement0.empty();
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Tag tag0 = Tag.valueOf("fY");
      FormElement formElement0 = new FormElement(tag0, "fY", (Attributes) null);
      Element element0 = formElement0.prependElement("fY");
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parse("", "?h~cPKo~");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "G9{px[");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("Q!N}odqd{l'}#%{rf", "Q!N}odqd{l'}#%{rf");
      Element element0 = document0.body();
      Locale locale0 = Locale.TAIWAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Tag tag0 = Tag.valueOf("head");
      CDataNode cDataNode0 = new CDataNode("n");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      pseudoTextElement0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("h1");
      Document document0 = parser0.parseInput((Reader) stringReader0, "+NOL~6VKj+R");
      Element element0 = document0.addClass("+NOL~6VKj+R");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XF5{,[:k8b", "XF5{,[:k8b");
      document0.html("FuZB6Om4w^");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("\"B95@,sJ}VM", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "code", attributes0);
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("video", "video");
      document0.reparentChild(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Document.createShell("idfeC");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse("idfeC", "idfeC");
      Document document1 = Parser.parse("idfeC", "^W/.A(gu),Yn^");
      document0.reparentChild(document1);
      document1.before("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("y;]T@e'Lb`", "y;]T@e'Lb`");
      Element element0 = document0.head();
      element0.before("AfterDoctypeSystemIdentifier");
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.");
      Element element0 = new Element(tag0, "Children collection to be inserted must not be null.");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Element element0 = new Element("attributeDoubleValueCharsSorted");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Parser.parse("sLE/`q2av", "sLE/`q2av");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("s+", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.put("Pattern syntax error: ", "Pattern syntax error: ");
      FormElement formElement0 = new FormElement(tag0, "s+", attributes0);
      formElement0.attributes();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parse("encoding", ".p??IY");
      Element element0 = document0.body();
      element0.attr("BHXr=h:TP&$vv6_IhKy", false);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Tag tag0 = Tag.valueOf("S('52tzhMu");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "S('52tzhMu", attributes0);
      pseudoTextElement0.attr("b,T*T\"0VnM+", false);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      Element element0 = document0.body();
      element0.attr("", "");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "G9{px[");
      document0.attr("G9{px[", (String) null);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vi7dJC", "vi7dJC");
      Element element0 = document0.head();
      element0.appendTo(element0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      Document document0 = new Document("br");
      document0.appendTo(formElement0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Document.createShell("Yj$&lic^oVj75");
      Element element0 = document0.body();
      element0.appendText("");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("|@", "|@");
      document0.reparentChild(document0);
      document0.appendText("zu@,M,$C\"LY'`D");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("?h~cPKo~", "/i9%m8e?");
      document0.append("/i9%m8e?");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("orgVjsoup.node`.Node$OuterHtmlpisitor", "orgVjsoup.node`.Node$OuterHtmlpisitor");
      Element element0 = document0.head();
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Document.createShell("vi7dJC");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell("R+<OVN4}hHx\"");
      Element element0 = document0.head();
      element0.replaceWith(document0);
      TextNode textNode0 = TextNode.createFromEncoded("R+<OVN4}hHx\"");
      document0.after((Node) textNode0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell("idfeC");
      Element element0 = document0.body();
      element0.after("5|gRv+NL!)hX:-3CM");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("xAxcN*");
      Document document0 = parser0.parseInput((Reader) stringReader0, "\"F7TN`TIxK^!X&");
      Document document1 = Parser.parse("\"F7TN`TIxK^!X&", "");
      document0.reparentChild(document1);
      document1.after("\"F7TN`TIxK^!X&");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("e)pIe", "e)pIe");
      document0.siblingIndex = (-1);
      document0.addClass("e)pIe");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Document.createShell("idfeC");
      Element element0 = document0.body();
      element0.addClass("#");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("sLR/`q2av");
      Document document0 = parser0.parseInput((Reader) stringReader0, "sLR/`q2av");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.wrap("@26K<XN`zR``Fr:t");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("sLR/`q2av");
      Document document0 = parser0.parseInput((Reader) stringReader0, "sLR/`q2av");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parse("\"z2W:t7]-N3", "\"z2W:t7]-N3");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("\"z2W:t7]-N3", false);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.wrap("org.jsoup.nodes.Node$OuterHtmlpisitor");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("h48_.ZQSnK", "h48_.ZQSnK");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.wholeText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "G9{px[");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.val("G9{px[");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("org.jsoup.select.StructuralEvaluator$Parent", "org.jsoup.select.StructuralEvaluator$Parent");
      parser0.settings((ParseSettings) null);
      // Undeclared exception!
      try { 
        document0.val("#root");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("h1", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.put("org.jsoup.select.NodeFilter$FilterResult", true);
      FormElement formElement0 = new FormElement(tag0, "+NOL~6VKj+R", attributes0);
      String[] stringArray0 = new String[0];
      attributes0.vals = stringArray0;
      // Undeclared exception!
      try { 
        formElement0.val("#data");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("$X{L^l/EHt7nx", "$X{L^l/EHt7nx");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      document0.empty();
      // Undeclared exception!
      try { 
        document0.text("`hn#B6'3NQ:bl");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000047 insert .pp[m!iw out of }ons.");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("video", "video");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.tagName("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("h1");
      Document document0 = parser0.parseInput((Reader) stringReader0, "+NOL~6VKj+R");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element$2");
      DataNode dataNode0 = new DataNode("");
      element0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "G9{px[");
      // Undeclared exception!
      try { 
        document0.selectFirst("=7Sk}\"A[");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '=7Sk}\"A[': unexpected token at '=7Sk}\"A['
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("h1");
      Document document0 = parser0.parseInput((Reader) stringReader0, "+NOL~6VKj+R");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("S('52tzhMu", "m=k(+gvY+h");
      // Undeclared exception!
      try { 
        document0.select("0^c|G)>bZL");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '0^c|G)>bZL': unexpected token at '^c|G)>bZL'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("video", "video");
      // Undeclared exception!
      try { 
        document0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "video");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Document.createShell("\"z2W:t7]-N3");
      document0.childNodes = null;
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Document.createShell("idfCeC");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("sLR/`q2av");
      Document document0 = parser0.parseInput((Reader) stringReader0, "sLR/`q2av");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prependElement("76qC!tLO&?GW*");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Node$OuterHtmlpisitor", "html");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
      try { 
        document1.prependElement(":w");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("h1");
      Document document0 = parser0.parseInput((Reader) stringReader0, "+NOL~6VKj+R");
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8B3", "8B3");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("video", "video");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parse("/I9%m8e?", "/I9%m8e?");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parse("@", "@");
      DocumentType documentType0 = new DocumentType("@", (String) null, "@", (String) null, "");
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        document0.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parse("param", "|JLu#t0TDjS~.d$c");
      CDataNode cDataNode0 = new CDataNode("|JLu#t0TDjS~.d$c");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.parent();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d/", "d/");
      MockPrintStream mockPrintStream0 = new MockPrintStream("java.lang.string@0000000055");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1284);
      // Undeclared exception!
      document0.outerHtmlTail(mockPrintStream0, 1284, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parse("f9Q", "");
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 124, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000047 java.lang.string@0000000053 jav.lang.string@0000000053 :%s(d) u~dsrz,y out of }ons.", "java.lang.string@0000000047 java.lang.string@0000000053 jav.lang.string@0000000053 :%s(d) u~dsrz,y out of }ons.");
      MockPrintStream mockPrintStream0 = new MockPrintStream("`zM");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintStream0, (-1282), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parse("[Ez_", "[Ez_");
      PipedReader pipedReader0 = new PipedReader();
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(26);
      // Undeclared exception!
      document0.outerHtmlHead(pipedWriter0, 1453, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse("de", "de");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "de");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 1406, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, (-241), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Element element0 = new Element("G`!cm^c;=a0U+zJ=5q_");
      File file0 = MockFile.createTempFile(":'c#Yd~CaHGC", ">89 ~N");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(mockFileWriter0, (-848), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("Insert position out of bounds.", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("a(oa_%");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Insert position out of bounds.", attributes0);
      Element element0 = pseudoTextElement0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("BCLv@f?sy", "G9{px[");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parse("2n!i}{_4;ymcz:U", "E=bY");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Document.createShell("KBS=*qC8&agr k!zv q");
      // Undeclared exception!
      try { 
        document0.is("KBS=*qC8&agr k!zv q");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'KBS=*qC8&agr k!zv q': unexpected token at '=*qC8&agr k!zv q'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.");
      Element element0 = new Element(tag0, "Children collection to be inserted must not be null.");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) element0;
      nodeArray0[5] = (Node) element0;
      // Undeclared exception!
      try { 
        element0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "video");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html(" > ");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("video", "G9{px[");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("video", "video");
      document0.reparentChild(document0);
      MockFile mockFile0 = new MockFile("4wGC3`$LU&F", "4wGC3`$LU&F");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0, true);
      // Undeclared exception!
      document0.html(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("idfeC", "idfeC");
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@/d%9#D)K L,=?]@m", "@/d%9#D)K L,=?]@m");
      // Undeclared exception!
      try { 
        document0.html((CharArrayWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("sLR/`q2av", "sLR/`q2av");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("B ", "B ");
      Element element0 = document0.appendChild(document0);
      Element element1 = element0.before((Node) document0);
      DocumentType documentType0 = new DocumentType("colkrop", "colkrop", "lX1ATR", "lX1ATR");
      element1.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        element0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "G9{px[");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("=*\n%Fvax)9Oy9", "=*\n%Fvax)9Oy9");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "video");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("E3w\"}u[Cr]E)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: E3w\"}u[Cr]E)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parse("video", "video");
      CDataNode cDataNode0 = new CDataNode("video");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("video");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("orVjsoup.node`.Node$OuterHtmlisitor", "orVjsoup.node`.Node$OuterHtmlisitor");
      Element element0 = document0.prependElement("FW");
      element0.setSiblingIndex((-1177));
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("R");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("h1");
      Document document0 = parser0.parseInput((Reader) stringReader0, "+NOL~6VKj+R");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("video", "video");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Tag tag0 = Tag.valueOf("head");
      CDataNode cDataNode0 = new CDataNode("n");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsMatchingOwnText("a(oa_%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: a(oa_%
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "video");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parse("pykEg_-d%!", "p{9jia$3x+ .(^gg8");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByClass("p{9jia$3x+ .(^gg8");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("oF9P]S#yv9C2", "oF9P]S#yv9C2");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting((String) null, "gx*] \"");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("dl", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "dl", attributes0);
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueNot("%)L;yDwu:;", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Tag tag0 = Tag.valueOf("fY");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "/np)h,uN.r", (Attributes) null);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttributeValueMatching("?NOb'#nS[>(X~_E9", "=.Y&G[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: =.Y&G[
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Tag tag0 = Tag.valueOf("S('52tzhMu");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "\"6QtV", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttributeValueEnding("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Tag tag0 = Tag.valueOf("fY");
      FormElement formElement0 = new FormElement(tag0, "fY", (Attributes) null);
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueContaining("/cspc|/AuV_B>", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("video", "video");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("objeHct", "objeHct");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementById("objeHct");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XF5{,[:k8b", "XF5{,[:k8b");
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parse("sLE/`q2av", "sLE/`q2av");
      document0.reparentChild(document0);
      document0.siblingIndex = (-1911);
      // Undeclared exception!
      try { 
        document0.getAllElements();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "video");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"zEWst7]-N3", "\"zEWst7]-N3");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.dataNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.body();
      element0.toggleClass("");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'body.java.lang.String@0000000084': unexpected token at '@0000000084'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = new Document("g");
      CDataNode cDataNode0 = new CDataNode("java.lang.string@0000000016 insert .pp[m!iw out of }ons.");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Document.createShell("d/");
      Element element0 = document0.body();
      element0.siblingIndex = (-1350);
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Document.createShell("S?w61Grg");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("video", "video");
      // Undeclared exception!
      try { 
        document0.child(31);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 31, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
      try { 
        element0.child((-1209));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = new Document("*");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.before("*");
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parse("sLE/`q2av", "sLE/`q2av");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.attr("sLE/`q2av", "S");
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Element element0 = new Element("Kq_/<2o=w=a");
      // Undeclared exception!
      try { 
        element0.attr((String) null, "");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.body();
      Element element1 = element0.toggleClass("");
      element1.setParentNode(document0);
      // Undeclared exception!
      try { 
        element1.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("video", "video");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("sBR/`q2Rv");
      Document document0 = parser0.parseInput((Reader) stringReader0, "sBR/`q2Rv");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("sLR/`q2av");
      Document document0 = parser0.parseInput((Reader) stringReader0, "sLR/`q2av");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.appendElement("sLR/`q2av");
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("version", "version");
      // Undeclared exception!
      try { 
        document0.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", "<Z");
      Document document1 = new Document(".");
      Element element0 = document0.doClone(document1);
      // Undeclared exception!
      try { 
        document1.appendChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XF5{,[:k8b", "XF5{,[:k8b");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("sLR/`q2av");
      Document document0 = parser0.parseInput((Reader) stringReader0, "sLR/`q2av");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.append("sLR/`q2av");
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "G9{px[");
      Element element0 = document0.appendElement("=*\n%Fvax)9OyTr");
      // Undeclared exception!
      try { 
        element0.after((Node) element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("sLR/`q2av", "sLR/`q2av");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.after("sLR/`q2av");
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("video", "H<\"w,30");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "~l", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Mbr", "Mbr");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parse("video", "video");
      Element element0 = document0.head();
      element0.html((PipedWriter) null);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.hasClass("}o>.],CTVb3");
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("y;]T@e'Lb`", "y;]T@e'Lb`");
      document0.addClass("Rawtext");
      document0.hasClass("java.lang.string@0000000049 /i9%8e?");
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "G9{px[");
      document0.addClass(" > ");
      Set<String> set0 = document0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parse("\"zEWst7]-N3", "\"zEWst7]-N3");
      document0.prepend("java.lang.string@0000000038");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parse("encoding", ".p??IY");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "G9{px[");
      Element element0 = document0.head();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{KI(<1,HMr&", "{KI(<1,HMr&");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\"zBEWs]M-N0", "\"zBEWs]M-N0");
      CDataNode cDataNode0 = new CDataNode("4q#x");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("?h~cPKo~", "?h~cPKo~");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parse("?h~cPKo~", "?h~cPKo~");
      Element element0 = document0.body();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("sLR/`q2av");
      Document document0 = parser0.parseInput((Reader) stringReader0, "sLR/`q2av");
      document0.reparentChild(document0);
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parse("idfeC", ")xvtwb.\"3fg)");
      Element element0 = document0.body();
      element0.append("Cl+Drde%DLZf-w");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("video", "video");
      document0.dataset();
      document0.attr("br");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XF5{,[:k8b", "XF5{,[:k8b");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.StructuralEvaluator$arent", "org.jsoup.select.StructuralEvaluator$arent");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Mbr", "Mbr");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parse("pykEg_-d%!", "p{9jia$3x+ .(^gg8");
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Document.createShell("Y@OoH0");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("video", "video");
      Pattern pattern0 = Pattern.compile("video", 38);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.");
      Element element0 = new Element(tag0, "Children collection to be inserted must not be null.");
      Pattern pattern0 = Pattern.compile("Children collection to be inserted must not be null.");
      element0.getElementsByAttributeValueMatching("Children collection to be inserted must not be null.", pattern0);
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Document.createShell("idfeC");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("dl", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "dl", attributes0);
      element0.id();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parse("video", "video");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      formElement0.appendElement("br");
      formElement0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("y;]T@e'Lb`", "y;]T@e'Lb`");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("O_", "idfeC");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("x(Wlyi4 tss(M");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "i-,BnmO", attributes0);
      pseudoTextElement0.val("");
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("textarea", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("x(Wlyi4 tss(M");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "i-,BnmO", attributes0);
      pseudoTextElement0.val();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("@/d%9#D)K L=?m", "@/d%9#D)K L=?m");
      document0.addClass("@/d%9#D)K L=?m");
      Element element0 = document0.addClass(".");
      element0.toggleClass(".");
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Document.createShell("video");
      Element element0 = document0.addClass("video");
      element0.addClass("video");
      element0.hasClass("video");
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = new Document("g");
      Element element0 = document0.addClass("g");
      element0.addClass("`'1-y mI_z6:Z6=J5@b");
      document0.hasClass("#root");
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("idfeC", "idfeC");
      Element element0 = document0.addClass(" > ");
      element0.addClass(" > ");
      document0.hasClass("");
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Document.createShell("video");
      document0.addClass("Ffn");
      document0.hasClass("~`O;Qi+Rc@Ol");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Document.createShell("html");
      document0.addClass("java.lang.string@0000000009");
      document0.hasClass("java.lang.string@0000000009");
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parse("Q!N}odqd{l'}#%{rf", "Q!N}odqd{l'}#%{rf");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"zEWst7]-N3", "\"zEWst7]-N3");
      document0.reparentChild(document0);
      Comment comment0 = new Comment("Children collection to be inserted must not be null.");
      document0.replaceWith(comment0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Document.createShell("video");
      document0.appendText("video");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parse("|@", "|@");
      document0.reparentChild(document0);
      document0.getElementsMatchingOwnText("|@");
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("videC", "videC");
      CDataNode cDataNode0 = new CDataNode("p,MZOxdjt^");
      document0.appendChild(cDataNode0);
      document0.getElementsMatchingText("Hk");
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("?h~cPKo~", "?h~cPKo~");
      document0.title("A-Ja/@X");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Document.createShell("video");
      document0.appendText("video");
      Element element0 = document0.prepend("te&H6-;&Z1(6z");
      element0.getElementsMatchingText("java.lang.string@0000000009");
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "br", attributes0);
      Document document0 = Parser.parseBodyFragment("br", "org.jsoup.nodes.Element$NodeList");
      Element element1 = document0.appendChild(element0);
      element1.getElementsContainingText("br");
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Document.createShell("video");
      Document document1 = Parser.parseBodyFragment("video", "systemId");
      Element element0 = document1.appendChild(document0);
      element0.getElementsMatchingText("systemId");
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"zEWst7]-N3", "\"zEWst7]-N3");
      document0.reparentChild(document0);
      Comment comment0 = new Comment("Children collection to be inserted must not be null.");
      document0.replaceWith(comment0);
      document0.getElementsMatchingText("\"zEWst7]-N3");
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parse("de", "de");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = new Document("video");
      Element element0 = document0.appendElement("video");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("video", "video");
      document0.reparentChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Document.createShell("video");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Document.createShell("vi7dJC");
      Element element0 = document0.body();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parse("sLE/o<qEAv", "sLE/o<qEAv");
      document0.appendElement("sLE/o<qEAv");
      document0.reparentChild(document0);
      Elements elements0 = document0.nextElementSiblings();
      assertEquals("sLE/o<qEAv", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XF5{,[:k8b", "XF5{,[:k8b");
      document0.nextElementSibling();
      assertEquals("XF5{,[:k8b", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("video", "video");
      Element element0 = document0.appendTo(document0);
      element0.siblingElements();
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Document.createShell("S?w61Grg");
      document0.siblingElements();
      assertEquals("S?w61Grg", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("sLR/`q2av");
      Document document0 = parser0.parseInput((Reader) stringReader0, "sLR/`q2av");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("objeHct", "objeHct");
      Element element0 = document0.body();
      assertEquals(1, element0.siblingIndex());
      
      element0.before("Q`i<LHCytYab'dpOK");
      String string0 = element0.cssSelector();
      assertEquals("html > body:nth-child(4)", string0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.toggleClass("");
      document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "G9{px[");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.insertChildren(143, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "video");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1019), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Document.createShell("");
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(0, nodeArray0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "nQ$!r?");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren(183, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Document.createShell("R+<OVN4}hHx\"");
      LinkedHashSet<CDataNode> linkedHashSet0 = new LinkedHashSet<CDataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-2745), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = new Document("g");
      LinkedHashSet<PseudoTextElement> linkedHashSet0 = new LinkedHashSet<PseudoTextElement>();
      Element element0 = document0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
      assertEquals("g", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Document.createShell("Yj$&lic^oVj75");
      List<Node> list0 = document0.ensureChildNodes();
      // Undeclared exception!
      try { 
        document0.insertChildren(1, (Collection<? extends Node>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parse("sLE/`q2av", "sLE/`q2av");
      DataNode dataNode0 = new DataNode("sLE/`q2av", "sLE/`q2av");
      document0.prependChild(dataNode0);
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("sLE/`q2av", document0.baseUri());
      assertEquals(1, list0.size());
      assertTrue(list0.contains(dataNode0));
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("sBR/`q2Rv");
      Document document0 = parser0.parseInput((Reader) stringReader0, "sBR/`q2Rv");
      Element element0 = document0.appendText("");
      List<TextNode> list0 = element0.textNodes();
      assertEquals("sBR/`q2Rv", element0.baseUri());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("video", "video");
      Elements elements0 = document0.getElementsByIndexEquals((-730));
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
      assertEquals("video", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "G9{px[");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1175));
      assertEquals(4, elements0.size());
      assertEquals("G9{px[", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vi7dJC", "vi7dJC");
      Element element0 = document0.selectFirst("html > body");
      assertNotNull(element0);
      assertEquals("vi7dJC", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XF5{,[:k8b", "XF5{,[:k8b");
      document0.is("#root");
      assertEquals("XF5{,[:k8b", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parse("sLE/`q2av", "sLE/`q2av");
      document0.getAllElements();
      assertEquals("sLE/`q2av", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("idfeC", "idfeC");
      Element element0 = document0.removeClass("idfeC");
      assertEquals(1, element0.childNodeSize());
      assertEquals("idfeC", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parse("idfeC", "idfeC");
      // Undeclared exception!
      try { 
        document0.before("Children collection to be inserted must not be null.");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("java.lang.string@0000000018 #root mi_z6:z6=j5@b", parseSettings0);
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "java.lang.string@0000000018 #root mi_z6:z6=j5@b", attributes0);
      Elements elements0 = formElement0.getElementsByAttribute("{4h&>j");
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{KI(<1,HMr&", "{KI(<1,HMr&");
      document0.getElementsByAttributeValueNot("{KI(<1,HMr&", "br");
      assertEquals("{KI(<1,HMr&", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("h1", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "GblJ=YhAZ=5", attributes0);
      Element element0 = formElement0.shallowClone();
      assertEquals("GblJ=YhAZ=5", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Document.createShell("vi7dJC");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("y;]T@e'Lb`", "y;]T@e'Lb`");
      document0.title("y;]T@e'Lb`");
      document0.html();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("html", "html");
      document0.getElementsByAttributeValueContaining("textarea", "org.jsoup.select.Evaluator$AttributeWithValueStarting");
      assertEquals("html", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parse("\"zEWst7]-N3", "\"zEWst7]-N3");
      Elements elements0 = document0.getElementsContainingText("value");
      assertEquals("\"zEWst7]-N3", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parse("idfeC", "idfeC");
      document0.getElementsByAttributeValueEnding("vs-ifZn1_XVvC<,AF", "vs-ifZn1_XVvC<,AF");
      assertEquals("idfeC", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("html", "html");
      Evaluator.IndexGreaterThan evaluator_IndexGreaterThan0 = new Evaluator.IndexGreaterThan((-2516));
      document0.is((Evaluator) evaluator_IndexGreaterThan0);
      assertEquals("html", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("video", "video");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching(":containsOwn", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parse("pykEg_-d%!", "p{9jia$3x+ .(^gg8");
      document0.val("pykEg_-d%!");
      Elements elements0 = document0.getElementsByAttributeStarting("value");
      assertEquals(1, elements0.size());
      assertEquals("p{9jia$3x+ .(^gg8", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parse("pykEg_-d%!", "p{9jia$3x+ .(^gg8");
      document0.getElementsByAttributeStarting("value");
      assertEquals("p{9jia$3x+ .(^gg8", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "br", attributes0);
      formElement0.prependElement("br");
      formElement0.ownText();
      assertFalse(formElement0.hasParent());
      assertEquals("br", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G9{px[", "G9{px[");
      Elements elements0 = document0.getElementsByIndexLessThan(64);
      assertFalse(elements0.isEmpty());
      assertEquals("G9{px[", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Document.createShell("idfeC");
      // Undeclared exception!
      try { 
        document0.after("5|gRv+NL!)hX:-3CM");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parse("\"zEWst7]-N3", "\"zEWst7]-N3");
      document0.prepend("java.lang.string@0000000038");
      document0.child(0);
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vi7dJC", "vi7dJC");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertEquals("vi7dJC", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("objeHct", "objeHct");
      document0.getElementsByAttributeValueStarting("objeHct", "*1k@C");
      assertEquals("objeHct", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Document.createShell("b;;XFyfQkH");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("b;;XFyfQkH", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("h48_.ZQSnK", "h48_.ZQSnK");
      document0.wholeText();
      assertEquals(1, document0.childNodeSize());
      assertEquals("h48_.ZQSnK", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Document.createShell("html");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = new Document("~=jA`:qto-");
      document0.getElementsContainingOwnText((String) null);
      assertEquals("~=jA`:qto-", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Element element0 = document0.html("");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parse("video", "video");
      Element element0 = document0.tagName("video");
      assertEquals("video", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parse("\"zEWst7]-N3", "\"zEWst7]-N3");
      assertEquals(1, document0.childNodeSize());
      
      Element element0 = document0.child(0);
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      assertEquals("\"zEWst7]-N3", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Document.createShell("vi7dJC");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("vi7dJC", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.appendText("                  ");
      boolean boolean0 = document0.hasText();
      assertEquals(2, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parse("\"zEWst7]-N3", "\"zEWst7]-N3");
      // Undeclared exception!
      try { 
        document0.wrap("\"zEWst7]-N3");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.getElementById("N(h[.BYf]xt>");
      assertEquals(1, document0.childNodeSize());
      assertNull(element0);
  }
}
