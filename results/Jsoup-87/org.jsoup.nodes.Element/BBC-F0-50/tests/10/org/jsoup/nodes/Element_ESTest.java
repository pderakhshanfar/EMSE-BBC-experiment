/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 03:10:09 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.ByteArrayOutputStream;
import java.io.CharArrayWriter;
import java.io.DataOutputStream;
import java.io.IOException;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Document.createShell("XD216^C+tLvj^3");
      document0.toggleClass("XD216^C+tLvj^3");
      document0.toggleClass("xp?\"jqi");
      document0.toggleClass("XD216^C+tLvj^3");
      document0.hasClass("aEhIQYX");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", "=*\n%Fvax)9Oy9");
      document0.reparentChild(document0);
      document0.empty();
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Element element0 = new Element("textarea");
      StringBuilder stringBuilder0 = new StringBuilder("textarea");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.outerHtmlTail(stringBuilder0, (-315), document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Tag tag0 = Tag.valueOf("%f");
      CDataNode cDataNode0 = new CDataNode("%f");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "%f", attributes0);
      StringBuilder stringBuilder0 = new StringBuilder(46);
      pseudoTextElement0.outerHtmlHead(stringBuilder0, 46, (Document.OutputSettings) null);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+J^lm;*3*\"m*", "+J^lm;*3*\"m*");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "=*\n%Fvax)9Oy9");
      document0.doSetBaseUri("Q$zd#\"?");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Document.createShell("colgroup");
      Parser parser0 = Parser.xmlParser();
      document0.parser(parser0);
      document0.wrap("AwMRyR/w6}v6#&tDv");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("XD216^C+tLvj^3", "XD216^C+tLvj^3");
      Element element0 = document0.body();
      element0.tagName("XD216^C+tLvj^3");
      element0.wrap("XD216^C+tLvj^3");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("XD216^C+tLvj^3", "XD216^C+tLvj^3");
      Element element0 = document0.body();
      element0.wrap("XD216^C+tLvj^3");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+J^lm;*3*\"m*", "+J^lm;*3*\"m*");
      document0.siblingIndex = (-2);
      document0.val("+J^lm;*3*\"m*");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("1", "1");
      Element element0 = document0.head();
      element0.val("");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+J^lm;*3*\"m*", "+J^lm;*3*\"m*");
      document0.val("+J^lm;*3*\"m*");
      document0.val();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G", "Z&/k'CLmo");
      Element element0 = document0.toggleClass("G");
      element0.siblingIndex = (-1381);
      document0.toggleClass("Z&/k'CLmo");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("W", "W");
      Element element0 = document0.body();
      element0.toggleClass("W");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", " />");
      document0.siblingIndex = (-1);
      document0.text(" />");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "=*\n%Fvax)9Oy9");
      Element element0 = document0.head();
      element0.text("25EH");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "=*\n%Fvax)9Oy9");
      Element element0 = document0.appendElement("clas4R");
      element0.text("25EH");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("XD216^C+tLvj^3", "XD216^C+tLvj^3");
      document0.setSiblingIndex((-74677318));
      document0.tagName("I>tZA+y/Kt#]Z|-");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("1", "{<");
      Element element0 = document0.appendElement("{<");
      element0.tagName("{<");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("O", "?N");
      document0.tagName("body");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "br", attributes0);
      element0.tagName();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("br", parseSettings0);
      Element element0 = new Element(tag0, "br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", "lb*\n%vax)9OZ9");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("|?+", "html");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "1");
      document0.selectFirst("title");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = new Document("multiple");
      Element element0 = document0.createElement("multiple");
      element0.selectFirst("multiple");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "1");
      document0.selectFirst("body");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Document.createShell("head");
      document0.select("head");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1", "1");
      Element element0 = document0.body();
      element0.removeClass("1");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Element element0 = new Element("H-OVgbzY><]@Y");
      element0.removeClass("");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.body();
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.appendElement("]");
      Element element0 = document0.appendElement("]");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "=*\n%Fvax)9Oy9");
      Element element0 = document0.appendElement("clas4R");
      element0.prependText("dK3\"JZG3uu!");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("multiple", "multiple");
      document0.siblingIndex = (-943);
      document0.prependText("org.jsoup.select.Evaluator$MatchText");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("dl", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "dl", attributes0);
      element0.prependText("?(7eIPUAh~ |'2");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = new Document("\"tCH\"uGvXxzq");
      document0.prependElement("h3");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1", "1");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XD216^C+txvj^3", "XD216^C+txvj^3");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Tag tag0 = Tag.valueOf("java.lang.string@0000000065 w");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "java.lang.string@0000000065 w", attributes0);
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XD216^C+tLvj^3", "XD216^C+tLvj^3");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "1");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "1");
      Element element0 = document0.appendElement("class");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", ".");
      Element element0 = document0.body();
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", "=*\n%Fvax)9Oy9");
      document0.prependChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1", "1");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Document.createShell("=*\n%fvax)9oy9");
      Evaluator.IsNthChild evaluator_IsNthChild0 = new Evaluator.IsNthChild(171, 171);
      document0.is((Evaluator) evaluator_IsNthChild0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("dl", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "dl", attributes0);
      element0.is("dl");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lb*\n%vax)9OZ9", "G9{px[");
      Document document1 = document0.clone();
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document1.insertChildren((-1), nodeArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", " />");
      document0.siblingIndex = (-1);
      LinkedList<Document> linkedList0 = new LinkedList<Document>();
      document0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "=*\n%Fvax)9Oy9");
      Element element0 = document0.appendElement("=*\n%Fvax)9Oy9");
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      element0.insertChildren(0, (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("XD216^C+tLvj^3", "XD216^C+tLvj^3");
      document0.setSiblingIndex((-402));
      document0.html("xQ{Ei$<kF6Gq%=joo;");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("title", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      formElement0.html("</");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parse("=*\n%Fvax)9Oy9", "=*\n%Fvax)9Oy9");
      Element element0 = document0.appendElement("=*\n%Fvax)9Oy9");
      element0.html("html");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("o;O<r|~i", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("o;O<r|~i");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "o;O<r|~i", attributes0);
      formElement0.html((MockPrintWriter) null);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Element element0 = new Element("H-OVgbzY><]@Y");
      element0.html();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Tag tag0 = Tag.valueOf("on");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ";\"E=Y1ks7'z=E>", attributes0);
      formElement0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("1", "1");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$Class");
      Element element0 = document0.html("</");
      Pattern pattern0 = Pattern.compile("</");
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parse("2$TK=_:KRr<?XR+", "2$TK=_:KRr<?XR+");
      document0.getElementsMatchingText("2$TK=_:KRr<?XR+");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Pattern pattern0 = Pattern.compile("z+y'!bt)l`", 58);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", "=*\n%Fvax)9Oy9");
      document0.html("org.jsoup.parser.Token");
      document0.getElementsMatchingOwnText("org.jsoup.parser.Token");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Document.createShell("G");
      document0.getElementsContainingOwnText("");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      Element element0 = document0.appendElement(".");
      element0.getElementsByTag(".");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parse(">v6cer/G", ">v6cer/G");
      document0.getElementsByIndexLessThan((-78));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      document0.getElementsByIndexGreaterThan(2431);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a", "a");
      document0.getElementsByIndexEquals(1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Tag tag0 = Tag.valueOf("jbr");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = Attribute.createFromEncoded("jbr", "jbr");
      attributes0.put(attribute0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "jbr", attributes0);
      pseudoTextElement0.getElementsByAttributeValueStarting("jbr", "jbr");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", "=*\n%Fvax)9Oy9");
      document0.getElementsByAttributeValueNot("=*\n%Fvax)9Oy9", "           ");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Tag tag0 = Tag.valueOf("java.lang.string@0000000065 w");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("java.lang.string@0000000065 w", "java.lang.string@0000000065 w");
      Element element0 = new Element(tag0, "java.lang.string@0000000065 w", attributes1);
      Pattern pattern0 = Pattern.compile("", 58);
      element0.getElementsByAttributeValueMatching("java.lang.string@0000000065 w", pattern0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("dl", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("dl", "dl");
      Element element0 = new Element(tag0, "dl", attributes1);
      element0.getElementsByAttributeValueEnding("dl", "dl");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":nth-child(%d)");
      CDataNode cDataNode0 = new CDataNode(":nth-child(%d)");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      Attributes attributes2 = attributes1.put(":nth-child(%d)", "1]XQy^M&");
      Element element0 = new Element(tag0, "1]XQy^M&", attributes2);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "1]XQy^M&";
      attributes1.keys = stringArray0;
      element0.getElementsByAttributeValueContaining("1]XQy^M&", "1]XQy^M&");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("class", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("7NAgKVF=$e5(k65DOx", "p/puX~wVg<S_?'Z2RN");
      Attributes attributes1 = attributes0.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "7NAgKVF=$e5(k65DOx", attributes1);
      formElement0.getElementsByAttributeStarting("7NAgKVF=$e5(k65DOx");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Tag tag0 = Tag.valueOf(":nth-child(%d)");
      CDataNode cDataNode0 = new CDataNode(":nth-child(%d)");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.clone();
      Attributes attributes2 = attributes1.put(":nth-child(%d)", "1]XQy^M&");
      Element element0 = new Element(tag0, "1]XQy^M&", attributes2);
      String[] stringArray0 = new String[2];
      stringArray0[1] = "1]XQy^M&";
      attributes1.keys = stringArray0;
      element0.getElementsByAttribute("1]XQy^M&");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", ".");
      Element element0 = document0.appendElement(".");
      document0.prependElement(".");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = new Document(")gNd7YP<D");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      CDataNode cDataNode0 = new CDataNode("8b~.2Io\"d");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "8b~.2Io\"d", attributes0);
      formElement0.empty();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", ".");
      Element element0 = document0.appendElement(".");
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", ".");
      Element element0 = document0.appendElement(".");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Document.createShell("903g&{JIR");
      Element element0 = document0.prependElement("@n");
      Element element1 = element0.nextElementSibling();
      element1.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Element element0 = new Element("s+");
      element0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("h`$08");
      CDataNode cDataNode0 = new CDataNode("h`$08");
      document0.prependChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "=*\n%Fvax)9Oy9");
      Element element0 = document0.head();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+J^lm;*3*\"m*", "+J^lm;*3*\"m*");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "=*\n%Fvax)9Oy9");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Element element0 = document0.body();
      element0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Document.createShell("=*\n%fvax)9oy9");
      document0.addClass("Insert position out of bounds.");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("@pLT';sX~:A~(");
      Document document0 = parser0.parseInput((Reader) stringReader0, "");
      document0.toggleClass(".U#:&");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XF5{,[:k8b", "XF5{,[:k8b");
      document0.empty();
      document0.children();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("fY", "fY");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Element element0 = new Element("<html>\n <head></head>\n <body>\n  G9{px[\n </body>\n</html>");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Document.createShell(".");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Document.createShell("XD216^C+tLlj^3");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`hn#B6'3NQ:bl", "`hn#B6'3NQ:bl");
      document0.reparentChild(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("a", "a");
      Document document1 = document0.clone();
      document1.parentNode = (Node) document0;
      document1.before("#root");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", ".");
      Element element0 = document0.appendElement(".");
      element0.before(":zk3&Y1I.T9J9,Ev'");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.body();
      element0.before("");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(")", ")");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Tag tag0 = Tag.valueOf("9d1dzql%SPLWN@Lck");
      CDataNode cDataNode0 = new CDataNode("A`Flv>b>=!z9");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "1", attributes0);
      formElement0.attributes();
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+J^lm;*3*\"m*", "+J^lm;*3*\"m*");
      document0.setSiblingIndex((-2958));
      document0.attr("org.jsoup.parser.Token$1", true);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "class");
      Element element0 = document0.body();
      element0.attr("class", true);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Element element0 = new Element("H-OVgbzY><]@Y");
      element0.attr("H-OVgbzY><]@Y", true);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1", "1");
      Element element0 = document0.body();
      element0.attr("html > body", "1");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = new Document(")gNd7YP<D");
      document0.attr("%eUg+\"<LI,+41}O", "id");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+J^lm;*3*\"m*", "+J^lm;*3*\"m*");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = new Document("=*\n%Fvax)9Oy9");
      Document document1 = document0.clone();
      document1.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", "=*\n%Fvax)9Oy9");
      Element element0 = document0.appendElement("=*\n%Fvax)9Oy9");
      element0.appendText("=*\n%Fvax)9Oy9");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Tag tag0 = Tag.valueOf("u-^");
      FormElement formElement0 = new FormElement(tag0, "u-^", (Attributes) null);
      formElement0.setSiblingIndex((-1));
      formElement0.appendText("MAcId$d~");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "1");
      Element element0 = document0.head();
      element0.appendText("</");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("colgroup", "colgroup");
      Element element0 = document0.appendElement("colgroup");
      element0.prepend("colgroup");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("dd", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("JIq/cZ(L*ZmD");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "JIq/cZ(L*ZmD", attributes0);
      formElement0.appendChild(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Element element0 = new Element("H-OVgbzY><]@Y");
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parse("j MDF[r(5ya^P", "org.jsoup.parser.HtmlTreeBuilderState$24");
      Element element0 = document0.body();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "=*\n%Fvax)9Oy9");
      Element element0 = document0.appendElement("clas4R");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Document.createShell("R+<OVN4}hHx\"");
      Element element0 = document0.head();
      element0.replaceWith(document0);
      TextNode textNode0 = TextNode.createFromEncoded("R+<OVN4}hHx\"");
      document0.after((Node) textNode0);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("`hn#B6'3NQ:bl", "`hn#B6'3NQ:bl");
      Element element0 = document0.head();
      element0.after("");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("W", "W");
      Element element0 = document0.body();
      element0.after("W");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      Element element0 = document0.insertChildren((-1), nodeArray0);
      element0.addClass("`hn#B6'3NQ:bl");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Tag tag0 = Tag.valueOf("u-^");
      FormElement formElement0 = new FormElement(tag0, "u-^", (Attributes) null);
      formElement0.setSiblingIndex((-1));
      formElement0.addClass("input");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("</", "org.jsoup.select.Evaluator$Class");
      Element element0 = document0.head();
      element0.addClass("required");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = new Document("BC~v%[");
      Document document1 = Parser.parse("BC~v%[", "|7l5");
      document0.parentNode = (Node) document1;
      Element element0 = document1.prependChild(document0.parentNode);
      // Undeclared exception!
      element0.wrap("]B");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "=*\n%Fvax)9Oy9");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`hn#B6'3NQ:bl", "`hn#B6'3NQ:bl");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.val("`hn#B6'3NQ:bl");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("$X{L^l/EHt7nx", "$X{L^l/EHt7nx");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("76qI/R':^0j-7h=1u!");
      Document document0 = parser0.parseInput((Reader) stringReader0, "");
      // Undeclared exception!
      try { 
        document0.text(".U#:&");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~W@jd! 0|", "n>T>d0A9v9!qp^<}");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("XD216^C+tLvj^3", "XD216^C+tLvj^3");
      document0.setSiblingIndex((-402));
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", ".");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.tagName(".");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "*Sp!NfB");
      // Undeclared exception!
      try { 
        document0.selectFirst("k`-uM_|'?tc!FT~n");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'k`-uM_|'?tc!FT~n': unexpected token at '`-uM_|'?tc!FT~n'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "1");
      // Undeclared exception!
      try { 
        document0.select("There is an unread token pending!");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'pending!': unexpected token at '!'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", "lb*\n%vax)9OZ9");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1", "1");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Document.createShell("KMI Q");
      DocumentType documentType0 = new DocumentType("=*\n%Fvax)9Oy9", "=*\n%Fvax)9Oy9", "{<", "^Q`AN>_ZF7y\u0002L", "KMI Q");
      documentType0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+J^lm;*3*\"m*", "+J^lm;*3*\"m*");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prependElement("<html>\n <head></head>\n <body>\n  +J^lm;*3*\"m*\n </body>\n</html>");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("N<H", "Z&/k'CLmo");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(17);
      List<Node> list0 = Parser.parseFragment("Z&/k'CLmo", (Element) document0, "N<H", parseErrorList0);
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependElement("7i!T!");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = new Document("s+");
      DocumentType documentType0 = new DocumentType("@MNEWaZR';5", "<Y'", "<Y'", (String) null, "@MNEWaZR';5");
      document0.reparentChild(documentType0);
      // Undeclared exception!
      try { 
        document0.prependChild(documentType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("XD216^C+tLvj^3", "XD216^C+tLvj^3");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.prepend("XD216^C+tLvj^3");
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`hn#B6'3NQ:bl", "`hn#B6'3NQ:bl");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Document.createShell("XD216^C+tLlj^3");
      MockFile mockFile0 = new MockFile(" />", " />");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(2082);
      // Undeclared exception!
      document0.outerHtmlTail(mockPrintStream0, 2082, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(".", "id");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ":zk3&Y1I.T9J9,Ev'");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 11, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Document.createShell("nn:oakd|nom*e_(ex>");
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 3323, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+J^lm;*3*\"m*", "+J^lm;*3*\"m*");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 4, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Document.createShell("XD216^C+tLlj^3");
      ByteArrayOutputStream byteArrayOutputStream0 = new ByteArrayOutputStream();
      DataOutputStream dataOutputStream0 = new DataOutputStream(byteArrayOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(dataOutputStream0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintWriter0, (-1668), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("y?B", "y?B");
      MockFile mockFile0 = new MockFile("/jydv 6wqiktro`");
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(149);
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintStream0, (-1840870951), document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("N<H", "N<H");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "N<H");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, (-613), document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, (-241), document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1", "1");
      StringWriter stringWriter0 = new StringWriter();
      StringBuffer stringBuffer0 = stringWriter0.getBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(stringBuffer0, (-923), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G", "Z&/k'CLmo");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, 1661, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      DataNode dataNode0 = new DataNode("qdHDe0\"<Tymq,nBK4O");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", "=*\n%Fvax)9Oy9");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      document0.addChildren(nodeArray0);
      Evaluator.Id evaluator_Id0 = new Evaluator.Id("G9{px[");
      // Undeclared exception!
      document0.is((Evaluator) evaluator_Id0);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("XD216^C+tLvj^3", "XD216^C+tLvj^3");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Document.createShell("KBS=*qC8&agr k!zv q");
      // Undeclared exception!
      try { 
        document0.is("KBS=*qC8&agr k!zv q");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'KBS=*qC8&agr k!zv q': unexpected token at '=*qC8&agr k!zv q'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "=*\n%Fvax)9Oy9");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parse("+J^lm;*3*\"m*", "+J^lm;*3*\"m*");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html("+J^lm;*3*\"m*");
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "=*\n%Fvax)9Oy9");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = new Document("mXPP\"jqF");
      document0.appendElement("mXPP\"jqF");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("XD216^C+tyLvj^3", "XD216^C+tyLvj^3");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html((CharArrayWriter) null);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parse("XD216^C+tLvj^3", "XD216^C+tLvj^3");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "XD216^C+tLvj^3");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Document.createShell("value");
      char[] charArray0 = new char[8];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`hn#B6'3NQ:bl", "`hn#B6'3NQ:bl");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.appendElement("br");
      List<Node> list0 = document0.childNodesCopy();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.NodeTraversor", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parse("r.)g:iu^4c/-nq", "4ava.lang.strimg@0000000044");
      Element element0 = document0.appendElement("4ava.lang.strimg@0000000044");
      element0.setSiblingIndex((-2770));
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Document.createShell("XD216^C+tLvj^3");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("frame", ">$A4RSL0AYX+b");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.appendElement("br");
      element0.setSiblingIndex((-499));
      Pattern pattern0 = Pattern.compile("br");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText(pattern0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parse("plaintext", "plaintext");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("&Er+%N'c)oQ(_x|7I)/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: &Er+%N'c)oQ(_x|7I)/
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cr", "cr");
      DataNode dataNode0 = DataNode.createFromEncoded("cr", "cr");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("cr");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Element element0 = document0.appendElement(".");
      element0.setSiblingIndex((-1121));
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText("br");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parse("b", "b");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("`", "b", false);
      document0.setParentNode(xmlDeclaration0);
      Pattern pattern0 = Pattern.compile("b");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText(pattern0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+J^lm;*3*\"m*", "+J^lm;*3*\"m*");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("+a5d|");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: +a5d|
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("y?B", "y?B");
      Comment comment0 = new Comment("Rz`e~P|5C", "y?B");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      document0.parentNode = (Node) xmlDeclaration0;
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("y?B");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("XD216^C+tLvj^3", "XD216^C+tLvj^3");
      // Undeclared exception!
      try { 
        document0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse("multiple", "multiple");
      CDataNode cDataNode0 = new CDataNode("/)+-of&t;W<3.");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan(68);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.reparentChild(document0);
      document0.setSiblingIndex((-1432352094));
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals(2076);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", ".");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "_L~~");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("dl", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "dl", attributes0);
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueNot("%)L;yDwu:;", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{0Dtp[", "=*\n%Fvax)9Oy9");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Document.createShell("yv6cer/#");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("br", "j)>=l2i@n");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: j)>=l2i@n
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Tag tag0 = Tag.valueOf("S('52tzhMu");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "\"6QtV", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttributeValueEnding("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("d", "d");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("       ", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", "=*\n%Fvax)9Oy9");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("G9{px[", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "~=khm");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "~=khm");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = new Document("=*\n%Fvax)9Oy9");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("@cV5DyLvHjd~E<v", "@cV5DyLvHjd~E<v");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k4g5h8 ~=~tK10", "k4g5h8 ~=~tK10");
      document0.setSiblingIndex((-2152));
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("lILB}z0O4{cV~,h<]Z");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parse("multiple", "multiple");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementById("}c)Ch[FD+&OJfA}}gk");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1", "1");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Element element0 = new Element("multiple");
      Tag tag0 = Tag.valueOf("xgl``)h:(Tybc");
      FormElement formElement0 = new FormElement(tag0, "`Z<s", (Attributes) null);
      element0.prependChild(formElement0);
      // Undeclared exception!
      try { 
        formElement0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at 'Tybc'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Document.createShell(".");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(".", ".", true);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Document.createShell("G9{px[");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", "=*\n%Fvax)9Oy9");
      // Undeclared exception!
      try { 
        document0.child((-1432352094));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("5mXP\"jqF", "5mXP\"jqF");
      CDataNode cDataNode0 = new CDataNode("s9y{\"FB");
      Element element0 = document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element0.before((Node) cDataNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("Zom");
      Document document0 = parser0.parseInput((Reader) stringReader0, "Zom");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.before("");
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Document.createShell(" dl=\"dl\"");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Document.createShell("R+<OVN4}hHx\"");
      Element element0 = document0.head();
      element0.replaceWith(document0);
      // Undeclared exception!
      document0.attr("R+<OVN4}hHx\"", "");
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = new Document("=*\n%Fvax)9Oy9");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "ascii");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = new Document("label");
      Element element0 = document0.toggleClass("");
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        element0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XF5{,[:k8b", "XF5{,[:k8b");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", "=*\n%Fvax)9Oy9");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.appendElement("body");
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("~!", "~!");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = parser0.parseFragmentInput("~!", document0, "");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement("~!");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput("=*n%Fvx)9y9", "[@0");
      // Undeclared exception!
      try { 
        document0.appendElement("V]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      CDataNode cDataNode0 = new CDataNode("N<H");
      Node node0 = cDataNode0.doClone(document0);
      document0.reparentChild(node0);
      // Undeclared exception!
      try { 
        document0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse(">v6cer/G", ">v6cer/G");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren((-1), nodeArray0);
      // Undeclared exception!
      document0.append("O]nl-");
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parse("{<", "nowrap");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(")", ")");
      document0.appendChild(document0);
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nowrap", "nowrap");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.after("?D=-y:=SC");
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "textarea");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "wDfO", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("Split offset must be not be negative", parseSettings0);
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parse("3Jd_'y(", ".");
      MockFile mockFile0 = new MockFile("3Jd_'y(");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      document0.html(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("N<H", "N<H");
      document0.toggleClass("N<H");
      Element element0 = document0.toggleClass("N<H");
      element0.hasClass("N<H");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Document.createShell("Split offset must be not be negative");
      document0.hasClass("(h-BYf]xt>");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("</");
      document0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", "lb*\n%vax)9OZ9");
      Element element0 = document0.appendElement("G9{px[");
      element0.after("lb*\n%vax)9OZ9");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "=*\n%Fvax)9Oy9");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", "lb*\n%vax)9OZ9");
      document0.reparentChild(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "=*\n%Fvax)9Oy9");
      Element element0 = document0.appendElement("=*\n%Fvax)9Oy9");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "1");
      Element element0 = document0.appendElement("1");
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "1");
      Element element0 = document0.body();
      element0.append("$/T");
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Document.createShell(".");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "=*\n%Fvax)9Oy9");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parse("b", "b");
      Pattern pattern0 = Pattern.compile("b");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`hn#B6'3NQ:bl", "`hn#B6'3NQ:bl");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1", "1");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Element element0 = new Element("Dv6UUyOM;/.9w:");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$Class");
      Pattern pattern0 = Pattern.compile("</");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "=*\n%Fvax)9Oy9");
      document0.select("P");
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Document.createShell("=*\n%fvax)9oy9");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = new Document("`hn#B6'3NQ:bl");
      Set<String> set0 = document0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("1", "{<");
      // Undeclared exception!
      try { 
        document0.html((MockFileWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.appendElement("br");
      element0.appendElement("br");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Element element0 = new Element("br");
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outputSettings(document_OutputSettings1);
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Document.createShell("G");
      Element element0 = document0.toggleClass("G");
      element0.toggleClass("G");
      document0.toggleClass("G");
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("N<H", "N<H");
      Element element0 = document0.toggleClass("N<H");
      document0.toggleClass("N<H");
      element0.getElementsByClass("N<H");
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("N<H", "N<H");
      document0.toggleClass("N<H");
      Element element0 = document0.toggleClass("N<H");
      element0.hasClass("java.lang.string@0000000056");
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Document.createShell("XD216^C+tLlj^3");
      Element element0 = document0.toggleClass("XD216^C+tLlj^3");
      element0.toggleClass(" > ");
      document0.hasClass("XD216^C+tLlj^3");
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("XD216^C+tLvj^3", "XD216^C+tLvj^3");
      Element element0 = document0.toggleClass("org.jsoup.select.Evaluator$AttributeWithValueMatching");
      element0.hasClass("$=");
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000047", "java.lang.string@0000000047");
      Element element0 = document0.toggleClass("java.lang.string@0000000047");
      document0.addClass("java.lang.string@0000000047");
      element0.hasClass("java.lang.string@0000000047");
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "=*\n%Fvax)9Oy9");
      Element element0 = document0.toggleClass("=*\n%Fvax)9Oy9");
      element0.hasClass("<html>\n <head></head>\n <body>\n  =*\n%Fvax)9Oy9\n </body>\n</html>A;}Q,B");
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000047", "java.lang.string@0000000047");
      Element element0 = document0.toggleClass("java.lang.string@0000000047");
      element0.hasClass("java.lang.string@0000000047");
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(" > ", "head");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("D;ueg7C+l Um6", false);
      document0.prependChild(xmlDeclaration0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", " />");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", " ");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`hn#B6'3NQ:bl", "`hn#B6'3NQ:bl");
      document0.reparentChild(document0);
      document0.getElementsContainingText("`hn#B6'3NQ:bl");
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      document0.appendElement("br");
      document0.appendElement("br");
      document0.getElementsMatchingOwnText("bq8~9P&CGsmVI9L*");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Pattern syntax error: ", "Pattern syntax error: ");
      CDataNode cDataNode0 = new CDataNode("");
      Node node0 = cDataNode0.doClone(document0);
      document0.replaceChild(node0, cDataNode0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = new Document("br");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("^", false);
      document0.appendChild(xmlDeclaration0);
      document0.getElementsMatchingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("_XYJg>^v67\"t@3|ndA", " > ");
      Element element0 = document0.text(" > ");
      element0.append(" > ");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "=*\n%Fvax)9Oy9");
      document0.append("A;}Q,B");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse("1", "p");
      Document document1 = document0.clone();
      document1.appendTo(document0);
      document0.getElementsContainingText("m_BR hL%3");
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nth-last-of-type", ",#5>w");
      document0.title("@");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", "=*\n%Fvax)9Oy9");
      Element element0 = document0.appendElement("=*\n%Fvax)9Oy9");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{Dtpx[", "=*\n%Fvax)9Oy9");
      document0.reparentChild(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "1");
      Element element0 = document0.appendElement("1");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{Dtpx[", "=*\n%Fvax)9Oy9");
      document0.reparentChild(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Element element0 = document0.appendElement("]");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Document.createShell("`h[#B6'3uQ:Cl");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parse("2$TK=_:KRr<?XR+", "2$TK=_:KRr<?XR+");
      Element element0 = document0.appendElement("%");
      document0.appendElement("%");
      element0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = new Document("mXPP\"jqF");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1", "1");
      Element element0 = document0.body();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, elements0.size());
      assertEquals("1", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", ".");
      Element element0 = document0.appendElement(".");
      Elements elements0 = element0.siblingElements();
      assertEquals(".", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.select.Evaluator$Class");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$Class", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = new Document("k4g5h8 ~=~tK1Z0");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      Element element0 = document0.body();
      element0.wrap(" > ");
      element0.cssSelector();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "1");
      document0.toggleClass("=*\n%Fvax)9Oy9");
      document0.cssSelector();
      assertEquals("1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      Node[] nodeArray0 = new Node[0];
      // Undeclared exception!
      try { 
        document0.insertChildren(687, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse(".", "org.jsoup.parser.XmlTreeBuilder$1");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1110026255), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", "lb*\n%vax)9OZ9");
      Pattern pattern0 = Pattern.compile(")", 1819);
      Elements elements0 = document0.getElementsByAttributeValueMatching("wzsT(xU|/(e`O{{v|", pattern0);
      // Undeclared exception!
      try { 
        document0.insertChildren(1819, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("nowrap", "nowrap");
      Elements elements0 = document0.getElementsContainingText("</");
      // Undeclared exception!
      try { 
        document0.insertChildren((-2785), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "=*\n%Fvax)9Oy9");
      LinkedList<CDataNode> linkedList0 = new LinkedList<CDataNode>();
      Element element0 = document0.insertChildren(0, (Collection<? extends Node>) linkedList0);
      assertEquals("=*\n%Fvax)9Oy9", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("`Rn# B6'3NQ:bl", "`Rn# B6'3NQ:bl");
      DataNode dataNode0 = new DataNode("`Rn# B6'3NQ:bl", "`Rn# B6'3NQ:bl");
      document0.prependChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", ".");
      document0.append(".");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      document0.reparentChild(document0);
      document0.prependText("");
      document0.previousElementSiblings();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1147));
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parse("muliple", "muliple");
      // Undeclared exception!
      try { 
        document0.selectFirst("~lXj=j&lyox(W%#eyx%");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = '''
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parse("id", "id");
      document0.getElementsByTag(".");
      assertEquals("id", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G", "Z&/k'CLmo");
      document0.is("Comment");
      assertEquals("Z&/k'CLmo", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XD216^C+txvj^3", "XD216^C+txvj^3");
      document0.getAllElements();
      assertEquals("XD216^C+txvj^3", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XD216^C+txvj^3", "XD216^C+txvj^3");
      // Undeclared exception!
      try { 
        document0.before("s+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("k4g5h8 ~=~tK10", "k4g5h8 ~=~tK10");
      document0.getElementsByAttribute("lILB}z0O4{cV~,h<]Z");
      assertEquals("k4g5h8 ~=~tK10", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parse("</", "org.jsoup.select.Evaluator$Class");
      document0.getElementsByAttributeValueNot("</", "org.jsoup.select.Evaluator$Class");
      assertEquals("org.jsoup.select.Evaluator$Class", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parse("3Jd_'y(", ".");
      Element element0 = document0.shallowClone();
      assertEquals(".", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "=*\n%Fvax)9Oy9");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("mXPP\"jqF", "mXPP\"jqF");
      Element element0 = document0.appendElement("textarea");
      element0.val("{4W^w");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("1", "1");
      document0.getElementsByAttributeValueContaining("1", " > ");
      assertEquals(1, document0.childNodeSize());
      assertEquals("1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("N<H", "N<H");
      Elements elements0 = document0.getElementsByClass("N<H");
      assertEquals("N<H", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      document0.getElementsByAttributeValueEnding("`hn#B6'3NQ:bl", "`hn#B6'3NQ:bl");
      assertEquals("`hn#B6'3NQ:bl", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Document.createShell("Split offset must be not be negative");
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("Split offset must be not be negative", "Split offset must be not be negative");
      document0.is((Evaluator) evaluator_AttributeWithValueNot0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("Split offset must be not be negative", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parse("java.lang.string@0000000047", "java.lang.string@0000000047");
      Elements elements0 = document0.getElementsByAttributeValueMatching("java.lang.string@0000000047", "s+");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Element element0 = new Element("br");
      Elements elements0 = element0.getElementsByIndexEquals(97692013);
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+J^lm;*3*\"m*", "+J^lm;*3*\"m*");
      document0.getElementsByAttributeStarting("+J^lm;*3*\"m*");
      assertEquals("+J^lm;*3*\"m*", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Document.createShell("`hn#B6'3NQ:bl");
      Elements elements0 = document0.getElementsByIndexLessThan(62);
      assertEquals("`hn#B6'3NQ:bl", document0.baseUri());
      assertEquals(3, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      // Undeclared exception!
      try { 
        document0.after("<html>\n <head></head>\n <body>\n  br\n </body>\n</html>\n<br><br></br>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("XD216^C+tLvj^3", "XD216^C+tLvj^3");
      document0.prepend("XD216^C+tLvj^3");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertEquals(" > ", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{px[", "=*\n%Fvax)9Oy9");
      document0.getElementsByAttributeValueStarting("html", "G9{px[");
      assertEquals(1, document0.childNodeSize());
      assertEquals("=*\n%Fvax)9Oy9", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsByAttributeValue("d)2;%B,L7:=N~", "#root");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("d", "d");
      document0.wholeText();
      assertEquals("d", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("XF5{,[:k8b", "XF5{,[:k8b");
      Elements elements0 = document0.getElementsContainingOwnText(")4WO@W3xL4");
      assertEquals(1, document0.childNodeSize());
      assertEquals("XF5{,[:k8b", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("G9{x[", "G9{x[");
      document0.dataset();
      assertEquals(1, document0.childNodeSize());
      assertEquals("G9{x[", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      document0.html(" ");
      boolean boolean0 = document0.hasText();
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("=*\n%Fvax)9Oy9", "");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Element element0 = new Element("CF");
      // Undeclared exception!
      try { 
        element0.child(4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "class");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("class", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      Elements elements0 = document0.getElementsMatchingText("br");
      assertEquals("br", document0.baseUri());
      assertEquals(3, elements0.size());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      // Undeclared exception!
      try { 
        document0.wrap(" > ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.getElementById("N(h[.BYf]xt>");
      assertEquals(1, document0.childNodeSize());
      assertNull(element0);
  }
}
