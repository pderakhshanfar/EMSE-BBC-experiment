/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 03:10:34 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.shaded.org.mockito.Mockito.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.IOException;
import java.io.PipedOutputStream;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.PrintStream;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.io.UnsupportedEncodingException;
import java.io.Writer;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.nio.charset.IllegalCharsetNameException;
import java.nio.charset.UnsupportedCharsetException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.ViolatedAssumptionAnswer;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.evosuite.runtime.testdata.EvoSuiteFile;
import org.evosuite.runtime.testdata.FileSystemHandling;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.jsoup.select.NodeFilter;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\u0006jZ_*% <eU<kgKq+Ef", "H");
      TextNode textNode0 = new TextNode("\u0006jZ_*% <eU<kgKq+Ef");
      document0.setParentNode(textNode0);
      document0.setBaseUri("\u0006jZ_*% <eU<kgKq+Ef");
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("H");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Document document0 = Document.createShell("'");
      Document document1 = (Document)document0.addClass("'");
      document1.childNodesAsArray();
      document0.className();
      document1.getElementsByClass("java.lang.String@0000000038");
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueEnding("java.lang.String@0000000038", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = Document.createShell("'");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("'", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Document.createShell("'");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("'", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document0 = Document.createShell("InHeadNoscript");
      Document document1 = document0.clone();
      Element element0 = document1.appendText("");
      element0.hasText();
      element0.parentNode = (Node) document0;
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      document1.previousSibling();
      charArrayWriter0.flush();
      // Undeclared exception!
      try { 
        charArrayWriter0.append((CharSequence) "", 1151, 1151);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      String string0 = "html";
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document0 = new Document("h6");
      document0.nextElementSiblings();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(".", parseSettings0);
      Element element0 = new Element(tag0, "html");
      element0.hasAttributes();
      document0.doSetBaseUri("html");
      document0.id();
      Element element1 = document0.appendElement("h6");
      int int0 = (-841);
      element1.siblingIndex = (-841);
      Element element2 = element0.toggleClass("h6");
      element2.getElementsByAttributeValueNot("html", "#L[9cP)W3o");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("8tk5ll9ib&00z`");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Element element0 = new Element("bXr");
      Element element1 = element0.appendElement("bXr");
      String string0 = Node.EmptyString;
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      element1.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Element element0 = new Element("text|rea");
      DocumentType documentType0 = new DocumentType("text|rea", "text|rea", "text|rea");
      element0.setParentNode(documentType0);
      element0.val();
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(element0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("9ep'aQef", "9ep'aQef");
      document0.outerHtml();
      document0.hasText();
      document0.selectFirst("html");
      // Undeclared exception!
      try { 
        document0.wrap("$hT,(7E6dbz@czoO\"6");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("m7M", "m7M");
      document0.dataNodes();
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "m7M");
      StringBuilder stringBuilder1 = stringBuilder0.append(',');
      StringBuilder stringBuilder2 = stringBuilder1.reverse();
      StringBuilder stringBuilder3 = stringBuilder2.append(0L);
      int int0 = (-1621);
      StringBuilder stringBuilder4 = stringBuilder3.append((-1621));
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuilder4, (-1621), document_OutputSettings2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.appendElement("br");
      element0.val();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(46);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(true);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.charset(charset0);
      // Undeclared exception!
      try { 
        element1.outerHtmlHead((Appendable) null, 46, document_OutputSettings4);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Element element0 = new Element("text|rea");
      element0.val();
      element0.setSiblingIndex((-984));
      element0.tagName("value");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3.&", "title");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "3.&");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Element element0 = new Element("br");
      element0.appendElement("br");
      element0.cssSelector();
      element0.selectFirst("br");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      String string0 = "3.&";
      Document document0 = Parser.parse("3.&", "3.&");
      String string1 = "id";
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      doReturn((NodeFilter.FilterResult) null).when(nodeFilter0).head(any(org.jsoup.nodes.Node.class) , anyInt());
      document0.filter(nodeFilter0);
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("sASr;j;8l:N/2k1Is");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.appendElement("br");
      element1.selectFirst("br");
      element0.cssSelector();
      element1.dataNodes();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      String string0 = "java.lang.string@0000000061 unexpected characters returned fr/ ";
      String string1 = ">n";
      Document document0 = Document.createShell(">n");
      document0.val();
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      document0.body();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("java.lang.string@0000000061 unexpected characters returned fr/ ", "java.lang.string@0000000035 unexpected characters text|rea for ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = new Document("text|rea");
      Document document1 = new Document("text|rea");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      try { 
        document0.outerHtmlHead(pipedWriter0, (-2127), document_OutputSettings1);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      String string0 = "br";
      Element element0 = new Element("br");
      List<Node> list0 = Parser.parseFragment("br", element0, "s+");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.appendElement("br");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "#root");
      Element element0 = document0.head();
      element0.nextElementSibling();
      element0.cssSelector();
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      FileSystemHandling.appendStringToFile((EvoSuiteFile) null, "uy]cz,1dim#");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Element element0 = new Element("uy]cz,1dim#");
      DataNode dataNode0 = DataNode.createFromEncoded("compact", (String) null);
      element0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        element0.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000061 unexpected characters returned fr/ ", "java.lang.string@0000000061 unexpected characters returned fr/ ");
      DataNode dataNode0 = new DataNode("VPmECeHRrhKa>]");
      dataNode0.nodelistChanged();
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("time", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.clone();
      parseSettings0.normalizeTag("unexpected characters returned for");
      Element element0 = new Element(tag0, "time", attributes1);
      element0.absUrl("time");
      Elements elements0 = element0.getElementsByTag("time");
      element0.val();
      String string0 = "ga!,:?!&:r]g1q/9wn.";
      Element element1 = element0.text("ga!,:?!&:r]g1q/9wn.");
      element1.insertChildren((-2), (Collection<? extends Node>) elements0);
      MockPrintWriter mockPrintWriter0 = null;
      try {
        mockPrintWriter0 = new MockPrintWriter((Writer) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.io.Writer", e);
      }
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Element element0 = new Element("br");
      String string0 = "attributeSingleValueCharsSorted";
      Document document0 = Parser.parseBodyFragment("attributeSingleValueCharsSorted", "dbz/6");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.indentAmount(49);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      List<Node> list0 = document1.childNodesCopy();
      element0.childNodes = list0;
      element0.className();
      // Undeclared exception!
      try { 
        element0.getElementsByClass("5:5b");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      String string0 = "#root";
      Element element0 = new Element("#root");
      Document document0 = Parser.parseBodyFragmentRelaxed("#root", "'{>(=h,*],");
      Document document1 = document0.normalise();
      element0.parentNode = (Node) document1;
      CDataNode cDataNode0 = new CDataNode("#root");
      Node node0 = cDataNode0.clone();
      Element element1 = element0.doClone(node0);
      element0.attr("#root", true);
      element0.parents();
      element1.val();
      NodeFilter nodeFilter0 = mock(NodeFilter.class, new ViolatedAssumptionAnswer());
      // Undeclared exception!
      try { 
        element1.before("");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Element element0 = new Element(":matches");
      DataNode dataNode0 = new DataNode(":matches");
      element0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        element0.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parse(">n", ">n");
      Element element0 = document0.appendElement(">n");
      element0.setSiblingIndex((-555));
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText(">n");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">n", ">n");
      Element element0 = new Element("'");
      document0.val();
      MockFile mockFile0 = new MockFile("I*b", "U!'`.Rnse");
      File file0 = MockFile.createTempFile("kxsEMw9XoBd", "id", (File) mockFile0);
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(58);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(true);
      Charset charset0 = document0.charset();
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.charset(charset0);
      // Undeclared exception!
      document0.outerHtmlTail(mockPrintStream0, (-216673350), document_OutputSettings4);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(">n", "\"h:JPw5");
      Document document1 = document0.normalise();
      document1.addClass("\"h:JPw5");
      Element element0 = document1.addClass("Unexpected characters returned for ");
      element0.dataNodes();
      document1.hasClass("java.lang.string@0000000047 unexpected characters returned wp3 ");
      document0.text();
      element0.val();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parse("r:5;", "r:5;");
      Comment comment0 = new Comment("r:5;");
      document0.prependChild(comment0);
      document0.reparentChild(document0);
      document0.getElementsContainingOwnText("r:5;");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Document.createShell("r:5A");
      Element element0 = document0.head();
      element0.nextElementSibling();
      document0.val();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput("r:5A", "font");
      Parser.parseBodyFragment("r:5A", "org.jsoup.internal.StringUtil");
      Element element0 = document0.addClass("r:5A");
      element0.dataNodes();
      Tag.valueOf("font");
      element0.className();
      document0.getElementsByClass("r:5A");
      // Undeclared exception!
      try { 
        element0.val("r:5A");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";iJDtWA_z!/6uOZYk", ";iJDtWA_z!/6uOZYk");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.hasText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Document.createShell(">n");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("java.lang.string@0000000061 unexpected characters returned fr/ ", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("java.lang.string@0000000061 unexpected characters returned fr/ ");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, ">n", attributes0);
      document0.setParentNode(formElement0);
      Element element0 = document0.appendElement(">n");
      element0.before((Node) cDataNode0);
      document0.getElementsContainingOwnText("java.lang.string@0000000061 unexpected characters returned fr/ ");
      document0.nodeName();
      document0.toggleClass("@<)764rH");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Document.createShell("5yg['I1[A:&/r\"2q :");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "5yg['I1[A:&/r\"2q :");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(true);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 58, document_OutputSettings3);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("1G7", "1G7");
      document0.childNodes = null;
      document0.setSiblingIndex(57);
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell(">n");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      document0.appendElement(">n");
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("java.lang.string@0000000061 unexpected characters returned fr/ ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000061 unexpected characters returned fr/ ", "java.lang.string@0000000061 unexpected characters returned fr/ ");
      DataNode dataNode0 = new DataNode("&", "VPmECeHRrhKa>]");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000061 unexpected characters returned fr/ ", ">n");
      Element element0 = document0.appendElement(">n");
      document0.text();
      Element element1 = element0.text("java.lang.string@0000000061 unexpected characters returned fr/");
      element1.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("header", "header");
      Element element0 = document0.body();
      Document document1 = element0.ownerDocument();
      Document document2 = document1.normalise();
      Document document3 = document2.clone();
      document3.textNodes();
      String string0 = "org.jsoup.nodes.Element$NodeList";
      element0.data();
      Document document4 = (Document)document2.attr("org.jsoup.nodes.Element$NodeList", "}zyM.(syQ9xmSf|nu!a");
      document4.cssSelector();
      document2.getElementById("}zyM.(syQ9xmSf|nu!a");
      int int0 = (-1881402357);
      document4.setSiblingIndex((-1881402357));
      Element.preserveWhitespace(document4);
      document4.toggleClass("org.jsoup.nodes.Element$NodeList");
      document0.val();
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element$NodeList");
      document2.getElementsByAttributeValueMatching("2uF7Opeo'UE\"v1.+o+k", pattern0);
      document0.ensureChildNodes();
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        stringBuilder0.append((CharSequence) "", (-1881402357), (-1881402357));
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // start -1881402357, end -1881402357, s.length() 0
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      document0.appendElement("br");
      document0.appendElement("br");
      document0.getElementsContainingOwnText("WTah7");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000061 unexpected characters returned fr/ ");
      Element element0 = document0.head();
      element0.prependText("java.lang.string@0000000061 unexpected characters returned fr/ ");
      document0.appendElement("java.lang.string@0000000061 unexpected characters returned fr/ ");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      Element element0 = document0.appendElement("?b");
      element0.parents();
      element0.prependChild(document0);
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText("?b");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ?b
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      document0.appendElement("br");
      Element element0 = document0.body();
      element0.prepend("9n&");
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Element element0 = new Element("br");
      Element element1 = element0.appendElement("br");
      element1.elementSiblingIndex();
      element0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      String string0 = "9Nm=3q8 2";
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("9Nm=3q8 2", parseSettings0);
      byte[] byteArray0 = new byte[7];
      byteArray0[0] = (byte) (-93);
      byteArray0[1] = (byte) (-21);
      byteArray0[2] = (byte)0;
      byteArray0[3] = (byte)51;
      byteArray0[4] = (byte) (-1);
      byteArray0[5] = (byte)14;
      byteArray0[6] = (byte)124;
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Element element0 = new Element(tag0, "9Nm=3q8 2");
      element0.childNodes = null;
      parseSettings0.normalizeAttribute(":nth-child(%d)");
      Element element1 = element0.removeClass("9Nm=3q8 2");
      // Undeclared exception!
      try { 
        element0.prependChild(element1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Element element0 = new Element("br");
      element0.prepend("<deZ3th,]\"v");
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Element element0 = new Element("id");
      element0.nodelistChanged();
      element0.isBlock();
      element0.cssSelector();
      CDataNode cDataNode0 = new CDataNode("id");
      Element.preserveWhitespace(element0);
      Document document0 = Parser.parse("id", "id");
      Element element1 = document0.head();
      element1.text();
      document0.id();
      element1.getElementsByAttributeValueMatching("id", "");
      document0.val();
      element0.className();
      element0.dataNodes();
      document0.getElementsContainingText("");
      element1.before((Node) element0);
      element1.empty();
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "id");
      element1.prependElement("</");
      // Undeclared exception!
      try { 
        element1.getElementsByAttributeValue("</", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Document.createShell("isindex");
      Element element0 = document0.head();
      element0.clone();
      document0.getElementsByClass("html");
      element0.tag();
      document0.dataNodes();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      byte[] byteArray0 = new byte[0];
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      String string0 = "FBw";
      Tag tag0 = Tag.valueOf("FBw");
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("FBw", "systemId", attributes0);
      Tag.valueOf("FBw");
      String string1 = "G#kI<~(";
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "G#kI<~(");
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.put("Children collection to be inserted must not be null.", "systemId");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "systemId", attributes2);
      pseudoTextElement0.getElementsByAttributeValueEnding("systemId", "Children collection to be inserted must not be null.");
      CDataNode cDataNode0 = new CDataNode("systemId");
      Node node0 = cDataNode0.doClone(pseudoTextElement0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.prependChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser.xmlParser();
      Document document0 = parser0.parseInput("intablebody", "[96hOo:p");
      Document document1 = Parser.parse("Unexpected characters returned for ", " > ");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      document0.outerHtml();
      // Undeclared exception!
      try { 
        document1.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Element element0 = new Element(":matches");
      Element.preserveWhitespace(element0);
      // Undeclared exception!
      try { 
        element0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Element element0 = new Element("br");
      Document document0 = Parser.parse("br", "br");
      element0.appendTo(document0);
      element0.outerHtml();
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("og.jsoup.nodes.eleent$2", "og.jsoup.nodes.eleent$2");
      document0.reparentChild(document0);
      document0.data();
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Parser.xmlParser();
      Element element0 = new Element("samp");
      element0.select("samp");
      element0.val();
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream("", "G&Hq}an");
        fail("Expecting exception: FileNotFoundException");
      
      } catch(Throwable e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileOutputStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, false);
      Document document0 = Parser.parse("6mo71", "g`PPk1,d>CH+%VNUX");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Element element0 = document0.appendTo(document1);
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      element0.html(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Eleent$2");
      Element element0 = document0.head();
      element0.toggleClass("<rX,fsf>");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Document.createShell("Must be true");
      Element element0 = document0.body();
      element0.html();
      document0.getElementsByIndexLessThan(1);
      document0.text();
      element0.wrap("Must be true");
      StringBuilder stringBuilder0 = new StringBuilder(1);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(1, "Must be true");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 1
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parse("~~z'EXhSqxZ?SD", "#g0kLh");
      Element element0 = document0.head();
      element0.getElementsByAttributeStarting("DoctypePublicIdentifier_doubleQuoted");
      element0.addClass("xe_B&|");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'head.java.lang.String@0000000060': unexpected token at '@0000000060'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Element element0 = new Element("F L1] :LLI");
      element0.dataset();
      element0.getElementsByIndexEquals(0);
      Document document0 = new Document("F L1] :LLI");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Parser.xmlParser();
      Document document0 = Parser.parseBodyFragment("\"Ixg%pV?oSL;Lm96", "\"Ixg%pV?oSL;Lm96");
      Element element0 = document0.addClass("\"Ixg%pV?oSL;Lm96");
      Document document1 = (Document)document0.addClass("Unexpected characters returned for ");
      LinkedList<DataNode> linkedList0 = new LinkedList<DataNode>();
      Parser.parseBodyFragment("Unexpected characters returned for ", "missing semicolon");
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag.valueOf("Unexpected characters returned for ");
      Document document2 = document1.normalise();
      document2.hasClass("fr/");
      element0.previousElementSibling();
      // Undeclared exception!
      try { 
        document1.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      document2.removeAttr("org.jsoup.nodes.Element$2");
      Element element0 = document2.appendChild(document1);
      element0.hasSameValue(document1);
      Document document3 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "I");
      Parser parser0 = Parser.htmlParser();
      document2.siblingIndex = (-1069);
      Document document4 = document1.parser(parser0);
      document4.val("org.jsoup.nodes.Element$2");
      document2.doClone(document3);
      document3.addClass("org.jsoup.nodes.Element$2");
      element0.val();
      document2.className();
      document1.dataNodes();
      element0.getElementsContainingOwnText("");
      document2.getElementsByAttributeValueMatching("org.jsoup.nodes.Element$1", "");
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("br", "br");
      document0.addClass("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      Element element0 = document1.head();
      Element element1 = new Element("/,fPO");
      element0.appendTo(element1);
      document0.outerHtml();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.eleent$2", "org.jsoup.nodes.eleent$2");
      Element element0 = document0.head();
      String string0 = Node.EmptyString;
      document0.outerHtml();
      element0.after("java.lang.string@0000000040 unexpected characters returned  /> ");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Element element0 = new Element(":matches");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, ":matches");
      Element element1 = element0.val(":matches");
      element1.text("{Q8T");
      StringBuffer stringBuffer0 = new StringBuffer();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(39);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.outline(true);
      element1.outerHtmlTail(stringBuffer0, 55, document_OutputSettings4);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Element element0 = new Element("br");
      Document document0 = Parser.parseBodyFragment("frame", "textarea");
      document0.clone();
      document0.appendChild(element0);
      document0.text();
      Appendable appendable0 = null;
      int int0 = 41;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(true);
      // Undeclared exception!
      try { 
        Charset.forName("frame");
        fail("Expecting exception: UnsupportedCharsetException");
      
      } catch(UnsupportedCharsetException e) {
         //
         // frame
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Element element0 = new Element("br");
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("S22", "S22");
      Document document1 = Parser.parse("br", "br");
      document0.appendTo(element0);
      element0.outerHtml();
      document1.getElementsByAttributeValueNot("S22", "body");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Element element0 = new Element("br");
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("br", "Ay;:tusi)$THcUvKH");
      Document document1 = document0.parser(parser0);
      element0.appendTo(document1);
      element0.outerHtml();
      document1.wrap("br");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.eleent$2", "org.jsoup.nodes.eleent$2");
      Element element0 = document0.head();
      element0.childNodesAsArray();
      element0.cssSelector();
      document0.getElementsMatchingText("html > head");
      document0.hasText();
      element0.before("html > head");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      byte[] byteArray0 = new byte[5];
      byteArray0[0] = (byte) (-35);
      byteArray0[1] = (byte)4;
      byteArray0[2] = (byte)16;
      byteArray0[3] = (byte)1;
      byteArray0[4] = (byte) (-79);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, byteArray0);
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      document0.getAllElements();
      document0.nextElementSiblings();
      Element element0 = document0.head();
      element0.firstElementSibling();
      // Undeclared exception!
      try { 
        element0.child((byte)4);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 4, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tkeygen", "Tkeygen");
      Element element0 = document0.head();
      element0.cssSelector();
      document0.getElementsMatchingText("html > head");
      element0.removeClass("Tkeygen");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Element element0 = new Element("br");
      element0.outerHtml();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.eleent$2", "4ho!0|,sr");
      Element element0 = document0.head();
      element0.cssSelector();
      element0.parents();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "body");
      document0.cssSelector();
      document0.cssSelector();
      document0.getElementsByTag("publicId");
      Element element0 = document0.createElement("body");
      Element element1 = element0.shallowClone();
      element1.doClone(document0);
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      // Undeclared exception!
      try { 
        element0.selectFirst("4_-oLe:dyen;");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '4_-oLe:dyen;': unexpected token at ':dyen;'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MmAY>/KSS]>", "head");
      DataNode dataNode0 = new DataNode(":matches", "head");
      dataNode0.reparentChild(document0);
      DataNode dataNode1 = dataNode0.setWholeData("org.jsoup.parser.Token$CData");
      document0.reparentChild(dataNode1);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$2";
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      document0.elementSiblingIndex();
      document0.reparentChild(document0);
      document0.getElementsMatchingOwnText("org.jsoup.nodes.Element$2");
      // Undeclared exception!
      document0.tagName("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      document0.reparentChild(document0);
      document0.getElementsMatchingOwnText("org.jsoup.nodes.Element$2");
      // Undeclared exception!
      document0.wrap("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Element element0 = new Element("br");
      element0.outerHtml();
      element0.val("br");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Element element0 = new Element(":matches");
      element0.outerHtml();
      Element element1 = element0.val(":matches");
      Document document0 = Parser.parse("<:matches></:matches>", "+(qwHS3-}:ZQ:G");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(true);
      Document document1 = document0.outputSettings(document_OutputSettings3);
      document1.data();
      element1.addClass(":matches");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("%<T?X(Ii6", "ELB");
      TextNode textNode0 = TextNode.createFromEncoded("%<T?X(Ii6", "!Uq4AkV");
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.append("ELB");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      String string0 = "nXp:;";
      Document document0 = Parser.parseBodyFragment("nXp:;", "nXp:;");
      Element element0 = document0.head();
      element0.tagName("nXp:;");
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'nxp|;': unexpected token at ';'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document1.nodeName();
      Element element0 = document0.addClass("textarea");
      Element element1 = document1.val("h<*e[)/zO56JB");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) element1;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document2;
      nodeArray0[4] = (Node) document2;
      nodeArray0[5] = (Node) element0;
      nodeArray0[6] = (Node) document2;
      nodeArray0[7] = (Node) element0;
      nodeArray0[8] = (Node) document2;
      document1.addChildren(nodeArray0);
      document0.val();
      document0.className();
      document0.addClass("h<*e[)/zO56JB");
      element0.getElementsByClass("#document");
      element0.text("textarea");
      element1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      String string0 = "W&nbspB;";
      Element element0 = new Element("W&nbspB;");
      FileSystemHandling.shouldAllThrowIOExceptions();
      element0.getElementById("W&nbspB;");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document.createShell("org.jsoup.nodes.Element$2");
      Element element0 = document0.addClass("org.jsoup.nodes.Element$2");
      element0.className();
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        element0.dataNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nXp:;", "nXp:;");
      document0.addClass("nXp:;");
      Element element0 = document0.addClass(" > ");
      document0.dataNodes();
      Document document1 = new Document(" />");
      document0.appendTo(element0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document0.quirksMode(document_QuirksMode0);
      document2.hasClass(" />");
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.eleent$2");
      document0.classNames();
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("\"Ixg%pSL;Lm96", " />");
      document0.addClass("#^_s");
      Element element0 = document0.addClass("Unexpected characters returned for ");
      MockPrintStream mockPrintStream0 = new MockPrintStream("b");
      PrintStream printStream0 = mockPrintStream0.append((CharSequence) "Unexpected characters returned for ");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.outline(false);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      document0.outerHtmlTail(printStream0, 3105, document_OutputSettings2);
      document0.dataNodes();
      Document document1 = new Document("head");
      document1.appendTo(element0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document0.quirksMode(document_QuirksMode0);
      document2.hasClass(" />");
      document1.absUrl("h]}Nv[");
      document1.appendText("head");
      document1.wholeText();
      document1.tag();
      element0.dataNodes();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.eleent$2", "org.jsoup.nodes.eleent$2");
      document0.reparentChild(document0);
      document0.getElementsMatchingOwnText("org.jsoup.nodes.eleent$2");
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("audio", "audio");
      String string0 = "13[M";
      Element element0 = document0.appendElement("13[M");
      element0.removeClass("returned");
      document0.previousElementSiblings();
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      parser0.settings(parseSettings0);
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = null;
      try {
        pipedReader0 = new PipedReader(pipedWriter0, (-382));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pipe size <= 0
         //
         verifyException("java.io.PipedReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", ":containsOwn(");
      Document document2 = document1.normalise();
      Element element0 = document2.body();
      Element element1 = document2.head();
      element1.cssSelector();
      document2.hasText();
      document0.getElementsByClass("tST,%\"7");
      element0.append(")TE:X}fx.g");
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("\"Ixg%pSL;Lm96", " />");
      document0.hasSameValue(parser0);
      Element element0 = document0.addClass(" />");
      element0.className();
      element0.dataNodes();
      element0.getElementsByClass("\"Ixg%pSL;Lm96");
      document0.toggleClass("java.lang.String@0000000026");
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Eleent$2", "org.jsoup.nodes.Eleent$2");
      document0.appendElement("org.jsoup.nodes.Element$1");
      Element element0 = document0.appendElement("org.jsoup.nodes.Eleent$2");
      document0.ensureChildNodes();
      element0.previousElementSiblings();
      element0.lastElementSibling();
      FileSystemHandling.shouldAllThrowIOExceptions();
      element0.attr("org.jsoup.nodes.Eleent$2", "BaseURI must not be null");
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("STOP", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("STOP", "|");
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.put("|", true);
      Attributes attributes3 = attributes2.clone();
      Element element0 = new Element(tag0, "|", attributes3);
      element0.is("STOP");
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Eleent$2");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document1 = (Document)document0.addClass("Pattern syntax error: ");
      Document document2 = Document.createShell("Pattern syntax error: ");
      String string0 = Node.EmptyString;
      document0.dataNodes();
      document0.getElementsByClass("Pattern syntax error: ");
      document0.siblingIndex = 48;
      document1.doClone(document0);
      document2.hasText();
      document1.val("Pattern syntax error: ");
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Element element0 = new Element("W&nbspB;");
      Document document0 = Parser.parse("W&nbspB;", "W&nbspB;");
      Document document1 = document0.clone();
      document1.reparentChild(element0);
      Element element1 = element0.val("W&nbspB;");
      element1.html((MockFileWriter) null);
      // Undeclared exception!
      try { 
        document0.after((Node) element1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.reparentChild(document0);
      document0.getElementsMatchingOwnText("");
      Document document1 = (Document)document0.text("");
      // Undeclared exception!
      document1.after(">0Fqa");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nXp:;", "nXp:;");
      Element element0 = document0.body();
      element0.cssSelector();
      element0.childNodesCopy();
      document0.hasText();
      document0.val();
      element0.html("nXp:;");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nXp:;", "nXp:;");
      Element element0 = document0.body();
      element0.cssSelector();
      document0.hasText();
      document0.val();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = Document.createShell("org.jsoup.nodes.Element$2");
      document1.hasSameValue(document0);
      Tag tag0 = Tag.valueOf("}%b}Tk!tWghVEdtN+");
      CDataNode cDataNode0 = new CDataNode("nbpBl;");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("head", "e\"$`W@%");
      Attributes attributes2 = attributes1.clone();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "}%b}Tk!tWghVEdtN+", attributes2);
      List<Node> list0 = pseudoTextElement0.ensureChildNodes();
      document0.dataNodes();
      document1.insertChildren(0, (Collection<? extends Node>) list0);
      document0.isBlock();
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("\"Ixg%pSL;Lm96", " />");
      Element element0 = document0.addClass("#^_s");
      document0.val("head");
      Element element1 = document0.addClass("Unexpected characters returned for ");
      document0.dataNodes();
      element0.getElementsByClass("OFu`ui|;");
      Attributes attributes0 = new Attributes();
      Document document1 = new Document("head");
      document1.appendTo(element1);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document0.quirksMode(document_QuirksMode0);
      document2.hasClass(" />");
      Element element2 = document1.appendText("head");
      element2.before("s+");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.eleent$2");
      Document document1 = Parser.parseBodyFragmentRelaxed("footer", "footer");
      Document document2 = new Document("org.jsoup.nodes.eleent$2");
      List<Node> list0 = document1.ensureChildNodes();
      document0.dataNodes();
      document2.insertChildren((-1), (Collection<? extends Node>) list0);
      document0.isBlock();
      FileSystemHandling.shouldAllThrowIOExceptions();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      String string0 = "lnH";
      Document document0 = Document.createShell("lnH");
      Document document1 = document0.normalise();
      document0.setSiblingIndex(55);
      Element element0 = document1.removeClass("lnH");
      Document document2 = (Document)element0.prependText("Split offset must not be greater than current text length");
      // Undeclared exception!
      try { 
        document2.addChildren(520, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      String string0 = "F?$Lvp%";
      Document document0 = Document.createShell("F?$Lvp%");
      FileSystemHandling.shouldAllThrowIOExceptions();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      document0.getElementsByTag("pG");
      document0.getElementsByIndexGreaterThan((-233));
      Element element0 = document0.body();
      Locale locale0 = Locale.JAPAN;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      Element element1 = element0.classNames(set0);
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) element0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) element1;
      nodeArray0[5] = (Node) element0;
      nodeArray0[6] = (Node) element0;
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("org.jsoup.select.Evaluator$IsLastChild", false);
      nodeArray0[7] = (Node) xmlDeclaration0;
      CDataNode cDataNode0 = new CDataNode("2F");
      // Undeclared exception!
      try { 
        cDataNode0.after("org.jsoup.nodes.Eleent$2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Eleent$2");
      Element element0 = document0.appendElement("org.jsoup.nodes.Eleent$2");
      document0.ensureChildNodes();
      Element element1 = document0.attr("org.jsoup.nodes.Eleent$2", "org.jsoup.nodes.Eleent$2");
      document0.dataNodes();
      element1.hasText();
      element1.appendText("u!h8");
      element1.previousElementSibling();
      element0.html("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Eleent$2";
      Document document0 = Document.createShell("org.jsoup.nodes.Eleent$2");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("^umGO~k`i<J", ":jvIAI");
      document0.getElementsByAttributeValue("^umGO~k`i<J", "q_]1#n|~ALYDizC");
      String string0 = "Children collection to be inserted must not be null.";
      Element element0 = document0.text("Children collection to be inserted must not be null.");
      Element element1 = document0.appendTo(element0);
      Evaluator.IndexLessThan evaluator_IndexLessThan0 = new Evaluator.IndexLessThan((-2578));
      // Undeclared exception!
      element1.is((Evaluator) evaluator_IndexLessThan0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("required", "Insert position out of bounds.");
      Document document1 = document0.clone();
      LinkedList<Node> linkedList0 = new LinkedList<Node>();
      document1.childNodes = (List<Node>) linkedList0;
      document0.childNodesCopy();
      document1.ensureChildNodes();
      Element element0 = document0.prependElement("PCH21");
      element0.nodeName();
      // Undeclared exception!
      try { 
        document1.child(8211);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 8211, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("\"Ixg%pSL;Lm96", " />");
      Element element0 = document0.addClass("#^_s");
      document0.val("head");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Parser.parse("#^_s", " />");
      document0.clone();
      Element element1 = element0.toggleClass("#^_s");
      element1.select("muted");
      Pattern pattern0 = Pattern.compile(" />");
      element0.getElementsByAttributeValueMatching("F7v6aBY!", pattern0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.eleent$2", "org.jsoup.nodes.eleent$2");
      Document document1 = document0.clone();
      Document document2 = (Document)document1.removeAttr("org.jsoup.nodes.eleent$2");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document1.quirksMode(document_QuirksMode0);
      Document document4 = (Document)document2.removeAttr("org.jsoup.nodes.eleent$2");
      document1.reparentChild(document1);
      document1.appendChild(document0);
      document2.nextElementSiblings();
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.element$2", 0);
      document0.getElementsMatchingText(pattern0);
      document2.toggleClass("org.jsoup.nodes.eleent$2");
      Document document5 = new Document("org.jsoup.nodes.element$2");
      document5.getElementById("7*e(r#$6SB;3]{U");
      document4.before((Node) document3);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Eleent$2";
      Document document0 = Document.createShell("org.jsoup.nodes.Eleent$2");
      Document document1 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Eleent$2", "org.jsoup.nodes.Eleent$2");
      document1.appendElement("org.jsoup.nodes.Eleent$2");
      List<Node> list0 = document1.ensureChildNodes();
      document0.attr("org.jsoup.nodes.Eleent$2", "org.jsoup.nodes.Eleent$2");
      document1.dataNodes();
      // Undeclared exception!
      try { 
        document1.insertChildren((-1), (Collection<? extends Node>) list0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.eleent$2", "org.jsoup.nodes.eleent$2");
      Document document1 = document0.clone();
      Document document2 = (Document)document1.removeAttr("org.jsoup.nodes.eleent$2");
      document2.removeAttr("org.jsoup.nodes.eleent$2");
      document1.reparentChild(document1);
      Document document3 = (Document)document1.appendChild(document0);
      document2.nextElementSiblings();
      document3.normalise();
      int int0 = (-1125);
      // Undeclared exception!
      document1.html("org.jsoup.nodes.eleent$2");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Eleent$2");
      Document document1 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Eleent$2", "org.jsoup.nodes.Eleent$2");
      Element element0 = document1.appendElement("org.jsoup.nodes.Eleent$2");
      document1.ensureChildNodes();
      element0.previousElementSiblings();
      document0.attr("org.jsoup.nodes.Eleent$2", "org.jsoup.nodes.Eleent$2");
      Element element1 = element0.lastElementSibling();
      document0.cssSelector();
      document1.data();
      element1.addClass("#root");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("\"Ixg%pSL;Lm96", " />");
      Element element0 = document0.addClass("#^_s");
      document0.val("head");
      Element element1 = document0.addClass("Unexpected characters returned for ");
      document0.dataNodes();
      element0.getElementsByClass("OFu`ui|;");
      Attributes attributes0 = new Attributes();
      Document document1 = new Document("head");
      document1.appendTo(element1);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document0.quirksMode(document_QuirksMode0);
      document2.hasClass(" />");
      document1.after((Node) element0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parse("O;", "O;");
      Document document1 = document0.clone();
      StringBuilder stringBuilder0 = new StringBuilder();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(true);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.clone();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.escapeMode(entities_EscapeMode0);
      document1.outerHtmlHead(stringBuilder0, (-1646), document_OutputSettings4);
      document0.outerHtmlHead(stringBuilder0, 2989, document_OutputSettings4);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.eleent$2", "org.jsoup.nodes.eleent$2");
      Document document1 = document0.clone();
      Document document2 = (Document)document1.removeAttr("org.jsoup.nodes.eleent$2");
      Document document3 = (Document)document1.appendChild(document0);
      String string0 = Node.EmptyString;
      document3.prependText("");
      Document document4 = (Document)document3.attr("org.jsoup.nodes.eleent$2", "");
      document4.cssSelector();
      FileSystemHandling.shouldAllThrowIOExceptions();
      document2.clone();
      document0.previousElementSibling();
      // Undeclared exception!
      try { 
        document3.wrap("b{mNid(!Xq.{!X!HA<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.eleent$2", "org.jsoup.nodes.eleent$2");
      Document document1 = document0.clone();
      Document document2 = (Document)document1.removeAttr("org.jsoup.nodes.eleent$2");
      Document document3 = (Document)document1.appendChild(document0);
      Parser.parse("org.jsoup.nodes.eleent$2", "org.jsoup.nodes.eleent$2");
      document1.reparentChild(document3);
      Document document4 = (Document)document1.appendChild(document0);
      document3.nextElementSiblings();
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.element$2", 0);
      document3.getElementsMatchingText(pattern0);
      document2.toggleClass("org.jsoup.nodes.eleent$2");
      FileSystemHandling.shouldAllThrowIOExceptions();
      String string0 = "checked";
      // Undeclared exception!
      document4.is("checked");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      String string0 = "org.jsoup.nodeslement$2";
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodeslement$2", "org.jsoup.nodeslement$2");
      Document document1 = document0.clone();
      Node node0 = document1.removeAttr("org.jsoup.nodeslement$2");
      Element element0 = document1.appendChild(node0);
      Node node1 = document1.removeAttr("rh!BFeZE,PzS|q 4?h");
      document0.reparentChild(document1);
      // Undeclared exception!
      try { 
        element0.appendChild(node1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("nXp:;", "nXp:;");
      Comment comment0 = new Comment("r:&^EwA]$hbPQjbB8Y");
      comment0.asXmlDeclaration();
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Eleent$2");
      Document document1 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Eleent$2", "org.jsoup.nodes.Eleent$2");
      document1.appendElement("org.jsoup.nodes.Eleent$2");
      List<Node> list0 = document1.childNodes;
      document0.attr("org.jsoup.nodes.Eleent$2", "org.jsoup.nodes.Eleent$2");
      Element element0 = document0.body();
      element0.val("org.jsoup.nodes.Eleent$2");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\"Ixg%pSL;Lm96", "\"Ixg%pSL;Lm96");
      document0.hasSameValue("\"Ixg%pSL;Lm96");
      Element element0 = document0.addClass("for");
      Document document1 = Document.createShell("for");
      document1.className();
      document0.dataNodes();
      document1.getElementsByClass("for");
      Document document2 = Parser.parseBodyFragmentRelaxed("", "");
      document2.hasText();
      document1.appendText("\"Ixg%pSL;Lm96");
      String string0 = Node.EmptyString;
      document2.getElementsContainingText("br");
      document0.elementSiblingIndex();
      element0.prependElement("head");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.eleent$2", "org.jsoup.nodes.eleent$2");
      Document document1 = document0.clone();
      Document document2 = (Document)document1.removeAttr("org.jsoup.nodes.eleent$2");
      Document document3 = (Document)document1.appendChild(document0);
      document2.removeAttr("org.jsoup.nodes.eleent$2");
      document1.reparentChild(document3);
      Document document4 = (Document)document1.appendChild(document0);
      document3.nextElementSiblings();
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.element$2", 0);
      document3.getElementsMatchingText(pattern0);
      document2.toggleClass("org.jsoup.nodes.eleent$2");
      document4.addClass("org.jsoup.nodes.element$2");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("BeforeHtml", "BeforeHtml");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.previousElementSiblings();
      document0.val();
      Element element0 = document0.head();
      element0.getElementsContainingOwnText("@\"^Ncco+{]l%dR):");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Attributes attributes0 = new Attributes();
      Element element1 = document0.toggleClass("0r5H_Hf3U5y$Sq");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.className();
      Document document2 = document1.normalise();
      document2.appendTo(element1);
      document2.hasClass("java.lang.string@0000000040 unexpected characters returned  /> ");
      element0.appendText("audio");
      Element element2 = document0.previousElementSibling();
      element2.textNodes();
      document1.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document1.quirksMode(document_QuirksMode0);
      document1.nodeName();
      Element element0 = document0.addClass("textarea");
      Element element1 = document1.val("h<*e[)/zO56JB");
      document0.addClass("#document");
      document0.val();
      document0.className();
      document0.addClass("h<*e[)/zO56JB");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      element0.getElementsByClass("#document");
      element0.text("textarea");
      element1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Eleent$2");
      Document document1 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Eleent$2", "org.jsoup.nodes.Eleent$2");
      document1.hasClass("org.jsoup.nodes.Eleent$2");
      document1.text("org.jsoup.nodes.Eleent$2");
      document1.ensureChildNodes();
      String string0 = Node.EmptyString;
      Element element0 = document1.head();
      element0.attr("org.jsoup.nodes.Eleent$2", false);
      String string1 = Node.EmptyString;
      document0.empty();
      document0.previousElementSibling();
      document1.getAllElements();
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("\"Ixg%pSL;Lm96", " />");
      Element element0 = document0.addClass("#^_s");
      Element element1 = document0.val("head");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Element element2 = document0.addClass("Unexpected characters returned for ");
      document0.val();
      document0.dataNodes();
      element2.getElementsContainingOwnText("head");
      element0.getElementsByClass("E>w^B(");
      Attributes attributes0 = new Attributes();
      Document document1 = new Document("head");
      document1.empty();
      document1.appendTo(element2);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document0.quirksMode(document_QuirksMode0);
      document2.hasClass(" />");
      element2.val((String) null);
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.hasText();
      // Undeclared exception!
      try { 
        element1.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("6k!;RtcL5p}eB\"t8_", "6k!;RtcL5p}eB\"t8_");
      document0.normalise();
      Document document1 = Parser.parseBodyFragment("6k!;RtcL5p}eB\"t8_", "6k!;RtcL5p}eB\"t8_");
      document1.text("6k!;RtcL5p}eB\"t8_");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      Attributes attributes0 = new Attributes();
      document1.toggleClass("6@/cg A'qFF^Dk/");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document1.quirksMode(document_QuirksMode0);
      StringWriter stringWriter0 = new StringWriter(6370);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.charset(charset0);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.clone();
      // Undeclared exception!
      try { 
        document1.outerHtmlHead(stringWriter0, (-3679), document_OutputSettings4);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = new Document("&nbspB;");
      Document document1 = document0.clone();
      Document document2 = (Document)document1.removeAttr("&nbspB;");
      Document document3 = (Document)document1.appendChild(document0);
      String string0 = Node.EmptyString;
      document3.attr("&nbspB;", "");
      String string1 = Node.EmptyString;
      document2.empty();
      document0.previousElementSibling();
      // Undeclared exception!
      try { 
        document0.after((Node) document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(" />", "");
      Document document1 = document0.parser(parser0);
      Element element0 = document1.addClass("5$xOak%*y2g~C:+bTEI");
      document1.val("#^_s");
      Element element1 = document1.addClass("org.jsoup.nodes.Element$2");
      document0.val();
      document1.dataNodes();
      element0.getElementsContainingOwnText("defer");
      document1.getElementsByClass("java.lang.String@0000000213 audio");
      Attributes attributes0 = new Attributes();
      Document document2 = new Document("#");
      document2.empty();
      document0.appendTo(document1);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      document2.quirksMode(document_QuirksMode0);
      document2.hasClass("textarea");
      // Undeclared exception!
      element1.val("java.lang.String@0000000213 audio");
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Document document2 = Parser.parseBodyFragment("#document", "h<*e[)/zO56JB");
      Document document3 = (Document)document0.addClass("#document");
      document0.val();
      document0.className();
      document0.dataNodes();
      document2.getElementsContainingOwnText("}|yiIa6=Dm..\tK2X,o");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document3.getElementsByClass("E>w^B(");
      Tag.valueOf("6@/cg A'qFF^Dk/");
      Attributes attributes0 = new Attributes();
      document3.toggleClass("audio");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document3.quirksMode(document_QuirksMode0);
      document3.className();
      document1.appendTo(document1);
      document0.hasClass("audio");
      document1.appendText("E>w^B(");
      document3.getElementsContainingText("ScriptDataDoubleEscapeEnd");
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse("AqYthka@P?", "AqYthka@P?");
      document0.nextElementSibling();
      String string0 = "resoR#1mnl2.D";
      document0.doSetBaseUri("resoR#1mnl2.D");
      Element element0 = document0.head();
      document0.html();
      Element element1 = element0.text("+rd')ZRlK4}AAwrx(b");
      Element element2 = element1.text("resoR#1mnl2.D");
      element2.children();
      element1.isBlock();
      Pattern.compile("");
      String string1 = null;
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "+rd')ZRlK4}AAwrx(b");
      // Undeclared exception!
      try { 
        stringBuilder0.delete((-1432352094), 4);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1432352094
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, true);
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      document1.ensureChildNodes();
      document0.getElementsByAttributeValueContaining("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      int int0 = 0;
      Attributes attributes0 = new Attributes();
      Document document2 = new Document("org.jsoup.nodes.Element$2");
      Element element0 = document2.appendTo(document1);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      document3.hasClass("org.jsoup.nodes.Element$2");
      String string0 = "&nbsp;";
      Element element1 = document3.appendText("&nbsp;");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) element0;
      nodeArray0[1] = (Node) document2;
      nodeArray0[2] = (Node) document1;
      CDataNode cDataNode0 = new CDataNode("&nbsp;");
      Node node0 = cDataNode0.shallowClone();
      nodeArray0[3] = node0;
      nodeArray0[4] = (Node) document3;
      nodeArray0[5] = (Node) document2;
      // Undeclared exception!
      try { 
        element1.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Document.createShell("G%5m|Dz=]><>F)@1nh~");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("G%5m|Dz=]><>F)@1nh~", "G%5m|Dz=]><>F)@1nh~");
      document1.nodeName();
      Document document2 = (Document)document0.addClass("#document");
      document0.val();
      document0.className();
      document0.getElementsContainingOwnText("}|yiIa6=Dm..\tK2X,o");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document2.getElementsByClass("E>w^B(");
      document2.doSetBaseUri("");
      Tag.valueOf("6@/cg A'qFF^Dk/");
      Attributes attributes0 = new Attributes();
      document2.toggleClass("audio");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document2.quirksMode(document_QuirksMode0);
      document2.className();
      document1.appendTo(document1);
      document0.hasClass("java.lang.String@0000000138 audio");
      document1.appendText("E>w^B(");
      document0.nextElementSiblings();
      // Undeclared exception!
      document1.before("#document");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000191");
      Document document1 = document0.normalise();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      document0.appendElement("C^q`;b2\"x6*k>xYsCN");
      document0.ensureChildNodes();
      document1.getElementsByAttributeValueContaining("C^q`;b2\"x6*k>xYsCN", "\"Ixg%pSL;Lm96");
      Node[] nodeArray0 = new Node[1];
      Document document2 = Parser.parseBodyFragment("C^q`;b2\"x6*k>xYsCN", "C^q`;b2\"x6*k>xYsCN");
      nodeArray0[0] = (Node) document2;
      document0.insertChildren(0, nodeArray0);
      document2.firstElementSibling();
      CDataNode cDataNode0 = new CDataNode("open");
      document2.normalise();
      document0.getElementsMatchingText("C^q`;b2\"x6*k>xYsCN");
      Parser parser0 = Parser.xmlParser();
      parser0.setTrackErrors(0);
      PipedReader pipedReader0 = new PipedReader();
      Parser.parseBodyFragment("6U", "\"Ixg%pSL;Lm96");
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      PipedReader pipedReader1 = null;
      try {
        pipedReader1 = new PipedReader(pipedWriter0);
        fail("Expecting exception: IOException");
      
      } catch(Throwable e) {
         //
         // Already connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      String string0 = "&nbspB;";
      Document document0 = new Document("&nbspB;");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValueContaining("&nbspB;", "&nbspB;");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Node[] nodeArray0 = new Node[0];
      document2.insertChildren(0, nodeArray0);
      // Undeclared exception!
      try { 
        document1.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = new Document("&nbspB;");
      Document document1 = document0.clone();
      Document document2 = (Document)document1.removeAttr("&nbspB;");
      document0.removeAttr("81P=TEcai95}t\"nIk");
      document1.appendChild(document0);
      document1.nextElementSiblings();
      Pattern.compile("&nbspB;", 4160);
      Pattern pattern0 = Pattern.compile("geu91kisr", 4160);
      document1.getElementsMatchingText(pattern0);
      document2.previousElementSibling();
      document0.after("|ILda-7[K.'pf6lC<");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Element element0 = document0.addClass("textarea");
      Document document2 = (Document)document1.val("h<*e[)/zO56JB");
      document0.addClass("#document");
      document0.val();
      document0.className();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      element0.getElementsByClass("#document");
      Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      document0.toggleClass(".");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      document2.className();
      document3.appendTo(element0);
      Document.QuirksMode document_QuirksMode1 = Document.QuirksMode.noQuirks;
      Document document4 = document2.quirksMode(document_QuirksMode1);
      document4.hasClass("#document");
      document1.appendText("java.lang.string@0000000206");
      document2.nextElementSiblings();
      // Undeclared exception!
      try { 
        document3.html((MockPrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Parser.xmlParser();
      Document document0 = Parser.parseBodyFragmentRelaxed("\"Ixg%pSL;Lm96", "\"Ixg%pSL;Lm96");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.getElementsByAttributeValueContaining("\"Ixg%pSL;Lm96", "\"Ixg%pSL;Lm96");
      document0.hasText();
      Element element0 = document0.appendText("\"Ixg%pSL;Lm96");
      Element element1 = element0.empty();
      element0.previousElementSibling();
      // Undeclared exception!
      try { 
        element1.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("\"Ixg%pSL;Lm96", " />");
      Document document1 = document0.parser(parser0);
      Element element0 = document1.addClass("#^_s");
      document0.val("head");
      document1.previousSibling();
      Element element1 = document1.addClass("Unexpected characters returned for ");
      document1.val();
      document1.dataNodes();
      element1.getElementsContainingOwnText("head");
      element0.getElementsByClass("E>w^B(");
      Attributes attributes0 = new Attributes();
      Document document2 = new Document("head");
      Element element2 = document2.appendTo(element1);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document3 = document1.quirksMode(document_QuirksMode0);
      document3.hasClass(" />");
      element2.appendText(" />");
      Document.createShell("&nbsp;");
      String string0 = Node.EmptyString;
      FileSystemHandling.shouldAllThrowIOExceptions();
      document3.clone();
      document0.nextElementSiblings();
      document1.attr("\"Ixg%pSL;Lm96", "s_n\"/ss\"V ");
      document3.getElementsByAttributeValueEnding("s_n\"/ss\"V ", "$T:i{di3");
      Element.preserveWhitespace(element2);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Parser.htmlParser();
      Element element0 = new Element("title");
      TextNode.createFromEncoded("org.jsoup.nodes.Element$2", "br");
      Document document0 = new Document("br");
      element0.hasSameValue("org.jsoup.nodes.Element$2");
      String string0 = "k=)DQo*S[";
      document0.absUrl("k=)DQo*S[");
      element0.attr("?V", "title");
      document0.cssSelector();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document1 = new Document("k=)DQo*S[");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      // Undeclared exception!
      try { 
        document_OutputSettings1.charset("");
        fail("Expecting exception: IllegalCharsetNameException");
      
      } catch(IllegalCharsetNameException e) {
         //
         // 
         //
         verifyException("java.nio.charset.Charset", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = new Document("&nbspB;");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document1 = document0.clone();
      Document document2 = (Document)document1.removeAttr("&nbspB;");
      Document document3 = (Document)document1.appendChild(document0);
      document0.absUrl("B&P927+=[4Z $T8u)");
      document3.attr("&nbspB;", "");
      document2.cssSelector();
      document2.empty();
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Parser.xmlParser();
      Document document0 = Parser.parseBodyFragmentRelaxed("\"Ixg%pSL;Lm96", "\"Ixg%pSL;Lm96");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Parser.parse("audio", "audio");
      Element element0 = document0.append("audio");
      document0.nextElementSiblings();
      document0.toggleClass("~");
      element0.tagName();
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = Parser.parseBodyFragmentRelaxed("\"Ixg%pSL;Lm96", "\"Ixg%pSL;Lm96");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.getElementsByAttributeValueContaining("\"Ixg%pSL;Lm96", "audio");
      document0.hasText();
      Element element0 = document0.appendText("\"Ixg%pSL;Lm96");
      element0.getElementsByTag("\"Ixg%pSL;Lm96");
      document0.data();
      Pattern pattern0 = Pattern.compile("X|,@ ]");
      element0.getElementsMatchingText(pattern0);
      Document document1 = document0.parser(parser0);
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      document0.getElementsByAttributeValueContaining("(PD*?7*5l:.", "X|,@ ]");
      document1.previousElementSibling();
      document0.is("wC");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Element element0 = new Element("&nbspB;");
      element0.text();
      element0.removeAttr("h}dden");
      element0.val("qt^pwzaw{8`");
      Document document0 = Parser.parseBodyFragment("", "");
      Document document1 = (Document)document0.doClone(element0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      int int0 = 3300;
      Pattern.compile("&nbspB;");
      FileSystemHandling.shouldAllThrowIOExceptions();
      document1.clone();
      document1.append("qt^pwzaw{8`");
      document1.nextElementSiblings();
      // Undeclared exception!
      try { 
        document1.outerHtmlTail((Appendable) null, 3300, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Document.createShell("G%5m|Dz=]><>F)@1nh~");
      String string0 = "java.lang.string@0000000191";
      Document document1 = Parser.parseBodyFragmentRelaxed("G%5m|Dz=]><>F)@1nh~", "java.lang.string@0000000191");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.getElementsByAttributeValueContaining("(", "G%5m|Dz=]><>F)@1nh~");
      document1.hasText();
      document0.appendText("\"Ixg%pSL;Lm96");
      document0.getElementsByTag("\"Ixg%pSL;Lm96");
      // Undeclared exception!
      try { 
        document1.selectFirst("G%5m|Dz=]><>F)@1nh~");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'G%5m|Dz=]><>F)@1nh~': unexpected token at '%5m|Dz=]><>F)@1nh~'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Element element0 = document0.addClass("textarea");
      Element element1 = document1.val("h<*e[)/zO56JB");
      Element element2 = document0.addClass("#document");
      document0.val();
      document0.className();
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      element0.getElementsByClass("#document");
      Tag.valueOf("class");
      Attributes attributes0 = new Attributes();
      Element element3 = document0.toggleClass("t");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document2.className();
      element0.appendTo(document0);
      element2.hasClass("");
      element3.appendText("lBIl<6hsjd");
      element1.getElementsByIndexGreaterThan(12);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("6k!;RtcL5p}eB\"t8_", "6k!;RtcL5p}eB\"t8_");
      document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document document1 = Parser.parseBodyFragment("6k!;RtcL5p}eB\"t8_", "6k!;RtcL5p}eB\"t8_");
      document1.text("6k!;RtcL5p}eB\"t8_");
      Node node0 = document1.removeAttr("br");
      document0.appendChild(node0);
      document0.hasSameValue("6k!;RtcL5p}eB\"t8_");
      document1.nextElementSiblings();
      document1.getElementsByTag("AfterBody");
      Pattern.compile("AfterBody", 18);
      Pattern pattern0 = Pattern.compile("java.lang.string@0000000191", (-3474));
      document0.getElementsMatchingText(pattern0);
      document1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Parser.xmlParser();
      Document document0 = Parser.parseBodyFragmentRelaxed("\"Ixg%pSL;Lm96", "\"Ixg%pSL;Lm96");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.getElementsByAttributeValueContaining("\"Ixg%pSL;Lm96", "audio");
      Document document1 = document0.normalise();
      document0.hasText();
      Document document2 = (Document)document0.attr("gm~4jVowLb'J4&\"t<!", "\"Ixg%pSL;Lm96");
      document0.getElementsByAttribute("gm~4jVowLb'J4&\"t<!");
      document2.cssSelector();
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document3 = (Document)document1.empty();
      document3.nextSibling();
      document1.getElementsByIndexGreaterThan(174);
      document2.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Element element0 = new Element("&nbspB;");
      element0.text();
      element0.getElementsMatchingOwnText("&nbspB;");
      element0.val("qt^pwzaw{8`");
      Document document0 = Parser.parseBodyFragment("", "");
      Document document1 = (Document)document0.doClone(element0);
      Pattern.compile("");
      FileSystemHandling.shouldAllThrowIOExceptions();
      document0.clone();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("p(i4W,=C}_x<lr7^", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(".B@gyiLLo", "title");
      FormElement formElement0 = new FormElement(tag0, "&OZa\"", attributes1);
      formElement0.appendText("qt^pwzaw{8`");
      document1.getElementsByIndexGreaterThan(68);
      document1.wrap("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Element element0 = new Element("&nbspB;");
      Document document0 = Document.createShell("qD+B5RC4");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Parser parser0 = Parser.xmlParser();
      Document document2 = document1.parser(parser0);
      Document document3 = document2.clone();
      document0.removeAttr("&nbspB;");
      Element element1 = document3.appendChild(document2);
      document1.hasSameValue(element1);
      document1.absUrl("qD+B5RC4");
      document2.attr("", "br");
      document1.cssSelector();
      document1.getElementsByAttribute("qD+B5RC4");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Element element2 = document2.empty();
      document1.getElementsByIndexGreaterThan(4321);
      document0.tagName("s+");
      element2.addClass("");
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Element element0 = new Element("&nbspB;");
      element0.text();
      element0.removeAttr("h}dden");
      element0.val("qt^pwzaw{8`");
      Document document0 = Parser.parseBodyFragment("", "");
      Element element1 = document0.doClone(element0);
      Document document1 = (Document)document0.addClass("Tag name must not be empty.");
      element1.previousElementSiblings();
      Document.createShell("&nbspB;");
      String string0 = Node.EmptyString;
      FileSystemHandling.shouldAllThrowIOExceptions();
      document1.clone();
      document1.nextElementSiblings();
      // Undeclared exception!
      try { 
        document1.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.clone();
      document1.removeAttr("org.jsoup.nodes.Element$2");
      Element element0 = document1.appendChild(document0);
      element0.hasSameValue(document0);
      document0.absUrl("org.jsoup.nodes.Element$2");
      Element element1 = document0.attr("", "");
      document0.cssSelector();
      FileSystemHandling.shouldAllThrowIOExceptions();
      element1.empty();
      document0.getElementsByIndexGreaterThan(60);
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Document document2 = Parser.parseBodyFragment("#document", "h<*e[)/zO56JB");
      Element element0 = document0.addClass("#document");
      document0.val();
      document0.className();
      document0.dataNodes();
      document2.getElementsContainingOwnText("}|yiIa6=Dm..\tK2X,o");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      element0.getElementsByClass("E>w^B(");
      Tag.valueOf("6@/cg A'qFF^Dk/");
      Attributes attributes0 = new Attributes();
      element0.classNames();
      element0.toggleClass("audio");
      String string0 = Node.EmptyString;
      FileSystemHandling.shouldAllThrowIOExceptions();
      document1.clone();
      document1.nextElementSiblings();
      // Undeclared exception!
      try { 
        document0.child((-1436010313));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Parser.xmlParser();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document document0 = Parser.parseBodyFragment("6k!;RtcL5p}eB\"t8_", "6k!;RtcL5p}eB\"t8_");
      document0.text("6k!;RtcL5p}eB\"t8_");
      Document document1 = (Document)document0.removeAttr("br");
      document0.nextElementSiblings();
      String string0 = "org.jsoup.nodes.Element$1";
      Pattern.compile("org.jsoup.nodes.Element$1");
      Parser.xmlParser();
      // Undeclared exception!
      try { 
        document1.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Document.createShell("G%5m|Dz=]><>F)@1nh~");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("G%5m|Dz=]><>F)@1nh~", "G%5m|Dz=]><>F)@1nh~");
      document1.nodeName();
      Document document2 = Parser.parseBodyFragment("#document", "G%5m|Dz=]><>F)@1nh~");
      Document document3 = (Document)document0.addClass("#document");
      document0.val();
      document0.className();
      document2.getElementsContainingOwnText("}|yiIa6=Dm..\tK2X,o");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document3.getElementsByClass("E>w^B(");
      Tag.valueOf("6@/cg A'qFF^Dk/");
      Attributes attributes0 = new Attributes();
      document3.toggleClass("audio");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document3.quirksMode(document_QuirksMode0);
      document3.className();
      document1.appendTo(document1);
      document0.hasClass("java.lang.String@0000000213 audio");
      document1.appendText("E>w^B(");
      document2.getElementsByIndexGreaterThan(0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = Parser.parse("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      document0.ensureChildNodes();
      Document document2 = document1.clone();
      document2.removeAttr("org.jsoup.nodes.Element$2");
      Element element0 = document2.appendChild(document1);
      element0.hasSameValue(document1);
      Document.createShell("");
      String string0 = Node.EmptyString;
      Parser.xmlParser();
      document1.getElementsMatchingText("");
      document2.appendText("E,&;.,mOhmpC*?l+o9d");
      document0.siblingElements();
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      Element element0 = document1.appendElement("=X^,rtBoH5I");
      document0.ensureChildNodes();
      document1.attr("\"|'fSpMp", "\"|'fSpMp");
      element0.lastElementSibling();
      document1.cssSelector();
      document1.previousElementSiblings();
      Parser parser0 = Parser.xmlParser();
      Document document2 = parser0.parseInput("\"|'fSpMp", "#root");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      document3.getElementsByAttributeValueContaining("RnX", "\"|'fSpMp");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document2;
      nodeArray0[1] = (Node) document2;
      document3.insertChildren(0, nodeArray0);
      Pattern.compile("#root");
      Parser.xmlParser();
      document1.getElementsMatchingText("geu91kisr");
      document3.appendText("=X^,rtBoH5I");
      document2.siblingElements();
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document.createShell("org.jsoup.nodes.Element$2");
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      document1.nodeName();
      Element element0 = document0.addClass("html");
      document0.val("textarea");
      document0.addClass("z$d.t{:?U{RJk,EMyjR");
      document1.val();
      document1.className();
      document1.dataNodes();
      document1.getElementsContainingOwnText("textarea");
      element0.getElementsByClass("html");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("html", true);
      document0.className();
      Element element1 = null;
      try {
        element1 = new Element((Tag) null, "(|(", attributes1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Element element0 = new Element("&nbspB;");
      element0.text();
      element0.removeAttr("h}dden");
      element0.val("qt^pwzaw{8`");
      Document document0 = Parser.parseBodyFragment("", "");
      Element element1 = document0.doClone(element0);
      Element element2 = document0.addClass("Tag name must not be empty.");
      element1.previousElementSiblings();
      Document.createShell("&nbspB;");
      Parser.xmlParser();
      element2.getElementsMatchingText("ip%0.NYh.fj8YbPpY");
      document0.appendText("");
      element2.siblingElements();
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.clone();
      Document document2 = (Document)document1.removeAttr("org.jsoup.nodes.Element$2");
      Document document3 = (Document)document1.appendChild(document0);
      document3.hasSameValue(document0);
      document0.absUrl("org.jsoup.nodes.Element$2");
      document0.attr("", "f2n]8Z0");
      document1.getElementsContainingOwnText("f2n]8Z0");
      document1.getElementsByClass(":matches");
      Attributes attributes0 = new Attributes();
      document1.getAllElements();
      attributes0.put("&nbsp;", false);
      attributes0.hasKeyIgnoreCase("~D>x;1w");
      document2.className();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "f2n]8Z0", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Document document2 = Parser.parseBodyFragment("#document", "h<*e[)/zO56JB");
      Document document3 = (Document)document0.addClass("#document");
      document0.val();
      document0.className();
      document0.dataNodes();
      document2.getElementsContainingOwnText("}|yiIa6=Dm..\tK2X,o");
      FileSystemHandling.shouldThrowIOException((EvoSuiteFile) null);
      document3.getElementsByClass("E>w^B(");
      Tag.valueOf("6@/cg A'qFF^Dk/");
      Attributes attributes0 = new Attributes();
      document3.toggleClass("audio");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document3.quirksMode(document_QuirksMode0);
      document3.className();
      document1.appendTo(document1);
      document0.hasClass("klx:pl fGDNjFt:{N");
      document1.appendText("E>w^B(");
      document2.getElementsByIndexGreaterThan(0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Element element0 = new Element("&nbspB;");
      element0.text();
      element0.getElementsMatchingOwnText("&nbspB;");
      element0.removeAttr("h}dden");
      element0.val("qt^pwzaw{8`");
      Document document0 = Parser.parseBodyFragment("", "");
      Document document1 = (Document)document0.doClone(element0);
      document1.wholeText();
      Document document2 = (Document)document0.addClass("Tag name must not be empty.");
      document1.previousElementSiblings();
      Pattern.compile("uXD,Z, 8C/7%}&<+#m&");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document3 = document1.clone();
      document1.append("");
      document3.nextElementSiblings();
      document1.nextElementSiblings();
      document2.toggleClass("h}dden");
      document2.getElementsMatchingText("org.jsoup.nodes.Element$1");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueContaining("&nbspB;", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = Parser.parse("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      document0.ensureChildNodes();
      document0.removeAttr("org.jsoup.nodes.Element$2");
      Element element0 = document0.appendChild(document1);
      element0.hasSameValue(document1);
      document1.addClass("org.jsoup.nodes.XmlDeclaration");
      element0.previousElementSiblings();
      // Undeclared exception!
      try { 
        Pattern.compile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Element element0 = document1.appendElement("org.jsoup.nodes.Element$2");
      document0.hasClass("org.jsoup.nodes.Element$2");
      element0.getElementsByAttributeValueEnding("V>Z$?JdJkv9/", "org.jsoup.nodes.Element$2");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Document document2 = new Document("org.jsoup.nodes.Element$2");
      Document document3 = document1.normalise();
      document0.hasText();
      document3.getElementsByTag("org.jsoup.nodes.Element$NodeList");
      document0.data();
      element0.getElementsByClass("geu91kisr");
      document2.getElementsByIndexLessThan(8230);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Document document2 = Parser.parseBodyFragment("#document", "h<*e[)/zO56JB");
      Document document3 = (Document)document0.addClass("#document");
      document0.val();
      document0.className();
      document0.dataNodes();
      document2.getElementsContainingOwnText("}|yiIa6=Dm..\tK2X,o");
      document3.getElementsByClass("E>w^B(");
      Tag.valueOf("/63NAOB-1U}C>\"X");
      Attributes attributes0 = new Attributes();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document4 = document3.quirksMode(document_QuirksMode0);
      document3.className();
      document1.appendTo(document1);
      document0.hasClass("klx:pl fGDNjFt:{N");
      document1.appendText("E>w^B(");
      document2.getElementsByIndexGreaterThan(0);
      document4.attributes();
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Document document2 = Parser.parseBodyFragment("#document", "h<*e[)/zO56JB");
      Document document3 = (Document)document0.addClass("#document");
      document0.val();
      document0.className();
      document0.dataNodes();
      document2.getElementsContainingOwnText("}|yiIa6=Dm..\tK2X,o");
      document3.getElementsByClass("E>w^B(");
      Tag.valueOf("/63NAOB-1U}C>\"X");
      Attributes attributes0 = new Attributes();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document3.quirksMode(document_QuirksMode0);
      document3.className();
      document1.appendTo(document1);
      document0.hasClass("klx:pl fGDNjFt:{N");
      document1.appendText("E>w^B(");
      Document document4 = (Document)document0.appendText("o2%");
      document1.siblingElements();
      document1.attr("IvNvJ0j", false);
      document4.shallowClone();
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parse("1.0", "1.0");
      Element element0 = document0.body();
      element0.clearAttributes();
      element0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(124);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.outline(false);
      // Undeclared exception!
      try { 
        document0.indent((Appendable) null, 3, document_OutputSettings2);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "HIB!/.AJ_v}]");
      Element element0 = new Element("?V&I[");
      element0.baseUri();
      element0.dataNodes();
      element0.attr("R3_3%BS5jegF]", true);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("\"Ixg%pSL;Lm96", "audio");
      Document document1 = new Document("audio");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      String string0 = "org.jsoup.nodes.Element$1";
      document1.getElementsByAttributeValueContaining("\"Ixg%pSL;Lm96", "audio");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document1;
      Document document2 = document0.normalise();
      nodeArray0[2] = (Node) document2;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document2;
      // Undeclared exception!
      try { 
        document1.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Element element0 = new Element("h<*e[)/zO56JB");
      element0.getElementsMatchingOwnText("s2GMj8CzHWFQ");
      Document document0 = new Document("|.~COVc+^0C");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.childNodesAsArray();
      document1.attr("&nbspB;", false);
      Attributes attributes0 = new Attributes();
      document1.quirksMode(document_QuirksMode0);
      document1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("\"Ixg%pSL;Lm96", "audio");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.removeAttr("8tk5ll9ib&00z`");
      Document document2 = new Document("br");
      document2.appendChild(document0);
      document2.hasSameValue("br");
      document0.nextElementSiblings();
      document0.firstElementSibling();
      CDataNode cDataNode0 = new CDataNode("s+");
      Document document3 = new Document("#root");
      Document document4 = document3.normalise();
      document2.getElementsMatchingText("br");
      document4.appendText("br");
      document1.siblingElements();
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Document document1 = Document.createShell("org.jsoup.nodes.Element$2");
      Document document2 = document1.normalise();
      Element element0 = document2.appendElement("org.jsoup.nodes.Element$2");
      document2.ensureChildNodes();
      Element element1 = document0.attr("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      element0.lastElementSibling();
      document2.cssSelector();
      Elements elements0 = document0.previousElementSiblings();
      Pattern.compile("org.jsoup.nodes.Element$1");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$1");
      document0.clone();
      document1.nextElementSiblings();
      element1.insertChildren((-1), (Collection<? extends Node>) elements0);
      document2.getElementsByAttributeValueStarting("java.lang.string@0000000191", "Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      document0.addClass("textarea");
      Element element0 = document1.val("h<*e[)/zO56JB");
      Element element1 = document0.addClass("#document");
      document0.val();
      document0.className();
      document0.dataNodes();
      element0.getElementsContainingOwnText("}|yiIa6=Dm..\tK2X,o");
      element1.getElementsByClass("E>w^B(");
      Attributes attributes0 = new Attributes();
      boolean boolean0 = true;
      attributes0.put("", true);
      element0.className();
      Element element2 = null;
      try {
        element2 = new Element((Tag) null, "(|(", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("\"Ixg%pSL;Lm96", "audio");
      Document document1 = Parser.parse("audio", "audio");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document1.getElementsByAttributeValueContaining("\"Ixg%pSL;Lm96", "audio");
      Document document2 = document1.normalise();
      document0.hasText();
      document2.appendText("\"Ixg%pSL;Lm96");
      document2.getElementsByTag("\"Ixg%pSL;Lm96");
      document1.data();
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Element element0 = new Element("&nbspB;");
      element0.text();
      element0.getElementsMatchingOwnText("&nbspB;");
      element0.removeAttr("hidden");
      element0.val("qt^pwzaw{8`");
      Document document0 = Parser.parseBodyFragment("", "");
      Document document1 = (Document)document0.doClone(element0);
      document1.getElementsByClass("A\u0003{");
      Tag.valueOf(">G{&5=Ml");
      Attributes attributes0 = new Attributes();
      attributes0.put("xhtml", false);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document2.className();
      // Undeclared exception!
      try { 
        document2.appendTo(document1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = Parser.parse("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      document0.ensureChildNodes();
      Document document2 = document1.clone();
      document2.html();
      document2.removeAttr("org.jsoup.nodes.Element$2");
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Element element0 = document2.appendChild(document1);
      element0.hasSameValue(document1);
      Document document3 = Document.createShell("");
      String string0 = Node.EmptyString;
      FileSystemHandling.shouldAllThrowIOExceptions();
      Parser.parse("org.jsoup.nodes.Element$2", "");
      document3.clone();
      document0.nextElementSiblings();
      element0.className();
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Element element0 = document1.val("h<*e[)/zO56JB");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      Document document2 = new Document("textarea");
      Document document3 = document0.normalise();
      element0.hasText();
      document1.appendText(" ");
      document0.parents();
      element0.getElementsByTag("aG$D\"5-i");
      document3.data();
      element0.getElementsByClass("9fR4K");
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Element element0 = new Element("h<*e[)/zO56JB");
      element0.getElementsMatchingOwnText("s2GMj8CzHWFQ");
      Document document0 = new Document("C");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Attributes attributes0 = new Attributes();
      Document.QuirksMode document_QuirksMode1 = Document.QuirksMode.quirks;
      Document document2 = document0.quirksMode(document_QuirksMode1);
      document2.attributes();
      Pattern.compile("#", 1450);
      document1.nextElementSiblings();
      document2.previousElementSibling();
      document2.childNodeSize();
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      String string0 = "Children collection to be inserted must not be null.";
      Document document0 = Parser.parseBodyFragment("Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.clone();
      Element element0 = document2.body();
      Element element1 = document2.val("Children collection to be inserted must not be null.");
      element1.hasSameValue(document0);
      document1.className();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, true, false);
      element0.previousSibling();
      Element element2 = document2.prependElement("%0*C?TS`&iVz0Eui");
      document0.previousElementSiblings();
      int int0 = 60;
      element0.getElementsByIndexEquals(60);
      element2.lastElementSibling();
      String string1 = "body";
      MockFile mockFile0 = new MockFile("", "body");
      MockPrintStream mockPrintStream0 = null;
      try {
        mockPrintStream0 = new MockPrintStream(mockFile0, "");
        fail("Expecting exception: UnsupportedEncodingException");
      
      } catch(Throwable e) {
         //
         // 
         //
         verifyException("java.io.PrintStream", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.getElementsByAttributeValueNot("br", "br");
      char[] charArray0 = new char[4];
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, true);
      charArray0[0] = '~';
      charArray0[1] = '\\';
      charArray0[2] = 'o';
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      charArray0[3] = 'a';
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.createShell("!*8Dw:6");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.charset((Charset) null);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.prettyPrint(true);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 881, document_OutputSettings3);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      Document document2 = document0.normalise();
      Document document3 = document0.clone();
      document3.text("'");
      Node node0 = document1.removeAttr(".");
      Element element0 = document3.appendChild(node0);
      element0.hasSameValue("'");
      document1.firstElementSibling();
      Element.preserveWhitespace(node0);
      document1.after((Node) document0);
      document2.text();
      document1.id();
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.clone();
      document1.removeAttr("org.jsoup.nodes.Element$2");
      Element element0 = document1.appendChild(document0);
      element0.hasSameValue(document0);
      document0.absUrl("org.jsoup.nodes.Element$2");
      Element element1 = document0.attr("", "f2n]8Z0");
      document0.cssSelector();
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("f2n]8Z0", "f2n]8Z0");
      Attribute attribute0 = Attribute.createFromEncoded("x8LxE5`_~", "");
      Attributes attributes2 = attributes1.put(attribute0);
      attributes2.put("f2n]8Z0", false);
      document0.firstElementSibling();
      CDataNode cDataNode0 = new CDataNode("UNcAXQ6'k'c:sECZ{");
      document1.normalise();
      element1.text();
      // Undeclared exception!
      try { 
        element0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("\"Ixg%pSL;Lm96", "audio");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      document1.getElementsByAttributeValueContaining("\"Ixg%pSL;Lm96", "audio");
      Node[] nodeArray0 = new Node[5];
      document1.title("&nbspB;");
      nodeArray0[0] = (Node) document1;
      document1.nextSibling();
      document1.getElementsContainingOwnText("#root");
      document0.getElementsByClass("audio");
      Tag.valueOf("#root");
      Attributes attributes0 = new Attributes();
      document1.className();
      Element element0 = document0.appendTo(document1);
      document0.hasClass("org.jsoup.nodes.Element$1");
      element0.appendText("/63NAOB-1U}C>\"X");
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$2";
      Element element0 = new Element("org.jsoup.nodes.Element$2");
      element0.text();
      String string1 = null;
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("6k!;RtcL5p}eB\"t8_", "id");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document document2 = Parser.parseBodyFragment("id", "id");
      document2.text("6k!;RtcL5p}eB\"t8_");
      Node node0 = document2.removeAttr("br");
      document0.appendChild(node0);
      document0.hasSameValue("6k!;RtcL5p}eB\"t8_");
      document2.nextElementSiblings();
      document2.firstElementSibling();
      document1.setSiblingIndex((-1130));
      CDataNode cDataNode0 = new CDataNode((String) null);
      Document document3 = document1.normalise();
      document3.getElementsMatchingText("br");
      document1.appendText("id");
      document1.getElementsByIndexGreaterThan(18);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = Parser.parse("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      document0.ensureChildNodes();
      Document document2 = document1.clone();
      Document document3 = (Document)document2.removeAttr("org.jsoup.nodes.Element$2");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document4 = (Document)document2.appendChild(document1);
      document4.hasSameValue(document1);
      document1.absUrl("org.jsoup.nodes.Element$2");
      Tag.valueOf("org.jsoup.nodes.Element$2");
      Attributes attributes0 = new Attributes();
      attributes0.put("xml", false);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document1.quirksMode(document_QuirksMode0);
      document1.className();
      Document document5 = (Document)document1.appendTo(document4);
      document5.after("");
      document4.prepend("K'7N>Voj%W4KcT{");
      Pattern.compile("", 385);
      Pattern pattern0 = Pattern.compile("/63NAOB-1U}C>\"X", 385);
      document5.getElementsMatchingText(pattern0);
      StringBuilder stringBuilder0 = new StringBuilder();
      String string0 = "&nbsp;";
      document3.getElementsByClass(string0);
      document2.baseUri();
      document4.hasText();
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, false, true);
      Document document2 = new Document("h<*e[)/zO56JB");
      document1.normalise();
      document2.hasText();
      Document document3 = new Document("ZkXB;6r<by'");
      document3.appendText("EuaG~-T)NhC&V%g!O`0");
      Document document4 = new Document("EuaG~-T)NhC&V%g!O`0");
      document4.getElementsByTag("[l9^{-zvSn");
      Tag tag0 = Tag.valueOf("ZkXB;6r<by'");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element$NodeList");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("[l9^{-zvSn", false);
      FormElement formElement0 = new FormElement(tag0, "ZkXB;6r<by'", attributes1);
      FormElement formElement1 = formElement0.addElement(document4);
      formElement1.data();
      document1.getElementsByClass("acronym");
      document2.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      Document document0 = new Document("body");
      Document document1 = document0.normalise();
      document1.hasText();
      Element element0 = document1.appendText("geu91kisr");
      element0.getElementsByTag("acronym");
      document0.data();
      element0.getElementsByClass("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("6k!;RtcL5p}eB\"t8_", "id");
      Document document1 = document0.normalise();
      Charset charset0 = Charset.defaultCharset();
      document1.charset(charset0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document document2 = Parser.parseBodyFragment("id", "id");
      document2.text("6k!;RtcL5p}eB\"t8_");
      Document document3 = (Document)document2.removeAttr("br");
      document0.appendChild(document3);
      document0.hasSameValue("6k!;RtcL5p}eB\"t8_");
      document2.nextElementSiblings();
      document2.firstElementSibling();
      CDataNode cDataNode0 = new CDataNode((String) null);
      Document document4 = document1.normalise();
      document4.getElementsMatchingText("br");
      document3.appendText("I,U#R;=1n`C]*^/");
      document0.siblingElements();
      document1.getElementsMatchingText("abs:");
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Element element0 = new Element("&nbspB;");
      element0.text();
      element0.getElementsMatchingOwnText("&nbspB;");
      element0.removeAttr("hidden");
      element0.val("qt^pwzaw{8`");
      Document document0 = Parser.parseBodyFragment("", "");
      Document document1 = (Document)document0.doClone(element0);
      document0.addClass("Tag name must not be empty.");
      document1.previousElementSiblings();
      Pattern.compile("uXD,Z, 8C/7%}&<+#m&");
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document2 = document1.clone();
      document1.append("");
      Elements elements0 = document2.nextElementSiblings();
      Document document3 = Document.createShell("s+");
      // Undeclared exception!
      try { 
        document3.insertChildren((-2130), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.clone();
      Document document2 = (Document)document1.removeAttr("org.jsoup.nodes.Element$2");
      document2.hasSameValue(document0);
      Document document3 = (Document)document0.val("org.jsoup.nodes.Element$2");
      Document document4 = (Document)document0.addClass("org.jsoup.nodes.Element$2");
      Document document5 = Document.createShell("body");
      document5.val();
      document4.className();
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("2|/Yn", "java.lang.String@0000000025", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      attributes1.put("body", false);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document6 = document0.quirksMode(document_QuirksMode0);
      document3.className();
      Parser parser0 = Parser.htmlParser();
      Document document7 = document4.parser(parser0);
      Document document8 = (Document)document2.appendTo(document7);
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element$2", 8218);
      document1.getElementsMatchingText(pattern0);
      StringBuilder stringBuilder0 = new StringBuilder();
      document6.getElementsByClass("(([+-])?(d+)?)n(s*([+-])?s*d+)?");
      document8.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Document document2 = document0.clone();
      document1.removeAttr("org.jsoup.nodes.Element$2");
      Document document3 = (Document)document0.appendChild(document1);
      StringWriter stringWriter0 = new StringWriter(3440);
      BufferedWriter bufferedWriter0 = new BufferedWriter(stringWriter0);
      document3.hasSameValue(bufferedWriter0);
      String string0 = "u=F2e";
      document2.absUrl("u=F2e");
      String string1 = "f2n]8Z0";
      // Undeclared exception!
      document3.attr("", "TM-");
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Document document2 = Parser.parseBodyFragment("#document", "h<*e[)/zO56JB");
      Element element0 = document2.val("h<*e[)/zO56JB");
      Element element1 = document0.addClass("#document");
      document0.val();
      document0.className();
      document0.dataNodes();
      element0.getElementsContainingOwnText("}|yiIa6=Dm..\tK2X,o");
      String string0 = "E>w^B(";
      element1.getElementsByClass("E>w^B(");
      String string1 = "/63NAOB-1U}C>\"X\\";
      document1.getElementsByAttribute("j");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Document document3 = document1.normalise();
      document1.nextElementSiblings();
      document1.doSetBaseUri("/63NAOB-1U}C>\"X");
      element0.id();
      String string2 = "body";
      Element element2 = document3.appendElement("body");
      // Undeclared exception!
      try { 
        element2.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      document2.removeAttr("org.jsoup.nodes.Element$2");
      Element element0 = document2.appendChild(document1);
      element0.hasSameValue(document1);
      document1.absUrl("org.jsoup.nodes.Element$2");
      Node node0 = document1.removeAttr("IIby/v]kQ[:VBU89S");
      Element element1 = document0.body();
      element1.appendChild(node0);
      String string0 = "l{bwp,A";
      DocumentType documentType0 = new DocumentType("", "br", "/M&cS4O2JzNZiSOn", "l{bwp,A");
      element0.hasSameValue(documentType0);
      Parser parser0 = Parser.htmlParser();
      // Undeclared exception!
      try { 
        parser0.parseInput((String) null, "Dd");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.clone();
      Node node0 = document1.removeAttr("org.jsoup.nodes.Element$2");
      node0.hasSameValue(document0);
      Document document2 = (Document)document0.val("org.jsoup.nodes.Element$2");
      document0.addClass("org.jsoup.nodes.Element$2");
      document1.val("2{)M7,oO");
      Parser.parseBodyFragment("2{)M7,oO", "qt^pwzaw{8`");
      Document document3 = Document.createShell("org.jsoup.nodes.Element$2");
      document3.doClone(node0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(68);
      Pattern.compile(":only-child");
      FileSystemHandling.shouldAllThrowIOExceptions();
      document2.clone();
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors(2147483645);
      Document document4 = parser1.parseInput("2{)M7,oO", "body");
      document4.ownText();
      // Undeclared exception!
      try { 
        document4.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Document document2 = Parser.parseBodyFragment("#document", "h<*e[)/zO56JB");
      Element element0 = document2.val("h<*e[)/zO56JB");
      document0.addClass("#document");
      document0.val();
      document0.className();
      Element element1 = element0.prepend("#document");
      document1.appendText("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Document document3 = Parser.parseBodyFragment("&nbspB;", "TagOpen");
      Set<String> set0 = document2.classNames();
      document3.classNames(set0);
      document3.getElementsByAttributeValueMatching("</", "org.jsoup.nodes.Element$1");
      Pattern pattern0 = Pattern.compile("h<*e[)/zO56JB", 2147483645);
      document2.getElementsMatchingText(pattern0);
      StringBuilder stringBuilder0 = new StringBuilder();
      element1.getElementsByClass("&nbspB;");
      Document.createShell("&nbspB;");
      element0.nextElementSibling();
      document0.cssSelector();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("\"Ixg%pSL;Lm96", "audio");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      String string0 = "org.jsoup.nodes.Element$1";
      document1.getElementsByAttributeValueContaining("\"Ixg%pSL;Lm96", "audio");
      Node[] nodeArray0 = new Node[5];
      nodeArray0[0] = (Node) document1;
      nodeArray0[1] = (Node) document0;
      Document document2 = document0.normalise();
      nodeArray0[2] = (Node) document2;
      nodeArray0[3] = (Node) document1;
      nodeArray0[4] = (Node) document1;
      // Undeclared exception!
      try { 
        document1.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Element element0 = new Element("&nbspB;");
      element0.getElementsMatchingOwnText("&nbspB;");
      Document document0 = Parser.parse("Jb;", "");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("&nbspB;", "Jb;", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      attributes1.put("Tag name must not be empty.", true);
      Document.QuirksMode document_QuirksMode1 = Document.QuirksMode.quirks;
      document0.quirksMode(document_QuirksMode1);
      document0.className();
      Element element1 = document1.appendTo(element0);
      Pattern pattern0 = Pattern.compile("&nbspB;", 385);
      element0.getElementsMatchingText(pattern0);
      StringBuilder stringBuilder0 = new StringBuilder();
      element1.getElementsByClass("hHD<qN*|aap:zSpTPX");
      document1.nextElementSibling();
      document0.getElementsByTag(")aQm");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.clone();
      Node node0 = document1.removeAttr("org.jsoup.nodes.Element$2");
      node0.hasSameValue(document0);
      Document document2 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Element element0 = document2.prepend("CdY7V8");
      Element element1 = element0.appendText("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Element element2 = document2.head();
      element2.appendText("org.jsoup.nodes.Attributes$Dataset$DatasetIterator");
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>();
      Element element3 = element1.classNames((Set<String>) linkedHashSet0);
      // Undeclared exception!
      try { 
        element3.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Document document2 = Parser.parseBodyFragment("#document", "h<*e[)/zO56JB");
      Element element0 = document2.val("h<*e[)/zO56JB");
      Element element1 = document0.addClass("#document");
      document0.val();
      document0.className();
      document0.dataNodes();
      element0.getElementsContainingOwnText("}|yiIa6=Dm..\tK2X,o");
      element1.getElementsByClass("E>w^B(");
      Tag.valueOf("/63NAOB-1U}C>\"X");
      document2.hasClass("h<*e[)/zO56JB");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      document1.className();
      element0.appendTo(document1);
      document1.hasClass("E>w^B(");
      element0.append("");
      document3.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.clone();
      Node node0 = document1.removeAttr("org.jsoup.nodes.Element$2");
      node0.hasSameValue(document0);
      String string0 = "";
      Document document2 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Element element0 = document2.prepend("CdY7V8");
      Element element1 = element0.appendText("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add("org.jsoup.nodes.Element$2");
      document0.classNames((Set<String>) linkedHashSet0);
      String string1 = "head";
      document0.getElementsByAttributeValueMatching("optgroup", "head");
      Pattern pattern0 = Pattern.compile("CdY7V8", 2147483645);
      element1.getElementsMatchingText(pattern0);
      StringBuilder stringBuilder0 = new StringBuilder();
      int int0 = (-1171405163);
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document1;
      CDataNode cDataNode0 = new CDataNode("frameset");
      // Undeclared exception!
      try { 
        cDataNode0.before((Node) document1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document.createShell("org.jsoup.nodes.Element$2");
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      document1.appendElement("org.jsoup.nodes.Element$2");
      document1.ensureChildNodes();
      String string0 = null;
      // Undeclared exception!
      try { 
        document0.attr((String) null, "Insert position out of bounds.");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.clone();
      Document document2 = (Document)document1.removeAttr("org.jsoup.nodes.Element$2");
      document2.hasSameValue(document0);
      Document document3 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Document document4 = (Document)document3.prepend("CdY7V8");
      document4.appendText("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Document document5 = (Document)document0.classNames((Set<String>) linkedHashSet0);
      document0.getElementsByAttributeValueMatching("optgroup", "head");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document6 = document5.quirksMode(document_QuirksMode0);
      document0.className();
      Parser parser0 = Parser.xmlParser();
      Document document7 = parser0.parseInput("", "4g<");
      document7.appendTo(document0);
      document6.hasClass("section");
      document2.clone();
      document7.append("");
      document7.nextElementSiblings();
      document0.toggleClass("optgroup");
      // Undeclared exception!
      try { 
        document4.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Document document2 = Parser.parseBodyFragment("#document", "h<*e[)/zO56JB");
      Element element0 = document2.val("h<*e[)/zO56JB");
      Document document3 = (Document)document0.addClass("#document");
      document0.val();
      document0.className();
      document0.dataNodes();
      element0.getElementsContainingOwnText("}|yiIa6=Dm..\tK2X,o");
      document3.getElementsByClass("E>w^B(");
      Tag.valueOf("/63NAOB-1U}C>\"X");
      Attributes attributes0 = new Attributes();
      attributes0.put("", true);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document3.quirksMode(document_QuirksMode0);
      document3.className();
      document1.appendTo(element0);
      Pattern pattern0 = Pattern.compile("", 385);
      document1.getElementsMatchingText(pattern0);
      StringBuilder stringBuilder0 = new StringBuilder();
      document3.getElementsByClass("hHD<qN*|aap:zSpTPX");
      element0.nextElementSibling();
      document2.baseUri();
      document2.hasText();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Document document2 = Parser.parseBodyFragment("#document", "h<*e[)/zO56JB");
      Element element0 = document2.val("h<*e[)/zO56JB");
      document0.addClass("#document");
      document0.val();
      document0.className();
      document1.dataNodes();
      document0.getElementsContainingOwnText("GyDh<~pm<~");
      document1.getElementsByClass("java.lang.string@0000000206");
      Tag.valueOf("/63NAOB-1U}C>\"X");
      Attributes attributes0 = new Attributes();
      attributes0.put("&nbsp;", true);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document3 = document0.quirksMode(document_QuirksMode0);
      document0.className();
      document3.appendTo(element0);
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element$2", 385);
      Document document4 = Parser.parseBodyFragmentRelaxed("java.lang.String@0000000166", "&nbsp;");
      document4.getElementsMatchingText(pattern0);
      StringBuilder stringBuilder0 = new StringBuilder();
      document3.getElementsByClass("#root");
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Document document1 = Document.createShell("org.jsoup.nodes.Element$2");
      Document document2 = document1.normalise();
      Element element0 = document2.appendElement("org.jsoup.nodes.Element$2");
      element0.children();
      document2.ensureChildNodes();
      Document document3 = (Document)document0.attr("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      element0.lastElementSibling();
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, true);
      document2.cssSelector();
      document0.previousElementSiblings();
      document1.getElementsByAttributeValueContaining("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$1");
      document2.prepend("org.jsoup.nodes.Element$1");
      document3.getElementsByClass("LI");
      document0.nextElementSibling();
      MockFile mockFile0 = new MockFile("LI", "org.jsoup.nodes.Element$1");
      MockFile mockFile1 = new MockFile(mockFile0, "org.jsoup.nodes.Element$2");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile1);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0, 2234);
      // Undeclared exception!
      try { 
        document3.outerHtmlHead(bufferedWriter0, 2234, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Document document1 = Document.createShell("org.jsoup.nodes.Element$2");
      Document document2 = document1.normalise();
      Element element0 = document2.appendElement("org.jsoup.nodes.Element$2");
      document2.ensureChildNodes();
      Element element1 = document0.attr("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      element0.lastElementSibling();
      document2.cssSelector();
      Elements elements0 = document0.previousElementSiblings();
      Pattern.compile("org.jsoup.nodes.Element$1");
      FileSystemHandling.shouldAllThrowIOExceptions();
      document2.clone();
      document2.append("#root");
      document1.nextElementSiblings();
      element1.insertChildren((-1), (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Document document1 = Document.createShell("org.jsoup.nodes.Element$2");
      Document document2 = document1.normalise();
      Element element0 = document2.appendElement("org.jsoup.nodes.Element$2");
      document2.ensureChildNodes();
      Element element1 = document0.attr("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      element0.lastElementSibling();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      document2.cssSelector();
      document0.previousElementSiblings();
      document1.getElementsByAttributeValueContaining("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$1");
      Element element2 = document2.prepend("org.jsoup.nodes.Element$1");
      element1.getElementsByClass("LI");
      document0.nextElementSibling();
      element2.children();
      document2.prepend(";");
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Document document1 = Document.createShell("org.jsoup.nodes.Element$2");
      Document document2 = document1.normalise();
      Element element0 = document2.appendElement("org.jsoup.nodes.Element$2");
      document2.ensureChildNodes();
      Element element1 = document0.attr("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      element0.lastElementSibling();
      document2.cssSelector();
      document0.previousElementSiblings();
      document1.getElementsByAttributeValueContaining("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$1");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) element1;
      document2.insertChildren(0, nodeArray0);
      // Undeclared exception!
      try { 
        Pattern.compile((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.clone();
      Document document2 = (Document)document1.removeAttr("org.jsoup.nodes.Element$2");
      document2.hasSameValue(document0);
      Document document3 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Document document4 = (Document)document3.prepend("CdY7V8");
      Document document5 = (Document)document4.appendText("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Document document6 = (Document)document0.classNames((Set<String>) linkedHashSet0);
      document0.getElementsByAttributeValueMatching("optgroup", "head");
      Pattern pattern0 = Pattern.compile("CdY7V8", 2147483645);
      document5.getElementsMatchingText(pattern0);
      StringBuilder stringBuilder0 = new StringBuilder();
      document0.getElementsByClass("optgroup");
      Document.createShell("org.jsoup.nodes.Element$2");
      document2.nextElementSibling();
      document6.cssSelector();
      document2.previousElementSibling();
      document4.tag();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$2";
      Document.createShell("org.jsoup.nodes.Element$2");
      FileSystemHandling.appendLineToFile((EvoSuiteFile) null, "]>6>#!");
      Document document0 = Document.createShell("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Element element0 = document1.appendElement("8tk5ll9ib&00z`");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document1;
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document0.quirksMode(document_QuirksMode0);
      nodeArray0[1] = (Node) document2;
      // Undeclared exception!
      try { 
        element0.insertChildren((-276), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$2";
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      document0.clone();
      Document document1 = document0.clone();
      Node node0 = document1.removeAttr("8tk5ll9ib&00z`");
      Document document2 = (Document)document0.appendChild(node0);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document3 = Parser.parseBodyFragment("", "br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.clone();
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.outline(true);
      Document.OutputSettings document_OutputSettings4 = document_OutputSettings3.prettyPrint(true);
      document2.outputSettings(document_OutputSettings4);
      String string1 = null;
      // Undeclared exception!
      try { 
        document3.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Document document3 = (Document)document2.removeAttr("org.jsoup.nodes.Element$2");
      document2.appendChild(document1);
      Element element0 = document2.appendElement("Ip/[/h7u");
      Document document4 = (Document)document2.clone();
      document4.doSetBaseUri("XB[nA:&eeyJ%w6cZ9P");
      document2.ensureChildNodes();
      Document document5 = (Document)document0.attr("Y%iI7'mix/D|0u$~eV5", "Y%iI7'mix/D|0u$~eV5");
      document5.lastElementSibling();
      document3.cssSelector();
      document3.previousElementSiblings();
      document0.getElementsByAttributeValueContaining("org.jsoup.nodes.Element$1", "9PcUyBv^Qd=5");
      document1.prepend("html");
      element0.getElementsByClass("#root");
      document1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("6k!;RtcL5p}eB\"t8_", "id");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document document2 = Parser.parseBodyFragment("id", "id");
      document0.text("id");
      Document document3 = (Document)document2.removeAttr("br");
      document0.appendChild(document3);
      document0.hasSameValue("6k!;RtcL5p}eB\"t8_");
      document2.nextElementSiblings();
      document2.firstElementSibling();
      CDataNode cDataNode0 = new CDataNode((String) null);
      Document document4 = document1.normalise();
      document4.getElementsMatchingText("br");
      document3.appendText("I,U#R;=1n`C]*^/");
      document0.siblingElements();
      document1.selectFirst("br");
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.clone();
      Node node0 = document1.removeAttr("org.jsoup.nodes.Element$2");
      node0.hasSameValue(document0);
      Document document2 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      String string0 = "CdY7V8";
      Element element0 = document2.prepend("CdY7V8");
      Element element1 = element0.appendText("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.classNames((Set<String>) linkedHashSet0);
      String string1 = "optgroup";
      // Undeclared exception!
      try { 
        element1.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.clone();
      Node node0 = document1.removeAttr("org.jsoup.nodes.Element$2");
      node0.hasSameValue(document0);
      document0.val("org.jsoup.nodes.Element$2");
      Element element0 = document0.addClass("org.jsoup.nodes.Element$2");
      String string0 = "body";
      Document document2 = Document.createShell("body");
      document2.val();
      element0.className();
      document2.dataNodes();
      String string1 = "}|yiIa6=Dm..\\tK2X,o";
      document0.getElementsContainingOwnText("java.lang.String@0000000025");
      element0.getElementsByClass("java.lang.String@0000000025");
      document0.nextElementSibling();
      Tag.valueOf("head");
      Attributes attributes0 = new Attributes();
      String string2 = null;
      // Undeclared exception!
      try { 
        attributes0.put((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Element element0 = new Element("&nbspB;");
      element0.getElementsMatchingOwnText("&nbspB;");
      Document document0 = Parser.parse("Jb;", "");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Attributes attributes0 = new Attributes();
      Attribute attribute0 = new Attribute("&nbspB;", "Jb;", attributes0);
      Attributes attributes1 = attributes0.put(attribute0);
      attributes1.put("Tag name must not be empty.", true);
      Document.QuirksMode document_QuirksMode1 = Document.QuirksMode.quirks;
      Document document2 = document0.quirksMode(document_QuirksMode1);
      document0.className();
      document1.appendTo(element0);
      Pattern pattern0 = Pattern.compile("", 186);
      document2.getElementsMatchingText(pattern0);
      StringBuilder stringBuilder0 = new StringBuilder();
      element0.getElementsByClass("`[5a\u0004Yw");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Element element0 = new Element("&nbspB;");
      element0.text();
      element0.getElementsMatchingOwnText("&nbspB;");
      element0.val("qt^pwzaw{8`");
      Document document0 = Parser.parseBodyFragment("", "");
      Document document1 = (Document)document0.doClone(element0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(68);
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document2.clone();
      document1.append("=ooS9%zjrMvGY");
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = Document.createShell("N");
      Document document2 = document1.normalise();
      Element element0 = document2.appendElement("8tk5ll9ib&00z`");
      Document document3 = (Document)document1.clone();
      document2.ensureChildNodes();
      FileSystemHandling fileSystemHandling0 = new FileSystemHandling();
      Document document4 = (Document)document0.attr("org.jsoup.nodes.Element$2", "N");
      element0.lastElementSibling();
      Tag.valueOf("{SHJ");
      Attributes attributes0 = new Attributes();
      attributes0.put("c5MyQqg", false);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document5 = document3.quirksMode(document_QuirksMode0);
      document5.className();
      document4.appendTo(element0);
      document5.hasClass("org.jsoup.nodes.Element$2");
      document3.text();
      document2.clone();
      document5.append("fN-=68KLB:wqIB;fXd");
      document4.nextElementSiblings();
      document2.prepend("N");
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Document document2 = Parser.parseBodyFragment("#document", "h<*e[)/zO56JB");
      Element element0 = document2.val("h<*e[)/zO56JB");
      Element element1 = document0.addClass("#document");
      document0.val();
      document0.className();
      document0.dataNodes();
      element0.getElementsContainingOwnText("}|yiIa6=Dm..\tK2X,o");
      element1.getElementsByClass("E>w^B(");
      Document document3 = document1.clone();
      document3.cssSelector();
      document3.previousElementSiblings();
      String string0 = "=G~Y(%&$NJT)R:>A";
      document3.getElementsByAttributeValueContaining("html", "=G~Y(%&$NJT)R:>A");
      // Undeclared exception!
      try { 
        element1.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Element element0 = new Element("&nbspB;");
      element0.getElementsMatchingOwnText("&nbspB;");
      Document document0 = Parser.parse("Jb;", "");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document0.quirksMode(document_QuirksMode0);
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(186, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Element element0 = new Element("&nbsp;");
      element0.text();
      element0.getElementsMatchingOwnText("&nbsp;");
      element0.val("qt^pwzaw{8`");
      Document document0 = Parser.parseBodyFragment("qt^pwzaw{8`", "qt^pwzaw{8`");
      document0.doClone((Node) null);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(146);
      Pattern.compile("geu91kisr", (-4368));
      FileSystemHandling.shouldAllThrowIOExceptions();
      Document document1 = Parser.parseBodyFragment("&nbsp;", "");
      Document document2 = document1.clone();
      document0.append("&nbsp;");
      document2.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("6k!;RtcL5p}eB\"t8_", "id");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document document2 = Parser.parseBodyFragment("id", "id");
      document2.text("6k!;RtcL5p}eB\"t8_");
      Document document3 = (Document)document2.removeAttr("br");
      document0.appendChild(document3);
      document0.hasSameValue("6k!;RtcL5p}eB\"t8_");
      document2.nextElementSiblings();
      document2.firstElementSibling();
      CDataNode cDataNode0 = new CDataNode((String) null);
      Document document4 = document1.normalise();
      document4.getElementsMatchingText("br");
      document3.appendText("I,U#R;=1n`C]*^/");
      document0.siblingElements();
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$2";
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.clone();
      Document document2 = (Document)document1.removeAttr("org.jsoup.nodes.Element$2");
      document2.hasSameValue(document0);
      Document document3 = (Document)document2.addClass("]^6nI");
      document1.val();
      document3.className();
      document3.dataNodes();
      document0.getElementsContainingOwnText((String) null);
      // Undeclared exception!
      try { 
        document2.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$2";
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      document2.removeAttr("org.jsoup.nodes.Element$2");
      Element element0 = document2.appendChild(document1);
      element0.hasSameValue(document1);
      document1.absUrl("org.jsoup.nodes.Element$2");
      String string1 = "bdo";
      document0.attr("", "f2n]8Z0");
      document1.prependText("class");
      document1.cssSelector();
      document2.getElementsByAttribute("bdo");
      // Undeclared exception!
      try { 
        Pattern.compile((String) null, 1737);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Element element0 = new Element("&nbspB;");
      element0.text();
      element0.getElementsMatchingOwnText("&nbspB;");
      Element element1 = element0.val("qt^pwzaw{8`");
      Document document0 = Parser.parseBodyFragment("", "");
      document0.doClone(element0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(68);
      Pattern.compile("&nbspB;", 68);
      Pattern pattern0 = Pattern.compile("geu91kisr", 68);
      document0.getElementsMatchingOwnText(pattern0);
      File file0 = MockFile.createTempFile("geu91kisr", "f76Vh(KyE[ICx");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      // Undeclared exception!
      try { 
        element1.getElementsMatchingOwnText("f76Vh(KyE[ICx");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: f76Vh(KyE[ICx
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Document document2 = Parser.parseBodyFragment("#document", "h<*e[)/zO56JB");
      Element element0 = document2.val("h<*e[)/zO56JB");
      Document document3 = (Document)document0.addClass("#document");
      document0.val();
      document0.className();
      document0.dataNodes();
      element0.getElementsContainingOwnText("}|yiIa6=Dm..\tK2X,o");
      document3.getElementsByClass("E>w^B(");
      Tag.valueOf("/63NAOB-1U}C>\"X");
      Attributes attributes0 = new Attributes();
      attributes0.put("", true);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document4 = document3.quirksMode(document_QuirksMode0);
      document3.className();
      document1.appendTo(element0);
      document0.hasClass("klx:pl fGDNjFt:{N");
      Document document5 = document4.clone();
      document5.append("E>w^B(");
      document3.nextElementSiblings();
      document1.toggleClass("E>w^B(");
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("<!--", parseSettings0);
      CDataNode cDataNode0 = new CDataNode(" > ");
      Attributes attributes0 = cDataNode0.attributes();
      Attribute attribute0 = new Attribute("1V+6", "1V+6");
      Attributes attributes1 = attributes0.put(attribute0);
      Attributes attributes2 = attributes1.clone();
      FormElement formElement0 = new FormElement(tag0, "<!--", attributes2);
      attributes2.get("s+");
      Pattern pattern0 = Pattern.compile("1V+6", 0);
      pattern0.splitAsStream("<!--");
      formElement0.getElementsMatchingOwnText(pattern0);
      formElement0.textNodes();
      formElement0.cssSelector();
      formElement0.classNames();
      formElement0.previousElementSiblings();
      Element element0 = formElement0.tagName("s+");
      formElement0.prependText("([+-])?(d+)");
      element0.ownText();
      element0.prepend("<!--");
      element0.classNames();
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(pipedOutputStream0, false);
      int int0 = 22;
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.html;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      // Undeclared exception!
      try { 
        document_OutputSettings1.indentAmount((-2124));
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = Document.createShell("N");
      Document document2 = document1.normalise();
      Element element0 = document2.appendElement("8tk5ll9ib&00z`");
      document1.clone();
      document2.ensureChildNodes();
      document0.attr("org.jsoup.nodes.Element$2", "N");
      element0.lastElementSibling();
      document2.cssSelector();
      document0.previousElementSiblings();
      String string0 = "org.jsoup.nodes.Element$1";
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueContaining((String) null, "org.jsoup.nodes.Element$1");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document0 = new Document("h6");
      document0.nextElementSiblings();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf(".", parseSettings0);
      Element element0 = new Element(tag0, "html");
      element0.hasAttributes();
      document0.doSetBaseUri("html");
      document0.id();
      document0.appendElement("h6");
      Element element1 = element0.toggleClass("h6");
      element1.getElementsByAttributeValueNot("html", "#L[9cP)W3o");
      document0.getElementsByTag("8tk5ll9ib&00z`");
      element0.data();
      document0.doClone(element0);
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.clone();
      Document document2 = (Document)document1.removeAttr("org.jsoup.nodes.Element$2");
      document2.hasSameValue(document0);
      Document document3 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Document document4 = (Document)document3.prepend("CdY7V8");
      document1.appendChild(document3);
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.setTrackErrors((-1));
      Document document5 = parser1.parseInput("org.jsoup.nodes.Element$2", "");
      document3.hasSameValue(document5);
      document1.nextElementSiblings();
      document4.firstElementSibling();
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element$2");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Element element0 = document4.head();
      document3.textNodes();
      document5.nextElementSiblings();
      document5.hasAttributes();
      element0.doSetBaseUri("org.jsoup.select.StructuralEvaluator$Not");
      element0.id();
      // Undeclared exception!
      try { 
        document2.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Document document2 = (Document)document1.val("h<*e[)/zO56JB");
      document2.attr("8tk5ll9ib&00z`", "org.jsoup.nodes.Attributes$1");
      document0.cssSelector();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("}Wf( !(CNf':", parseSettings0);
      Element element0 = new Element(tag0, "DhjG");
      Tag.valueOf("class");
      element0.getElementsByAttribute("h<*e[)/zO56JB");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Document document3 = document0.normalise();
      document3.nextElementSiblings();
      document3.hasAttributes();
      element0.doSetBaseUri("8tk5ll9ib&00z`");
      document0.id();
      Element element1 = document0.appendElement("org.jsoup.nodes.Attributes$1");
      element1.toggleClass("8tk5ll9ib&00z`");
      element0.getElementsByAttributeValueNot("8tk5ll9ib&00z`", "8tk5ll9ib&00z`");
      Document document4 = new Document("op9kqF;/F6*M~U<%a");
      document4.getElementsByTag("org.jsoup.nodes.PseudoTextElement");
      document3.data();
      Document document5 = Document.createShell("&nbsp;");
      Document document6 = document5.normalise();
      document6.doClone(document2);
      document4.baseUri();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.clone();
      Document document2 = (Document)document1.removeAttr("org.jsoup.nodes.Element$2");
      document2.hasSameValue(document0);
      Document document3 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Document document4 = (Document)document3.prepend("CdY7V8");
      Document document5 = (Document)document4.appendText("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Document document6 = (Document)document0.classNames((Set<String>) linkedHashSet0);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Document document7 = document5.normalise();
      document5.nextElementSiblings();
      document7.hasAttributes();
      document1.doSetBaseUri("");
      document2.id();
      Element element0 = document6.appendElement("8tk5ll9ib&00z`");
      element0.toggleClass("6-bol");
      Document document8 = document4.normalise();
      document8.getElementsByAttributeValueNot("org.jsoup.nodes.Element$1", "&nbspB;");
      document3.getElementsByTag("org.jsoup.nodes.Element$1");
      document2.data();
      document1.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("v{F7", parseSettings0);
      Element element0 = new Element(tag0, "T)LSQuF%3[");
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      element0.is((Evaluator) evaluator_IsEmpty0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Element element0 = new Element("&nbspB;");
      element0.text();
      element0.getElementsMatchingOwnText("&nbspB;");
      element0.val("q:T^pwzaw{8`");
      Document document0 = Parser.parseBodyFragment("", "");
      Element element1 = document0.doClone(element0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = Document.createShell("&nbspB;");
      document1.hasSameValue("");
      element1.nextElementSiblings();
      // Undeclared exception!
      try { 
        element0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = new Document("");
      String string0 = "T5";
      document0.getElementById("T5");
      document0.head();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Element element0 = document0.attr("  ", "");
      document0.elementSiblingIndex();
      // Undeclared exception!
      try { 
        element0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Document document2 = Parser.parseBodyFragment("#document", "h<*e[)/zO56JB");
      Element element0 = document2.val("h<*e[)/zO56JB");
      Document document3 = (Document)document0.addClass("#document");
      document0.val();
      document0.className();
      document0.dataNodes();
      element0.getElementsContainingOwnText("}|yiIa6=Dm..\tK2X,o");
      document3.getElementsByClass("E>w^B(");
      Tag.valueOf("/63NAOB-1U}C>\"X");
      Attributes attributes0 = new Attributes();
      attributes0.put("", true);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document4 = document3.quirksMode(document_QuirksMode0);
      document3.className();
      document1.appendTo(element0);
      document0.hasClass("klx:pl fGDNjFt:{N");
      Document document5 = document4.clone();
      // Undeclared exception!
      try { 
        document5.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser.parse("", "");
      Document document0 = parser0.parseInput("|pFe", "s+");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.hasClass("|pFe");
      document0.hasClass("s+");
      document0.append("");
      document0.getElementsByClass("ND\"B\"RTibd;^");
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      document2.removeAttr("org.jsoup.nodes.Element$2");
      Element element0 = document2.appendChild(document1);
      element0.hasSameValue(document1);
      Document document3 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "I");
      Parser parser0 = Parser.htmlParser();
      Document document4 = document1.parser(parser0);
      document4.val("org.jsoup.nodes.Element$2");
      document2.doClone(document3);
      document3.addClass("org.jsoup.nodes.Element$2");
      element0.val();
      document2.className();
      document1.dataNodes();
      element0.getElementsContainingOwnText("");
      document2.getElementsByAttributeValueMatching("org.jsoup.nodes.Element$1", "");
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Document document2 = (Document)document1.val("h<*e[)/zO56JB");
      document2.attr("8tk5ll9ib&00z`", "org.jsoup.nodes.Attributes$1");
      document0.cssSelector();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("}Wf( !(CNf':", parseSettings0);
      Element element0 = new Element(tag0, "DhjG");
      Tag.valueOf("class");
      element0.getElementsByAttribute("h<*e[)/zO56JB");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Document document3 = document0.normalise();
      document3.nextElementSiblings();
      document3.hasAttributes();
      element0.doSetBaseUri("8tk5ll9ib&00z`");
      document0.id();
      Element element1 = document0.appendElement("org.jsoup.nodes.Attributes$1");
      element1.toggleClass("8tk5ll9ib&00z`");
      element0.getElementsByAttributeValueNot("8tk5ll9ib&00z`", "8tk5ll9ib&00z`");
      document1.getElementsByTag("&nbspB;");
      element0.data();
      document3.doClone(document1);
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document0 = Parser.parseBodyFragment("", ":containsOwn(%s)");
      document0.getElementsByAttributeValueContaining("T5", ":containsOwn(%s)");
      Document.OutputSettings document_OutputSettings1 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings1);
      // Undeclared exception!
      try { 
        document1.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Document document2 = (Document)document1.val("h<*e[)/zO56JB");
      document2.attr("8tk5ll9ib&00z`", "org.jsoup.nodes.Attributes$1");
      document0.cssSelector();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("}Wf( !(CNf':", parseSettings0);
      Element element0 = new Element(tag0, "DhjG");
      Tag.valueOf("class");
      element0.getElementsByAttribute("h<*e[)/zO56JB");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Document document3 = document0.normalise();
      document3.nextElementSiblings();
      document3.hasAttributes();
      element0.doSetBaseUri("8tk5ll9ib&00z`");
      document0.id();
      Element element1 = document0.appendElement("org.jsoup.nodes.Attributes$1");
      element0.getElementsByAttributeValueNot("8tk5ll9ib&00z`", "8tk5ll9ib&00z`");
      document1.getElementsByTag("&nbspB;");
      element0.data();
      Document document4 = (Document)document3.doClone(document1);
      element1.getElementsContainingOwnText("#root");
      document4.after("geu91kisr");
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      document0.clone();
      String string0 = "EndTagOpen";
      Node node0 = document1.removeAttr("EndTagOpen");
      document1.appendChild(node0);
      MockFile mockFile0 = new MockFile("EndTagOpen", "org.jsoup.nodes.Element$2");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(mockFile0);
      Parser.parseBodyFragment("EndTagOpen", "org.jsoup.nodes.Element$2");
      // Undeclared exception!
      document1.prepend("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      document2.removeAttr("org.jsoup.nodes.Element$2");
      Element element0 = document2.appendChild(document0);
      Object object0 = new Object();
      element0.hasSameValue(object0);
      Document document3 = Parser.parseBodyFragment("", "org.jsoup.nodes.Element$2");
      Element element1 = document0.prepend("org.jsoup.nodes.Element$2");
      element1.getElementsByAttributeValueMatching("org.jsoup.nodes.Element$2", (Pattern) null);
      element0.appendText("CdY7V8");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Element element2 = document3.text("");
      element2.classNames((Set<String>) linkedHashSet0);
      document3.children();
      Pattern pattern0 = Pattern.compile("CdY7V8", (-1945));
      document3.getElementsMatchingText(pattern0);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        document2.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      document2.removeAttr("org.jsoup.nodes.Element$2");
      Element element0 = document2.appendChild(document1);
      element0.hasSameValue(document1);
      Document document3 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Element element1 = document1.appendText("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.classNames((Set<String>) linkedHashSet0);
      document1.getElementsByAttributeValueMatching("optgroup", "head");
      Pattern pattern0 = Pattern.compile("CdY7V8", 2147483645);
      element1.getElementsMatchingText(pattern0);
      StringBuilder stringBuilder0 = new StringBuilder();
      // Undeclared exception!
      try { 
        document3.getElementsByAttributeValueNot("", "head");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Document document2 = Parser.parseBodyFragment("#document", "h<*e[)/zO56JB");
      document2.val("h<*e[)/zO56JB");
      Element element0 = document1.doClone(document2);
      document0.addClass("#document");
      element0.getElementsByTag("html");
      document1.getElementsContainingText("");
      File file0 = MockFile.createTempFile("9=ph.aQ", "|sE_60e|04tZs'c3");
      MockPrintStream mockPrintStream0 = new MockPrintStream(file0);
      element0.html(mockPrintStream0);
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Parser.parse("", "");
      Document document0 = parser0.parseInput("|pFe", "s+");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.getElementsByIndexLessThan((-910));
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.hasClass("|pFe");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      document2.className();
      document1.appendTo(document2);
      document0.hasClass("s+");
      // Undeclared exception!
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("6k!;RtcL5p}eB\"t8_", "id");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document document2 = document1.outputSettings(document_OutputSettings2);
      Document document3 = document2.ownerDocument();
      document3.clone();
      document0.text();
      Element element0 = document3.text("6k!;RtcL5p}eB\"t8_");
      Node node0 = document3.removeAttr("br");
      Document document4 = (Document)document0.appendChild(node0);
      document2.hasSameValue("6k!;RtcL5p}eB\"t8_");
      document3.nextElementSiblings();
      document3.firstElementSibling();
      CDataNode cDataNode0 = new CDataNode((String) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Element element1 = document4.head();
      element1.nextElementSiblings();
      element1.hasAttributes();
      element1.doSetBaseUri("id");
      document0.id();
      document4.childNodeSize();
      // Undeclared exception!
      element0.appendElement("br");
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Document document3 = (Document)document2.removeAttr("org.jsoup.nodes.Element$2");
      document2.appendChild(document1);
      document0.dataset();
      String string0 = "ma.394]8Pk9NaHC0.";
      document2.attr("seamless", (String) null);
      document1.elementSiblingIndex();
      // Undeclared exception!
      try { 
        document3.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Element element0 = new Element("b;Cj8U:-eppSHiEqvQ");
      Document document0 = Parser.parseBodyFragmentRelaxed("html", "");
      Document document1 = document0.clone();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(12);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(true);
      Document document2 = document1.outputSettings(document_OutputSettings2);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document3 = document2.quirksMode(document_QuirksMode0);
      document3.text();
      document2.getElementsMatchingOwnText("html");
      Pattern pattern0 = Pattern.compile("b;Cj8U:-eppSHiEqvQ");
      document2.getElementsMatchingOwnText(pattern0);
      Parser.xmlParser();
      document2.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Document document3 = (Document)document2.removeAttr("org.jsoup.nodes.Element$2");
      Document document4 = (Document)document2.appendChild(document1);
      document4.hasSameValue(document1);
      document1.absUrl("org.jsoup.nodes.Element$2");
      document0.attr("", "f2n]8Z0");
      document1.cssSelector();
      document2.getElementsByAttribute("bdo");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      document3.nextElementSiblings();
      document3.hasAttributes();
      document2.doSetBaseUri("#root");
      document2.id();
      // Undeclared exception!
      try { 
        document1.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Document document2 = Parser.parseBodyFragment("#document", "h<*e[)/zO56JB");
      Element element0 = document2.val("h<*e[)/zO56JB");
      Element element1 = document1.doClone(document2);
      Element element2 = document0.addClass("#document");
      element1.val();
      document0.className();
      document0.dataNodes();
      element0.getElementsContainingOwnText("}|yiIa6=Dm..\tK2X,o");
      element2.getElementsByClass("E>w^B(");
      Tag tag0 = Tag.valueOf("/63NAOB-1U}C>\"X");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", true);
      Attribute attribute0 = new Attribute("textarea", "}|yiIa6=Dm..\tK2X,o");
      Attributes attributes2 = attributes1.put(attribute0);
      FormElement formElement0 = new FormElement(tag0, "/63NAOB-1U}C>\"X", attributes2);
      attribute0.setKey("ItlddMuHAJA");
      FormElement formElement1 = formElement0.addElement(element2);
      formElement1.nextElementSibling();
      // Undeclared exception!
      try { 
        element0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Document document3 = (Document)document2.removeAttr("org.jsoup.nodes.Element$2");
      document3.children();
      Document document4 = (Document)document2.appendChild(document1);
      document4.hasSameValue(document1);
      Parser.parseBodyFragment("D", "D");
      Document document5 = (Document)document3.val("K6j?H1.[qb");
      Document document6 = Parser.parseBodyFragment("D", "K6j?H1.[qb");
      document6.doClone(document5);
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Document document2 = Parser.parseBodyFragment("#document", "h<*e[)/zO56JB");
      Document document3 = (Document)document2.val("h<*e[)/zO56JB");
      document3.attr("8tk5ll9ib&00z`", "org.jsoup.nodes.Attributes$1");
      document2.cssSelector();
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("}Wf( !(CNf':", parseSettings0);
      Element element0 = new Element(tag0, "DhjG");
      Tag.valueOf("class");
      element0.getElementsByAttribute("h<*e[)/zO56JB");
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Document document4 = document0.normalise();
      document4.nextElementSiblings();
      document4.hasAttributes();
      element0.doSetBaseUri("8tk5ll9ib&00z`");
      document0.id();
      document2.appendElement("org.jsoup.nodes.Attributes$1");
      element0.getElementsByAttributeValueNot("8tk5ll9ib&00z`", "8tk5ll9ib&00z`");
      document1.getElementsByTag("&nbspB;");
      element0.data();
      document4.doClone(document1);
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Element element0 = new Element("&nbsp;");
      element0.text();
      element0.getElementsMatchingOwnText("&nbsp;");
      Pattern.compile("X$u~g?");
      Document document0 = Parser.parseBodyFragmentRelaxed("Jb;", "");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      String string0 = "8tk5ll9ib&00z`";
      // Undeclared exception!
      try { 
        document1.insertChildren(186, (Node[]) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Children collection to be inserted must not be null.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      String string0 = "id";
      Document document0 = parser0.parseInput("6k!;RtcL5p}eB\"t8_", "id");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document document2 = document1.outputSettings(document_OutputSettings2);
      Document document3 = document2.ownerDocument();
      document3.clone();
      document3.text("6k!;RtcL5p}eB\"t8_");
      String string1 = "br";
      Node node0 = document3.removeAttr("br");
      Element element0 = document0.appendChild(node0);
      document2.hasSameValue("6k!;RtcL5p}eB\"t8_");
      document3.nextElementSiblings();
      document3.firstElementSibling();
      CDataNode cDataNode0 = new CDataNode((String) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      // Undeclared exception!
      element0.prependElement((String) null);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Element element0 = new Element("&nbspB;");
      element0.text();
      element0.getElementsMatchingOwnText("&nbspB;");
      Element element1 = element0.val("q:T^pwzaw{8`");
      Document document0 = Parser.parseBodyFragment("", "");
      document0.doClone(element0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.syntax(document_OutputSettings_Syntax0);
      document_OutputSettings0.indentAmount(68);
      document_OutputSettings3.prepareEncoder();
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.getElementsByAttribute("q:T^pwzaw{8`");
      Pattern pattern0 = Pattern.compile("#root");
      element1.getElementsMatchingOwnText(pattern0);
      // Undeclared exception!
      try { 
        MockFile.createTempFile((String) null, "&nbsp;");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.vfs.VirtualFileSystem", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#", "m|mu\b$");
      Element element0 = document0.createElement("#");
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$2";
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Node node0 = document2.removeAttr("org.jsoup.nodes.Element$2");
      node0.hasSameValue(document1);
      Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Element element0 = document2.html("");
      // Undeclared exception!
      try { 
        element0.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Evemenn$2");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Document document3 = (Document)document2.removeAttr("org.jsoup.nodes.Evemenn$2");
      Document document4 = (Document)document2.appendChild(document1);
      document4.hasSameValue(document1);
      CDataNode cDataNode0 = new CDataNode("c-");
      Element.preserveWhitespace(document1);
      Document document5 = Parser.parse("c-", "org.jsoup.nodes.Evemenn$2");
      document4.head();
      document5.text();
      document2.id();
      Elements elements0 = document3.getElementsByAttributeValueMatching("c-", "article");
      document3.getElementsByTag("Ej8(,d1Lq,_zXIh");
      document1.getElementsContainingText("article");
      // Undeclared exception!
      try { 
        document4.insertChildren((-1110026255), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Document document2 = Parser.parseBodyFragment("#document", "h<*e[)/zO56JB");
      Element element0 = document2.val("h<*e[)/zO56JB");
      Element element1 = document1.doClone(document2);
      document0.addClass("#document");
      element1.val();
      document0.className();
      document0.dataNodes();
      element0.getElementsContainingOwnText("}|yiIa6=Dm..\tK2X,o");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("#document", "rX1-~)B4{d{ztl");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: rX1-~)B4{d{ztl
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("6k!;RtcL5p}eB\"t8_", "id");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document document2 = document1.outputSettings(document_OutputSettings2);
      Document document3 = document2.ownerDocument();
      document3.clone();
      Element element0 = document3.text("6k!;RtcL5p}eB\"t8_");
      Node node0 = document3.removeAttr("br");
      Document document4 = (Document)document0.appendChild(node0);
      document2.hasSameValue("6k!;RtcL5p}eB\"t8_");
      document3.nextElementSiblings();
      document3.firstElementSibling();
      CDataNode cDataNode0 = new CDataNode((String) null);
      FileSystemHandling.appendDataToFile((EvoSuiteFile) null, (byte[]) null);
      Element element1 = document4.head();
      element1.nextElementSiblings();
      element1.hasAttributes();
      element1.doSetBaseUri("id");
      document0.id();
      // Undeclared exception!
      element0.appendElement("br");
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.getElementById("T5");
      document0.head();
      String string0 = "";
      StringBuilder stringBuilder0 = new StringBuilder(65535);
      stringBuilder0.append((String) null);
      // Undeclared exception!
      try { 
        stringBuilder0.insert(65535, (long) 65535);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: 65535
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      document1.attr("&nbsp;", "8tk5ll9ib&00z`");
      Document document2 = document1.clone();
      Document document3 = (Document)document2.removeAttr("org.jsoup.nodes.Element$2");
      Document document4 = (Document)document2.appendChild(document1);
      document4.hasSameValue(document1);
      CDataNode cDataNode0 = new CDataNode("c-");
      Element.preserveWhitespace(document1);
      Document document5 = Parser.parse("c-", "org.jsoup.nodes.Element$2");
      document4.head();
      document5.text();
      document2.id();
      document3.getElementsByAttributeValueMatching("c-", "article");
      document1.val();
      document5.className();
      document1.dataNodes();
      document4.getElementsContainingOwnText("c-");
      document2.getElementsByAttributeValueMatching("article", "|WtFNOAz");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      String string0 = "6k!;RtcL5p}eB\"t8_";
      Document document0 = parser0.parseInput("6k!;RtcL5p}eB\"t8_", "id");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document1.nextSibling();
      String string1 = "org.jsoup.nodes.Element";
      document0.removeClass("org.jsoup.nodes.Element");
      document0.shallowClone();
      document1.text("id");
      document1.html("head");
      // Undeclared exception!
      try { 
        document1.remove();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, false, false, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document0 = new Document("h6");
      Document document1 = document0.normalise();
      Document document2 = Document.createShell("org.jsoup.select.Collector$FirstFinder");
      document2.hasText();
      document2.getElementsMatchingText("h6");
      document0.appendText("html");
      document1.siblingElements();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      FileSystemHandling.setPermissions((EvoSuiteFile) null, true, true, false);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      Document document0 = new Document("body");
      Document document1 = document0.normalise();
      document1.hasText();
      String string0 = "geu91kisr";
      // Undeclared exception!
      try { 
        document1.getElementsMatchingText("/b}9R{iEkn7es");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: /b}9R{iEkn7es
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Element element0 = new Element("Rp");
      String string0 = Node.EmptyString;
      element0.getElementsMatchingOwnText("org.jsoup.select.Collector$FirstFinder");
      Pattern pattern0 = Pattern.compile("T!X|");
      element0.getElementsMatchingOwnText(pattern0);
      Parser.xmlParser();
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      String string0 = "?yj0z";
      Document document0 = Document.createShell("?yj0z");
      document0.clone();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting((String) null, "?yj0z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Element element0 = new Element("&nbsp;");
      element0.text();
      element0.getElementsMatchingOwnText("&nbsp;");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Element element1 = element0.classNames((Set<String>) linkedHashSet0);
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("optgroup", "IDdUZ@");
      document0.getElementsByAttributeValueMatching((String) null, "head");
      Pattern pattern0 = Pattern.compile("&#xa0;", (-1));
      element1.getElementsMatchingText(pattern0);
      StringBuilder stringBuilder0 = new StringBuilder("head");
      Element element2 = element1.prepend("textarea");
      element2.getElementsByClass("textarea");
      Element element3 = new Element("C[l0qW.BuVvZ6,WN");
      element3.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "geu91kisr");
      Document document1 = document0.ownerDocument();
      Document document2 = document1.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.xhtml;
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.escapeMode(entities_EscapeMode0);
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(93);
      document_OutputSettings3.prepareEncoder();
      Document document3 = document2.outputSettings(document_OutputSettings3);
      // Undeclared exception!
      try { 
        document3.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Document document3 = (Document)document2.removeAttr("org.jsoup.nodes.Element$2");
      Document document4 = (Document)document2.appendChild(document1);
      document4.hasSameValue(document1);
      Document document5 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Document document6 = (Document)document5.prepend("CdY7V8");
      Document document7 = (Document)document6.appendText("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      Document document8 = (Document)document0.classNames((Set<String>) linkedHashSet0);
      document1.getElementsByAttributeValueMatching("optgroup", "head");
      Pattern pattern0 = Pattern.compile("CdY7V8", 2147483645);
      document7.getElementsMatchingText(pattern0);
      StringBuilder stringBuilder0 = new StringBuilder();
      document8.prepend("C[l0qW.BuVvZ6,WN");
      document5.getElementsByClass("org.jsoup.nodes.Element$2");
      document3.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("6k!;RtcL5p}eB\"t8_");
      Document document0 = parser0.parseInput((Reader) stringReader0, "6k!;RtcL5p}eB\"t8_");
      Document document1 = document0.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.parser(parser0);
      document0.prepend("B");
      document2.getElementsByAttributeStarting("B");
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".");
      String string0 = "dO6 .BPg?'<";
      Element element0 = new Element(tag0, "dO6 .BPg?'<", (Attributes) null);
      element0.nextSibling();
      Element element1 = new Element(tag0, ".");
      element0.shallowClone();
      element0.text("dO6 .BPg?'<");
      // Undeclared exception!
      try { 
        element0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Element element0 = new Element("id");
      element0.nodelistChanged();
      element0.isBlock();
      element0.cssSelector();
      CDataNode cDataNode0 = new CDataNode("id");
      Element.preserveWhitespace(element0);
      Document document0 = Parser.parse("id", "id");
      Element element1 = document0.head();
      element1.text();
      document0.id();
      element1.getElementsByAttributeValueMatching("id", "");
      document0.val();
      element0.className();
      element0.dataNodes();
      document0.getElementsContainingOwnText("id");
      element0.getElementsByAttributeValueMatching("geu91kisr", "autofocus");
      document0.attr("geu91kisr", true);
      element0.getElementsByIndexGreaterThan((-2920));
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      String string0 = "id";
      Element element0 = new Element("id");
      element0.nodelistChanged();
      element0.isBlock();
      element0.cssSelector();
      Document document0 = Parser.parseBodyFragment("id", "id");
      String string1 = "F?I3:R)";
      element0.prepend("F?I3:R)");
      Element element1 = document0.appendText("nP7kn}E;+-||#`9gBd");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      LinkedHashSet<String> linkedHashSet1 = new LinkedHashSet<String>(linkedHashSet0);
      element1.classNames((Set<String>) linkedHashSet1);
      Document document1 = Parser.parseBodyFragment("textarea", "id");
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueMatching(" />", "F?I3:R)");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: F?I3:R)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Document document3 = (Document)document2.removeAttr("org.jsoup.nodes.Element$2");
      Document document4 = (Document)document2.appendChild(document1);
      document4.hasSameValue(document1);
      CDataNode cDataNode0 = new CDataNode("c-");
      Element.preserveWhitespace(document1);
      Document document5 = Parser.parse("c-", "org.jsoup.nodes.Element$2");
      document4.head();
      document5.text();
      document2.id();
      document3.getElementsByAttributeValueMatching("c-", "article");
      document1.val();
      document5.className();
      document1.dataNodes();
      document4.getElementsContainingOwnText("c-");
      document2.getElementsByAttributeValueMatching("article", "|WtFNOAz");
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("6k!;RtcL5p}eB\"t8_", "id");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document document2 = document1.outputSettings(document_OutputSettings2);
      Document document3 = document2.ownerDocument();
      document3.clone();
      document3.text("6k!;RtcL5p}eB\"t8_");
      Node node0 = document3.removeAttr("br");
      Element element0 = document0.appendChild(node0);
      document2.hasSameValue("6k!;RtcL5p}eB\"t8_");
      document3.nextElementSiblings();
      document3.firstElementSibling();
      CDataNode cDataNode0 = new CDataNode((String) null);
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("@eyZj5", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Document document2 = Parser.parseBodyFragment("#document", "h<*e[)/zO56JB");
      Document document3 = (Document)document2.val("h<*e[)/zO56JB");
      document1.doClone(document2);
      Document document4 = (Document)document0.addClass("#document");
      document3.hasAttributes();
      document2.doSetBaseUri("");
      document1.id();
      document4.appendElement("curEhbvEg");
      document0.getElementsByAttributeValueNot("textarea", "#root");
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Element element0 = new Element("&nbsp;");
      element0.text();
      Elements elements0 = element0.getElementsMatchingOwnText("&nbsp;");
      element0.val("q:T^pwzaw{8`");
      Document document0 = Parser.parseBodyFragment("", "");
      document0.doClone(element0);
      document0.addClass("&nbsp;");
      Parser parser0 = Parser.htmlParser();
      Document document1 = document0.parser(parser0);
      document1.getElementsByTag("org.jsoup.nodes.Attributes$Dataset$EntrySet");
      document1.getElementsContainingText("org.jsoup.nodes.Attributes$Dataset$EntrySet");
      // Undeclared exception!
      try { 
        document1.insertChildren(90, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Element element0 = new Element("&nbsp;");
      element0.text();
      element0.getElementsMatchingOwnText("&nbsp;");
      Pattern pattern0 = Pattern.compile("id");
      element0.getElementsMatchingOwnText(pattern0);
      Parser.xmlParser();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      String string0 = "{/I;_,H;9HGtL";
      Element element0 = new Element("{/I;_,H;9HGtL");
      element0.getElementsContainingText("org.jsoup.select.Evaluator$IsNthChild");
      element0.dataset();
      // Undeclared exception!
      try { 
        element0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Element element0 = document2.text("org.jsoup.nodes.Element$2");
      document2.removeAttr("org.jsoup.nodes.Element$2");
      element0.appendText("org.jsoup.nodes.Element$2");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      // Undeclared exception!
      try { 
        document2.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      String string0 = "h<\\*e[)/zO56JB";
      Document document0 = Document.createShell("h<*e[)/zO56JB");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("h<*e[)/zO56JB", "h<*e[)/zO56JB");
      document1.nodeName();
      Document document2 = Parser.parseBodyFragment("#document", "h<*e[)/zO56JB");
      document2.val("h<*e[)/zO56JB");
      Element element0 = document1.doClone(document2);
      document0.addClass("#document");
      Elements elements0 = element0.getElementsByTag("html");
      document1.getElementsContainingText("");
      // Undeclared exception!
      try { 
        document0.insertChildren(90, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Element element0 = new Element("id");
      element0.nodelistChanged();
      element0.isBlock();
      String string0 = Node.EmptyString;
      CDataNode cDataNode0 = new CDataNode("");
      Element.preserveWhitespace(element0);
      Document document0 = Parser.parse("id", "id");
      Element element1 = document0.head();
      String string1 = Node.EmptyString;
      document0.id();
      FileSystemHandling.createFolder((EvoSuiteFile) null);
      element1.getElementsByAttributeValueMatching("", "");
      document0.val();
      element0.className();
      element0.dataNodes();
      document0.getElementsByIndexGreaterThan(402);
      // Undeclared exception!
      try { 
        element0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse("8tk5LL9ib&00z`", "8tk5LL9ib&00z`");
      Document document1 = Document.createShell("8tk5LL9ib&00z`");
      Document document2 = document1.normalise();
      document1.appendElement("8tk5LL9ib&00z`");
      document1.clone();
      document1.ensureChildNodes();
      document2.dataset();
      document2.tagName("head");
      document2.getElementsContainingOwnText("");
      document0.id();
      String string0 = "noframes";
      DataNode dataNode0 = new DataNode("", "");
      // Undeclared exception!
      try { 
        document0.before((Node) dataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.noQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      Document document2 = document1.normalise();
      document2.clone();
      String string0 = "Dkh:WQjz-='";
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "Dkh:WQjz-='");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Element element0 = new Element("id");
      element0.nodelistChanged();
      element0.isBlock();
      element0.cssSelector();
      CDataNode cDataNode0 = new CDataNode("id");
      Element.preserveWhitespace(element0);
      Document document0 = Parser.parse("id", "id");
      Element element1 = document0.head();
      element1.text();
      document0.id();
      document0.nextElementSiblings();
      document0.val();
      element0.className();
      Element.preserveWhitespace(cDataNode0);
      // Undeclared exception!
      try { 
        document0.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parse("8tk5LL9ib&00z`", "8tk5LL9ib&00z`");
      Document document1 = Document.createShell("8tk5LL9ib&00z`");
      Document document2 = document1.normalise();
      Element element0 = document1.appendElement("8tk5LL9ib&00z`");
      document2.normalise();
      document1.ensureChildNodes();
      document2.dataset();
      element0.classNames();
      document2.addClass("ma.394]8Pk9NaHC0.");
      String string0 = "Tag name must not be empty.";
      document0.attr("ma.394]8Pk9NaHC0.", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document1.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      String string0 = "6k!;RtcL5p}eB\"t8_";
      Document document0 = parser0.parseInput("6k!;RtcL5p}eB\"t8_", "id");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
      Document document2 = document1.outputSettings(document_OutputSettings2);
      Document document3 = document2.ownerDocument();
      document3.clone();
      document3.text("6k!;RtcL5p}eB\"t8_");
      Node node0 = document3.removeAttr("br");
      document0.appendChild(node0);
      document2.hasSameValue("6k!;RtcL5p}eB\"t8_");
      document3.nextElementSiblings();
      document3.firstElementSibling();
      CDataNode cDataNode0 = new CDataNode((String) null);
      document3.updateMetaCharsetElement(true);
      CDataNode cDataNode1 = new CDataNode("textarea");
      cDataNode1.clearAttributes();
      // Undeclared exception!
      try { 
        cDataNode1.after((Node) cDataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      String string0 = "noQuirks";
      Tag tag0 = Tag.valueOf("noQuirks");
      CDataNode cDataNode0 = new CDataNode("noQuirks");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "noQuirks", attributes0);
      attributes0.remove("Insert position out of bounds.");
      String string1 = "org.jsoup.nodes.Element$NodeList";
      Tag.valueOf("org.jsoup.nodes.Element$NodeList");
      Element element0 = formElement0.prependText("org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
      try { 
        element0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      document2.removeAttr("org.jsoup.nodes.Element$2");
      Element element0 = document2.appendChild(document1);
      element0.hasSameValue(document1);
      document0.childNodesAsArray();
      String string0 = "";
      Document document3 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Element element1 = document3.prepend("CdY7V8");
      element1.appendText("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      element1.classNames((Set<String>) linkedHashSet0);
      document0.getElementsByAttributeValueMatching("optgroup", "P4PG=F;dbO-tHp");
      Pattern pattern0 = Pattern.compile("Z*X", 382);
      document3.getElementsMatchingText(pattern0);
      StringBuilder stringBuilder0 = new StringBuilder("NSq^+epaUR^+)]S4A");
      stringBuilder0.append((CharSequence) "");
      // Undeclared exception!
      try { 
        stringBuilder0.insert((-1251), 2);
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
         //
         // String index out of range: -1251
         //
         verifyException("java.lang.AbstractStringBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Document.createShell("gEu91kisr");
      Document document1 = document0.normalise();
      Element element0 = document1.appendElement("gEu91kisr");
      element0.ensureChildNodes();
      String string0 = "id";
      Pattern pattern0 = Pattern.compile("0a>hw\"qq");
      document1.getElementsMatchingOwnText(pattern0);
      element0.id();
      document0.getElementsContainingOwnText("gEu91kisr");
      element0.parent();
      element0.unwrap();
      // Undeclared exception!
      try { 
        document0.after("org.jsoup.select.StructuralEvaluator$Parent");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      document2.removeAttr("");
      Element element0 = document2.appendChild(document1);
      element0.hasSameValue(document1);
      document0.childNodesAsArray();
      Document document3 = Parser.parseBodyFragment("", "");
      Element element1 = document3.prepend("CdY7V8");
      Element element2 = element1.appendText("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.classNames((Set<String>) linkedHashSet0);
      String string0 = "head";
      document1.getElementsByAttributeValueMatching("optgroup", "head");
      int int0 = 2147483645;
      Pattern pattern0 = Pattern.compile("CdY7V8", 2147483645);
      element2.getElementsMatchingText(pattern0);
      String string1 = null;
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$2";
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      document2.text("org.jsoup.nodes.Element$2");
      // Undeclared exception!
      try { 
        document0.wrap("org.jsoup.nodes.Element$2");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".");
      String string0 = "";
      Element element0 = new Element(tag0, "", (Attributes) null);
      element0.nextSibling();
      element0.removeClass("");
      element0.childNodes = null;
      element0.shallowClone();
      // Undeclared exception!
      try { 
        element0.text("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      String string0 = "8tk5LL9ib&00z`";
      Parser.parse("8tk5LL9ib&00z`", "8tk5LL9ib&00z`");
      Document document0 = Document.createShell("8tk5LL9ib&00z`");
      Document document1 = document0.normalise();
      Element element0 = document0.appendElement("8tk5LL9ib&00z`");
      Document document2 = (Document)document0.clone();
      document0.ensureChildNodes();
      Pattern.compile("nowrap");
      Pattern pattern0 = Pattern.compile("8tk5LL9ib&00z`");
      element0.getElementsMatchingOwnText(pattern0);
      document2.id();
      element0.getElementsContainingOwnText("Pattern syntax error: ");
      document2.parent();
      // Undeclared exception!
      try { 
        document1.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Document.createShell("gEu91kisr");
      Document document1 = document0.normalise();
      Element element0 = document1.appendElement("gEu91kisr");
      element0.clone();
      element0.ensureChildNodes();
      Pattern pattern0 = Pattern.compile("0a>hw\"qq");
      document1.getElementsMatchingOwnText(pattern0);
      element0.id();
      pattern0.split((CharSequence) "");
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueEnding("nth-last-of-type", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element$1");
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element$1", (-4701));
      String string0 = "";
      Pattern.compile("");
      pattern0.split((CharSequence) "org.jsoup.nodes.Element$1", 0);
      pattern0.splitAsStream("");
      String string1 = "";
      Document document0 = Parser.parse("", "");
      Element element1 = document0.text("org.jsoup.nodes.Element$1");
      element1.getElementsContainingOwnText("org.jsoup.nodes.Element$1");
      element0.parent();
      // Undeclared exception!
      try { 
        document0.unwrap();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("", "");
      Document document1 = document0.clone();
      String string1 = "";
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueStarting("", "W-~L]2azE$2?");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      String string0 = "8*\\=3,C[:";
      Document document0 = Document.createShell("8*=3,C[:");
      Document document1 = document0.clone();
      document0.getElementsByAttributeValue("8*=3,C[:", "8*=3,C[:");
      document1.nodeName();
      document0.empty();
      // Undeclared exception!
      try { 
        document1.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("s+", "p");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      document_OutputSettings1.escapeMode(entities_EscapeMode0);
      StringWriter stringWriter0 = new StringWriter();
      stringWriter0.append('A');
      document0.ensureChildNodes();
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("6k!;RtcL5p}eB\"t8_");
      Document document0 = parser0.parseInput((Reader) stringReader0, "6k!;RtcL5p}eB\"t8_");
      Document document1 = document0.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      Document document3 = document2.parser(parser0);
      Element element0 = document3.prepend("");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("6k!;RtcL5p}eB\"t8_", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      String string0 = "6k!;RtcL5p}eB\"t8_";
      StringReader stringReader0 = new StringReader("6k!;RtcL5p}eB\"t8_");
      Document document0 = parser0.parseInput((Reader) stringReader0, "6k!;RtcL5p}eB\"t8_");
      Document document1 = document0.clone();
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document2 = document1.quirksMode(document_QuirksMode0);
      // Undeclared exception!
      try { 
        document0.after((Node) document2);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      parser0.parseInput("s+", "p");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document0 = Parser.parse("p", "p");
      document0.getElementsByTag("p");
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Element element0 = new Element("id");
      element0.nodelistChanged();
      element0.isBlock();
      Document document0 = Document.createShell("id");
      document0.getElementsByAttributeValueNot(":has(el) subselect must not be empty", ":has(el) subselect must not be empty");
      document0.nodelistChanged();
      // Undeclared exception!
      try { 
        document0.is((String) null);
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      document2.removeAttr("org.jsoup.nodes.Element$2");
      Element element0 = document2.appendChild(document1);
      element0.hasSameValue(document1);
      document0.childNodesAsArray();
      Document document3 = Parser.parseBodyFragment("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      Element element1 = document3.prepend("CdY7V8");
      Element element2 = element1.appendText("");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      document0.classNames((Set<String>) linkedHashSet0);
      String string0 = "head";
      document1.getElementsByAttributeValueMatching("optgroup", "head");
      int int0 = 2147483645;
      Pattern pattern0 = Pattern.compile("CdY7V8", 2147483645);
      element2.getElementsMatchingText(pattern0);
      String string1 = null;
      StringBuilder stringBuilder0 = null;
      try {
        stringBuilder0 = new StringBuilder((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Document.createShell("gEu91kisr");
      Document document1 = document0.normalise();
      Element element0 = document1.appendElement("gEu91kisr");
      Element element1 = element0.clone();
      element0.ensureChildNodes();
      String string0 = "id";
      Pattern pattern0 = Pattern.compile("0a>hw\"qq");
      document1.getElementsMatchingOwnText(pattern0);
      element0.id();
      element1.getElementsContainingOwnText("");
      element1.parent();
      element0.unwrap();
      // Undeclared exception!
      try { 
        element1.after("org.jsoup.select.StructuralEvaluator$Parent");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Document.createShell("gEu91kisr");
      Document document1 = document0.normalise();
      Element element0 = document1.appendElement("gEu91kisr");
      element0.clone();
      element0.ensureChildNodes();
      document1.dataset();
      String string0 = "ma.394]8Pk9NaHC0.";
      Element element1 = document1.attr(".", "ma.394]8Pk9NaHC0.");
      element1.elementSiblingIndex();
      // Undeclared exception!
      try { 
        element1.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Document.createShell("gEu91kisr");
      Document document1 = document0.normalise();
      Element element0 = document1.appendElement("gEu91kisr");
      element0.clone();
      element0.ensureChildNodes();
      document1.dataset();
      document1.attr(".", "ma.394]8Pk9NaHC0.");
      Element element1 = new Element("gEu91kisr");
      document0.tagName("gEu91kisr");
      document1.cssSelector();
      document1.previousElementSiblings();
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "geu91kisr");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$2";
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Element element0 = document2.text("org.jsoup.nodes.Element$2");
      document2.removeAttr("org.jsoup.nodes.Element$2");
      Element element1 = element0.appendChild(document1);
      element1.hasSameValue(document1);
      element1.nextElementSiblings();
      // Undeclared exception!
      try { 
        element1.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag.valueOf("{V]*hvuc", parseSettings0);
      Attributes attributes0 = new Attributes();
      Document document0 = Parser.parse("1%o;97x", "1%o;97x");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parse("8tk5LL9ib&00z`", "8tk5LL9ib&00z`");
      Document document1 = Document.createShell("8tk5LL9ib&00z`");
      Document document2 = document1.normalise();
      document1.appendElement("8tk5LL9ib&00z`");
      document1.clone();
      document1.ensureChildNodes();
      document2.dataset();
      document2.addClass("ma.394]8Pk9NaHC0.");
      String string0 = "Tag name must not be empty.";
      document0.attr("ma.394]8Pk9NaHC0.", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document1.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("{V]*hvuc", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("", "");
      Attribute attribute0 = new Attribute(",#R>8I\"rRo7m7", "value", attributes0);
      Attributes attributes2 = attributes1.put(attribute0);
      Attributes attributes3 = attributes2.put("", true);
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element", attributes3);
      formElement0.previousElementSiblings();
      assertEquals("org.jsoup.nodes.Element", formElement0.baseUri());
      
      formElement0.prependElement("~:/gDe1H7x0");
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      formElement0.is((Evaluator) evaluator_IsEmpty0);
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      String string0 = "`V6&7c9ElfU1He";
      Document document0 = Parser.parseBodyFragment("`V6&7c9ElfU1He", "");
      Element element0 = document0.body();
      document0.title("`V6&7c9ElfU1He");
      document0.getElementsByAttributeValueNot("T", "`V6&7c9ElfU1He");
      element0.nodelistChanged();
      // Undeclared exception!
      try { 
        element0.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      String string0 = "8tk5LL9ib&00z`";
      Document document0 = Parser.parse("8tk5LL9ib&00z`", "8tk5LL9ib&00z`");
      // Undeclared exception!
      try { 
        document0.child(124);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 124, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      String string0 = "ul";
      Document document0 = Document.createShell("ul");
      int int0 = 60;
      document0.getElementsByIndexLessThan(60);
      String string1 = "                 ";
      String string2 = "3|vlM9DbU^#,W^Ny(R";
      MockFile mockFile0 = new MockFile("3|vlM9DbU^#,W^Ny(R");
      MockFile mockFile1 = null;
      try {
        mockFile1 = new MockFile(mockFile0, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFile", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.eleent$2", "org.jsoup.nodes.eleent$2");
      Document document1 = document0.clone();
      Document document2 = (Document)document1.removeAttr("org.jsoup.nodes.eleent$2");
      Document document3 = (Document)document1.appendChild(document0);
      Document document4 = Parser.parse("org.jsoup.nodes.eleent$2", "org.jsoup.nodes.eleent$2");
      document1.reparentChild(document3);
      document1.appendChild(document0);
      document3.nextElementSiblings();
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.element$2", 0);
      document3.getElementsMatchingText(pattern0);
      document2.toggleClass("org.jsoup.nodes.eleent$2");
      document2.previousElementSibling();
      Document document5 = (Document)document4.attr("7G[xs{%", true);
      Document document6 = (Document)document4.prependChild(document5);
      assertEquals("org.jsoup.nodes.eleent$2", document6.location());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Document.createShell("%`>crA{SZ9>}u}|Kg");
      Document document1 = document0.clone();
      String string0 = "";
      // Undeclared exception!
      try { 
        document1.getElementsByAttributeValueStarting("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Document.createShell("");
      Elements elements0 = document0.getElementsByClass("link");
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parse("jS_V", "id");
      document0.id();
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
      document_OutputSettings0.prettyPrint(false);
      document_OutputSettings0.prepareEncoder();
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.prettyPrint(false);
      document_OutputSettings1.outline(true);
      document_OutputSettings2.prepareEncoder();
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.base;
      Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.escapeMode(entities_EscapeMode0);
      int int0 = 0;
      document_OutputSettings1.indentAmount(0);
      Document document2 = document1.outputSettings(document_OutputSettings3);
      document2.clone();
      // Undeclared exception!
      try { 
        document2.getElementsByAttributeValueContaining("jS_V", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Parser.htmlParser();
      String string0 = "Qd8dm:USdkB0jA#QrqS";
      String string1 = "#";
      Document document0 = Document.createShell("Qd8dm:USdkB0jA#QrqS");
      Element element0 = new Element("Qd8dm:USdkB0jA#QrqS");
      Element element1 = document0.empty();
      element1.removeAttr("Qd8dm:USdkB0jA#QrqS");
      // Undeclared exception!
      try { 
        document0.removeChild(element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      String string0 = "`V6&7c9ElfU1He";
      String string1 = "";
      Document document0 = Parser.parseBodyFragment("`V6&7c9ElfU1He", "");
      document0.body();
      document0.title("`V6&7c9ElfU1He");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("", "`V6&7c9ElfU1He");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$2");
      Document document1 = document0.normalise();
      Document document2 = document1.clone();
      Element element0 = document2.text("org.jsoup.nodes.Element$2");
      document2.removeAttr("org.jsoup.nodes.Element$2");
      Element element1 = element0.appendChild(document1);
      element1.hasSameValue(document1);
      // Undeclared exception!
      try { 
        element1.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Document.createShell("gEu91kisr");
      Document document1 = document0.normalise();
      Element element0 = document1.appendElement("gEu91kisr");
      element0.clone();
      element0.ensureChildNodes();
      document1.dataset();
      Element element1 = document1.attr(".", "ma.394]8Pk9NaHC0.");
      // Undeclared exception!
      try { 
        element1.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      String string0 = "org.jsoup.nodes.Element$1";
      Element element0 = new Element("org.jsoup.nodes.Element$1");
      Pattern pattern0 = Pattern.compile("org.jsoup.nodes.Element$1", (-4701));
      String string1 = "";
      Pattern.compile("");
      pattern0.split((CharSequence) "org.jsoup.nodes.Element$1", 0);
      pattern0.splitAsStream("");
      pattern0.split((CharSequence) "");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueEnding("", "nth-last-of-type");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("N,\"8**Ra6Ise#$l;", parseSettings0);
      Attributes attributes0 = new Attributes();
      Tag.valueOf("N,\"8**Ra6Ise#$l;");
      Attributes attributes1 = attributes0.clone();
      Attributes attributes2 = attributes1.put("nev<Gfed]C8%p,", "org.jsoup.parser.ParseErrorList");
      String string0 = "=kDt0? n";
      Attributes attributes3 = attributes2.put("=kDt0? n", false);
      attributes0.remove(">");
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.parser.ParseErrorList", attributes3);
      String string1 = "<";
      attributes2.hasKey("<");
      formElement0.hasAttributes();
      attributes1.html();
      // Undeclared exception!
      try { 
        formElement0.addChildren(26, (Node[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".");
      String string0 = "";
      Element element0 = new Element(tag0, "", (Attributes) null);
      element0.nextSibling();
      element0.removeClass("");
      element0.shallowClone();
      element0.text("");
      // Undeclared exception!
      try { 
        element0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      String string0 = "";
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      String string0 = "&nbsp;";
      Element element0 = new Element("&nbsp;");
      element0.html();
      Element element1 = element0.appendText("");
      element0.text();
      element0.getElementsMatchingOwnText("&nbsp;");
      // Undeclared exception!
      try { 
        element1.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("P2Sj4@x~[?T2uyt&f", "P2Sj4@x~[?T2uyt&f");
      // Undeclared exception!
      try { 
        document0.createElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("'8z'", parseSettings0);
      Attributes attributes0 = new Attributes();
      String string0 = "]QP~";
      Attribute attribute0 = new Attribute("]QP~", "]QP~");
      Attributes attributes1 = attributes0.put(attribute0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.select.Evaluator$IsLastOfType", attributes1);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      String string0 = "id";
      Element element0 = new Element("id");
      element0.nodelistChanged();
      element0.isBlock();
      element0.cssSelector();
      CDataNode cDataNode0 = new CDataNode("id");
      // Undeclared exception!
      try { 
        cDataNode0.after((Node) element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      String string0 = "yW](_STK{t2";
      Document document0 = new Document("yW](_STK{t2");
      document0.children();
      // Undeclared exception!
      try { 
        document0.select("yW](_STK{t2");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'yW](_STK{t2': unexpected token at 'yW](_STK{t2'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.helper.W3CDom", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("org.jsoup.helper.W3CDom");
      String string0 = "4JL.ZCl@3 vb^0";
      parseSettings0.normalizeTag("4JL.ZCl@3 vb^0");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.helper.W3CDom", attributes0);
      pseudoTextElement0.nodelistChanged();
      String[] stringArray0 = new String[4];
      stringArray0[0] = "org.jsoup.helper.W3CDom";
      stringArray0[1] = "4JL.ZCl@3 vb^0";
      stringArray0[2] = "";
      stringArray0[3] = "4JL.ZCl@3 vb^0";
      attributes0.vals = stringArray0;
      // Undeclared exception!
      try { 
        pseudoTextElement0.before("KUqo$M+eLqj#Z;");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Tag tag0 = Tag.valueOf("8\"%(42Kk)");
      Element element0 = new Element(tag0, "8\"%(42Kk)");
      String string0 = "";
      Element element1 = null;
      try {
        element1 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("s+", "p");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Entities.EscapeMode entities_EscapeMode0 = Entities.EscapeMode.extended;
      Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.escapeMode(entities_EscapeMode0);
      Document document1 = document0.outputSettings(document_OutputSettings2);
      Element element0 = document1.createElement("area");
      Element element1 = element0.removeClass("p");
      assertEquals("p", element1.baseUri());
      assertEquals(1, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, ">6p{u");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }
}
