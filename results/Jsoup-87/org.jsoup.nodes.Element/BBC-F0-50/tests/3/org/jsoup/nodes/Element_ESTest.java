/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 03:08:35 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.FilterOutputStream;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = new Element("1n)bWirMMI9wK) 5BS");
      document0.setParentNode(element0);
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X(MP6F49L[", "X(MP6F49L[");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf(" $}#G@mE;] Q!yO^=s>", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, " $}#G@mE;] Q!yO^=s>", attributes0);
      formElement0.doSetBaseUri("[^-a-zA-Z0-9_:.]");
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("9qg6", "org.jsoup.nodes.TextNode");
      document0.wrap("jHaH?+'v?1l'1wl&");
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = new Document("F}{ykh..3oCH");
      Element element0 = document0.appendElement("br");
      element0.wrap("<br>");
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Document.createShell("span");
      Element element0 = document0.body();
      Element element1 = element0.prepend("/STNH;w");
      element1.wrap("eym=.SA:~573I|C8s");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Document.createShell("iI=[U");
      document0.setSiblingIndex((-1));
      document0.val(">");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Document.createShell("iI=[U");
      Element element0 = document0.val(">");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.Toien$pOF", "org.jsoup.parser.Toien$pOF");
      document0.setSiblingIndex((-1790090686));
      document0.toggleClass("");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" u]3i-C[[<>W5B", " u]3i-C[[<>W5B");
      Element element0 = document0.body();
      element0.toggleClass(" u]3i-C[[<>W5B");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Document.createShell("</");
      Element element0 = document0.body();
      element0.text("");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parse("Z2ad-$mTKl~`fE", "org.jsoup.nodes.BooleanAttribute");
      document0.text("org.jsoup.nodes.BooleanAttribute");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = new Document("body");
      document0.siblingIndex = (-1982);
      document0.tagName("body");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("an", "an");
      Element element0 = document0.appendElement("an");
      element0.tagName("RY");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = new Document("body");
      document0.tagName("body");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("aq", "aq");
      document0.tagName(">e]lJ.");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("form", "form");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("F}{ykh..3oCH", "F}{ykh..3oCH");
      Element element0 = document0.appendElement("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parse("la]{", "la]{");
      Element element0 = document0.head();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("F}{ykh..3oCH", "F}{ykh..3oCH");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      Element element0 = document0.appendElement("body");
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Tag tag0 = Tag.valueOf("KAGl-");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "KAGl-", attributes0);
      pseudoTextElement0.selectFirst("KAGl-");
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell("tabCe");
      document0.appendElement("tabCe");
      document0.selectFirst("tabCe");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell("HM#}$m(54ZpL7");
      Element element0 = document0.text("value");
      element0.selectFirst("body");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X(MP6F49L[", "X(MP6F49L[");
      document0.select("Oc#U");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.select("head");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X(MP6F49L[", "X(MP6F49L[");
      Element element0 = document0.appendElement("?z}O6");
      element0.removeClass("dXv/a]e\"ae+{R({`");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parse("aq", "aq");
      document0.siblingIndex = (-3060);
      document0.removeClass(" >a@#?flXUhj pk");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parse("la]{", "la]{");
      Element element0 = document0.head();
      element0.removeClass("d_z$i4/pic'pt");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = new Document("#8blq-n<Hg}<bt!");
      Tag tag0 = Tag.valueOf(")<~u}{rM#nz");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "#8blq-n<Hg}<bt!", attributes0);
      document0.appendChild(formElement0);
      Element element0 = document0.appendElement("`c}@:6f^+!U=F=0y");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.appendElement("CW@2g^");
      element0.prependText("dymv]ldap");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Document.createShell("Tx.'5+%8Uk");
      Element element0 = document0.head();
      element0.prependText("Tx.'5+%8Uk");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("colgroup", " />");
      document0.prependElement("colgroup");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("an", "an");
      Element element0 = document0.appendElement("an");
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Document.createShell("hZ7^PqaF");
      Element element0 = document0.head();
      DataNode dataNode0 = new DataNode("hZ7^PqaF");
      element0.prependChild(dataNode0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse("aq", "aq");
      document0.setSiblingIndex((-4032));
      document0.prepend("DoctypeSystemIdentifier_singleQuoted");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = new Document("xBJHrM");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.prepend("");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parse("la]{", "la]{");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X(MP6F49L[", "X(MP6F49L[");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|AjAM~", "id");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.");
      Element element0 = new Element(tag0, "Children collection to be inserted must not be null.");
      Element element1 = element0.html("8S9X(s");
      element0.appendTo(element0);
      element1.parent();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parse("fM;T&oe+#?AegQ", ":containsData(");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Element element0 = document0.appendElement("V-Ltb?U !`XEb%");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("`9qg6", "org.jsoup.nodes.TextNode");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = new Document("");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X(MP6F49L[", "X(MP6F49L[");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",><dyMv]lDap<qZ!LG", ",><dyMv]lDap<qZ!LG");
      Element element0 = document0.head();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|sbwe", "'u");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      CDataNode cDataNode0 = new CDataNode("html");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "class", attributes0);
      Evaluator.IsEmpty evaluator_IsEmpty0 = new Evaluator.IsEmpty();
      pseudoTextElement0.is((Evaluator) evaluator_IsEmpty0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("UB", "Pattern syntax error: ");
      Evaluator.Tag evaluator_Tag0 = new Evaluator.Tag("UB");
      document0.is((Evaluator) evaluator_Tag0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("an", "an");
      Element element0 = document0.appendElement("an");
      element0.is("an");
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("org.jsoup.parser.parser", "Children collection to be inserted must not be null.");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Element element0 = new Element("aq");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) element0;
      element0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("av", "av");
      Element element0 = document0.appendElement("av");
      Elements elements0 = document0.getElementsByAttributeValueMatching("#QrOZegM", "av");
      element0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("org.jsoup.nodes.TextNode", "org.jsoup.nodes.TextNode");
      Element element0 = document0.appendElement("CW@2g^");
      element0.html("CW@2g^");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("aq", "aq");
      document0.siblingIndex = (-2551);
      document0.html("java.lang.string@0000000038 utf8");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = new Document("br");
      Element element0 = document0.appendElement("blockquote");
      element0.html("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = new Document("");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ikZC#7oCb7ZK$J7`ZP]", "ikZC#7oCb7ZK$J7`ZP]");
      Element element0 = document0.appendElement("an");
      element0.html((MockPrintStream) null);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/", "/");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = new Document("/");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Element element0 = new Element("canvas");
      element0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X(MP6F49L[", "X(MP6F49L[");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vl+g)*i", "Vl+g)*i");
      Pattern pattern0 = Pattern.compile("Children collection to be inserted must not be null.");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("textarea", "Tx.'5+%8Uk");
      document0.prependText("#root");
      Pattern pattern0 = Pattern.compile("#root");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parse("aq", "aq");
      document0.getElementsMatchingText("aq");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parse(")<~u}{rM#nz", "dymv]ldap");
      Pattern pattern0 = Pattern.compile("#", 2);
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("col", "P}@iJ%}m$L;4/j$");
      document0.getElementsContainingText("");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parse("la]{", "la]{");
      document0.getElementsByTag("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.");
      Element element0 = new Element(tag0, "Children collection to be inserted must not be null.");
      element0.getElementsByTag("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parse(",><dyMv]lDap<qZ!LG", ",><dyMv]lDap<qZ!LG");
      document0.getElementsByIndexLessThan((-3545));
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parse("7n\"nb=}", "s+");
      document0.getElementsByIndexGreaterThan(76);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Document.createShell("i");
      document0.getElementsByIndexEquals(1608);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parse(",><dyMv]lDap<qZ!LG", "Bu+Ni#;z+5~btuOQ");
      document0.getElementsByAttributeValueNot("org.jsoup.nodes.Attributes$1", "org.jsoup.nodes.Attributes$1");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf(",j-4\"*GtrrOjKf-c", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put(",j-4\"*GtrrOjKf-c", "");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ",j-4\"*GtrrOjKf-c", attributes1);
      Pattern pattern0 = Pattern.compile("", 6647);
      pseudoTextElement0.getElementsByAttributeValueMatching(",j-4\"*GtrrOjKf-c", pattern0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = new Document("#8blq-n<Hg}<bt!");
      document0.getElementsByAttributeValue("#8blq-n<Hg}<bt!", "#8blq-n<Hg}<bt!");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Document.createShell("selected");
      document0.attr("selected", true);
      document0.getElementsByAttributeStarting("selected");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Element element0 = new Element("[s!a:Wa1p*z{:Yt");
      element0.attr("[s!a:Wa1p*z{:Yt", true);
      element0.getElementsByAttribute("[s!a:Wa1p*z{:Yt");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("form", "form");
      Element element0 = document0.prependElement("P}0Au8zs9FsXhL!xX");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("an", "an");
      Element element0 = document0.appendElement("an");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.setParentNode(document0);
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.limitedQuirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      List<Node> list0 = document0.siblingNodes();
      document1.childNodes = list0;
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("9qg6", "org.jsoup.nodes.TextNode");
      Element element0 = document0.appendElement("s+");
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Element element0 = document0.head();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("F}{ykh..3oCH", "F}{ykh..3oCH");
      document0.setParentNode(document0);
      document0.empty();
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5n", "strong");
      Element element0 = document0.appendElement("5n");
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Document.createShell("HM#}$m(54ZpL7");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ":nth-child(%d)");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Element element0 = new Element("_Ip3EsG(");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Document.createShell(",.zkrOKC6TM9D");
      Element element0 = document0.body();
      Set<String> set0 = document0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parse(",><dyMv]lDap<qZ!LG", ",><dyMv]lDap<qZ!LG");
      Element element0 = document0.toggleClass("system");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("SYzf", parseSettings0);
      Element element0 = new Element(tag0, "Children collection to be inserted must not be null.");
      element0.toggleClass("");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("av", "av");
      Element element0 = document0.appendElement("av");
      element0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell(" ");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Tag tag0 = Tag.valueOf("qpAuy]`%6");
      Document document0 = Parser.parse(")<~u}{rM#nz", "dymv]ldap");
      Attributes attributes0 = new Attributes();
      document0.appendElement("y!L;cbz$+");
      LinkedHashSet<FormElement> linkedHashSet0 = new LinkedHashSet<FormElement>();
      FormElement formElement0 = new FormElement(tag0, "qpAuy]`%6", attributes0);
      linkedHashSet0.add(formElement0);
      document0.insertChildren(2, (Collection<? extends Node>) linkedHashSet0);
      document0.child(2);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Document.createShell("tag name must not be empty.");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s", "A:I;edrP45}-4f");
      Element element0 = document0.head();
      Element element1 = element0.doClone(document0);
      element1.before((Node) element0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#", "#");
      document0.setParentNode(document0);
      TextNode textNode0 = TextNode.createFromEncoded("org.jsoup.nodes.Element");
      document0.before((Node) textNode0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell("e?-qDb/{}%wUu2");
      Element element0 = new Element("_@]KC");
      element0.setParentNode(document0);
      element0.before("e?-qDb/{}%wUu2");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X(MP6F9L[", "X(MP6F9L[");
      Element element0 = document0.head();
      element0.before("");
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Document.createShell("i");
      Element element0 = document0.appendElement("checkbox");
      element0.prepend("checkbox");
      element0.before("i");
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parse("7n\"nb=}", "s+");
      document0.siblingIndex = 3137;
      document0.attr("7n\"nb=}", true);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Document.createShell("e?sqUDb/{}%wUu2");
      document0.siblingIndex = (-246);
      document0.attr("e?sqUDb/{}%wUu2", true);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("la]{", "la]{");
      Element element0 = document0.head();
      element0.attr("la]{", true);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.;arser.Toien$|OF", "org.jsoup.;arser.Toien$|OF");
      document0.setSiblingIndex((-2907));
      document0.attr("q3lyv6b^9zwqu\"cyc", "=9H%YOc_8?Gm");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Document.createShell(",><dyMv]lDap<qZ!LG");
      Element element0 = document0.head();
      element0.attr("&)d<@rce$`tjc$d_", ",><dyMv]lDap<qZ!LG");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":nth-child(%d)", ":nth-child(%d)");
      Element element0 = document0.body();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Element element0 = document0.appendElement("V-Ltb?U !`XEb%");
      element0.appendText("");
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Tag tag0 = Tag.valueOf("head");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "]UsX%", attributes0);
      formElement0.appendText("|b@Fz H?2JnfO|_]wG");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("checnhod", "&@~&a");
      Element element0 = document0.appendElement("html");
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("table");
      Element element0 = document0.appendElement("br");
      Element element1 = element0.attr("Insert position out of bounds.", "UZgBUmtQ7%*Mks(+&n");
      element1.append("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("q", "q");
      document0.siblingIndex = (-1096);
      document0.append("q");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Element element0 = new Element("org.jsoup.parser.Token");
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = new Document("#8blq-n<Hg}<bt!");
      Element element0 = document0.appendElement("keygen");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.appendElement("Dt");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("col", "P}@iJ%}m$L;4/j$");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.parentNode = (Node) document0;
      Element element0 = document0.appendText("#root");
      element0.after(document1.parentNode);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = new Document("#8blq-n<Hg}<bt!");
      Element element0 = document0.appendElement("br");
      element0.after("]a8W EDqL|y_STY");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parse("1j5j*kaI", "");
      Element element0 = document0.body();
      element0.after("60J?wP3jkZ(");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = new Document("xBJHrM");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      Element element1 = element0.val("xBJHrM");
      element1.addClass("xBJHrM");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("8)4p<(=)~Nq98:F", "8)4p<(=)~Nq98:F");
      document0.siblingIndex = (-264);
      document0.addClass("8)4p<(=)~Nq98:F");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = new Document("xBJHrM");
      document0.normalise();
      Element element0 = document0.head();
      element0.addClass("xBJHrM");
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("col", "P}@iJ%}m$L;4/j$");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      document0.wrap("s");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parse(",><dIyMv]lDak<qZ!LG", ",><dIyMv]lDak<qZ!LG");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Document.createShell("");
      DataNode dataNode0 = new DataNode("", "");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.wrap("#document");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parse(")<~u}{rM#nz", "dymv]ldap");
      Element element0 = document0.appendElement("dymv]ldap");
      element0.before((Node) document0);
      // Undeclared exception!
      document0.val("qpAuy]`%6");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("class", "class");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.text("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element$2");
      // Undeclared exception!
      try { 
        element0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parse("q", "q");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.tagName(" Xf_G3C*)");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      Element element0 = document0.appendElement("V-Ltb?U !`XEb%");
      document0.empty();
      // Undeclared exception!
      try { 
        element0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = new Document("_Ip3EsG(");
      // Undeclared exception!
      try { 
        document0.selectFirst("_Ip3EsG(");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '_Ip3EsG(': unexpected token at '_Ip3EsG('
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parse("Z2ad-$mTKl~`fE", "8S9X(s");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Tag tag0 = Tag.valueOf(".yoI>");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ".yoI>", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.select(".yoI>");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = new Document(",><dyMv]zDap<qZ!LG");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Parser.parse("an", "\"GSI1#9HzID4DSH%l[b");
      TextNode textNode0 = TextNode.createFromEncoded("_Ip3EsG(", "tw5m&@G},7;$(LGV72");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "hf{hFcSU{J");
      TextNode textNode0 = new TextNode("", "");
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.lang.string@0000000048", "chocnhkd");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("java.lang.string@0000000048", false);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(document0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("col", "P}@iJ%}m$L;4/j$");
      Element element0 = document0.removeClass("#root");
      List<Node> list0 = Parser.parseFragment("#root", element0, ":nth-child(%d)", (ParseErrorList) null);
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependText("html");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("<gu]vO[4r=F/lR'>Je", "<gu]vO[4r=F/lR'>Je");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prependElement("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("t\"", "t\"");
      Element element0 = document0.attr("form", false);
      List<Node> list0 = document0.childNodes();
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependElement("org.jsoup.nodes.Element$NodeList");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Tag tag0 = Tag.valueOf("(n0cU/X<\"I%qx6fYYf");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "(n0cU/X<\"I%qx6fYYf", attributes0);
      // Undeclared exception!
      try { 
        element0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Tag tag0 = Tag.valueOf("KP*j57vJ`Hpf1}1");
      Element element0 = new Element(tag0, "i0");
      CDataNode cDataNode0 = new CDataNode("QlBV+:,kqX^9l)~WSi");
      Node node0 = cDataNode0.doClone(element0);
      // Undeclared exception!
      try { 
        element0.prependChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X(MP6F49L[", "X(MP6F49L[");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse(",><dyMv]lDap<qZ!LG", "Bu+Ni#;z+5~btuOQ");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.prepend("declare");
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parse("Z2ad-$mTKl~`fE", "Z2ad-$mTKl~`fE");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Document.createShell("[a-zA-Z:]--zAZ0-9_:.]*");
      CDataNode cDataNode0 = new CDataNode("T9cPf<98XG");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.parent();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("F%{BdkP..o-CH", "F%{BdkP..o-CH");
      StringBuilder stringBuilder0 = new StringBuilder(162);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(662);
      // Undeclared exception!
      document0.outerHtmlTail(stringBuilder0, 662, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Element element0 = new Element("chocnhod");
      char[] charArray0 = new char[0];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlTail(charBuffer0, 0, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parse("la]{", "la]{");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 5608, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "q3lYV6B^9ZWqU\"cYC");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("q3lYV6B^9ZWqU\"cYC");
      FilterOutputStream filterOutputStream0 = new FilterOutputStream(mockFileOutputStream0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(filterOutputStream0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintWriter0, (-1066), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$2", "org.jsoup.nodes.Element$2");
      File file0 = MockFile.createTempFile("v;alue", (String) null);
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(file0);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(mockFileOutputStream0);
      outputStreamWriter0.close();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(outputStreamWriter0, (-1903), document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("checnhod", "checnhod");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("checnhod");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1144);
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintWriter0, 1144, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("math", "math");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "math");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 60, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parse("aq", "aq");
      CharBuffer charBuffer0 = CharBuffer.allocate(4);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 4, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Tag tag0 = Tag.valueOf("]Y&G`&Lmuri:Mv+&Ec");
      StringBuilder stringBuilder0 = new StringBuilder(0);
      CDataNode cDataNode0 = new CDataNode("#V");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "`8T8Yrw{,B10rO", attributes0);
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(stringBuilder0, (-72), (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Document.createShell("8");
      char[] charArray0 = new char[6];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 1, 1);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, (-697), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("col", "P}@iJ%}m$L;4/j$");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, 2635, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parse("q", "q");
      DataNode dataNode0 = new DataNode("97\"?^4+I_j2k,VH\u000FU");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Attributes attributes0 = document0.attributes();
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("Pattern syntax error: ", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "head", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      DataNode dataNode0 = new DataNode("<html>\n <head></head>\n <body></body>\n</html>", "");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$aq", "$aq");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.is((Evaluator) null);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = new Document("");
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_IsRoot0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parse(",><dyMv]lDap<qZ!LG", "Bu+Ni#;z+5~btuOQ");
      // Undeclared exception!
      try { 
        document0.is("[VBl1SIx!.Y+$[7f8");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Did not find balanced marker at 'VBl1SIx!.Y+$[7f8'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parse("q", "q");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.is("quirks");
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parse("dymv]ldap", "34yaV''");
      Element element0 = document0.appendElement(",><dyMv]lDap<qZ!LG");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) element0;
      // Undeclared exception!
      try { 
        document0.insertChildren(2, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("an", "an");
      document0.childNodes = null;
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-2), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("col", "P}@iJ%}m$L;4/j$");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      document0.html("on");
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parse("Z2ad-$mTKl~`fE", "org.jsoup.nodes.BooleanAttribute");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("an", "an");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parse("q", "q");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html((CharArrayWriter) null);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parse(",><dyMv]lDap<qZ!LG", "Bu+Ni#;z+5~btuOQ");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("SYzf", parseSettings0);
      Element element0 = new Element(tag0, "Children collection to be inserted must not be null.");
      // Undeclared exception!
      try { 
        element0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Element element0 = new Element("A!1tx\"8yH9");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Document.createShell("X(MP6F49L[");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("X(MP6F49L[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: X(MP6F49L[
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parse("v(c", "xqh\"CTEH$SVN7_cj)`");
      Comment comment0 = new Comment(")k");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("@");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parse(")<~u}{rM#nz", "dymv]ldap");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse("9 j", "9 j");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Element element0 = new Element("/%>C,8");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText("{2^/GMv{Q-Z}e");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: {2^/GMv{Q-Z}e
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("^,j4\"*GrrOKKf-c", "^,j4\"*GrrOKKf-c");
      TextNode textNode0 = new TextNode("^,j4\"*GrrOKKf-c", "NLnaK");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText(":%s(%dn%+d)");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aq", "j!Joy$?15=v*:sQ");
      Element element0 = document0.appendElement("A9/");
      element0.siblingIndex = (-1);
      // Undeclared exception!
      document0.getElementsContainingOwnText("`-(;};m&s");
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.head();
      element0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("{ve`");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parse("ODnqUnPVGQSy3~$mL4", "ODnqUnPVGQSy3~$mL4");
      TextNode textNode0 = new TextNode("T{");
      document0.parentNode = (Node) textNode0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText((String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("tx.'5+%8uk", "tx.'5+%8uk");
      Element element0 = document0.appendElement("an");
      element0.siblingIndex = (-1650);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("|}MAKJeqlqKY(yGs($O");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("'\", #", "org.jsoup.nodes.Element$NodeList");
      // Undeclared exception!
      try { 
        document0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("\n * ", "chocnhkd");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.childNodes = null;
      // Undeclared exception!
      try { 
        document1.getElementsByIndexLessThan(3464);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      TextNode textNode0 = new TextNode("", "");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan((-2606));
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("F%{dkP..o-CH", "F%{dkP..o-CH");
      document0.setSiblingIndex((-744));
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.getElementsByIndexGreaterThan((-1104));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("an", "\"GSI1#9HzID4DSH%l[b");
      TextNode textNode0 = TextNode.createFromEncoded("_Ip3EsG(", "tw5m&@G},7;$(LGV72");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals(26);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("tx.'5+%8uk", "tx.'5+%8uk");
      Element element0 = document0.appendElement("an");
      element0.siblingIndex = (-1650);
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals((-1650));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "aE*.Z:;+", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Bu+Ni#;z+5~btuOQ", "Bu+Ni#;z+5~btuOQ");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting((String) null, "^j0");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("V-Ltb?U !`XEb%", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X(R)MP6F49L[", "X(R)MP6F49L[");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching(" b;MB|ux;Ec)MV0Lq", "X(R)MP6F49L[");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: X(R)MP6F49L[
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = new Document("#8blq-n<Hg}<bt!");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "+b2Wk6");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Zxg>2", "org.jsoup.parser.parser");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Tag tag0 = Tag.valueOf("0'");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "0'", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Document.createShell("</");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Document.createShell("e?-qDb/{}%wUu2");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",><$8Mv]lDap<qZ!LG", ",><$8Mv]lDap<qZ!LG");
      DocumentType documentType0 = new DocumentType("[%s=%s]", "&a_uS", "[%s=%s]", "?issg");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.");
      Element element0 = new Element(tag0, "Children collection to be inserted must not be null.");
      element0.appendTo(element0);
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("T", "T");
      TextNode textNode0 = new TextNode((String) null);
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Document.createShell("pD");
      Element element0 = document0.head();
      element0.siblingIndex = (-1323);
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parse("q", "q");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("colgroup", " />");
      // Undeclared exception!
      try { 
        document0.child(952);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 952, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Document.createShell("tablD");
      Element element0 = document0.appendElement("br");
      element0.siblingIndex = 3236;
      // Undeclared exception!
      try { 
        element0.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 3236, Size: 2
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("q", "q");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.before("q");
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Document.createShell("e?sqUDb/{}%wUu2");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("java.lang.string@0000000086 cp367 csascii iso-ir-6 class iso_646.irv:1983 ansi_x3.4-1986 ascii7 default iso_646.irv:1991 iso646-us ibm367 646 us", "class", true);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.before("br");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "^c\"{[\"(9eeln2", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("col", "P}@iJ%}m$L;4/j$");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document document1 = document0.outputSettings(document_OutputSettings0);
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      document0.attr("P}@iJ%}m$L;4/j$", "6'_HS$Us5};z:rbc<");
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("aq", "aq");
      // Undeclared exception!
      try { 
        document0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Whe.hod", "6ccTe");
      Element element0 = new Element("6ccTe");
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        document0.appendTo(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.");
      Element element0 = new Element(tag0, "e");
      // Undeclared exception!
      try { 
        element0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("|AjAM~", "id");
      Element element0 = document0.removeClass("id");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.appendText("value");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X(MP6F49L[", "X(MP6F49L[");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.appendElement("$%K+}G8U/LQ;R9cijo:");
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = new Document(",HwDg8>9 ?F^s%R.");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput(",HwDg8>9 ?F^s%R.", document0, ",HwDg8>9 ?F^s%R.");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement("org.jsoup.nodes.Element$2");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("aq", "aq");
      parser0.settings((ParseSettings) null);
      // Undeclared exception!
      try { 
        document0.appendElement("aq");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("", "");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Element element0 = new Element("chocnhkd");
      CDataNode cDataNode0 = new CDataNode("bflxA!.,L|8?)HR ?U");
      Node node0 = cDataNode0.doClone(element0);
      // Undeclared exception!
      try { 
        element0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Document.createShell(".Dd*rVnU");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Document.createShell("{T;3[");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.append("Q<xW+xld;x4lVG.");
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("d_z$i4/pic'pt", "d_z$i4/pic'pt");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = new Document("chocnhod");
      DataNode dataNode0 = new DataNode("X\"70rBl^s3");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.append(";OR+cfKkB97ThCg*$\"");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("s+", "s+");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      try { 
        element0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parse("q", "q");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.after("KlG&cj8\"2ol4>02O!Rt");
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("checnhod", "body");
      CDataNode cDataNode0 = new CDataNode("body");
      Document document1 = (Document)document0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        document1.after("#");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Element element0 = new Element("LD( fLz=12");
      // Undeclared exception!
      try { 
        element0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Tag tag0 = Tag.valueOf("version");
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null, (Attributes) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("{t9'YaS^66ds3", parseSettings0);
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X(MP6F49L[", "X(MP6F49L[");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(46);
      document0.html(charArrayWriter0);
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = new Document("body");
      document0.hasClass("body");
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X(MP6F49L[", "X(MP6F49L[");
      Locale locale0 = Locale.ROOT;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Element element0 = new Element("canvas");
      element0.append(">DB47w%SJeZXX2");
      element0.data();
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.appendText("");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("F-Kf9B:`^M!pa0", "F-Kf9B:`^M!pa0");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Element element0 = new Element("aq");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#8blq-n<Hg}<bt!", "#8blq-n<Hg}<bt!");
      Element element0 = document0.appendElement("y!L;cbz$+");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = new Document("#8blq-n<Hg}<bt!");
      Element element0 = document0.appendElement("y!L;cbz$+");
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parse(")<~u}{rM#nz", "dymv]ldap");
      Element element0 = document0.appendElement("2");
      Element element1 = element0.val("qpAuy]`%6");
      element1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Document.createShell("width must be > 0");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.setParentNode(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.");
      Element element0 = new Element(tag0, "Children collection to be inserted must not be null.");
      Document document0 = Document.createShell("pD");
      element0.appendTo(document0);
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("6ccT", "6ccT");
      document0.setParentNode(document0);
      document0.previousElementSiblings();
      Pattern pattern0 = Pattern.compile("org.jsoup.select.evaluator$attributewithvaluenot");
      document0.getElementsMatchingOwnText(pattern0);
      document0.getElementsByIndexLessThan(124);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parse("la]{", "la]{");
      Element element0 = document0.head();
      element0.append("la]{");
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("an", "an");
      document0.toggleClass("an");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parse(",><dyMv]lDap<qZ!LG", ",><dyMv]lDap<qZ!LG");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Document.createShell("qG");
      document0.ownText();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X(MP6F49L[", "X(MP6F49L[");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parse(",><dyMv]lDap<qZ!LG", ",><dyMv]lDap<qZ!LG");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = new Document("org.jsoup.parser.Token$EOF");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parse(",><dyMv]lDap<qZ!LG", ",><dyMv]lDap<qZ!LG");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Document.createShell("e?sqUDb/{}%wUu2");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(",j4\"*GrrOKKf-c", ",j4\"*GrrOKKf-c");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsContainingText(",j4\"*GrrOKKf-c");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Document.createShell("br");
      StringBuilder stringBuilder0 = new StringBuilder(4);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuilder0, 141, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",><$8Mv]lDap<qZ!LG", ",><$8Mv]lDap<qZ!LG");
      // Undeclared exception!
      try { 
        document0.html((MockPrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parse("la]{", "la]{");
      document0.appendElement("keygen");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Element element0 = new Element("br");
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Document.createShell("");
      MockFileWriter mockFileWriter0 = new MockFileWriter("(,G-38z@S");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(mockPrintWriter0, (-1879596898), document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Element element0 = new Element("textarea");
      // Undeclared exception!
      try { 
        element0.val((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X(MP6F49L[", "X(MP6F49L[");
      Element element0 = document0.appendElement("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = new Document("org.jsoup.parser.Token$EOF");
      document0.toggleClass("");
      document0.toggleClass("org.jsoup.parser.Token$EOF");
      document0.hasClass("org.jsoup.parser.Token$EOF");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Document.createShell("m!'");
      document0.toggleClass("or.sop.select.aluator$Id");
      document0.toggleClass("");
      document0.hasClass("hg}");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Document.createShell("e?sqUDb/{}%wUu2");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      Element element0 = document0.classNames(set0);
      element0.hasClass("java.lang.string@0000000038");
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Document.createShell("QlzZmt-v\"LB@T4");
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
      document0.hasClass("#root");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = new Document(" Xf_G3C*)");
      document0.toggleClass(" Xf_G3C*)");
      document0.toggleClass(" Xf_G3C*)");
      document0.hasClass(" Xf_G3C*)");
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.parser.Toien$pOF", "org.jsoup.parser.Toien$pOF");
      document0.toggleClass("r}fJ#fN~x%bM");
      document0.hasClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse("q", "q");
      document0.toggleClass("Insert position out of bounds.");
      document0.hasClass("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = new Document(" Xf_G3C*)");
      document0.toggleClass(" Xf_G3C*)");
      document0.hasClass(" Xf_G3C*)");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("6ccTe", "6ccTe");
      DataNode dataNode0 = new DataNode("xdq]_.0%[g-y;?!h", "xdq]_.0%[g-y;?!h");
      document0.prependChild(dataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parse(",><dyMv]lDap<qZ!LG", ",><dyMv]lDap<qZ!LG");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#", "#");
      document0.setParentNode(document0);
      document0.getElementsContainingOwnText("#");
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      DocumentType documentType0 = new DocumentType(")c2XE?c", "Children collection to be inserted must not be null.", "Children collection to be inserted must not be null.", ")c2XE?c");
      Element.preserveWhitespace(documentType0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = new Document("br");
      document0.appendElement("br");
      document0.appendElement("br");
      document0.getElementsContainingOwnText("br");
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parse("F%^!ldkP.8o-CH", "F%^!ldkP.8o-CH");
      CDataNode cDataNode0 = new CDataNode("ScriptDataDoubleEscapeStart");
      document0.appendChild(cDataNode0);
      document0.getElementsContainingOwnText((String) null);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("time", "time", "RCDATAEndTagOpen", "type");
      Document document0 = new Document("VT");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) documentType0;
      document0.addChildren(nodeArray0);
      document0.getElementsMatchingOwnText("_;%u08l");
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("/", "/");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("col", "P}@iJ%}m$L;4/j$");
      document0.appendText("#root");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("col", "P}@iJ%}m$L;4/j$");
      document0.prependText("html");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = new Document("#8blq-n<Hg}<bt!");
      document0.appendElement("br");
      document0.prependText("#8blq-n<Hg}<bt!");
      document0.getElementsMatchingText("head");
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      DocumentType documentType0 = new DocumentType("time", "time", "RCDATAEndTagOpen", "type");
      Document document0 = new Document("VT");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) documentType0;
      document0.addChildren(nodeArray0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("q", "q");
      document0.getElementById("+jdeJ2");
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Document.createShell("qG");
      Element element0 = document0.appendElement("qG");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.");
      Element element0 = new Element(tag0, "Children collection to be inserted must not be null.");
      Element element1 = element0.appendTo(element0);
      element1.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.setParentNode(document0);
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Vl+g)*i", "Vl+g)*i");
      Element element0 = document0.appendElement("Vl+g)*i");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parse(",><dIyMv]lDak<qZ!LG", ",><dIyMv]lDak<qZ!LG");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parse("la]{", "la]{");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertEquals("la]{", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parse("q", "q");
      document0.nextElementSibling();
      assertEquals("q", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = new Document("#8blq-n<Hg}<bt!");
      Element element0 = document0.appendElement("y!L;cbz$+");
      Elements elements0 = element0.siblingElements();
      assertEquals(0, elements0.size());
      assertEquals("#8blq-n<Hg}<bt!", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Document.createShell(",><dyMv]lDap<qZ!LG");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals(",><dyMv]lDap<qZ!LG", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(<*", "(<*");
      DocumentType documentType0 = new DocumentType(".", "org.jsoup.nodes.Element", ")o7dh", (String) null);
      document0.parentNode = (Node) documentType0;
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parse("la]{", "la]{");
      Element element0 = document0.head();
      element0.after("la]{");
      String string0 = element0.cssSelector();
      assertEquals("la]{", element0.baseUri());
      assertEquals("html > head:nth-child(1)", string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Document.createShell("Unexpectedly reached end of file (EOF) in input state [%s]");
      Element element0 = document0.toggleClass("Unexpectedly reached end of file (EOF) in input state [%s]");
      element0.cssSelector();
      assertEquals(1, element0.childNodeSize());
      assertEquals("Unexpectedly reached end of file (EOF) in input state [%s]", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Document.createShell("</");
      Node[] nodeArray0 = new Node[6];
      // Undeclared exception!
      try { 
        document0.insertChildren(72, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parse("br", "m[@Eb=gZ.P\"39 3!x*%");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1372), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = new Document("#8blq-n<Hg}<bt!");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      // Undeclared exception!
      try { 
        document0.insertChildren(39, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.");
      Element element0 = new Element(tag0, "Children collection to be inserted must not be null.");
      Document document0 = Parser.parse("s}2y86", "#");
      List<Node> list0 = document0.ensureChildNodes();
      // Undeclared exception!
      try { 
        element0.insertChildren((-2123), (Collection<? extends Node>) list0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X(MP6F49L[", "X(MP6F49L[");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      Element element0 = document0.insertChildren((-2), (Collection<? extends Node>) linkedList0);
      assertEquals("X(MP6F49L[", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.;arser.Toien$|OF", "org.jsoup.;arser.Toien$|OF");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals("org.jsoup.;arser.Toien$|OF", document0.baseUri());
      assertEquals(0, list0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("br", "br");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(1, list0.size());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parse(",><dyMv]lDap<qZ!LG", "Bu+Ni#;z+5~btuOQ");
      List<TextNode> list0 = document0.textNodes();
      assertEquals(0, list0.size());
      assertEquals("Bu+Ni#;z+5~btuOQ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parse("1j5j*kaI", "");
      Element element0 = document0.body();
      Elements elements0 = element0.children();
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("F%{dkP..o-CH", "F%{dkP..o-CH");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-1104));
      assertEquals("F%{dkP..o-CH", document0.baseUri());
      assertEquals(4, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Document.createShell("tabCe");
      document0.selectFirst("tabCe");
      assertEquals(1, document0.childNodeSize());
      assertEquals("tabCe", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parse("q", "q");
      document0.getAllElements();
      assertEquals("q", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = new Document("/");
      // Undeclared exception!
      try { 
        document0.before("/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parse("eDDvN\"8Kt2@&.;XU", "C?GxZe,dZ>8Na^");
      document0.getElementsByAttribute("UTF8");
      assertEquals("C?GxZe,dZ>8Na^", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = new Document("br");
      Elements elements0 = document0.getElementsByAttributeValueNot("q6kwvgp2=", " ");
      assertEquals(0, elements0.size());
      assertEquals("br", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X(MP6F49L[", "X(MP6F49L[");
      document0.appendTo(document0);
      document0.siblingElements();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Document.createShell("e?-qDb/{}%wUu2");
      Element element0 = document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("e?-qDb/{}%wUu2", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X(MP6F49L[", "X(MP6F49L[");
      Document document1 = document0.clone();
      document1.appendChild(document0);
      Element element0 = document1.appendElement("X(MP6F49L[");
      element0.previousElementSibling();
      assertEquals(1, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Q\"7C<C _(6P{p/Y.V", "Q\"7C<C _(6P{p/Y.V");
      CDataNode cDataNode0 = new CDataNode("[zS/=;tO");
      // Undeclared exception!
      try { 
        document0.after((Node) cDataNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X(MP6F49L[", "X(MP6F49L[");
      document0.getElementsByAttributeValueContaining("amp=12;1&gt=1q;3&lt=1o;2&quot=y;0&", ")<~u}{rm#nz");
      assertEquals("X(MP6F49L[", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(" ", "");
      Pattern pattern0 = Pattern.compile("#root", 80);
      Elements elements0 = document0.getElementsByAttributeValueMatching("br", pattern0);
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parse(",><dyMv]lDap<qZ!LG", "Bu+Ni#;z+5~btuOQ");
      Elements elements0 = document0.getElementsContainingText("Bu+Ni#;z+5~btuOQ");
      assertEquals("Bu+Ni#;z+5~btuOQ", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parse(",><dyMv]lDap<qZ!LG", ",><dyMv]lDap<qZ!LG");
      Elements elements0 = document0.getElementsByClass("system");
      assertEquals(",><dyMv]lDap<qZ!LG", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("                ", "+K;m;UY$O");
      document0.getElementsByAttributeValueEnding("e?squdb/{}%wuu2", "muted");
      assertEquals("+K;m;UY$O", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parse("q", "q");
      document0.is("quirks");
      assertEquals("q", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parse("la]{", "la]{");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("la]{", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = new Document("F}{ykh..3oCH");
      // Undeclared exception!
      try { 
        document0.wrap("<br>");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("i", "i");
      Elements elements0 = document0.getElementsByIndexEquals(1);
      assertEquals("i", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parse("la]{", "la]{");
      document0.getElementsByAttributeStarting("#root");
      assertEquals("la]{", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parse("1j5j*kaI", "");
      // Undeclared exception!
      try { 
        document0.after("60J?wP3jkZ(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parse("9 j", "9 j");
      Elements elements0 = document0.getElementsMatchingOwnText("9 j");
      assertEquals("9 j", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("i", "i");
      document0.prepend("checkbox");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parse("la]{", "la]{");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("la]{", element0.baseUri());
      assertEquals("html > head", string0);
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parse("datalist", "Yf~.=v-;0ZEP");
      document0.getElementsByAttributeValueStarting("nu GrLv?9Q9eV,fSW", "Yf~.=v-;0ZEP");
      assertEquals("Yf~.=v-;0ZEP", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parse(",><dyMv]lDap<qZ!LG", "Bu+Ni#;z+5~btuOQ");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "`c}@:6f^+!U=F=0y");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = new Document("/");
      document0.wholeText();
      assertEquals("/", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#", "#");
      TextNode textNode0 = TextNode.createFromEncoded("org.jsoup.nodes.Element");
      // Undeclared exception!
      try { 
        document0.before((Node) textNode0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parse(" />", " />");
      document0.dataset();
      assertEquals(" />", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parse("c<ab^", "77-de,:;m7](u{82p");
      assertEquals(1, document0.childNodeSize());
      
      document0.title("c<ab^");
      String string0 = document0.text();
      assertEquals("77-de,:;m7](u{82p", document0.baseUri());
      assertEquals("c<ab^ c", string0);
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Document.createShell(" ");
      // Undeclared exception!
      try { 
        document0.tagName(" ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("X(MP6F49L[", "X(MP6F49L[");
      // Undeclared exception!
      try { 
        document0.child((-906021636));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parse("aq", "aq");
      document0.previousElementSiblings();
      assertEquals("aq", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Element element0 = new Element("br");
      element0.prependElement("br");
      element0.toString();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", "Children collection to be inserted must not be null.");
      Element element0 = document0.appendText("Children collection to be inserted must not be null.");
      element0.getElementsMatchingText("org.jsoup.nodes.Element");
      assertEquals(2, document0.childNodeSize());
      assertEquals("Children collection to be inserted must not be null.", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parse(",><dyMv]lDap<qZ!LG", "Bu+Ni#;z+5~btuOQ");
      document0.children();
  }
}
