/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:56:32 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedOutputStream;
import java.io.File;
import java.io.OutputStreamWriter;
import java.io.PipedOutputStream;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.charset.Charset;
import java.nio.charset.CharsetEncoder;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.MissingFormatArgumentException;
import java.util.Set;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = new Document("*e");
      Element element0 = document0.toggleClass("Object must not be null");
      document0.toggleClass("Object must not be null");
      element0.getElementsByClass("Object must not be null");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = new Document("gQ");
      document0.reparentChild(document0);
      document0.nextElementSiblings();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Document document0 = new Document(">");
      Document document1 = document0.normalise();
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document1.insertChildren((-1140), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Node[] nodeArray0 = new Node[7];
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = new Document(".");
      Document document1 = document0.normalise();
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      // Undeclared exception!
      try { 
        document1.insertChildren((-831), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parse("sqvfq0b", ":nth-child(%d)");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      document0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("4Q!hh$<", "4Q!hh$<");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("gq", true);
      BufferedOutputStream bufferedOutputStream0 = new BufferedOutputStream(mockFileOutputStream0, 1853);
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(bufferedOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlHead(outputStreamWriter0, 1135, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gzQ", "gzQ");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = new Document("html");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("FtkP@:uvQy", "FtkP@:uvQy");
      Document document1 = Parser.parse("CoC^HI1uKdpxdC$@t", "CoC^HI1uKdpxdC$@t");
      document0.appendChild(document1);
      document1.wrap("!lPi?CB/<qkr.,#T1wM");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.head();
      element0.wrap("B7[");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Document document0 = Parser.parse("gP", "");
      Element element0 = document0.body();
      element0.wrap("gP");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Tag tag0 = Tag.valueOf(",Wns");
      Element element0 = new Element(tag0, ",Wns");
      element0.wholeText();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Element element0 = new Element("Yi2,)f^~");
      element0.setSiblingIndex((-2590));
      element0.val("Yi2,)f^~");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Element element0 = new Element("head");
      element0.val("head");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FtkP@:uvQy", "FtkP@:uvQy");
      Element element0 = document0.appendElement("FtkP@:uvQy");
      element0.val("%v+;8");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FtkP@:uvQy", "FtkP@:uvQy");
      document0.val("comment");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Element element0 = new Element("Ys2,1f^~");
      Element element1 = element0.val("Cd");
      element1.val();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gzQ", "gzQ");
      Element element0 = document0.appendElement("P");
      element0.toggleClass("gzq");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FtkP@:uvQy", "FtkP@:uvQy");
      Element element0 = document0.appendElement("FtkP@:uvQy");
      element0.text("w),9U~5`+&VwJ[y%");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FtkP@:uvQy", "FtkP@:uvQy");
      document0.text("w),9U~5`+&VwJ[y%");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#3=L", "#3=L");
      Element element0 = document0.head();
      element0.text();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "E:6Rj?Hd>>M#+");
      document0.tagName("html");
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.appendElement("br");
      element0.tagName("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("FtkP@:uvQy", "FtkP@:uvQy");
      Element element0 = document0.createElement("async");
      element0.tagName("async");
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parse("^bJ]7J.", "");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*|", "*|");
      Element element0 = document0.head();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = new Document("org.jsoup.select.Collector");
      document0.selectFirst("org.jsoup.select.Collector");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pr M#/t<7>7?{}", " > ");
      document0.selectFirst("head");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ftk@:uvQy", "Ftk@:uvQy");
      Element element0 = document0.appendElement("*|");
      element0.selectFirst("*|");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FtkP@:uvQy", "FtkP@:uvQy");
      document0.select("width must be > 0");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Element element0 = new Element("sqvFQ0b");
      element0.select("sqvFQ0b");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Document.createShell("='Uk,KBqgV}Oglgc");
      Element element0 = document0.head();
      element0.removeClass("='Uk,KBqgV}Oglgc");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gQ", "gQ");
      Element element0 = document0.appendElement("gQ");
      element0.removeClass("gQ");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Parser.parse(")R{a", ";UbfqA");
      document0.removeClass("$kLQy05");
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gzQ", "gzQ");
      Element element0 = document0.appendChild(document0);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(wa[", "(wa[");
      Element element0 = document0.body();
      element0.prependText("z!q");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parse("org.jsoup.nodes.Element", "X'{[*");
      document0.prependElement("sarcasm");
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse("YD]82tnh'", "YD]82tnh'");
      CDataNode cDataNode0 = new CDataNode("4S7{TT8@n");
      Node[] nodeArray0 = new Node[3];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.prependChild(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Document.createShell("\"(]te:qj[I <$t");
      Element element0 = document0.head();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Element element0 = new Element("html");
      element0.prepend("noshade");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gQ", "gQ");
      Element element0 = document0.appendElement("gQ");
      element0.prepend("gQ");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FtkP@:uvQy", "FtkP@:uvQy");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parse("gzQ", "gzQ");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tSY),atl~bd\t}W", "tSY),atl~bd\t}W");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("8bqgI't],ao8W");
      Document document0 = parser0.parseInput((Reader) stringReader0, "8bqgI't],ao8W");
      Element element0 = document0.appendElement("[e ");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = new Document("gQ");
      document0.reparentChild(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = new Document("html");
      Element element0 = document0.prependText("id");
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = new Document("form");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gzQ", "gzQ");
      document0.prependChild(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":has(el) subselect must not be empty", ":has(el) subselect must not be empty");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = new Document("#root");
      Evaluator.AttributeWithValueNot evaluator_AttributeWithValueNot0 = new Evaluator.AttributeWithValueNot("#root", "org.jsoup.select.Evaluator$AttributeKeyPair");
      document0.is((Evaluator) evaluator_AttributeWithValueNot0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ftk@:uvQy", "Ftk@:uvQy");
      Element element0 = document0.appendElement("*|");
      element0.is("*|");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("FtkP@:uvQy", ">dsx");
      document0.is(">dsx");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      TextNode textNode0 = new TextNode("", "");
      Element element0 = document0.append("3DY^LpjtYex");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) textNode0;
      nodeArray0[1] = (Node) element0;
      element0.insertChildren(2, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      Element element0 = document0.body();
      LinkedList<XmlDeclaration> linkedList0 = new LinkedList<XmlDeclaration>();
      element0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FtkP@:uvQy", "FtkP@:uvQy");
      document0.setSiblingIndex(9);
      document0.html("O;YfI=+iS^k\fCthA7");
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Element element0 = new Element("html");
      element0.html((MockPrintWriter) null);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Tag tag0 = Tag.valueOf("FtkP@:uvQy");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "base", attributes0);
      formElement0.html();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Tag tag0 = Tag.valueOf("DOCTYPE");
      CDataNode cDataNode0 = new CDataNode("ym*'L");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "DOCTYPE", attributes0);
      pseudoTextElement0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("='Uk,KBqgV}OglOc", "='Uk,KBqgV}OglOc");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pr MK#/t<0P7>7?{}", " > ");
      Pattern pattern0 = Pattern.compile("|hb69!");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pr MK#/t<0P7>7?{}", " > ");
      document0.getElementsMatchingText("|hb69!");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gzQ", "gzQ");
      Element element0 = document0.appendElement("gzQ");
      Pattern pattern0 = Pattern.compile("gzQ");
      element0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tSY),atl~bd\t}W", "tSY),atl~bd\t}W");
      document0.getElementsContainingText("t4Lj8\u0005");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = new Document("html");
      document0.getElementsContainingOwnText("");
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ftk@:uvQy", "Ftk@:uvQy");
      document0.getElementsByTag("Ftk@:uvQy");
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gzQ", "gzQ");
      document0.getElementsByTag("head");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FtkP@:uvQy", "FtkP@:uvQy");
      document0.getElementsByIndexLessThan(252);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#3=L", "#3=L");
      document0.getElementsByIndexGreaterThan(2708);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ftk@:uvQy", "Ftk@:uvQy");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gzQ", "gzQ");
      document0.toggleClass("=]ir");
      document0.toggleClass("=]ir");
      document0.getElementsByClass("=]ir");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$AttributeKeyPair", "body");
      document0.getElementsByAttributeValue("nf~9- h", "org.jsoup.select.structuralevaluator$root");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Document.createShell("^bj]7j.");
      Element element0 = document0.toggleClass("!;a-t<,7JWBwB1HLi\"");
      element0.getElementsByAttributeStarting("class");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$AttributeKeyPair", "body");
      document0.getElementsByAttribute("nf~9- h");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FtkP@:uvQy", "FtkP@:uvQy");
      Element element0 = document0.appendChild(document0);
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.appendElement("br");
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.appendElement("br");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      DocumentType documentType0 = new DocumentType("", "", "");
      Element element0 = document0.body();
      element0.doClone(documentType0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Document.createShell("");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "7lc}?=_");
      Element element0 = document0.appendChild(document0);
      Set<String> set0 = element0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "7lc}?=_");
      Element element0 = document0.head();
      Set<String> set0 = element0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gzQ", "gzQ");
      document0.reparentChild(document0);
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Tag tag0 = Tag.valueOf(">dsx");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.nodes.Element", attributes0);
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      pseudoTextElement0.classNames((Set<String>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gzQ", "gzQ");
      document0.toggleClass("gzQ");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gzQ", "gzQ");
      Element element0 = document0.toggleClass("gzQ");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Document.createShell("[%s$=%s]");
      document0.html("");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("FtkP@:uvQy", ">dsx");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Document.createShell("#83=L");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parse("#root", "mTX");
      Element element0 = document0.body();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Document.createShell("[%s$=%s]");
      Element element0 = document0.appendElement("[%s$=%s]");
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gQ", "gQ");
      document0.reparentChild(document0);
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("menuitem", "menuitem");
      Element element0 = document0.appendElement("menuitem");
      element0.appendText("menuitem");
      element0.before("<html>\n <head></head>\n <body>\n  menuitem\n </body>\n</html>\n<menuitem>menuitem</menuitem>");
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":gcgfnt~i%^{h`_", ":gcgfnt~i%^{h`_");
      document0.toggleClass("l");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FtkP@:uvQy", "FtkP@:uvQy");
      Element element0 = document0.appendChild(document0);
      element0.attr("width must be > 0", true);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tSY),atl~bd\t}W", "tSY),atl~bd\t}W");
      Element element0 = document0.head();
      element0.attr("tSY),atl~bd\t}W", false);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Element element0 = new Element("sqvFQ0b");
      element0.append("sqvFQ0b");
      Element element1 = element0.appendElement("br");
      element1.attr("3dy^lpjtyex", "");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Document.createShell(">RzF~eo1M%LWZX:");
      Element element0 = document0.head();
      element0.attr("id", "");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Element element0 = new Element("sqvFQ0b");
      Element element1 = element0.appendElement("br");
      element1.attr("3dy^lpjtyex", "");
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Element element0 = new Element("sqvFQ0b");
      element0.attr("3dy^lpjtyex", "");
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.attr("6sK^0xz", "6sK^0xz");
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf(":gcgfnt~i%^{h`_", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "u9R,T?w", attributes0);
      formElement0.appendTo(formElement0);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gzQ", "gzQ");
      Element element0 = document0.head();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.appendElement("tr");
      element0.appendText("3DY^LpjtYex");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("='Uk,KBqgV}Oglgc");
      Element element0 = document0.head();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Element element0 = document0.body();
      element0.append("+6!xGugT;i3F]v^!S");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Element element0 = new Element("h2");
      element0.append("");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Document.createShell("tSY),atl~bd\t}W");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gzQ", "gzQ");
      Element element0 = document0.appendElement("4j");
      element0.after("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = new Document("");
      Element element0 = document0.appendElement("br");
      element0.appendText("");
      element0.after("3DY^LpjtYex");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "E:6Rj?Hd>>M#+z");
      Element element0 = document0.body();
      element0.addClass("");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parse("[e ", "[e ");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.wrap(">xPZ5bM<");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = new Document(">");
      // Undeclared exception!
      try { 
        document0.wrap((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FtkP@:uvQy", "FtkP@:uvQy");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.val("#rtoot");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FtkP@:uvQy", "FtkP@:uvQy");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = new Document("form");
      // Undeclared exception!
      try { 
        document0.text("html");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parse("gQ", "gQ");
      Element element0 = document0.appendElement("$");
      element0.setSiblingIndex((-3074));
      // Undeclared exception!
      try { 
        element0.text();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gQ", "gQ");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.tagName("%X:2`Sek]Tky2id!%3*");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput("org.jsoup.nodes.Element$NodeList", ">gzQ");
      // Undeclared exception!
      try { 
        document0.tagName(";");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Tag tag0 = Tag.valueOf("FtkP@:uvQy");
      Element element0 = new Element(tag0, "J$Q?A8&;qvH");
      // Undeclared exception!
      try { 
        element0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gzQ", "gzQ");
      Element element0 = document0.appendElement("4j");
      element0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gzQ", "gzQ");
      // Undeclared exception!
      try { 
        document0.selectFirst("h=&`UOnX");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'h=&`UOnX': unexpected token at '=&`UOnX'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Element element0 = new Element("sqvFQ0b");
      // Undeclared exception!
      try { 
        element0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Document.createShell("\"(]te:qj[I <$t");
      // Undeclared exception!
      try { 
        document0.select("\"(]te:qj[I <$t");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '\"(]te:qj[I <$t': unexpected token at '\"(]te:qj[I <$t'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Document.createShell("x#<\"{%?>ZqwZ*c");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Document.createShell("=O`");
      Element element0 = document0.appendChild(document0);
      // Undeclared exception!
      element0.prependElement("=O`");
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = new Document("gzQ");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Document.createShell("[%s$=%s]");
      Element element0 = document0.appendElement("[%s$=%s]");
      Element element1 = document0.html("");
      // Undeclared exception!
      try { 
        element1.prependChild(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":gcgfnt~i%^{h`_", ":gcgfnt~i%^{h`_");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FtkP@:uvQy", "FtkP@:uvQy");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.prepend("coc^hi1ukdpxdc$@t");
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Document.createShell("fs=SqpfjFlM");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("head", "+V4M%0xx.VHeU");
      StringWriter stringWriter0 = new StringWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(373);
      // Undeclared exception!
      document0.outerHtmlTail(stringWriter0, 373, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Tag tag0 = Tag.valueOf("FtkP@:uvQy");
      Element element0 = new Element(tag0, "J$Q?A8&;qvH");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      Charset charset0 = Charset.defaultCharset();
      CharsetEncoder charsetEncoder0 = charset0.newEncoder();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0, charsetEncoder0);
      // Undeclared exception!
      try { 
        element0.outerHtmlTail(outputStreamWriter0, 668, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("++0<gr", "s+");
      PipedOutputStream pipedOutputStream0 = new PipedOutputStream();
      OutputStreamWriter outputStreamWriter0 = new OutputStreamWriter(pipedOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(outputStreamWriter0, (-891), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "E:6Rj?Hd>>M#+z");
      File file0 = MockFile.createTempFile("E:6Rj?Hd>>M#+z", "FZ\"");
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(2779);
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintWriter0, 55, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#root", "AfterDoctypePublicKeyword");
      MockFileWriter mockFileWriter0 = new MockFileWriter("{:*teFz13Q", true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockFileWriter0, (-830), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#3=L", "#3=L");
      DataNode dataNode0 = DataNode.createFromEncoded("#3=L", "class");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.DataNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = Document.createShell("#3=L");
      Element element0 = document0.prependChild(document0);
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("hjaT6WaT{n%");
      // Undeclared exception!
      element0.is((Evaluator) evaluator_Class0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8!g6", "X");
      // Undeclared exception!
      try { 
        document0.is(":nth-child(%d)");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse nth-index '%d': unexpected format
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Document.createShell("[%s$=%s]");
      Element element0 = document0.appendElement("[%s$=%s]");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      CDataNode cDataNode0 = new CDataNode("9W{{n#3|T_+5");
      nodeArray0[1] = (Node) cDataNode0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) element0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) element0;
      nodeArray0[6] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(2, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parse("R_|B|Z/b>$n-", "R_|B|Z/b>$n-");
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.html("R_|B|Z/b>$n-");
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Element element0 = new Element("html");
      Element element1 = element0.append("form");
      // Undeclared exception!
      try { 
        element1.html((MockPrintWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Tag tag0 = Tag.valueOf("QE==p9");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "td", attributes0);
      formElement0.appendChild(formElement0);
      // Undeclared exception!
      formElement0.html();
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[%s$=%s]", "[%s$=%s]");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Element element0 = new Element(":gcgfnt~i%^{h`_");
      // Undeclared exception!
      try { 
        element0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("njspgc)s");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: njspgc)s
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("FtkP@:uvQy", "3dy^lpjtyex");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Document.createShell("H?_KZp\"f\",d1D$/p");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("yedhdc|}2(tXsO");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: yedhdc|}2(tXsO
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Document.createShell(".!oh}cYgP");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.childNodes = null;
      // Undeclared exception!
      try { 
        document1.getElementsContainingText(".!oh}cYgP");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("/KH>-Z[`TXse2w-7C", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.internal.Normalizer", "org.jsoup.internal.Normalizer");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot((String) null, "org.jsoup.internal.Normalizer");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(wa[", "(wa[");
      Element element0 = document0.body();
      Pattern pattern0 = Pattern.compile("z!q");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("(wa[", pattern0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pr MK#/t<0P7>7?{}", " > ");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("value", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("br", ";(iE L#/<PaO -EE8");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: ;(iE L#/<PaO -EE8
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("4YT,[$n'p+!C", ",~M!");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("4YT,[$n'p+!C", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("4\"Wn", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "4\"Wn", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsByAttributeValueEnding("", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parse("jyH", "N%@>a8.");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("jyH", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7/&f+C{+B5QZ", "7/&f+C{+B5QZ");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting(":gcgfnt~i%^{h`_");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("FtkP@:uvQy", "FtkP@:uvQy");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FtkP@:uvQy", "FtkP@:uvQy");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pr M#/t<7>7?{}", " > ");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.empty();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Element element0 = new Element("y");
      Element element1 = element0.appendElement("org.jsoup.select.Evaluator$AttributeKeyPair");
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'org.jsoup.select.evaluator$attributekeypair': unexpected token at '$attributekeypair'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FtkP@:uvQy", "FtkP@:uvQy");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.child((-1189));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parse("version", "version");
      Document document1 = document0.normalise();
      document1.parentNode = (Node) document0;
      // Undeclared exception!
      document1.before("body");
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Document.createShell("");
      Node[] nodeArray0 = new Node[7];
      DataNode dataNode0 = new DataNode("u~#ntoc:,syr");
      nodeArray0[0] = (Node) dataNode0;
      CDataNode cDataNode0 = new CDataNode("u~#ntoc:,syr");
      nodeArray0[1] = (Node) cDataNode0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      document0.addChildren(nodeArray0);
      // Undeclared exception!
      document0.attr("", "Y4Cm6H");
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = new Document("gQ");
      document0.reparentChild(document0);
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("='Uk,KBqgV}Oglgc", "='Uk,KBqgV}Oglgc");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Element element0 = new Element("org.jsoup.select.Evaluator$AttributeKeyPair");
      Element element1 = element0.append("Ik%#&UKO1GuBKS-Ro");
      element1.parentNode = (Node) element0;
      // Undeclared exception!
      element0.appendElement("#root");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pr MK#/t<0P7>7?{}", " > ");
      // Undeclared exception!
      try { 
        document0.appendElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("rgdV", parseSettings0);
      Element element0 = new Element(tag0, "p{)(90hlmi:xzn+if#");
      CDataNode cDataNode0 = new CDataNode("~]Q=CinS");
      Node node0 = cDataNode0.doClone(element0);
      // Undeclared exception!
      try { 
        element0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gzQ", "gzQ");
      Element element0 = document0.prependChild(document0);
      // Undeclared exception!
      element0.append("CE%<");
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("FtkP@:uvQy", "FtkP@:uvQy");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FtkP@:uvQy", "FtkP@:uvQy");
      document0.appendChild(document0);
      // Undeclared exception!
      document0.after("FtkP@:uvQy");
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FtkP@:uvQy", "FtkP@:uvQy");
      Element element0 = document0.appendElement("Text");
      document0.html("O;YfI=+iS^k\fCthA7");
      // Undeclared exception!
      try { 
        element0.after("");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parse("#", "#");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.Evaluator$IndexGreaterThan");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "org.jsoup.select.CombiningEvaluator$Or", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf(":v9", parseSettings0);
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("FtkP@:uvQy", "FtkP@:uvQy");
      StringWriter stringWriter0 = new StringWriter(1);
      document0.html(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parse("[e ", "[e ");
      document0.toggleClass("[e ");
      document0.hasClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gQ", "gQ");
      document0.hasClass("gQ");
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("gzQ", "gzQ");
      document0.toggleClass(">");
      document0.hasClass("Insert position out of bounds.");
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.append("3DY^LpjtYex");
      element0.data();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Element element0 = new Element("html");
      Element element1 = element0.append("form");
      element1.hasText();
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Element element0 = new Element("org.jsoup.select.Evaluator$AttributeKeyPair");
      Element element1 = element0.append("Ik%#&UKO1GuBKS-Ro");
      element1.hasText();
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parse("c.'bq]", "c.'bq]");
      Element element0 = document0.head();
      element0.hasText();
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gzQ", "gzQ");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("FtkP@:uvQy", "FtkP@:uvQy");
      Tag tag0 = Tag.valueOf("FtkP@:uvQy");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "base", attributes0);
      formElement0.appendChild(document0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Document.createShell("tSY),atl~bd\t}W");
      Element element0 = document0.head();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.appendElement("br");
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FtkP@:uvQy", "FtkP@:uvQy");
      Element element0 = document0.head();
      element0.html("='Uk,KBqgV}OglOc");
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">gzQ", ">gzQ");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Document.createShell("='Uk,KBqgV}Oglgc");
      document0.getElementById("='Uk,KBqgV}Oglgc");
      document0.clearAttributes();
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gzQ", "gzQ");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gzQ", "gzQ");
      Pattern pattern0 = Pattern.compile("gzQ");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Tag tag0 = Tag.valueOf("71");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "cite", attributes0);
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("(v.0s8ariho1t`", ".");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "0:");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("pr MK#/t<0P7>7?{}", " > ");
      document0.isBlock();
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = new Document("*e");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Element element0 = new Element("html");
      Pattern pattern0 = Pattern.compile("form");
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("FtkP@:uvQy", ">dsx");
      Pattern pattern0 = Pattern.compile("nf~9- h", (-2067947214));
      document0.getElementsByAttributeValueMatching(">dsx", pattern0);
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FtkP@:uvQy", "FtkP@:uvQy");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      StringBuilder stringBuilder0 = new StringBuilder(22);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(stringBuilder0, (-893), document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parse("scriptdataescapedlessthansign", "scriptdataescapedlessthansign");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Document.createShell("#3=L");
      Element element0 = document0.appendElement("br");
      element0.appendElement("menuitem");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Element element0 = new Element("menuitem");
      element0.toString();
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = new Document("Yi2,)f^~");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 1343, document_OutputSettings1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = new Document("#83=L");
      Element element0 = document0.toggleClass("#83=L");
      element0.toggleClass("#83=L");
      document0.hasClass("#83=L");
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = new Document("*e");
      document0.toggleClass("Object must not be null");
      Element element0 = document0.toggleClass("Object must not be null");
      element0.hasClass("</");
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("hr", "        ");
      document0.toggleClass("e)%!:^7S!6ae>|ymT");
      document0.toggleClass("        ");
      document0.getElementsByClass("e)%!:^7S!6ae>|ymT");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.toggleClass("Object must not be null");
      document0.getElementsByClass("1_gZy6yV2~r= ]");
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gQ", "gQ");
      document0.reparentChild(document0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Element.preserveWhitespace((Node) null);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("FtkP@:uvQy", "FtkP@:uvQy");
      Element element0 = document0.append(" ");
      element0.appendElement("br");
      element0.getElementsMatchingOwnText("head");
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("FtkP@:uvQy", "FtkP@:uvQy");
      document0.appendElement("br");
      document0.getElementsMatchingOwnText("head");
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      CDataNode cDataNode0 = new CDataNode("#root");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) cDataNode0;
      nodeArray0[1] = (Node) cDataNode0;
      nodeArray0[2] = (Node) cDataNode0;
      nodeArray0[3] = (Node) cDataNode0;
      document0.addChildren(nodeArray0);
      document0.getElementsContainingOwnText("Y4Cm6H");
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[e ", "[e ");
      DocumentType documentType0 = new DocumentType("[e ", "nR_R", "_(}E;W+Rv6WS", "nR_R", "Gq`??,.X");
      Element element0 = document0.prependChild(documentType0);
      element0.getElementsContainingOwnText("Gq`??,.X");
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.append("3DY^LpjtYex");
      element0.prependText("o/6G2~#6");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.append("3DY^LpjtYex");
      element0.appendElement("br");
      element0.text();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("gQ", "gQ");
      document0.title("gQ");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ftk@:uvQy", "Ftk@:uvQy");
      document0.appendElement("*|");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      DataNode dataNode0 = new DataNode(".", "textarea");
      document0.prependChild(dataNode0);
      document0.text();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gQ", "gQ");
      Element element0 = document0.appendElement("gQ");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parse("version", "version");
      Document document1 = document0.normalise();
      document1.parentNode = (Node) document0;
      document1.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Document.createShell("mXz s]<ndamnrs!hOV");
      Element element0 = document0.head();
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Element element0 = document0.appendElement("br");
      document0.html("z!q");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Document.createShell("[%s$=%s]");
      Element element0 = document0.appendElement("[%s$=%s]");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(">gzQ", ">gzQ");
      Element element0 = document0.appendElement("br");
      element0.after((Node) document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gzQ", "gzQ");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = new Document("gQ");
      document0.reparentChild(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gzQ", "gzQ");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Document.createShell("#3=L");
      document0.prependChild(document0);
      document0.nextElementSiblings();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parse("menuitem", "menuitem");
      Element element0 = document0.appendElement("menuitem");
      Elements elements0 = element0.siblingElements();
      assertEquals(1, elements0.size());
      assertEquals("menuitem", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("FtkP@:uvQy", "FtkP@:uvQy");
      document0.siblingElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("FtkP@:uvQy", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#3=L", "#3=L");
      Element element0 = document0.head();
      assertEquals(0, element0.siblingIndex());
      
      element0.before("#3=L");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(3)", string0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tSY),atl~bd\t}W", "tSY),atl~bd\t}W");
      Element element0 = document0.head();
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals("tSY),atl~bd\t}W", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("='Uk,KBqgV}OglOc", "='Uk,KBqgV}OglOc");
      document0.toggleClass("P@Tn 2W[Nrt._a");
      document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("='Uk,KBqgV}OglOc", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      Node[] nodeArray0 = new Node[2];
      // Undeclared exception!
      try { 
        document0.insertChildren(2, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parse("='Uk,KBqgV}OglOc", "='Uk,KBqgV}OglOc");
      LinkedHashSet<Comment> linkedHashSet0 = new LinkedHashSet<Comment>();
      Element element0 = document0.insertChildren(1, (Collection<? extends Node>) linkedHashSet0);
      assertEquals("='Uk,KBqgV}OglOc", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$AttributeKeyPair", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "org.jsoup.select.Evaluator$AttributeKeyPair", attributes0);
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      // Undeclared exception!
      try { 
        element0.insertChildren(1398, (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[e ", "[e ");
      document0.reparentChild(document0);
      DataNode dataNode0 = new DataNode("[e ");
      Element element0 = document0.after((Node) dataNode0);
      List<DataNode> list0 = element0.dataNodes();
      assertEquals(2, document0.childNodeSize());
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.append("3DY^LpjtYex");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "#");
      document0.appendText("D&}w]RP4TnIs=");
      document0.getElementsByIndexGreaterThan((-1618280579));
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Element element0 = new Element("sqvFQ0b");
      Element element1 = element0.selectFirst("sqvFQ0b");
      assertEquals("sqvFQ0b", element1.tagName());
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = new Document("Y?d@C8<pk%]:");
      // Undeclared exception!
      try { 
        document0.is("[%s=s");
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%s'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("FtkP@:uvQy", "FtkP@:uvQy");
      Elements elements0 = document0.getAllElements();
      assertEquals(4, elements0.size());
      assertEquals("FtkP@:uvQy", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tSY),atl~bd\t}W", "tSY),atl~bd\t}W");
      // Undeclared exception!
      try { 
        document0.before("tSY),atl~bd\t}W");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tSY),atl~bd\t}W", "tSY),atl~bd\t}W");
      Elements elements0 = document0.getElementsByAttributeValueNot("org.jsoup.nodes.Element$NodeList", "java.lang.string@0000000025 object must not </ null *e");
      assertEquals("tSY),atl~bd\t}W", document0.baseUri());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("='Uk,KBqgV}OglOc", "='Uk,KBqgV}OglOc");
      Element element0 = document0.shallowClone();
      assertEquals("='Uk,KBqgV}OglOc", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parse("[!", "[!");
      Element element0 = document0.clone();
      assertEquals("[!", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertNotSame(element0, document0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Tag tag0 = Tag.valueOf("FtkP@:uvQy");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "base", attributes0);
      formElement0.doSetBaseUri("org.jsoup.select.Evaluator$IsLastOfType");
      assertEquals("org.jsoup.select.Evaluator$IsLastOfType", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Document.createShell("tSY),atl~bd\t}W");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Element element0 = new Element("org.jsoup.select.Evaluator$AttributeKeyPair");
      Elements elements0 = element0.getElementsByAttributeValueContaining("org.jsoup.select.Evaluator$AttributeKeyPair", "org.jsoup.select.Evaluator$AttributeKeyPair");
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Elements elements0 = document0.getElementsContainingText("");
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Document.createShell("");
      document0.getElementsByAttributeValueEnding("t4Lj8\u0005", "eRj*]Y<{ziWG");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Document.createShell("#3=L");
      Evaluator.Class evaluator_Class0 = new Evaluator.Class("hjaT6WaT{n%");
      boolean boolean0 = document0.is((Evaluator) evaluator_Class0);
      assertFalse(boolean0);
      assertEquals("#3=L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.getElementsByAttributeValueMatching("|nG<;mY#", "");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parse("[e ", "[e ");
      // Undeclared exception!
      try { 
        document0.wrap(">xPZ5bM<");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = new Document("gQ");
      Elements elements0 = document0.getElementsByIndexEquals(4);
      assertEquals("gQ", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7/&f+C{+B5QZ", "7/&f+C{+B5QZ");
      document0.getElementsByAttributeStarting(":gcgfnt~i%^{h`_");
      assertEquals("7/&f+C{+B5QZ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Tag tag0 = Tag.valueOf("oBZ@?");
      CDataNode cDataNode0 = new CDataNode("oBZ@?");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "[%s*=%s]", attributes0);
      pseudoTextElement0.getElementsByIndexLessThan((-2028));
      assertEquals("[%s*=%s]", pseudoTextElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gzQ", "gzQ");
      // Undeclared exception!
      try { 
        document0.after("org.jsoup.nodes.Element$2");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gQ", "gQ");
      Elements elements0 = document0.getElementsMatchingOwnText("gQ");
      assertEquals("gQ", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Element element0 = new Element("sqvFQ0b");
      // Undeclared exception!
      try { 
        element0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parse("[!", "[!");
      document0.getElementsByAttributeValueStarting("D&}w]RP4TnIs=", "[!");
      assertEquals("[!", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "E:6Rj?Hd>>M#+z");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("E:6Rj?Hd>>M#+z", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tSY),atl~bd\t}W", "tSY),atl~bd\t}W");
      Element element0 = document0.attr("tSY),atl~bd\t}W", false);
      assertEquals("tSY),atl~bd\t}W", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("tSY),atl~bd\t}W", "tSY),atl~bd\t}W");
      String string0 = document0.wholeText();
      assertEquals("tSY),atl~bd\t}W", string0);
      assertEquals("tSY),atl~bd\t}W", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gQ", "gQ");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("7/&f+C{+B5QZ", "7/&f+C{+B5QZ");
      Element element0 = document0.addClass("7/&f+C{+B5QZ");
      assertEquals("7/&f+C{+B5QZ", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gzQ", "gzQ");
      document0.dataset();
      assertEquals("gzQ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = new Document(": ");
      // Undeclared exception!
      try { 
        document0.child(1299);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1299, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#", "1");
      document0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("1", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("gzQ", "gzQ");
      Element element0 = document0.prependChild(document0);
      Element element1 = element0.lastElementSibling();
      // Undeclared exception!
      try { 
        element1.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 2, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = new Document("html");
      document0.getElementsMatchingText("html");
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Element element0 = new Element("sqvFQ0b");
      Elements elements0 = element0.children();
      assertTrue(elements0.isEmpty());
  }
}
