/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:52:48 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.CharArrayWriter;
import java.io.File;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.MissingFormatArgumentException;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attribute;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.Entities;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parse("_`:q/ZoX:", "_`:q/ZoX:");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("_`:q/ZoX:", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("_`:q/ZoX:", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("_`:q/ZoX:");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("_`:q/ZoX:", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("_`:q/ZoX:", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("_`:q/ZoX:", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("_`:q/ZoX:", document1.baseUri());
      assertNotNull(document1);
      
      boolean boolean0 = document0.hasClass("string must not be empty");
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("_`:q/ZoX:", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("_`:q/ZoX:", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("org.jsoup.nodes.Element$NodeList");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("org.jsoup.nodes.element$nodelist", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.nodes.element$nodelist", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = document0.appendElement("br");
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("org.jsoup.nodes.Element$NodeList", element1.baseUri());
      assertEquals(2, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("br", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("br", element1.nodeName());
      assertNotNull(element1);
      
      Elements elements0 = element1.previousElementSiblings();
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("org.jsoup.nodes.Element$NodeList", element1.baseUri());
      assertEquals(2, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("br", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("br", element1.nodeName());
      assertEquals(2, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element");
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("org.jsoup.nodes.Element", element0.tagName());
      assertNotNull(element0);
      
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      document0.setParentNode(element0);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("org.jsoup.nodes.Element", element0.tagName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      
      Element element1 = document0.nextElementSibling();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Document.createShell("class");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("class", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("class", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      StringWriter stringWriter0 = new StringWriter(0);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertNotNull(document_OutputSettings1);
      
      document0.outerHtmlTail(stringWriter0, (-2271), document_OutputSettings1);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("class", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("class", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("</#root>", stringWriter0.toString());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":onltyE-o-tpe", ":onltyE-o-tpe");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":onltyE-o-tpe", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(":onltyE-o-tpe", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      StringBuilder stringBuilder0 = new StringBuilder(1509);
      assertEquals("", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertNotNull(document_OutputSettings0);
      
      document0.outerHtmlHead(stringBuilder0, 1509, document_OutputSettings0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":onltyE-o-tpe", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(":onltyE-o-tpe", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("<#root>", stringBuilder0.toString());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Document.createShell("rFG'U,");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("rFG'U,", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("rFG'U,", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      document0.nodelistChanged();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("rFG'U,", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("rFG'U,", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+QGw}pTV_8#d", "+QGw}pTV_8#d");
      assertFalse(document0.isBlock());
      assertEquals("+QGw}pTV_8#d", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("+QGw}pTV_8#d", document0.baseUri());
      assertNotNull(document0);
      
      List<Node> list0 = document0.ensureChildNodes();
      assertFalse(document0.isBlock());
      assertEquals("+QGw}pTV_8#d", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("+QGw}pTV_8#d", document0.baseUri());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("S<kjhR9asm\"VJ'k8", "S<kjhR9asm\"VJ'k8");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("\"5O");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("\"5o", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("\"5o", element0.nodeName());
      assertEquals("S<kjhR9asm\"VJ'k8", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.wrap("FP\"T");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("\"5o", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("\"5o", element0.nodeName());
      assertEquals("S<kjhR9asm\"VJ'k8", element0.baseUri());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = new Document("+QGw}pTV_8#d");
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("+QGw}pTV_8#d", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("+QGw}pTV_8#d", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("+QGw}pTV_8#d", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("+QGw}pTV_8#d", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("+QGw}pTV_8#d", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("+QGw}pTV_8#d", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Element element0 = document0.body();
      assertSame(document0, document1);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("+QGw}pTV_8#d", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("+QGw}pTV_8#d", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("+QGw}pTV_8#d", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.wrap("class");
      assertSame(document0, document1);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("+QGw}pTV_8#d", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("+QGw}pTV_8#d", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("+QGw}pTV_8#d", element0.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("+QGw}pTV_8#d", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parse("body", "Tag name must not be empty.");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.wrap("Tag name must not be empty.");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Tag name must not be empty.", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertEquals("Tag name must not be empty.", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = new Document("M^*T`<)o(");
      assertEquals("M^*T`<)o(", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("M^*T`<)o(", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      String string0 = document0.wholeText();
      assertEquals("M^*T`<)o(", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("M^*T`<)o(", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Element element0 = new Element("org.jsoup.noes.Element$NodeList");
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("org.jsoup.noes.Element$NodeList", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.noes.Element$NodeList", element0.tagName());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      element0.setSiblingIndex((-2));
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("org.jsoup.noes.Element$NodeList", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.noes.Element$NodeList", element0.tagName());
      assertEquals((-2), element0.siblingIndex());
      assertFalse(element0.hasParent());
      
      Element element1 = element0.val("/A3Nw|o5;5MLdXzb/Z");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals("org.jsoup.noes.Element$NodeList", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.noes.Element$NodeList", element0.tagName());
      assertEquals((-2), element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.noes.Element$NodeList", element1.tagName());
      assertEquals("org.jsoup.noes.Element$NodeList", element1.nodeName());
      assertEquals((-2), element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = Parser.parse("=l5YFL}$", "=l5YFL}$");
      assertFalse(document0.hasParent());
      assertEquals("=l5YFL}$", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=l5YFL}$", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals("=l5YFL}$", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=l5YFL}$", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("=l5YFL}$", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.val("value");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals("=l5YFL}$", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=l5YFL}$", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals("=l5YFL}$", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertEquals("=l5YFL}$", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = new Document(",oM ");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",oM ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(",oM ", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.val(",oM ");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",oM ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(",oM ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(",oM ", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(",oM ", document1.baseUri());
      assertNotNull(document1);
      
      String string0 = document0.val();
      assertSame(document0, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",oM ", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(",oM ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(",oM ", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ttjns (n]=r>wY", "Ttjns (n]=r>wY");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Ttjns (n]=r>wY", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Ttjns (n]=r>wY", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("W");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Ttjns (n]=r>wY", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Ttjns (n]=r>wY", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("w", element0.nodeName());
      assertEquals("Ttjns (n]=r>wY", element0.baseUri());
      assertEquals("w", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.toggleClass("Ttjns (n]=r>wY");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("Ttjns (n]=r>wY", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("Ttjns (n]=r>wY", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("w", element0.nodeName());
      assertEquals("Ttjns (n]=r>wY", element0.baseUri());
      assertEquals("w", element0.tagName());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("w", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("Ttjns (n]=r>wY", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("w", element1.tagName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell(",oM ");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",oM ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(",oM ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      document0.setSiblingIndex((-2281));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",oM ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals((-2281), document0.siblingIndex());
      assertEquals(",oM ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.toggleClass("head");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",oM ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals((-2281), document0.siblingIndex());
      assertEquals(",oM ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document1.hasParent());
      assertEquals((-2281), document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(",oM ", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.isBlock());
      assertEquals(",oM ", document1.location());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("Pattern syntax error: ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.toggleClass("Pattern syntax error: ");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals("Pattern syntax error: ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertEquals("Pattern syntax error: ", element1.baseUri());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("Initial", "AfterHead");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("AfterHead", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("AfterHead", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("AfterHead", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("AfterHead", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("AfterHead", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.text("abs:");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("AfterHead", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("AfterHead", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("AfterHead", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.tagName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("AfterHead", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("Initial", "AfterHead");
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("AfterHead", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("AfterHead", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("abs:");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("AfterHead", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("AfterHead", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("AfterHead", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("AfterHead", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Document.createShell("rFG'U,");
      assertEquals("rFG'U,", document0.baseUri());
      assertEquals("rFG'U,", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      String string0 = document0.text();
      assertEquals("rFG'U,", document0.baseUri());
      assertEquals("rFG'U,", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = new Document("}zLS{gm504k>;");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("}zLS{gm504k>;", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("}zLS{gm504k>;", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.attr("}zLS{gm504k>;", "");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("}zLS{gm504k>;", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("}zLS{gm504k>;", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("}zLS{gm504k>;", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("}zLS{gm504k>;", document1.baseUri());
      assertNotNull(document1);
      
      document1.siblingIndex = (-1433506051);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-1433506051), document0.siblingIndex());
      assertEquals("}zLS{gm504k>;", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("}zLS{gm504k>;", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals((-1433506051), document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("}zLS{gm504k>;", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("}zLS{gm504k>;", document1.baseUri());
      
      Document document2 = (Document)document0.tagName("}zLS{gm504k>;");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals((-1433506051), document0.siblingIndex());
      assertEquals("}zLS{gm504k>;", document0.location());
      assertEquals("}zls{gm504k>;", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("}zLS{gm504k>;", document0.baseUri());
      assertEquals("}zLS{gm504k>;", document2.baseUri());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("}zls{gm504k>;", document2.tagName());
      assertEquals((-1433506051), document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals("}zLS{gm504k>;", document2.location());
      assertNotNull(document2);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Element element0 = new Element("title");
      assertTrue(element0.isBlock());
      assertEquals("title", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("title", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.tagName("title");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertTrue(element0.isBlock());
      assertEquals("title", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("title", element0.tagName());
      assertFalse(element1.hasParent());
      assertEquals("title", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("title", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.select.Evaluator$IsRoot");
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("br");
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertEquals("br", element0.nodeName());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.tagName("org.jsoup.nodes.Element$1");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.element$1", element0.nodeName());
      assertEquals("org.jsoup.nodes.element$1", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.nodes.element$1", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("org.jsoup.nodes.element$1", element1.tagName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Document.createShell("class");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("class", document0.baseUri());
      assertEquals("class", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.tagName("]");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("]", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("class", document0.baseUri());
      assertEquals("class", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("class", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("]", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("class", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" />", "xhtml");
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertNotNull(document0);
      
      String string0 = document0.tagName();
      assertEquals("#root", document0.tagName());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("xhtml", document0.baseUri());
      assertEquals("#root", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("br");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.nodeName());
      assertNotNull(element0);
      
      Tag tag0 = element0.tag();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.nodeName());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("br", tag0.toString());
      assertEquals("br", tag0.getName());
      assertTrue(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Document.createShell("?elq~(p--x[ty");
      assertEquals("?elq~(p--x[ty", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("?elq~(p--x[ty", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("?elq~(p--x[ty", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("?elq~(p--x[ty", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("?elq~(p--x[ty", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Tag tag0 = element0.tag();
      assertEquals("?elq~(p--x[ty", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("?elq~(p--x[ty", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("?elq~(p--x[ty", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("body", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertEquals("body", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.canContainBlock());
      assertNotNull(tag0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Tag tag0 = document0.tag();
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals("#root", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("#root", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.shallowClone();
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertTrue(element0.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", element1.baseUri());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.nodeName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Tag tag0 = Tag.valueOf("S<kjhR9asm\"VJ'k8");
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("S<kjhR9asm\"VJ'k8", tag0.toString());
      assertEquals("S<kjhR9asm\"VJ'k8", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "=GKR", attributes0);
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("S<kjhR9asm\"VJ'k8", tag0.toString());
      assertEquals("S<kjhR9asm\"VJ'k8", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, attributes0.size());
      assertEquals("S<kjhR9asm\"VJ'k8", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("=GKR", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      
      Element element0 = formElement0.selectFirst("html");
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("S<kjhR9asm\"VJ'k8", tag0.toString());
      assertEquals("S<kjhR9asm\"VJ'k8", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertEquals(0, attributes0.size());
      assertEquals("S<kjhR9asm\"VJ'k8", formElement0.nodeName());
      assertFalse(formElement0.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", formElement0.tagName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("=GKR", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("rp");
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertEquals("rp", element0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("rp", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.selectFirst("rp");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, element0.siblingIndex());
      assertEquals("rp", element0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("rp", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertFalse(element1.isBlock());
      assertEquals("rp", element1.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("rp", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Element element0 = new Element("selecte_");
      assertEquals("", element0.baseUri());
      assertEquals("selecte_", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("selecte_", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      element0.setSiblingIndex((-1173));
      assertEquals("", element0.baseUri());
      assertEquals("selecte_", element0.nodeName());
      assertEquals((-1173), element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("selecte_", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = element0.selectFirst("selecte_");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("", element0.baseUri());
      assertEquals("selecte_", element0.nodeName());
      assertEquals((-1173), element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals("selecte_", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("selecte_", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertEquals("selecte_", element1.nodeName());
      assertEquals((-1173), element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "html");
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("html", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("html", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.selectFirst("html");
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("html", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("html", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("html", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals("html", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("html", element0.baseUri());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = new Document("\"5o");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("\"5o", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("\"5o", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Elements elements0 = document0.select("value");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("\"5o", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("\"5o", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "nth-last-of-type");
      assertEquals("nth-last-of-type", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("nth-last-of-type", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("br");
      assertEquals("nth-last-of-type", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("nth-last-of-type", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("br", element0.nodeName());
      assertEquals("nth-last-of-type", element0.baseUri());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Elements elements0 = element0.select("br");
      assertEquals("nth-last-of-type", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("nth-last-of-type", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("br", element0.nodeName());
      assertEquals("nth-last-of-type", element0.baseUri());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Tag tag0 = Tag.valueOf("menu");
      assertEquals("menu", tag0.toString());
      assertEquals("menu", tag0.getName());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "value");
      assertEquals("menu", tag0.toString());
      assertEquals("menu", tag0.getName());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("value", element0.baseUri());
      assertEquals("menu", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("menu", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = element0.removeClass("Pattern syntax error: ");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("menu", tag0.toString());
      assertEquals("menu", tag0.getName());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("value", element0.baseUri());
      assertEquals("menu", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("menu", element0.nodeName());
      assertEquals("menu", element1.nodeName());
      assertFalse(element1.hasParent());
      assertEquals("value", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("menu", element1.tagName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "nth-last-of-type");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("nth-last-of-type", document0.baseUri());
      assertEquals("nth-last-of-type", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("br");
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("nth-last-of-type", document0.baseUri());
      assertEquals("nth-last-of-type", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("br", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("nth-last-of-type", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.removeClass("org.jsoup.nodes.Element$NodeList");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("nth-last-of-type", document0.baseUri());
      assertEquals("nth-last-of-type", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("br", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("nth-last-of-type", element0.baseUri());
      assertEquals("br", element1.nodeName());
      assertEquals("nth-last-of-type", element1.baseUri());
      assertEquals("br", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Document.createShell("em");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("em", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("em");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("em", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("em", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("em", element0.nodeName());
      assertEquals("em", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.previousElementSibling();
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("em", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("em", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("em", element0.nodeName());
      assertEquals("em", element0.baseUri());
      assertEquals("html", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("html", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals("em", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Document.createShell("?elq~(p--x[ty");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("?elq~(p--x[ty", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("?elq~(p--x[ty", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("?elq~(p--x[ty", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("?elq~(p--x[ty", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("?elq~(p--x[ty", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.prependText("=BLv6");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("?elq~(p--x[ty", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("?elq~(p--x[ty", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("?elq~(p--x[ty", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("?elq~(p--x[ty", element1.baseUri());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element");
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", element0.tagName());
      assertEquals("org.jsoup.nodes.Element", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertNotNull(document0);
      
      document0.setParentNode(element0);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element", element0.tagName());
      assertEquals("org.jsoup.nodes.Element", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      
      Document document1 = (Document)document0.prependText("org.jsoup.nodes.Element$NodeList");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals("org.jsoup.nodes.Element", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element", document1.baseUri());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parse("bu", "bu");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("bu", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("bu", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = document0.prependElement("plaintext");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("bu", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("bu", document0.location());
      assertEquals("bu", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("plaintext", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("plaintext", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("S<kjhR9asm\"VJ'k8", "S<kjhR9asm\"VJ'k8");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("\"5O");
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("S<kjhR9asm\"VJ'k8", element0.baseUri());
      assertEquals("\"5o", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("\"5o", element0.tagName());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.prependChild(document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("S<kjhR9asm\"VJ'k8", element0.baseUri());
      assertEquals("\"5o", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("\"5o", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element1.isBlock());
      assertEquals("\"5o", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("S<kjhR9asm\"VJ'k8", element1.baseUri());
      assertEquals("\"5o", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.prependChild(document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("Initial", "AfterHead");
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("AfterHead", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("AfterHead", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("AfterHead", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("AfterHead", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("AfterHead", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.prepend("*6.<mq|/\"IU");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("AfterHead", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("AfterHead", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("AfterHead", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertEquals("AfterHead", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Tag tag0 = Tag.valueOf("class");
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("class", tag0.getName());
      assertTrue(tag0.isInline());
      assertEquals("class", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "B,Yud??aGl4s3b");
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("class", tag0.getName());
      assertTrue(tag0.isInline());
      assertEquals("class", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("class", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("class", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("B,Yud??aGl4s3b", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.prepend("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("class", tag0.getName());
      assertTrue(tag0.isInline());
      assertEquals("class", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("class", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("class", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("B,Yud??aGl4s3b", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("B,Yud??aGl4s3b", element1.baseUri());
      assertEquals("class", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("class", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("S<kjhR9asm\"VJ'k8", "S<kjhR9asm\"VJ'k8");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Elements elements0 = document0.parents();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s+", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s+", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("s+", element0.baseUri());
      assertNotNull(element0);
      
      Elements elements0 = element0.parents();
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s+", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("s+", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("s+", element0.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = document0.parent();
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Document.createShell("br");
      assertEquals("br", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("br");
      assertEquals("br", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.appendElement("br");
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertEquals("br", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, element0.childNodeSize());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.baseUri());
      assertEquals("br", element1.nodeName());
      assertEquals("br", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("br", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
      
      Element element2 = element1.parent();
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertFalse(element2.equals((Object)element1));
      assertNotSame(element0, element1);
      assertSame(element0, element2);
      assertNotSame(element1, element2);
      assertNotSame(element1, element0);
      assertSame(element2, element0);
      assertNotSame(element2, element1);
      assertEquals("br", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("br", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, element0.childNodeSize());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.baseUri());
      assertEquals("br", element1.nodeName());
      assertEquals("br", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("br", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(1, element2.childNodeSize());
      assertEquals(1, element2.siblingIndex());
      assertEquals("br", element2.baseUri());
      assertEquals("br", element2.tagName());
      assertFalse(element2.isBlock());
      assertEquals("br", element2.nodeName());
      assertTrue(element2.hasParent());
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = element0.parent();
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertEquals("html", element1.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", element1.baseUri());
      assertEquals("html", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Element element0 = new Element("selecfx_");
      assertFalse(element0.hasParent());
      assertEquals("selecfx_", element0.tagName());
      assertEquals("selecfx_", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Document document0 = Parser.parse("selecfx_", "selecfx_");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("selecfx_", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("selecfx_", document0.location());
      assertNotNull(document0);
      
      document0.setParentNode(element0);
      assertFalse(element0.hasParent());
      assertEquals("selecfx_", element0.tagName());
      assertEquals("selecfx_", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("selecfx_", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("selecfx_", document0.location());
      
      Element element1 = document0.parent();
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("selecfx_", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("selecfx_", document0.location());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("", element1.baseUri());
      assertEquals("selecfx_", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.hasParent());
      assertEquals("selecfx_", element1.nodeName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("S<kjhR9asm\"VJ'k8", "S<kjhR9asm\"VJ'k8");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendText("sortable");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("S<kjhR9asm\"VJ'k8", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("S<kjhR9asm\"VJ'k8", document1.baseUri());
      assertNotNull(document1);
      
      String string0 = document1.ownText();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(2, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("S<kjhR9asm\"VJ'k8", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals("S<kjhR9asm\"VJ'k8", document1.baseUri());
      assertEquals("sortable", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      String string0 = document0.nodeName();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("async", "async");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("async", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("async", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("async", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("async", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("async", element0.baseUri());
      assertNotNull(element0);
      
      Elements elements0 = element0.nextElementSiblings();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("async", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("async", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals("async", element0.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parse(">pah", ">pah");
      assertEquals(">pah", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(">pah", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals(">pah", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(">pah", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(">pah", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.nextElementSibling();
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertEquals(">pah", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(">pah", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(">pah", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("body", element1.nodeName());
      assertEquals(">pah", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.tagName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("S<kjhR9asm\"VJ'k8", "S<kjhR9asm\"VJ'k8");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("org.jsoup.nodes.Element$NodeList");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.nodes.element$nodelist", element0.nodeName());
      assertEquals("org.jsoup.nodes.element$nodelist", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("S<kjhR9asm\"VJ'k8", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.lastElementSibling();
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.nodes.element$nodelist", element0.nodeName());
      assertEquals("org.jsoup.nodes.element$nodelist", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("S<kjhR9asm\"VJ'k8", element0.baseUri());
      assertEquals("org.jsoup.nodes.element$nodelist", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("S<kjhR9asm\"VJ'k8", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("org.jsoup.nodes.element$nodelist", element1.nodeName());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("body", "");
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("body");
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      boolean boolean0 = element0.isBlock();
      assertEquals("", document0.baseUri());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      assertEquals("*", evaluator_AllElements0.toString());
      assertNotNull(evaluator_AllElements0);
      
      boolean boolean0 = document0.is((Evaluator) evaluator_AllElements0);
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("*", evaluator_AllElements0.toString());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("br");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      boolean boolean0 = element0.is("br");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "Initial");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Initial", document0.baseUri());
      assertEquals("Initial", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      document0.siblingIndex = 319;
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Initial", document0.baseUri());
      assertEquals(319, document0.siblingIndex());
      assertEquals("Initial", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Elements elements0 = document0.previousElementSiblings();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Initial", document0.baseUri());
      assertEquals(319, document0.siblingIndex());
      assertEquals("Initial", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Document document1 = (Document)document0.insertChildren(0, (Collection<? extends Node>) elements0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Initial", document0.baseUri());
      assertEquals(319, document0.siblingIndex());
      assertEquals("Initial", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(319, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("Initial", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Initial", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Document.createShell(",oM ");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",oM ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(",oM ", document0.location());
      assertNotNull(document0);
      
      document0.setSiblingIndex((-2));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals((-2), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",oM ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(",oM ", document0.location());
      
      LinkedHashSet<CDataNode> linkedHashSet0 = new LinkedHashSet<CDataNode>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      Document document1 = (Document)document0.insertChildren((-2), (Collection<? extends Node>) linkedHashSet0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals((-2), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",oM ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(",oM ", document0.location());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(",oM ", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(",oM ", document1.location());
      assertEquals((-2), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Document.createShell("head");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertNotNull(element0);
      
      Elements elements0 = element0.getElementsByIndexLessThan(582);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      Element element1 = element0.insertChildren(0, (Collection<? extends Node>) elements0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("head", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.baseUri());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Document.createShell(",oM ");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(",oM ", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(",oM ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      document0.setSiblingIndex((-2281));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(",oM ", document0.location());
      assertEquals((-2281), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(",oM ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      
      Document document1 = (Document)document0.html("yDB@{L3kqc");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(",oM ", document0.location());
      assertEquals((-2281), document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(",oM ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(",oM ", document1.baseUri());
      assertEquals(",oM ", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals((-2281), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "id");
      assertFalse(document0.hasParent());
      assertEquals("id", document0.baseUri());
      assertEquals("id", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.html("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("id", document0.baseUri());
      assertEquals("id", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("id", document1.location());
      assertEquals("id", document1.baseUri());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parse("81TuZ>6VA)", "textarea");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertNotNull(document0);
      
      File file0 = MockFile.createTempFile("15GF/Vnp'4tuq|4QKo", "org.jsoup.select.Evaluator$AttributeWithValueNot");
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/15GF", file0.getParent());
      assertEquals("/tmp/15GF/Vnp'4tuq|4QKo0org.jsoup.select.Evaluator$AttributeWithValueNot", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals("Vnp'4tuq|4QKo0org.jsoup.select.Evaluator$AttributeWithValueNot", file0.getName());
      assertEquals(0L, file0.length());
      assertNotNull(file0);
      
      MockFileWriter mockFileWriter0 = new MockFileWriter(file0);
      assertNotNull(mockFileWriter0);
      
      MockFileWriter mockFileWriter1 = document0.html(mockFileWriter0);
      assertSame(mockFileWriter0, mockFileWriter1);
      assertSame(mockFileWriter1, mockFileWriter0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.location());
      assertEquals(0L, file0.getTotalSpace());
      assertEquals(1392409281320L, file0.lastModified());
      assertTrue(file0.isAbsolute());
      assertEquals("/tmp/15GF", file0.getParent());
      assertEquals("/tmp/15GF/Vnp'4tuq|4QKo0org.jsoup.select.Evaluator$AttributeWithValueNot", file0.toString());
      assertTrue(file0.exists());
      assertTrue(file0.canRead());
      assertTrue(file0.isFile());
      assertEquals(0L, file0.getUsableSpace());
      assertFalse(file0.isHidden());
      assertTrue(file0.canWrite());
      assertFalse(file0.isDirectory());
      assertEquals(0L, file0.getFreeSpace());
      assertTrue(file0.canExecute());
      assertEquals("Vnp'4tuq|4QKo0org.jsoup.select.Evaluator$AttributeWithValueNot", file0.getName());
      assertEquals(0L, file0.length());
      assertNotNull(mockFileWriter1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element");
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.nodes.Element", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.nodes.Element", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      String string0 = element0.html();
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.nodes.Element", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.nodes.Element", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("", element0.baseUri());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.val("body");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.Element", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      boolean boolean0 = document1.hasAttributes();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("org.jsoup.nodes.Element", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Document.createShell("rFG'U,");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("rFG'U,", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("rFG'U,", document0.location());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasAttributes();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("rFG'U,", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("rFG'U,", document0.location());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("selecte_", "selecte_");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("selecte_", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("selecte_", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("selecte_", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("selecte_", document0.location());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("selecte_", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Pattern pattern0 = Pattern.compile("selecte_", (-1228));
      assertEquals("selecte_", pattern0.toString());
      assertEquals((-1164), pattern0.flags());
      assertEquals("selecte_", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements0 = element0.getElementsMatchingText(pattern0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("selecte_", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("selecte_", document0.location());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("selecte_", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("selecte_", pattern0.toString());
      assertEquals((-1164), pattern0.flags());
      assertEquals("selecte_", pattern0.pattern());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Pattern pattern0 = Pattern.compile(" > ", (-19));
      assertEquals(" > ", pattern0.pattern());
      assertEquals(" > ", pattern0.toString());
      assertEquals((-19), pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" > ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(" > ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" > ", pattern0.pattern());
      assertEquals(" > ", pattern0.toString());
      assertEquals((-19), pattern0.flags());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Document.createShell(" 7O2<");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" 7O2<", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" 7O2<", document0.baseUri());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsContainingText(" 72<");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" 7O2<", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" 7O2<", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Document.createShell(" > ");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsContainingOwnText("k,4IU{p");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" > ", document0.baseUri());
      assertEquals(" > ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Document document0 = Document.createShell("class");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("class", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("class", document0.location());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByTag("replacementStr");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("class", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("class", document0.location());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.select.Evaluator$IsRoot");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("br");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", element0.baseUri());
      assertEquals("br", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Elements elements0 = document0.getElementsByTag("br");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parse("_`:q/ZoX:", "_`:q/ZoX:");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("_`:q/ZoX:", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("_`:q/ZoX:", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByIndexLessThan(2191);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("_`:q/ZoX:", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("_`:q/ZoX:", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(elements0.isEmpty());
      assertEquals(3, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Document.createShell("class");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("class", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("class", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByIndexGreaterThan(128);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("class", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("class", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Document document0 = Document.createShell(" 7O2<");
      assertFalse(document0.isBlock());
      assertEquals(" 7O2<", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" 7O2<", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByIndexEquals(1);
      assertFalse(document0.isBlock());
      assertEquals(" 7O2<", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" 7O2<", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell("EtOn^n^Ee6'F'");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("EtOn^n^Ee6'F'", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("EtOn^n^Ee6'F'", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("1n4Nsm0)V&|3}jlA\"");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("EtOn^n^Ee6'F'", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("EtOn^n^Ee6'F'", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("EtOn^n^Ee6'F'", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("EtOn^n^Ee6'F'", document1.location());
      assertNotNull(document1);
      
      Document document2 = (Document)document0.toggleClass("br");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("EtOn^n^Ee6'F'", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("EtOn^n^Ee6'F'", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("EtOn^n^Ee6'F'", document2.baseUri());
      assertEquals("EtOn^n^Ee6'F'", document2.location());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      
      Elements elements0 = document0.getElementsByClass("br");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("EtOn^n^Ee6'F'", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("EtOn^n^Ee6'F'", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Element element0 = new Element("S<kjhR9asm\"VJ'k8");
      assertFalse(element0.hasParent());
      assertEquals("S<kjhR9asm\"VJ'k8", element0.nodeName());
      assertEquals("S<kjhR9asm\"VJ'k8", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Elements elements0 = element0.getElementsByAttributeValueStarting("S<kjhR9asm\"VJ'k8", "S<kjhR9asm\"VJ'k8");
      assertFalse(element0.hasParent());
      assertEquals("S<kjhR9asm\"VJ'k8", element0.nodeName());
      assertEquals("S<kjhR9asm\"VJ'k8", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Document.createShell("v }S+q");
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("v }S+q", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("v }S+q", document0.baseUri());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByAttributeValueNot("v }S+q", "H!bC");
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("v }S+q", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("v }S+q", document0.baseUri());
      assertFalse(elements0.isEmpty());
      assertEquals(4, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.attr("Tag name must not be empty.", "Tag name must not be empty.");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      Elements elements0 = document1.getElementsByAttributeValueEnding("Tag name must not be empty.", "Tag name must not be empty.");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Pattern syntax error: ");
      assertFalse(tag0.isFormSubmittable());
      assertEquals("Pattern syntax error:", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Pattern syntax error:", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Attribute attribute0 = new Attribute("Pattern syntax error: ", "Pattern syntax error: ", attributes0);
      assertEquals(0, attributes0.size());
      assertEquals("Pattern syntax error:", attribute0.getKey());
      assertEquals("Pattern syntax error: ", attribute0.getValue());
      assertNotNull(attribute0);
      
      Attributes attributes1 = attributes0.put(attribute0);
      assertSame(attributes0, attributes1);
      assertSame(attributes1, attributes0);
      assertEquals(1, attributes0.size());
      assertEquals("Pattern syntax error:", attribute0.getKey());
      assertEquals("Pattern syntax error: ", attribute0.getValue());
      assertEquals(1, attributes1.size());
      assertNotNull(attributes1);
      
      FormElement formElement0 = new FormElement(tag0, "Pattern syntax error: ", attributes0);
      assertFalse(tag0.isFormSubmittable());
      assertEquals("Pattern syntax error:", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Pattern syntax error:", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, attributes0.size());
      assertEquals("Pattern syntax error:", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("Pattern syntax error:", formElement0.tagName());
      assertEquals("Pattern syntax error: ", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertNotNull(formElement0);
      
      Elements elements0 = formElement0.getElementsByAttributeValue("Pattern syntax error: ", "Pattern syntax error: ");
      assertSame(attributes0, attributes1);
      assertFalse(tag0.isFormSubmittable());
      assertEquals("Pattern syntax error:", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertEquals("Pattern syntax error:", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals(1, attributes0.size());
      assertEquals("Pattern syntax error:", formElement0.nodeName());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("Pattern syntax error:", formElement0.tagName());
      assertEquals("Pattern syntax error: ", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.attr("#root", "#root");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("#root", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertNotNull(document1);
      
      Elements elements0 = document0.getElementsByAttributeStarting("#root");
      assertSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Document document0 = Parser.parse("#root", "#root");
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.attr("#root", "#root");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Elements elements0 = document1.getElementsByAttribute("#root");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.select.Evaluator$IsRoot");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("br");
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", element0.baseUri());
      assertNotNull(element0);
      
      document0.setParentNode(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      Element element1 = document0.firstElementSibling();
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", element1.baseUri());
      assertEquals("html", element1.tagName());
      assertEquals("html", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(2, element1.childNodeSize());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("s+", "s+");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("s+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s+", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("s+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s+", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("s+", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.empty();
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("s+", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s+", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("s+", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("s+", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Document.createShell("em");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("em", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("em", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("em");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("em", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("em", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("em", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("em", element0.baseUri());
      assertEquals("em", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.empty();
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("em", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("em", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("em", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("em", element0.baseUri());
      assertEquals("em", element0.tagName());
      assertEquals("em", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("em", element1.nodeName());
      assertEquals("em", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ttjns (n]=r>wY", "Ttjns (n]=r>wY");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ttjns (n]=r>wY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ttjns (n]=r>wY", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("W");
      assertEquals("Ttjns (n]=r>wY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ttjns (n]=r>wY", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("Ttjns (n]=r>wY", element0.baseUri());
      assertEquals("w", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("w", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.doClone(element0);
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertEquals("Ttjns (n]=r>wY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Ttjns (n]=r>wY", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("Ttjns (n]=r>wY", element0.baseUri());
      assertEquals("w", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("w", element0.tagName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("Ttjns (n]=r>wY", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals("w", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("w", element1.tagName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertNotNull(document0);
      
      document0.setSiblingIndex((-4596));
      assertEquals((-4596), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      
      Document document1 = (Document)document0.doClone(document0);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals((-4596), document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals((-4596), document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("${", "id");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("id", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("id", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("id", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("id", document0.location());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("id", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.doClone(document0);
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("id", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("id", document0.location());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("id", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("id", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals("head", element1.tagName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("ls", "ls");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ls", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("ls", document0.baseUri());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.doClone((Node) null);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ls", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("ls", document0.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("ls", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("ls", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_@%KB=}F(y cVi@8_n/", "_@%KB=}F(y cVi@8_n/");
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Element element1 = element0.clone();
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Element element0 = new Element("selecfx_");
      assertEquals(0, element0.siblingIndex());
      assertEquals("selecfx_", element0.nodeName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("selecfx_", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.clone();
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("selecfx_", element0.nodeName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("selecfx_", element0.tagName());
      assertFalse(element1.hasParent());
      assertEquals("", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("selecfx_", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("selecfx_", element1.tagName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Document document0 = Document.createShell("S<kjhR9asm\"VJ'k8");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertNotNull(document0);
      
      document0.setSiblingIndex((-2));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals((-2), document0.siblingIndex());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      
      Set<String> set0 = document0.classNames();
      assertFalse(set0.contains("S<kjhR9asm\"VJ'k8"));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals((-2), document0.siblingIndex());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertNotNull(set0);
      
      Document document1 = (Document)document0.classNames(set0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(set0.contains("S<kjhR9asm\"VJ'k8"));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals((-2), document0.siblingIndex());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertEquals(0, set0.size());
      assertTrue(set0.isEmpty());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("S<kjhR9asm\"VJ'k8", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals((-2), document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("S<kjhR9asm\"VJ'k8", document1.baseUri());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("MGqt", "M");
      assertFalse(document0.hasParent());
      assertEquals("M", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("M", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.hasParent());
      assertEquals("M", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("M", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("M", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Locale locale0 = Locale.TRADITIONAL_CHINESE;
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertNotNull(locale0);
      
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      assertFalse(set0.contains("M"));
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertNotNull(set0);
      
      Element element1 = element0.classNames(set0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(set0.contains("M"));
      assertFalse(document0.hasParent());
      assertEquals("M", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("M", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("M", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals("zho", locale0.getISO3Language());
      assertEquals("", locale0.getVariant());
      assertEquals("zh", locale0.getLanguage());
      assertEquals("TWN", locale0.getISO3Country());
      assertEquals("zh_TW", locale0.toString());
      assertEquals("TW", locale0.getCountry());
      assertTrue(set0.isEmpty());
      assertEquals(0, set0.size());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("M", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("S<kjhR9asm\"VJ'k8", "S<kjhR9asm\"VJ'k8");
      assertEquals("#root", document0.tagName());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("\"5O");
      assertEquals("#root", document0.tagName());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("\"5o", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("\"5o", element0.nodeName());
      assertEquals("S<kjhR9asm\"VJ'k8", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("\"5O"));
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertNotNull(linkedHashSet0);
      
      Element element1 = element0.classNames((Set<String>) linkedHashSet0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(linkedHashSet0.contains("\"5O"));
      assertEquals("#root", document0.tagName());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("\"5o", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("\"5o", element0.nodeName());
      assertEquals("S<kjhR9asm\"VJ'k8", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertTrue(linkedHashSet0.isEmpty());
      assertEquals(0, linkedHashSet0.size());
      assertTrue(element1.hasParent());
      assertEquals("\"5o", element1.nodeName());
      assertEquals("S<kjhR9asm\"VJ'k8", element1.baseUri());
      assertEquals("\"5o", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.odes.Element", "org.jsoup.odes.Element");
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.odes.Element", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.odes.Element", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("value");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.odes.Element", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.odes.Element", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals("org.jsoup.odes.Element", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.odes.Element", document1.baseUri());
      assertNotNull(document1);
      
      Set<String> set0 = document0.classNames();
      assertSame(document0, document1);
      assertFalse(set0.contains("value"));
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.odes.Element", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.odes.Element", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, set0.size());
      assertFalse(set0.isEmpty());
      assertNotNull(set0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Parser.parse("_`:q/ZoX:", "_`:q/ZoX:");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("_`:q/ZoX:", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("_`:q/ZoX:", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("_`:q/ZoX:");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("_`:q/ZoX:", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("_`:q/ZoX:", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("_`:q/ZoX:", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("_`:q/ZoX:", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertNotNull(document1);
      
      String string0 = document0.className();
      assertSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("_`:q/ZoX:", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("_`:q/ZoX:", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Document.createShell("EtOn^n^Ee6'F'");
      assertEquals("EtOn^n^Ee6'F'", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("EtOn^n^Ee6'F'", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Elements elements0 = document0.children();
      assertEquals("EtOn^n^Ee6'F'", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("EtOn^n^Ee6'F'", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = new Document("a^v-X=^`|S-");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("a^v-X=^`|S-", document0.baseUri());
      assertEquals("a^v-X=^`|S-", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      int int0 = document0.childNodeSize();
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("a^v-X=^`|S-", document0.baseUri());
      assertEquals("a^v-X=^`|S-", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parse("-tj.{_A4an", "-tj.{_A4an");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("-tj.{_A4an", document0.baseUri());
      assertEquals("-tj.{_A4an", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      int int0 = document0.childNodeSize();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("-tj.{_A4an", document0.baseUri());
      assertEquals("-tj.{_A4an", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Document.createShell("a|A");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("a|A", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("a|A", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("bu");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("a|A", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("a|A", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("bu", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("a|A", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("bu", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = document0.child(1);
      assertSame(element1, element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("a|A", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("a|A", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("a|A", element1.baseUri());
      assertEquals("bu", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("bu", element1.nodeName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("selecte_", "selecte_");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("selecte_", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("selecte_", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.child(0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("selecte_", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("selecte_", document0.location());
      assertEquals("selecte_", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(2, element0.childNodeSize());
      assertEquals("html", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("html", element0.nodeName());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("0| L%Gws,*=EmM", "0| L%Gws,*=EmM");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("0| L%Gws,*=EmM", document0.baseUri());
      assertEquals("0| L%Gws,*=EmM", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("0| L%Gws,*=EmM", document0.baseUri());
      assertEquals("0| L%Gws,*=EmM", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("0| L%Gws,*=EmM", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.before((Node) document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("0| L%Gws,*=EmM", document0.baseUri());
      assertEquals("0| L%Gws,*=EmM", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("0| L%Gws,*=EmM", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.tagName());
      assertEquals("0| L%Gws,*=EmM", element1.baseUri());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+QGw}+TV_8#d", "+QGw}+TV_8#d");
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("+QGw}+TV_8#d", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("+QGw}+TV_8#d", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("rp");
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("+QGw}+TV_8#d", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("+QGw}+TV_8#d", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.hasParent());
      assertEquals("rp", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("+QGw}+TV_8#d", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("rp", element0.tagName());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = element0.before((Node) document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("+QGw}+TV_8#d", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("+QGw}+TV_8#d", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertEquals("rp", element0.nodeName());
      assertEquals("+QGw}+TV_8#d", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("rp", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("rp", element1.nodeName());
      assertFalse(element1.isBlock());
      assertEquals("rp", element1.tagName());
      assertEquals("+QGw}+TV_8#d", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("RTD`%9wy=TJ29", "RTD`%9wy=TJ29");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("RTD`%9wy=TJ29", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("RTD`%9wy=TJ29", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("RTD`%9wy=TJ29", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("RTD`%9wy=TJ29", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      
      Document document1 = (Document)document0.before((Node) document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("RTD`%9wy=TJ29", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("RTD`%9wy=TJ29", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals("RTD`%9wy=TJ29", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("RTD`%9wy=TJ29", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Document.createShell("Eq");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Eq", document0.baseUri());
      assertEquals("Eq", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Eq", document0.baseUri());
      assertEquals("Eq", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Eq", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = element0.before("g?");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Eq", document0.baseUri());
      assertEquals("Eq", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("Eq", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(2, element0.siblingIndex());
      assertEquals(2, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertEquals("head", element1.tagName());
      assertEquals("Eq", element1.baseUri());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Parser.parse("}", "}");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("}", document0.baseUri());
      assertEquals("}", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.createElement("}");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("}", document0.baseUri());
      assertEquals("}", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("}", element0.tagName());
      assertEquals("}", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("}", element0.baseUri());
      assertNotNull(element0);
      
      document0.setParentNode(element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("}", document0.baseUri());
      assertEquals("}", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertEquals("}", element0.tagName());
      assertEquals("}", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("}", element0.baseUri());
      
      Document document1 = (Document)document0.before("Ad0e H ?x3Uq+");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("}", document0.baseUri());
      assertEquals("}", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("}", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals("}", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element");
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("org.jsoup.nodes.Element", element0.nodeName());
      assertEquals("org.jsoup.nodes.Element", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      String string0 = element0.baseUri();
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("org.jsoup.nodes.Element", element0.nodeName());
      assertEquals("org.jsoup.nodes.Element", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+QGw}pTV_8#d", "InFrameset");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("InFrameset", document0.location());
      assertEquals("InFrameset", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("#");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("InFrameset", document0.location());
      assertEquals("InFrameset", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("InFrameset", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("InFrameset", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      Attributes attributes0 = document0.attributes();
      assertSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("InFrameset", document0.location());
      assertEquals("InFrameset", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Document.createShell("xhtml");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertNotNull(document0);
      
      document0.setSiblingIndex((-3650));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals((-3650), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      
      Document document1 = (Document)document0.attr("K_7N+VAEnQ", true);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals((-3650), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("xhtml", document1.baseUri());
      assertEquals((-3650), document1.siblingIndex());
      assertEquals("xhtml", document1.location());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-tj.{_A4an", "-tj.{_A4an");
      assertEquals("-tj.{_A4an", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("-tj.{_A4an", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("-tj.{_A4an", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("-tj.{_A4an", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("-tj.{_A4an", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = element0.attr("Insert position out of bounds.", false);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("-tj.{_A4an", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("-tj.{_A4an", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("-tj.{_A4an", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("-tj.{_A4an", element1.baseUri());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = new Document("S<kjhR9asm\"VJ'k8");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.attr("org.jsoup.nodes.Element$2", true);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("S<kjhR9asm\"VJ'k8", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("S<kjhR9asm\"VJ'k8", document1.location());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("br");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Element element1 = element0.attr("org.jsoup.nodes.Element$NodeList", ">;FbYZ!!t,l");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("br", element1.nodeName());
      assertEquals("br", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", element1.baseUri());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Document.createShell(",oM ");
      assertFalse(document0.hasParent());
      assertEquals(",oM ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(",oM ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      document0.setSiblingIndex((-2281));
      assertFalse(document0.hasParent());
      assertEquals((-2281), document0.siblingIndex());
      assertEquals(",oM ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(",oM ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      
      Document document1 = (Document)document0.attr(",oM ", "Xa'FL' /kU");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals((-2281), document0.siblingIndex());
      assertEquals(",oM ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(",oM ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(",oM ", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals((-2281), document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(",oM ", document1.location());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Document document0 = Parser.parse("String must not be empty", "Insert position out of bounds.");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.attr("String must not be empty", "yfugixpwa#!:e::4");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("Insert position out of bounds.", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("Insert position out of bounds.", element0.baseUri());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("Insert position out of bounds.", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Document.createShell("rFG'U,");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("rFG'U,", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("rFG'U,", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("rFG'U,", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("rFG'U,", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("rFG'U,", element0.baseUri());
      assertEquals("#root", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      Element element1 = element0.attr("rFG'U,", "html");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("rFG'U,", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("rFG'U,", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertEquals("#root", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("rFG'U,", element0.baseUri());
      assertEquals("#root", element0.tagName());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals("rFG'U,", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertEquals("#root", element1.tagName());
      assertFalse(element1.hasParent());
      assertEquals("#root", element1.nodeName());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("${", "id");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("id", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("id", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("id", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("id", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("id", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("id", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("id", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("id", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("id", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.tagName());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.select.Evaluator$IsRoot");
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("br");
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", element0.baseUri());
      assertEquals("br", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.appendTo(document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", element0.baseUri());
      assertEquals("br", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("br", element1.nodeName());
      assertEquals("br", element1.tagName());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.select.Evaluator$IsRoot");
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("br");
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = element0.appendText("org.jsoup.nodes.Element$NodeList");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals("br", element1.tagName());
      assertEquals(1, element1.siblingIndex());
      assertEquals("br", element1.nodeName());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", element1.baseUri());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parse("title", "title");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("title", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.appendText(":%Iwj`,lcOFf5p`");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("title", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("title", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertEquals("title", element0.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("title", element1.baseUri());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("CharacterReferenceInRcdata", "CharacterReferenceInRcdata");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CharacterReferenceInRcdata", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CharacterReferenceInRcdata", document0.location());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CharacterReferenceInRcdata", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CharacterReferenceInRcdata", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("CharacterReferenceInRcdata", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Element element1 = element0.appendChild(document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("CharacterReferenceInRcdata", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CharacterReferenceInRcdata", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("CharacterReferenceInRcdata", element0.baseUri());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals("CharacterReferenceInRcdata", element1.baseUri());
      assertEquals("head", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals("head", element1.nodeName());
      assertEquals(1, element1.childNodeSize());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Document.createShell("class");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("class", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("class", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = document0.clone();
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("class", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("class", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("class", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("class", document1.location());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertNotNull(document1);
      
      Document document2 = (Document)document0.appendChild(document1);
      assertFalse(document0.equals((Object)document1));
      assertFalse(document1.equals((Object)document0));
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document0, document1);
      assertSame(document0, document2);
      assertNotSame(document1, document2);
      assertNotSame(document1, document0);
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("class", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("class", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("class", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertEquals("class", document1.location());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("#root", document2.tagName());
      assertEquals("class", document2.location());
      assertEquals(2, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("class", document2.baseUri());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Cr", "Cr");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Cr", document0.location());
      assertEquals("Cr", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      document0.setSiblingIndex((-4178));
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals((-4178), document0.siblingIndex());
      assertEquals("Cr", document0.location());
      assertEquals("Cr", document0.baseUri());
      assertFalse(document0.hasParent());
      
      Document document1 = (Document)document0.append("y");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals((-4178), document0.siblingIndex());
      assertEquals("Cr", document0.location());
      assertEquals("Cr", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("Cr", document1.location());
      assertEquals("Cr", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals((-4178), document1.siblingIndex());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.append("textarea");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertEquals("body", element0.tagName());
      assertEquals(2, element0.childNodeSize());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", element1.baseUri());
      assertEquals("body", element1.tagName());
      assertEquals(2, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Tag tag0 = Tag.valueOf("aj.&?nh");
      assertFalse(tag0.preserveWhitespace());
      assertEquals("aj.&?nh", tag0.getName());
      assertEquals("aj.&?nh", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "aj.&?nh");
      assertFalse(tag0.preserveWhitespace());
      assertEquals("aj.&?nh", tag0.getName());
      assertEquals("aj.&?nh", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("aj.&?nh", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("aj.&?nh", element0.nodeName());
      assertEquals("aj.&?nh", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.append("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(tag0.preserveWhitespace());
      assertEquals("aj.&?nh", tag0.getName());
      assertEquals("aj.&?nh", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("aj.&?nh", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("aj.&?nh", element0.nodeName());
      assertEquals("aj.&?nh", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element1.hasParent());
      assertEquals("aj.&?nh", element1.nodeName());
      assertEquals("aj.&?nh", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("aj.&?nh", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Document.createShell("em");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("em", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("em");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("em", document0.location());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertEquals("em", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("em", element0.nodeName());
      assertEquals("em", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Tag tag0 = Tag.valueOf("AfterAfterBody");
      assertFalse(tag0.isEmpty());
      assertEquals("AfterAfterBody", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("AfterAfterBody", tag0.toString());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "AfterAfterBody", attributes0);
      assertFalse(tag0.isEmpty());
      assertEquals("AfterAfterBody", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("AfterAfterBody", tag0.toString());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("AfterAfterBody", formElement0.nodeName());
      assertEquals("AfterAfterBody", formElement0.baseUri());
      assertEquals("AfterAfterBody", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      
      Element element1 = element0.after((Node) formElement0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("em", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertEquals("em", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("em", element0.nodeName());
      assertEquals("em", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(tag0.isEmpty());
      assertEquals("AfterAfterBody", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("AfterAfterBody", tag0.toString());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertTrue(formElement0.hasParent());
      assertEquals("AfterAfterBody", formElement0.nodeName());
      assertEquals("AfterAfterBody", formElement0.baseUri());
      assertEquals("AfterAfterBody", formElement0.tagName());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(2, formElement0.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals("em", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("em", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("em", element1.tagName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Document.createShell("Pattern syntax error: ");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Pattern syntax error: ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Pattern syntax error: ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("Pattern syntax error: ", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertNotNull(element0);
      
      Element element1 = element0.after((Node) document0);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("Pattern syntax error: ", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("head", element0.nodeName());
      assertEquals("head", element1.tagName());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertEquals("Pattern syntax error: ", element1.baseUri());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("br");
      assertEquals(2, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Element element1 = element0.after("br");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("br", element0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", element1.baseUri());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("br", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("br", element1.tagName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Node", "org.jsoup.nodes.Node");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Node", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Node", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Node", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Node", document0.location());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("org.jsoup.nodes.Node", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      Element element1 = element0.after("id");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Node", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Node", document0.location());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("org.jsoup.nodes.Node", element0.baseUri());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element1.hasParent());
      assertEquals("body", element1.nodeName());
      assertEquals("body", element1.tagName());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals("org.jsoup.nodes.Node", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("S<kjhR9asm\"VJ'k8", "S<kjhR9asm\"VJ'k8");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("\"5O");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("\"5o", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("\"5o", element0.nodeName());
      assertEquals("S<kjhR9asm\"VJ'k8", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.addClass("S");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("\"5o", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals("\"5o", element0.nodeName());
      assertEquals("S<kjhR9asm\"VJ'k8", element0.baseUri());
      assertTrue(element1.hasParent());
      assertEquals("\"5o", element1.nodeName());
      assertEquals("S<kjhR9asm\"VJ'k8", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("\"5o", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Document.createShell("xhtml");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      document0.setSiblingIndex((-3627));
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals((-3627), document0.siblingIndex());
      
      Document document1 = (Document)document0.addClass(":Ok7X\"en|3sB");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals((-3627), document0.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals((-3627), document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals("xhtml", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("xhtml", document1.location());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Document.createShell("em");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("em", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("em", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("em", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.addClass("#root");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("em", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals("em", element0.baseUri());
      assertEquals("em", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("head", element1.nodeName());
      assertTrue(element1.isBlock());
      assertEquals("head", element1.tagName());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("S<kjhR9asm\"VJ'k8", "S<kjhR9asm\"VJ'k8");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      // Undeclared exception!
      document0.wrap("j]~xwGH)o5/B");
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Document document0 = Document.createShell("xhtml");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("xhtml", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("xhtml", document0.location());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("CharacterReferenceInRcdata", "CharacterReferenceInRcdata");
      assertFalse(document0.hasParent());
      assertEquals("CharacterReferenceInRcdata", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CharacterReferenceInRcdata", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendChild(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("CharacterReferenceInRcdata", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("CharacterReferenceInRcdata", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("CharacterReferenceInRcdata", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("CharacterReferenceInRcdata", document1.baseUri());
      assertNotNull(document1);
      
      // Undeclared exception!
      document0.val("CharacterReferenceInRcdata");
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("S<kjhR9asm\"VJ'k8", "S<kjhR9asm\"VJ'k8");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = new Document(".");
      assertFalse(document0.hasParent());
      assertEquals(".", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals(".", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.text(".");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+QGw}+TV_8#d", "+QGw}+TV_8#d");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("+QGw}+TV_8#d", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("+QGw}+TV_8#d", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertNotNull(document0);
      
      document0.childNodes = null;
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.select.Evaluator$IsRoot");
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.Element$NodeList");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      document0.setParentNode(cDataNode0);
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+QGw}pTV_8#d", "InFrameset");
      assertEquals("InFrameset", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("InFrameset", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertEquals("InFrameset", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("InFrameset", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      
      // Undeclared exception!
      document0.tagName("textarea");
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      assertFalse(document0.hasParent());
      assertEquals("Pattern syntax error: ", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.tagName((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("rW6h#h'?yYsiq?/3^", parseSettings0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("rW6h#h'?yYsiq?/3^", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("rW6h#h'?yYsiq?/3^", tag0.getName());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("s+");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Element element0 = new Element(tag0, "s+", attributes0);
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals("rW6h#h'?yYsiq?/3^", tag0.toString());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertEquals("rW6h#h'?yYsiq?/3^", tag0.getName());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertFalse(element0.hasParent());
      assertEquals("rW6h#h'?yYsiq?/3^", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("s+", element0.baseUri());
      assertEquals("rW6h#h'?yYsiq?/3^", element0.nodeName());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        element0.selectFirst("E\"u-[");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'E\"u-[': unexpected token at '\"u-['
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("MGqt", "M");
      assertEquals("M", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("M", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.selectFirst("1PdY _(4m=%o");
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%o'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("class", "class");
      assertEquals(0, document0.siblingIndex());
      assertEquals("class", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("class", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Document document0 = new Document("+QGw}pTV_8#d");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("+QGw}pTV_8#d", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("+QGw}pTV_8#d", document0.location());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.select("^'d[jaD_HV-w[|lk=");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '^'d[jaD_HV-w[|lk=': unexpected token at '^'d[jaD_HV-w[|lk='
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = new Document("Cr");
      assertEquals("Cr", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("Cr", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.select("j[x(q//%NfeP*");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'N'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element");
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("org.jsoup.nodes.Element", element0.nodeName());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("org.jsoup.nodes.Element", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        element0.select("org.jsoup.nodes.Element 'tL(drw&%SY-&Z'o1");
        fail("Expecting exception: MissingFormatArgumentException");
      
      } catch(MissingFormatArgumentException e) {
         //
         // Format specifier '%S'
         //
         verifyException("java.util.Formatter", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Document.createShell("rFG'U,");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("rFG'U,", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("rFG'U,", document0.location());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Tag tag0 = Tag.valueOf("<");
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertEquals("<", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("<", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertNotNull(tag0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "5", (Attributes) null);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertEquals("<", tag0.toString());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("<", tag0.getName());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertEquals("<", pseudoTextElement0.nodeName());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals("5", pseudoTextElement0.baseUri());
      assertEquals("<", pseudoTextElement0.tagName());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertNotNull(pseudoTextElement0);
      
      // Undeclared exception!
      try { 
        pseudoTextElement0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d=>e|pj1tlv", "AvazR7=B,Tr-kdr]");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("AvazR7=B,Tr-kdr]", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("AvazR7=B,Tr-kdr]", document0.baseUri());
      assertNotNull(document0);
      
      Comment comment0 = new Comment("d=>e|pj1tlv", "nhD)[,_GGuZ(85y@ega");
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      document0.setParentNode(comment0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("AvazR7=B,Tr-kdr]", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("AvazR7=B,Tr-kdr]", document0.baseUri());
      assertFalse(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parse("|Kps&WSY2h I1D", "|Kps&WSY2h I1D");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("|Kps&WSY2h I1D", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("|Kps&WSY2h I1D", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      TextNode textNode0 = TextNode.createFromEncoded("|Kps&WSY2h I1D");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      Document document1 = (Document)document0.doClone(textNode0);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("|Kps&WSY2h I1D", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("|Kps&WSY2h I1D", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertEquals("|Kps&WSY2h I1D", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("|Kps&WSY2h I1D", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document1.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Document.createShell(")FrNV4H`9?*;");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(")FrNV4H`9?*;", document0.baseUri());
      assertEquals(")FrNV4H`9?*;", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      DataNode dataNode0 = new DataNode(")FrNV4H`9?*;");
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertNotNull(dataNode0);
      
      Document document1 = (Document)document0.doClone(dataNode0);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(")FrNV4H`9?*;", document0.baseUri());
      assertEquals(")FrNV4H`9?*;", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(")FrNV4H`9?*;", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals(")FrNV4H`9?*;", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertTrue(document1.hasParent());
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(document1);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+QGw}pTV_8#d", "InFrameset");
      assertFalse(document0.hasParent());
      assertEquals("InFrameset", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("InFrameset", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      document0.reparentChild(document0);
      assertEquals("InFrameset", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("InFrameset", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      
      // Undeclared exception!
      document0.prependElement("+QGw}pTV_8#d");
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Document.createShell("v }S+q");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("v }S+q", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("v }S+q", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("5HGJO#_");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("v }S+q", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("v }S+q", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("v }S+q", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("v }S+q", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      
      List<Node> list0 = Parser.parseXmlFragment("5HGJO#_", "4^z|");
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      document1.childNodes = list0;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("v }S+q", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("v }S+q", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("v }S+q", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("v }S+q", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, document1.childNodes.size());
      assertFalse(document1.childNodes.isEmpty());
      
      // Undeclared exception!
      try { 
        document1.prependElement(";DKJ ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = new Document(" />");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" />", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(" />", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.prependElement((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Tag tag0 = Tag.valueOf("MZ/oC]ID");
      assertFalse(tag0.isKnownTag());
      assertEquals("MZ/oC]ID", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("MZ/oC]ID", tag0.toString());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "MZ/oC]ID", (Attributes) null);
      assertFalse(tag0.isKnownTag());
      assertEquals("MZ/oC]ID", tag0.getName());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertEquals("MZ/oC]ID", tag0.toString());
      assertEquals("MZ/oC]ID", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("MZ/oC]ID", element0.nodeName());
      assertEquals("MZ/oC]ID", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      CDataNode cDataNode0 = new CDataNode(" > ");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      cDataNode0.setParentNode(cDataNode0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertTrue(cDataNode0.hasParent());
      
      // Undeclared exception!
      try { 
        element0.prependChild(cDataNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Element element0 = new Element("em");
      assertEquals("em", element0.nodeName());
      assertEquals("em", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertNotNull(element0);
      
      DataNode dataNode0 = new DataNode("em");
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertNotNull(dataNode0);
      
      dataNode0.setParentNode(element0);
      assertEquals("em", element0.nodeName());
      assertEquals("em", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertTrue(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      
      // Undeclared exception!
      try { 
        element0.prependChild(dataNode0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("clasz", "clasz");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("clasz", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("clasz", document0.baseUri());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      
      // Undeclared exception!
      document0.prepend("br");
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parse("|Kps&WSY2h I1D", "(=epb");
      assertFalse(document0.isBlock());
      assertEquals("(=epb", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("(=epb", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      TextNode textNode0 = TextNode.createFromEncoded("(=epb");
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertNotNull(textNode0);
      
      Document document1 = (Document)document0.doClone(textNode0);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("(=epb", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("(=epb", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals("(=epb", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("(=epb", document1.baseUri());
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document1.prepend("(=epb");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = new Document("meta");
      assertEquals("#root", document0.tagName());
      assertEquals("meta", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("meta", document0.location());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("se{e*e_");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      document0.setParentNode(cDataNode0);
      assertEquals("#root", document0.tagName());
      assertEquals("meta", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("meta", document0.location());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("%!tVA]", "%!tVA]");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("%!tVA]", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("%!tVA]", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      DataNode dataNode0 = DataNode.createFromEncoded("c#somx)", (String) null);
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertNotNull(dataNode0);
      
      document0.parentNode = (Node) dataNode0;
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("%!tVA]", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("%!tVA]", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      
      // Undeclared exception!
      try { 
        document0.parent();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parse("AfterBody", "itemscope");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("itemscope", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("itemscope", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      StringBuffer stringBuffer0 = new StringBuffer("itemscope");
      assertEquals("itemscope", stringBuffer0.toString());
      assertEquals(9, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1312);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1312, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1312, document_OutputSettings1.indentAmount());
      assertNotNull(document_OutputSettings1);
      
      // Undeclared exception!
      document0.outerHtmlTail(stringBuffer0, 875, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("dl30T", "dl30T");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("dl30T", document0.location());
      assertEquals("dl30T", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "dl30T");
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(5, charBuffer0.length());
      assertEquals(5, charBuffer0.remaining());
      assertEquals(5, charBuffer0.capacity());
      assertFalse(charBuffer0.isDirect());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(5, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertEquals("dl30T", charBuffer0.toString());
      assertEquals(0, charBuffer0.position());
      assertNotNull(charBuffer0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 97692013, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("bl,ozVt`@$_`", parseSettings0);
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("bl,ozvt`@$_`", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("bl,ozvt`@$_`", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "bl,ozVt`@$_`");
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isFormListed());
      assertEquals("bl,ozvt`@$_`", tag0.getName());
      assertFalse(tag0.isBlock());
      assertEquals("bl,ozvt`@$_`", tag0.toString());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(element0.isBlock());
      assertEquals("bl,ozVt`@$_`", element0.baseUri());
      assertEquals("bl,ozvt`@$_`", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("bl,ozvt`@$_`", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      char[] charArray0 = new char[7];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      assertEquals(7, charBuffer0.remaining());
      assertEquals(7, charBuffer0.capacity());
      assertTrue(charBuffer0.hasArray());
      assertEquals("\u0000\u0000\u0000\u0000\u0000\u0000\u0000", charBuffer0.toString());
      assertTrue(charBuffer0.hasRemaining());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertFalse(charBuffer0.isReadOnly());
      assertEquals(0, charBuffer0.arrayOffset());
      assertEquals(7, charBuffer0.length());
      assertEquals(7, charBuffer0.limit());
      assertNotNull(charBuffer0);
      assertArrayEquals(new char[] {'\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(7, charArray0.length);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        element0.outerHtmlTail(charBuffer0, 2174, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Document.createShell("rFG'U,");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("rFG'U,", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("rFG'U,", document0.location());
      assertNotNull(document0);
      
      StringBuffer stringBuffer0 = new StringBuffer();
      assertEquals("", stringBuffer0.toString());
      assertEquals(0, stringBuffer0.length());
      assertNotNull(stringBuffer0);
      
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(stringBuffer0, 67, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Document.createShell("Too many redirects occurred trying to load URL %s");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Too many redirects occurred trying to load URL %s", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Too many redirects occurred trying to load URL %s", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream("dv4]");
      assertNotNull(mockPrintStream0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertNotNull(document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintStream0, (-1110026255), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("selecte_", ":onltye-o-tpe");
      assertFalse(document0.hasParent());
      assertEquals(":onltye-o-tpe", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(":onltye-o-tpe", document0.baseUri());
      assertNotNull(document0);
      
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) ":onltye-o-tpe");
      assertEquals(":onltye-o-tpe", stringBuilder0.toString());
      assertNotNull(stringBuilder0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1580);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(1580, document_OutputSettings0.indentAmount());
      assertFalse(document_OutputSettings1.outline());
      assertTrue(document_OutputSettings1.prettyPrint());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(1580, document_OutputSettings1.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertNotNull(document_OutputSettings1);
      
      // Undeclared exception!
      document0.outerHtmlHead(stringBuilder0, 21, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(23);
      assertEquals(0, charArrayWriter0.size());
      assertEquals("", charArrayWriter0.toString());
      assertNotNull(charArrayWriter0);
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charArrayWriter0, 23, (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      MockFile mockFile0 = new MockFile("-tj.{_a4an", "org.jsoup.nodes.Element$NodeList");
      assertNotNull(mockFile0);
      
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFile0);
      assertNotNull(mockPrintStream0);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertTrue(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertNotNull(document_OutputSettings0);
      
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintStream0, (-1028), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf(":nth-child(%d)", parseSettings0);
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals(":nth-child(%d)", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(":nth-child(%d)", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "&p");
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals(":nth-child(%d)", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(":nth-child(%d)", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("&p", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(":nth-child(%d)", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(":nth-child(%d)", element0.nodeName());
      assertNotNull(element0);
      
      Comment comment0 = new Comment((String) null, "&p");
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      Element element1 = element0.doClone(comment0);
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertEquals(":nth-child(%d)", tag0.getName());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals(":nth-child(%d)", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("&p", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(":nth-child(%d)", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals(":nth-child(%d)", element0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertEquals("&p", element1.baseUri());
      assertEquals(":nth-child(%d)", element1.nodeName());
      assertEquals(0, element1.childNodeSize());
      assertEquals(":nth-child(%d)", element1.tagName());
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
      
      // Undeclared exception!
      try { 
        element1.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = new Document("S<kjhR9asm\"VJ'k8");
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.element$nodelist", "org.jsoup.nodes.element$nodelist");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.element$nodelist", document0.baseUri());
      assertEquals("org.jsoup.nodes.element$nodelist", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.element$nodelist");
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      Document document1 = (Document)document0.doClone(cDataNode0);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document0, document1);
      assertNotSame(document1, document0);
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.element$nodelist", document0.baseUri());
      assertEquals("org.jsoup.nodes.element$nodelist", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertEquals("org.jsoup.nodes.element$nodelist", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals("org.jsoup.nodes.element$nodelist", document1.location());
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document1.lastElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("D4]", "D4]");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("D4]", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("D4]", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("D4]", document0.location());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("D4]", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      
      Evaluator.IsFirstOfType evaluator_IsFirstOfType0 = new Evaluator.IsFirstOfType();
      assertEquals(":first-of-type", evaluator_IsFirstOfType0.toString());
      assertNotNull(evaluator_IsFirstOfType0);
      
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IsFirstOfType0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Parser.parse("nwZ0U", "s$H&P9&P*dNa:hz@#a'");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("s$H&P9&P*dNa:hz@#a'", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("s$H&P9&P*dNa:hz@#a'", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = new Document("body");
      assertEquals("body", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Evaluator.IsRoot evaluator_IsRoot0 = new Evaluator.IsRoot();
      assertEquals(":root", evaluator_IsRoot0.toString());
      assertNotNull(evaluator_IsRoot0);
      
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_IsRoot0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.structuralevaluator$not", "v(Kd|~{._y'Dk2`");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("v(Kd|~{._y'Dk2`", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("v(Kd|~{._y'Dk2`", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      DataNode dataNode0 = DataNode.createFromEncoded("bgsound", "org.jsoup.nodes.Element");
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      document0.setParentNode(dataNode0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("v(Kd|~{._y'Dk2`", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("v(Kd|~{._y'Dk2`", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      
      Evaluator.IsOnlyChild evaluator_IsOnlyChild0 = new Evaluator.IsOnlyChild();
      assertEquals(":only-child", evaluator_IsOnlyChild0.toString());
      assertNotNull(evaluator_IsOnlyChild0);
      
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_IsOnlyChild0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.DataNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_@%KB=}F(y cVi@8_n/", "_@%KB=}F(y cVi@8_n/");
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.is("_@%KB=}F(y cVi@8_n/");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '_@%KB=}F(y cVi@8_n/': unexpected token at '_@%KB=}F(y cVi@8_n/'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("ls", "ls");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("ls", document0.baseUri());
      assertEquals("ls", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("ls", document0.baseUri());
      assertEquals("ls", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      document0.is("ls");
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("YusF", "   ");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("   ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("   ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Comment comment0 = new Comment("3Eb", "YusF");
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      assertNotNull(comment0);
      
      document0.setParentNode(comment0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("   ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("   ", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(comment0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.is("YusF");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.Comment cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Document.createShell(",oM ");
      assertEquals(",oM ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",oM ", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      DataNode dataNode0 = new DataNode((String) null);
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertNotNull(dataNode0);
      
      nodeArray0[3] = (Node) dataNode0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      dataNode0.reparentChild(nodeArray0[4]);
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(dataNode0.hasParent());
      assertEquals(7, nodeArray0.length);
      
      nodeArray0[6] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-2), nodeArray0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Parser.parse("+QGw}pTV_8#d", "+QGw}pTV_8#d");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("+QGw}pTV_8#d", document0.baseUri());
      assertEquals("+QGw}pTV_8#d", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren(0, nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Document.createShell(",oM ");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(",oM ", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(",oM ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      document0.setSiblingIndex((-2));
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(",oM ", document0.location());
      assertEquals((-2), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(",oM ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      
      Node[] nodeArray0 = new Node[7];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      DataNode dataNode0 = new DataNode((String) null);
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      nodeArray0[3] = (Node) dataNode0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-2), nodeArray0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      
      // Undeclared exception!
      document0.html("Tpp[d8&");
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = new Document("br");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      List<Node> list0 = Parser.parseXmlFragment("hkIir", "br");
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      document0.childNodes = list0;
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertFalse(document0.childNodes.isEmpty());
      assertEquals(1, document0.childNodes.size());
      
      // Undeclared exception!
      try { 
        document0.html("br");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Document.createShell("em");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("em", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Document document0 = Parser.parse(":onltyE-o-tpe", ":onltyE-o-tpe");
      assertEquals(":onltyE-o-tpe", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":onltyE-o-tpe", document0.location());
      assertNotNull(document0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      
      StringWriter stringWriter0 = new StringWriter(375);
      assertEquals("", stringWriter0.toString());
      assertNotNull(stringWriter0);
      
      // Undeclared exception!
      document0.html(stringWriter0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "adress");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("adress", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("adress", document0.location());
      assertNotNull(document0);
      
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "adress");
      assertEquals(6, charBuffer0.length());
      assertEquals(6, charBuffer0.remaining());
      assertTrue(charBuffer0.isReadOnly());
      assertEquals(6, charBuffer0.capacity());
      assertEquals(0, charBuffer0.position());
      assertFalse(charBuffer0.isDirect());
      assertEquals("adress", charBuffer0.toString());
      assertEquals(6, charBuffer0.limit());
      assertFalse(charBuffer0.hasArray());
      assertTrue(charBuffer0.hasRemaining());
      assertNotNull(charBuffer0);
      
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Document.createShell("org.jsoup.nodes.Element$NodeList");
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("h(", "h(");
      assertEquals("#root", document0.tagName());
      assertEquals("h(", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("h(", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      DocumentType documentType0 = new DocumentType("h(", "Pattern syntax error: ", "h(", "Pattern syntax error: ");
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertFalse(documentType0.hasParent());
      assertNotNull(documentType0);
      
      document0.setParentNode(documentType0);
      assertEquals("#root", document0.tagName());
      assertEquals("h(", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("h(", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertFalse(documentType0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = new Document("br");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("br");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      element0.siblingIndex = (-2042);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("br", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertEquals((-2042), element0.siblingIndex());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.baseUri());
      assertFalse(element0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Document.createShell("v }S+q");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertEquals("v }S+q", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("v }S+q", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      StringReader stringReader0 = new StringReader("textarea");
      assertNotNull(stringReader0);
      
      Document document0 = parser0.parseInput((Reader) stringReader0, "textarea");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("S<kjhR9asm\"VJ'k8", "InFrameset");
      assertEquals("InFrameset", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("InFrameset", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = new Document("M^*T`<)o(");
      assertEquals("#root", document0.tagName());
      assertEquals("M^*T`<)o(", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("M^*T`<)o(", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("M^*T`<)o(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: M^*T`<)o(
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("7x/28ymwm~", "Z2");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Z2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Z2", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("7x/28ymwm~", "(", true);
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertNotNull(xmlDeclaration0);
      
      document0.setParentNode(xmlDeclaration0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Z2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals("Z2", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("Z2");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("$C", "dR");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("dR", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("dR", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("dR");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("dR", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("dR", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("dr", element0.nodeName());
      assertEquals("dR", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("dr", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      element0.siblingIndex = (-1678);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("dR", document0.location());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("dR", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("dr", element0.nodeName());
      assertEquals("dR", element0.baseUri());
      assertEquals((-1678), element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("dr", element0.tagName());
      assertFalse(element0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("textarea");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = new Document(",oM ");
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(",oM ", document0.location());
      assertEquals(",oM ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("l4Wzc_/{}$", "body");
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("body", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("body", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("-tj.{_A4an", "value");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("value", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("value", document0.baseUri());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("<html>\n <head></head>\n <body>\n  -tj.{_A4an\n </body>\n</html>");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: <html>
         //  <head></head>
         //  <body>
         //   -tj.{_A4an
         //  </body>
         // </html>
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("e!`", "e!`");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("e!`", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("e!`", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      DataNode dataNode0 = DataNode.createFromEncoded("even", "even");
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      document0.setParentNode(dataNode0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("e!`", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("e!`", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("--");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("DV4]", "DV4]");
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("DV4]", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("DV4]", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      document0.setSiblingIndex((-1972));
      assertEquals((-1972), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("DV4]", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("DV4]", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      
      document0.setParentNode(document0);
      assertEquals((-1972), document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("DV4]", document0.baseUri());
      assertEquals("DV4]", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("DV4]");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Cr", "Cr");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Cr", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Cr", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      DataNode dataNode0 = new DataNode(",:m#_9;4yXdpEaz'");
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertNotNull(dataNode0);
      
      document0.setParentNode(dataNode0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("Cr", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Cr", document0.baseUri());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.getElementsContainingText(",:m#_9;4yXdpEaz'");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertNotNull(document0);
      
      DataNode dataNode0 = new DataNode("br", "br");
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      assertNotNull(dataNode0);
      
      document0.setParentNode(dataNode0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("br", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("br", document0.location());
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, dataNode0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("br");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("", "");
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByTag("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Document document0 = Document.createShell(",oM ");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(",oM ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(",oM ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      document0.setSiblingIndex((-2));
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(",oM ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-2), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(",oM ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      document0.setParentNode(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(",oM ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals((-2), document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(",oM ", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      try { 
        document0.getElementsByTag(",oM ");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parse("AV4*", "AV4*");
      assertEquals("AV4*", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("AV4*", document0.baseUri());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertEquals("AV4*", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("AV4*", document0.baseUri());
      
      document0.setSiblingIndex((-806));
      assertEquals("AV4*", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals((-806), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("AV4*", document0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.getElementsByIndexLessThan(21);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = Document.createShell("class");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("class", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("class", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = Parser.parseBodyFragmentRelaxed("class", "class");
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("class", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("class", document1.location());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      List<Node> list0 = document0.childNodesCopy();
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("class", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("class", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      document1.childNodes = list0;
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("class", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("class", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("class", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("class", document1.location());
      assertFalse(document1.isBlock());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertFalse(document1.childNodes.isEmpty());
      assertEquals(1, document1.childNodes.size());
      
      // Undeclared exception!
      try { 
        document1.getElementsByIndexGreaterThan(126);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parse("~o/Wa.r@%>Pp/N[", "%>WDA");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("%>WDA", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("%>WDA", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("%>WDA", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("%>WDA", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("%>WDA", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertNotNull(element0);
      
      element0.parentNode = (Node) document0;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("%>WDA", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("%>WDA", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals("%>WDA", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertFalse(element0.parentNode.hasParent());
      assertEquals(0, element0.parentNode.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals((-4578));
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("%!tVA]", "%!tVA]");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("%!tVA]", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("%!tVA]", document0.location());
      assertNotNull(document0);
      
      DataNode dataNode0 = DataNode.createFromEncoded("c#somx)", (String) null);
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertNotNull(dataNode0);
      
      document0.parentNode = (Node) dataNode0;
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("%!tVA]", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("%!tVA]", document0.location());
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertEquals(0, document0.parentNode.siblingIndex());
      assertFalse(document0.parentNode.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals(444);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("hM`^Q`", "");
      assertFalse(parser0.isTrackErrors());
      assertEquals("", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByClass("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("61eg~JaK3qPHMG!l", "S<kjhR9asm\"VJ'k8");
      assertFalse(document0.hasParent());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("MGR+oBsa21KuB*Z", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Document.createShell("em");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("em", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("em", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Yv~~`BMmjS", "\"");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("\"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("\"", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("VOZ5u69kC%<h", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+QGw}pTV_8#d", "InFrameset");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("InFrameset", document0.location());
      assertEquals("InFrameset", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding((String) null, "+QGw}pTV_8#d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = new Document("M^*T`<)o(");
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("M^*T`<)o(", document0.baseUri());
      assertEquals("M^*T`<)o(", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("", "?QboYn2NRBEI}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/%", "/%");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/%", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("/%", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("<");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/%", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("/%", document0.location());
      assertEquals(0, element0.childNodeSize());
      assertEquals("<", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("<", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("/%", element0.baseUri());
      assertNotNull(element0);
      
      element0.setSiblingIndex((-300));
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/%", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("/%", document0.location());
      assertEquals(0, element0.childNodeSize());
      assertEquals("<", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("<", element0.nodeName());
      assertTrue(element0.hasParent());
      assertEquals("/%", element0.baseUri());
      assertEquals((-300), element0.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("/%", "i9+BvDAd");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = new Document("O|C&*QB");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("O|C&*QB", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("O|C&*QB", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue((String) null, "body");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Document.createShell(",oM ");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(",oM ", document0.location());
      assertEquals(",oM ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      document0.setSiblingIndex((-4596));
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals((-4596), document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting("6A");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parse("<#f`m_xKuF%u5*Ww%M", "Pattern syntax error: ");
      assertFalse(document0.hasParent());
      assertEquals("Pattern syntax error: ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("Pattern syntax error: ", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Document.createShell(",oM ");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(",oM ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(",oM ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      document0.setSiblingIndex((-2));
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(",oM ", document0.location());
      assertEquals((-2), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",oM ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      document0.parentNode = (Node) document0;
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(",oM ", document0.location());
      assertEquals((-2), document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(",oM ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals((-2), document0.parentNode.siblingIndex());
      assertTrue(document0.parentNode.hasParent());
      
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("yDB@{L3kqc");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+QGw}pTV_8#d", "InFrameset");
      assertFalse(document0.hasParent());
      assertEquals("InFrameset", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("InFrameset", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.getElementById((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Parser.parse("46*", "46*");
      assertEquals("46*", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("46*", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      document0.siblingIndex = (-4041);
      assertEquals("46*", document0.location());
      assertEquals((-4041), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("46*", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      document0.setParentNode(document0);
      assertEquals("46*", document0.location());
      assertEquals((-4041), document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("46*", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.getElementById("46*");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.select.Evaluator$IsRoot");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("\n * ", "\n * ");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("\n * ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("\n * ", document0.baseUri());
      assertNotNull(document0);
      
      TextNode textNode0 = new TextNode("\n * ");
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      assertNotNull(textNode0);
      
      document0.setParentNode(textNode0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("\n * ", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("\n * ", document0.baseUri());
      assertEquals("#text", textNode0.nodeName());
      assertEquals(0, textNode0.siblingIndex());
      assertFalse(textNode0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("C$", "C$");
      assertEquals("#root", document0.tagName());
      assertEquals("C$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("C$", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      document0.childNodes = null;
      assertEquals("#root", document0.tagName());
      assertEquals("C$", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("C$", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element");
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("org.jsoup.nodes.Element", element0.tagName());
      assertEquals("org.jsoup.nodes.Element", element0.nodeName());
      assertNotNull(element0);
      
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      document0.setParentNode(element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals("org.jsoup.nodes.Element", element0.tagName());
      assertEquals("org.jsoup.nodes.Element", element0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      
      Document document1 = (Document)document0.toggleClass("");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertTrue(document1.hasParent());
      assertEquals("org.jsoup.nodes.Element", document1.baseUri());
      assertEquals("org.jsoup.nodes.Element", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      
      // Undeclared exception!
      try { 
        document1.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '#root.java.lang.String@0000000100': unexpected token at '@0000000100'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parse("-tj.{_A4an", "-tj.{_A4an");
      assertEquals("-tj.{_A4an", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("-tj.{_A4an", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Comment comment0 = new Comment("-tj.{_A4an");
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      assertNotNull(comment0);
      
      document0.setParentNode(comment0);
      assertEquals("-tj.{_A4an", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("-tj.{_A4an", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertEquals("#comment", comment0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Document.createShell(")!K@9^sP'oqA{");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      element0.setSiblingIndex((-2229));
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals((-2229), element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      
      document0.setParentNode(element0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals((-2229), element0.siblingIndex());
      assertEquals("head", element0.tagName());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Tag tag0 = Tag.valueOf("2JM8wKx:rb@");
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("2JM8wKx:rb@", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertEquals("2JM8wKx:rb@", tag0.toString());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "2JM8wKx:rb@", attributes0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("2JM8wKx:rb@", tag0.getName());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertEquals("2JM8wKx:rb@", tag0.toString());
      assertFalse(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals("2JM8wKx:rb@", formElement0.nodeName());
      assertEquals("2JM8wKx:rb@", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals("2JM8wKx:rb@", formElement0.tagName());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      
      // Undeclared exception!
      try { 
        formElement0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Document.createShell("rFG'U,");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("rFG'U,", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("rFG'U,", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.child(1112);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1112, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ttjns (n]=r>wY", "Ttjns (n]=r>wY");
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ttjns (n]=r>wY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Ttjns (n]=r>wY", document0.baseUri());
      assertNotNull(document0);
      
      DataNode dataNode0 = DataNode.createFromEncoded("Text", "Ttjns (n]=r>wY");
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      assertNotNull(dataNode0);
      
      document0.setParentNode(dataNode0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("Ttjns (n]=r>wY", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Ttjns (n]=r>wY", document0.baseUri());
      assertFalse(dataNode0.hasParent());
      assertEquals(0, dataNode0.siblingIndex());
      assertEquals("#data", dataNode0.nodeName());
      
      // Undeclared exception!
      try { 
        document0.before((Node) dataNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      assertNotNull(element0);
      
      document0.setParentNode(element0);
      assertEquals("#root", document0.tagName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
      
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(document0.hasParent());
      
      // Undeclared exception!
      document0.before("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = new Document("S:<-kE");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("S:<-kE", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("S:<-kE", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.attr((String) null, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":only-of-type", ":only-of-type");
      assertEquals(":only-of-type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(":only-of-type", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertEquals(":only-of-type", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(":only-of-type", document0.location());
      
      // Undeclared exception!
      document0.attr(":only-of-type", ":only-of-type");
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Document.createShell("em");
      assertEquals(0, document0.siblingIndex());
      assertEquals("em", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("em", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.attr((String) null, "textarea");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Tag tag0 = Tag.valueOf("java.lang.string@0000000038");
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("om'/tHLrly:");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "om'/tHLrly:", attributes0);
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("om'/tHLrly:", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertNotNull(pseudoTextElement0);
      
      Element element0 = pseudoTextElement0.doClone(cDataNode0);
      assertFalse(element0.equals((Object)pseudoTextElement0));
      assertNotSame(pseudoTextElement0, element0);
      assertNotSame(element0, pseudoTextElement0);
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals(1, attributes0.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals("om'/tHLrly:", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.isBlock());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals("om'/tHLrly:", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        element0.appendTo(pseudoTextElement0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("selecte_", "selecte_");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("selecte_", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("selecte_", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("selecte_", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("selecte_", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("selecte_", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      document0.setParentNode(element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("selecte_", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertTrue(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals("selecte_", document0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("selecte_", element0.baseUri());
      assertEquals("head", element0.tagName());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+QGw}pTV_8#d", "InFrameset");
      assertEquals("InFrameset", document0.baseUri());
      assertEquals("InFrameset", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.select.EvaluatoryIsRoot");
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.EvaluatoryIsRoot", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.EvaluatoryIsRoot", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.EvaluatoryIsRoot", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.EvaluatoryIsRoot", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      
      // Undeclared exception!
      document0.appendElement("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Document document0 = Parser.parse("bu", "bu");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("bu", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("bu", document0.location());
      assertNotNull(document0);
      
      List<Node> list0 = document0.childNodes();
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("bu", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("bu", document0.location());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      document0.childNodes = list0;
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("bu", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("bu", document0.location());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, document0.childNodes.size());
      assertFalse(document0.childNodes.isEmpty());
      
      // Undeclared exception!
      try { 
        document0.appendElement("bu");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+QxGw}PTV8#d", "+QxGw}PTV8#d");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("+QxGw}PTV8#d", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("+QxGw}PTV8#d", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.appendElement("    ");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("0r^/$Rxhml)<;I&", "ScriptDataDoubleEscapeEnd");
      assertEquals("ScriptDataDoubleEscapeEnd", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("ScriptDataDoubleEscapeEnd", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      CDataNode cDataNode0 = new CDataNode((String) null);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration(":contains(%s)", "ScriptDataDoubleEscapeEnd", false);
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertNotNull(xmlDeclaration0);
      
      Node node0 = cDataNode0.doClone(xmlDeclaration0);
      assertFalse(node0.equals((Object)cDataNode0));
      assertNotSame(cDataNode0, node0);
      assertNotSame(node0, cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertFalse(xmlDeclaration0.hasParent());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertEquals("#cdata", node0.nodeName());
      assertTrue(node0.hasParent());
      assertEquals(0, node0.siblingIndex());
      assertNotNull(node0);
      
      // Undeclared exception!
      try { 
        document0.appendChild(node0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("B4!uyoI#}?y;J9", "org.jsoup.nodes.Element$NodeList");
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      document0.append("org.jsoup.nodes.Element$NodeList");
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Document.createShell("v }S+q");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("v }S+q", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("v }S+q", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.text("5HGJO#_");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("v }S+q", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("v }S+q", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("v }S+q", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("v }S+q", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      List<Node> list0 = Parser.parseXmlFragment("5HGJO#_", "4^z|");
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      document1.childNodes = list0;
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("v }S+q", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("v }S+q", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("v }S+q", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("v }S+q", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(1, document1.childNodes.size());
      assertFalse(document1.childNodes.isEmpty());
      
      // Undeclared exception!
      try { 
        document1.append("Un2");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("S<kjhR9asm\"VJ'k8", "S<kjhR9asm\"VJ'k8");
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bu", "bu");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("bu", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("bu", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      DocumentType documentType0 = new DocumentType("bu", "nth-of-type", "bu", "bu", "nth-of-type");
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertFalse(documentType0.hasParent());
      assertNotNull(documentType0);
      
      document0.parentNode = (Node) documentType0;
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("bu", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("bu", document0.location());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, documentType0.siblingIndex());
      assertEquals("#doctype", documentType0.nodeName());
      assertFalse(documentType0.hasParent());
      assertFalse(document0.parentNode.hasParent());
      assertEquals(0, document0.parentNode.siblingIndex());
      
      // Undeclared exception!
      try { 
        document0.append("bu");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+", ":jJ5/)P)zj9,pq21rH_");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":jJ5/)P)zj9,pq21rH_", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(":jJ5/)P)zj9,pq21rH_", document0.location());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(":jJ5/)P)zj9,pq21rH_", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(":jJ5/)P)zj9,pq21rH_", document0.location());
      
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Document document0 = Document.createShell(",oM ");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(",oM ", document0.location());
      assertEquals(",oM ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      document0.setParentNode(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(",oM ", document0.location());
      assertEquals(",oM ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      document0.after("a2'Al");
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("G[Xml@2vH", "-tj.{_A4an");
      assertEquals("-tj.{_A4an", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("-tj.{_A4an", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.select.Evaluator$IndexGreaterThan");
      assertTrue(tag0.formatAsBlock());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", tag0.toString());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals("org.jsoup.select.Evaluator$IndexGreaterThan", tag0.getName());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertNotNull(tag0);
      
      CDataNode cDataNode0 = new CDataNode("RYPML 4");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null, attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "T");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("selecte_", "selecte_");
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("selecte_", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("selecte_", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("selecte_", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("selecte_", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("selecte_", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      MockPrintWriter mockPrintWriter0 = element0.html((MockPrintWriter) null);
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("selecte_", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("selecte_", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("selecte_", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertNull(mockPrintWriter0);
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Parser.parse("-tj.{_A4an", "-tj.{_A4an");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("-tj.{_A4an", document0.location());
      assertEquals("-tj.{_A4an", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasClass("-tj.{_A4an");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals("-tj.{_A4an", document0.location());
      assertEquals("-tj.{_A4an", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Cr", "Cr");
      assertEquals("Cr", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("Cr", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      assertFalse(linkedHashSet0.contains("Cr"));
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      boolean boolean0 = linkedHashSet0.add((String) null);
      assertFalse(linkedHashSet0.contains("Cr"));
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(1, linkedHashSet0.size());
      assertTrue(boolean0);
      
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("S<kjhR9asm\"VJ'k8", "S<kjhR9asm\"VJ'k8");
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendText("sortable");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("S<kjhR9asm\"VJ'k8", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      String string0 = document1.data();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("S<kjhR9asm\"VJ'k8", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("S<kjhR9asm\"VJ'k8", document1.location());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Document.createShell("rFG'U,");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("rFG'U,", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("rFG'U,", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasText();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("rFG'U,", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("rFG'U,", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("2", "t3oscK{pB7oTE=5B,Q");
      assertFalse(parser0.isTrackErrors());
      assertEquals("t3oscK{pB7oTE=5B,Q", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t3oscK{pB7oTE=5B,Q", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      boolean boolean0 = document0.hasText();
      assertFalse(parser0.isTrackErrors());
      assertEquals("t3oscK{pB7oTE=5B,Q", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("t3oscK{pB7oTE=5B,Q", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Document.createShell("rFG'U,");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("rFG'U,", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("rFG'U,", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertNotNull(document0);
      
      int int0 = document0.elementSiblingIndex();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("rFG'U,", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("rFG'U,", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(0, int0);
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parse("+QGw}pTV_8#d", "+QGw}pTV_8#d");
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("+QGw}pTV_8#d", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("+QGw}pTV_8#d", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("+QGw}pTV_8#d");
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("+QGw}pTV_8#d", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("+QGw}pTV_8#d", document0.location());
      assertTrue(element0.hasParent());
      assertEquals("+QGw}pTV_8#d", element0.baseUri());
      assertEquals("+qgw}ptv_8#d", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("+qgw}ptv_8#d", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      int int0 = element0.elementSiblingIndex();
      assertEquals("#root", document0.tagName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("+QGw}pTV_8#d", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("+QGw}pTV_8#d", document0.location());
      assertTrue(element0.hasParent());
      assertEquals("+QGw}pTV_8#d", element0.baseUri());
      assertEquals("+qgw}ptv_8#d", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("+qgw}ptv_8#d", element0.nodeName());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(1, int0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+QGw}pTV_8#d", "C!J%}V");
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("C!J%}V", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("C!J%}V", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = document0.head();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("C!J%}V", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("C!J%}V", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("C!J%}V", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.previousElementSibling();
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("C!J%}V", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("C!J%}V", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("head", element0.tagName());
      assertEquals("C!J%}V", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("head", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse("Cr", "Cr");
      assertFalse(document0.hasParent());
      assertEquals("Cr", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Cr", document0.location());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(document0.hasParent());
      assertEquals("Cr", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Cr", document0.location());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("Cr", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.previousElementSibling();
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(document0.hasParent());
      assertEquals("Cr", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Cr", document0.location());
      assertEquals("body", element0.tagName());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("Cr", element0.baseUri());
      assertEquals("head", element1.tagName());
      assertEquals(0, element1.childNodeSize());
      assertEquals("Cr", element1.baseUri());
      assertEquals("head", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Document.createShell("?elq~(p--x[ty");
      assertEquals("?elq~(p--x[ty", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("?elq~(p--x[ty", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertEquals("?elq~(p--x[ty", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("?elq~(p--x[ty", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("?elq~(p--x[ty", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      Element element1 = element0.html("?elq~(p--x[ty");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertEquals("?elq~(p--x[ty", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("?elq~(p--x[ty", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("?elq~(p--x[ty", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals("body", element0.nodeName());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("body", element0.tagName());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element1.siblingIndex());
      assertEquals("body", element1.tagName());
      assertTrue(element1.isBlock());
      assertEquals("body", element1.nodeName());
      assertEquals("?elq~(p--x[ty", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.childNodeSize());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Document.createShell("Eq");
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Eq", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Eq", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Attributes attributes0 = document0.attributes();
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("Eq", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("Eq", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Document document0 = Parser.parse("_`:q/ZoX:", "_`:q/ZoX:");
      assertEquals("_`:q/ZoX:", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("_`:q/ZoX:", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      String string0 = document0.className();
      assertEquals("_`:q/ZoX:", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("_`:q/ZoX:", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.select.Evaluator$IsRoot");
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendTo(document0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(1, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document1.tagName());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document1.location());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(2, document1.childNodeSize());
      assertTrue(document1.hasParent());
      assertEquals(1, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("class", "class");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("class", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("class", document0.location());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Pattern pattern0 = Pattern.compile("class", 58);
      assertEquals("class", pattern0.toString());
      assertEquals("class", pattern0.pattern());
      assertEquals(58, pattern0.flags());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("class", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("class", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("class", pattern0.toString());
      assertEquals("class", pattern0.pattern());
      assertEquals(58, pattern0.flags());
      assertFalse(elements0.isEmpty());
      assertEquals(1, elements0.size());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Element element0 = new Element("selecfx_");
      assertEquals("selecfx_", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("selecfx_", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      String string0 = element0.ownText();
      assertEquals("selecfx_", element0.nodeName());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("selecfx_", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Element element0 = new Element("AfterDoctypePublicIdentifier");
      assertEquals(0, element0.siblingIndex());
      assertEquals("AfterDoctypePublicIdentifier", element0.nodeName());
      assertEquals("AfterDoctypePublicIdentifier", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      boolean boolean0 = element0.isBlock();
      assertEquals(0, element0.siblingIndex());
      assertEquals("AfterDoctypePublicIdentifier", element0.nodeName());
      assertEquals("AfterDoctypePublicIdentifier", element0.tagName());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertFalse(element0.isBlock());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Document.createShell("em");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("em", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.empty();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("em", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("em", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals("#root", document1.tagName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals("em", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertNotNull(document0);
      
      String string0 = document0.baseUri();
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals("org.jsoup.nodes.Element$NodeList", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("selecte_", "selecte_");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("selecte_", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("selecte_", document0.baseUri());
      assertNotNull(document0);
      
      Pattern pattern0 = Pattern.compile("selecte_", (-1228));
      assertEquals((-1164), pattern0.flags());
      assertEquals("selecte_", pattern0.toString());
      assertEquals("selecte_", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsMatchingText(pattern0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("selecte_", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("selecte_", document0.baseUri());
      assertEquals((-1164), pattern0.flags());
      assertEquals("selecte_", pattern0.toString());
      assertEquals("selecte_", pattern0.pattern());
      assertEquals(3, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Document.createShell("rFG'U,");
      assertEquals("#root", document0.tagName());
      assertEquals("rFG'U,", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("rFG'U,", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Pattern pattern0 = Pattern.compile("rFG'U,", 0);
      assertEquals("rFG'U,", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("rFG'U,", pattern0.pattern());
      assertNotNull(pattern0);
      
      Elements elements0 = document0.getElementsByAttributeValueMatching("e<M8J?pds nR1x@61", pattern0);
      assertEquals("#root", document0.tagName());
      assertEquals("rFG'U,", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("rFG'U,", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("rFG'U,", pattern0.toString());
      assertEquals(0, pattern0.flags());
      assertEquals("rFG'U,", pattern0.pattern());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Document.createShell("em");
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("em", document0.location());
      assertNotNull(document0);
      
      String string0 = document0.id();
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("em", document0.location());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+QGw}pTV_8#d", "+QGw}pTV_8#d");
      assertFalse(document0.hasParent());
      assertEquals("+QGw}pTV_8#d", document0.baseUri());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("+QGw}pTV_8#d", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        document0.html((MockFileWriter) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("br");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = element0.appendElement("br");
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("br", element0.nodeName());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals("br", element1.nodeName());
      assertEquals("br", element1.tagName());
      assertFalse(element1.isBlock());
      assertEquals("br", element1.baseUri());
      assertNotNull(element1);
      
      String string0 = document0.html();
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("br", document0.location());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.baseUri());
      assertEquals("<html>\n <head></head>\n <body>\n  br\n </body>\n</html>\n<br><br></br>", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Element element0 = new Element("br");
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("br", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      String string0 = element0.toString();
      assertEquals(0, element0.siblingIndex());
      assertEquals("br", element0.tagName());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals("br", element0.nodeName());
      assertEquals(0, element0.childNodeSize());
      assertEquals("<br>", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = new Document("org.jsoup.nodes.Element$NodeList");
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Document document1 = document0.normalise();
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.location());
      assertEquals("#root", document1.tagName());
      assertNotNull(document1);
      
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertTrue(document_OutputSettings0.prettyPrint());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.outline());
      assertNotNull(document_OutputSettings0);
      
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document_OutputSettings1, document_OutputSettings0);
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
      assertEquals(1, document_OutputSettings1.indentAmount());
      assertFalse(document_OutputSettings1.prettyPrint());
      assertFalse(document_OutputSettings1.outline());
      assertNotNull(document_OutputSettings1);
      
      Document document2 = document1.outputSettings(document_OutputSettings0);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals("org.jsoup.nodes.Element$NodeList", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      
      String string0 = document2.html();
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document1, document2);
      assertSame(document1, document0);
      assertSame(document_OutputSettings0, document_OutputSettings1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.baseUri());
      assertEquals(1, document1.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$NodeList", document1.location());
      assertEquals("#root", document1.tagName());
      assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
      assertEquals(1, document_OutputSettings0.indentAmount());
      assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
      assertFalse(document_OutputSettings0.prettyPrint());
      assertFalse(document_OutputSettings0.outline());
      assertEquals("org.jsoup.nodes.Element$NodeList", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals("org.jsoup.nodes.Element$NodeList", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.hasParent());
      assertEquals("<html><head></head><body></body></html>", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", tag0.toString());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.formatAsBlock());
      assertEquals("textarea", tag0.getName());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "org.jsoup.noes.Element$NodeList");
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", tag0.toString());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.formatAsBlock());
      assertEquals("textarea", tag0.getName());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.noes.Element$NodeList", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      String string0 = element0.val();
      assertTrue(tag0.isFormListed());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", tag0.toString());
      assertTrue(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.formatAsBlock());
      assertEquals("textarea", tag0.getName());
      assertFalse(element0.hasParent());
      assertEquals("org.jsoup.noes.Element$NodeList", element0.baseUri());
      assertEquals("textarea", element0.nodeName());
      assertEquals("textarea", element0.tagName());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = new Document("CtP9jV$0.KPH_b");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CtP9jV$0.KPH_b", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("CtP9jV$0.KPH_b", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("CtP9jV$0.KPH_b");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CtP9jV$0.KPH_b", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("CtP9jV$0.KPH_b", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("CtP9jV$0.KPH_b", document1.location());
      assertEquals("CtP9jV$0.KPH_b", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      Document document2 = (Document)document0.toggleClass("CtP9jV$0.KPH_b");
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CtP9jV$0.KPH_b", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("CtP9jV$0.KPH_b", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("CtP9jV$0.KPH_b", document2.baseUri());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("CtP9jV$0.KPH_b", document2.location());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertNotNull(document2);
      
      Document document3 = (Document)document0.toggleClass("CtP9jV$0.KPH_b");
      assertSame(document0, document3);
      assertSame(document0, document2);
      assertSame(document0, document1);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertSame(document3, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("CtP9jV$0.KPH_b", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("CtP9jV$0.KPH_b", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("CtP9jV$0.KPH_b", document3.baseUri());
      assertFalse(document3.hasParent());
      assertEquals("#root", document3.tagName());
      assertFalse(document3.isBlock());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(0, document3.siblingIndex());
      assertEquals("#document", document3.nodeName());
      assertEquals(0, document3.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("CtP9jV$0.KPH_b", document3.location());
      assertNotNull(document3);
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("H% 1YmeGm=#=N}Txu2", "H% 1YmeGm=#=N}Txu2");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("H% 1YmeGm=#=N}Txu2", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("H% 1YmeGm=#=N}Txu2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("H% 1YmeGm=#=N}Txu2");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("H% 1YmeGm=#=N}Txu2", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("H% 1YmeGm=#=N}Txu2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.tagName());
      assertEquals("H% 1YmeGm=#=N}Txu2", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("H% 1YmeGm=#=N}Txu2", document1.baseUri());
      assertNotNull(document1);
      
      Document document2 = (Document)document0.toggleClass("th");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("H% 1YmeGm=#=N}Txu2", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("H% 1YmeGm=#=N}Txu2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("H% 1YmeGm=#=N}Txu2", document2.location());
      assertFalse(document2.hasParent());
      assertEquals("H% 1YmeGm=#=N}Txu2", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("#document", document2.nodeName());
      assertNotNull(document2);
      
      boolean boolean0 = document0.hasClass("th");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("H% 1YmeGm=#=N}Txu2", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("H% 1YmeGm=#=N}Txu2", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Document.createShell("!>\"4&");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("!>\"4&", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("!>\"4&", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("4a6$");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("!>\"4&", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("!>\"4&", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("!>\"4&", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals("!>\"4&", document1.location());
      assertNotNull(document1);
      
      Document document2 = (Document)document0.toggleClass("4a6$");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("!>\"4&", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("!>\"4&", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("!>\"4&", document2.location());
      assertEquals("#document", document2.nodeName());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals("!>\"4&", document2.baseUri());
      assertFalse(document2.isBlock());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      
      Document document3 = (Document)document0.toggleClass("JK;DRY_AL:h}26:VA_D");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertSame(document3, document0);
      assertSame(document3, document1);
      assertSame(document3, document2);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("!>\"4&", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("!>\"4&", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document3.childNodeSize());
      assertEquals("#root", document3.tagName());
      assertEquals(0, document3.siblingIndex());
      assertFalse(document3.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
      assertEquals("#document", document3.nodeName());
      assertFalse(document3.isBlock());
      assertEquals("!>\"4&", document3.location());
      assertFalse(document3.hasParent());
      assertEquals("!>\"4&", document3.baseUri());
      assertNotNull(document3);
      
      boolean boolean0 = document0.hasClass("4a6$");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document0, document3);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("!>\"4&", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertEquals("!>\"4&", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" ", " ");
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass(" ");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" ", document1.location());
      assertEquals(" ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      Document document2 = (Document)document1.toggleClass(" ");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document1, document0);
      assertSame(document1, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(" ", document1.location());
      assertEquals(" ", document1.baseUri());
      assertEquals("#root", document1.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(" ", document2.location());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(" ", document2.baseUri());
      assertFalse(document2.isBlock());
      assertEquals("#document", document2.nodeName());
      assertEquals("#root", document2.tagName());
      assertEquals(0, document2.siblingIndex());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.updateMetaCharsetElement());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      
      boolean boolean0 = document0.hasClass(" <%s>");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(" ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertEquals(" ", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be emWtyu", "Tag name must not be emWtyu");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be emWtyu", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be emWtyu", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass("*`7");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be emWtyu", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be emWtyu", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("Tag name must not be emWtyu", document1.baseUri());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#root", document1.tagName());
      assertEquals("Tag name must not be emWtyu", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
      
      Document document2 = (Document)document0.toggleClass("Tag name must not be emWtyu");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertSame(document2, document1);
      assertSame(document2, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be emWtyu", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be emWtyu", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document2.isBlock());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("Tag name must not be emWtyu", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#root", document2.tagName());
      assertEquals("Tag name must not be emWtyu", document2.baseUri());
      assertFalse(document2.hasParent());
      assertNotNull(document2);
      
      boolean boolean0 = document0.hasClass("Tag name must not be emWtyu");
      assertSame(document0, document1);
      assertSame(document0, document2);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be emWtyu", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("Tag name must not be emWtyu", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = new Document("em");
      assertEquals(0, document0.siblingIndex());
      assertEquals("em", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.addClass("em");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(0, document0.siblingIndex());
      assertEquals("em", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals(0, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("em", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("em", document1.baseUri());
      assertEquals("#document", document1.nodeName());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      boolean boolean0 = document0.hasClass("org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
      assertSame(document0, document1);
      assertEquals(0, document0.siblingIndex());
      assertEquals("em", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("em", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.toggleClass(".");
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Tag name must not be empty.", document1.location());
      assertEquals("#root", document1.tagName());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("Tag name must not be empty.", document1.baseUri());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
      
      boolean boolean0 = document0.hasClass("Tag name must not be empty.");
      assertSame(document0, document1);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.tagName());
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Tag name must not be empty.", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bu", "bu");
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("bu", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("bu", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Comment comment0 = new Comment("bu", "");
      assertEquals("#comment", comment0.nodeName());
      assertFalse(comment0.hasParent());
      assertEquals(0, comment0.siblingIndex());
      assertNotNull(comment0);
      
      Document document1 = (Document)document0.prependChild(comment0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("bu", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("bu", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertTrue(comment0.hasParent());
      assertEquals("#comment", comment0.nodeName());
      assertEquals(0, comment0.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("#root", document1.tagName());
      assertEquals(2, document1.childNodeSize());
      assertEquals("bu", document1.location());
      assertEquals("bu", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertNotNull(document1);
      
      String string0 = document0.data();
      assertSame(document0, document1);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("bu", document0.baseUri());
      assertEquals(2, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("bu", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals("bu", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(":only-of-type", ":only-of-type");
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":only-of-type", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(":only-of-type", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("#|bg}/]5", false);
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertFalse(xmlDeclaration0.hasParent());
      assertNotNull(xmlDeclaration0);
      
      Document document1 = (Document)document0.prependChild(xmlDeclaration0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":only-of-type", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(":only-of-type", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#declaration", xmlDeclaration0.nodeName());
      assertEquals(0, xmlDeclaration0.siblingIndex());
      assertTrue(xmlDeclaration0.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals(":only-of-type", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(":only-of-type", document1.location());
      assertFalse(document1.hasParent());
      assertNotNull(document1);
      
      boolean boolean0 = document0.hasText();
      assertSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":only-of-type", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(":only-of-type", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(2, document0.childNodeSize());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Tag tag0 = Tag.valueOf("selected");
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("selected", tag0.toString());
      assertEquals("selected", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      Element element0 = new Element(tag0, "selected");
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("selected", tag0.toString());
      assertEquals("selected", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("selected", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("selected", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("selected", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      Element element1 = element0.appendText("");
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("selected", tag0.toString());
      assertEquals("selected", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("selected", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("selected", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("selected", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element1.childNodeSize());
      assertEquals("selected", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals("selected", element1.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.hasParent());
      assertEquals("selected", element1.tagName());
      assertNotNull(element1);
      
      boolean boolean0 = element0.hasText();
      assertSame(element0, element1);
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("selected", tag0.toString());
      assertEquals("selected", tag0.getName());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("selected", element0.tagName());
      assertFalse(element0.hasParent());
      assertEquals("selected", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("selected", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("nm(`<tr]wx&bghhbao", "}Px>P]u");
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertNotNull(dataNode0);
      
      boolean boolean0 = Element.preserveWhitespace(dataNode0);
      assertEquals(0, dataNode0.siblingIndex());
      assertFalse(dataNode0.hasParent());
      assertEquals("#data", dataNode0.nodeName());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("br", "br");
      assertEquals("br", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = document0.appendElement("br");
      assertEquals("br", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("br", element0.tagName());
      assertEquals("br", element0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals("br", element0.baseUri());
      assertNotNull(element0);
      
      Element element1 = document0.appendElement("br");
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertEquals("br", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(2, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertEquals("br", element1.tagName());
      assertEquals("br", element1.baseUri());
      assertEquals("br", element1.nodeName());
      assertNotNull(element1);
      
      Elements elements0 = document0.getElementsMatchingOwnText("br");
      assertEquals("br", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(3, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.tagName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("br", document0.baseUri());
      assertEquals(1, elements0.size());
      assertFalse(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Document.createShell("v }S+q");
      assertEquals("v }S+q", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("v }S+q", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      LinkedHashSet<CDataNode> linkedHashSet0 = new LinkedHashSet<CDataNode>();
      assertEquals(0, linkedHashSet0.size());
      assertTrue(linkedHashSet0.isEmpty());
      assertNotNull(linkedHashSet0);
      
      CDataNode cDataNode0 = new CDataNode("ZZ@{59Q");
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertNotNull(cDataNode0);
      
      boolean boolean0 = linkedHashSet0.add(cDataNode0);
      assertTrue(linkedHashSet0.contains(cDataNode0));
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertTrue(boolean0);
      
      Document document1 = (Document)document0.insertChildren((-2), (Collection<? extends Node>) linkedHashSet0);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertTrue(linkedHashSet0.contains(cDataNode0));
      assertEquals("v }S+q", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("v }S+q", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, linkedHashSet0.size());
      assertFalse(linkedHashSet0.isEmpty());
      assertEquals("v }S+q", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(2, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.tagName());
      assertEquals("v }S+q", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      Elements elements0 = document0.getElementsMatchingText("#root");
      assertSame(document0, document1);
      assertEquals("v }S+q", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("v }S+q", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#root", document0.tagName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parse("<!--", "\"f=I6O(HgSp)_*");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("\"f=I6O(HgSp)_*", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("\"f=I6O(HgSp)_*", document0.baseUri());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsMatchingOwnText(":nth-child(%d)");
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("\"f=I6O(HgSp)_*", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#root", document0.tagName());
      assertFalse(document0.hasParent());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("\"f=I6O(HgSp)_*", document0.baseUri());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+QGw}pTV_8#d", "InFrameset");
      Element element0 = document0.appendText("+QGw}pTV_8#d");
      Elements elements0 = element0.getElementsMatchingText("AfterDoctypePublicIdentifier");
      assertEquals("InFrameset", element0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(" > ", "vqkbs7c'xwn5.keclp:");
      document0.appendText("mynoar>;$.[%k%kx@w#");
      String string0 = document0.text();
      assertEquals("vqkbs7c'xwn5.keclp:", document0.baseUri());
      assertEquals("> mynoar>;$.[%k%kx@w#", string0);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "nth-last-of-type");
      document0.appendElement("br");
      String string0 = document0.text();
      assertEquals("org.jsoup.nodes.Element$NodeList", string0);
      assertEquals("nth-last-of-type", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bu", "bu");
      document0.title("Qx8awsI!F5/NbC");
      Elements elements0 = document0.getElementsMatchingText("bu");
      assertEquals(3, elements0.size());
      assertEquals("bu", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("@onltyY-^-tHe", "@onltyY-^-tHe");
      document0.setParentNode(document0);
      Comment comment0 = new Comment("@onltyY-^-tHe", "o7yO)b+");
      Element element0 = document0.after((Node) comment0);
      String string0 = element0.text();
      assertEquals("@onltyY-^-tHe", string0);
      assertEquals("@onltyY-^-tHe", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("CharacterReferenceInRcdata", "CharacterReferenceInRcdata");
      Element element0 = document0.getElementById("CharacterReferenceInRcdata");
      assertEquals("CharacterReferenceInRcdata", document0.baseUri());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("v|>l<", "y%yZ [{.");
      Element element0 = document0.body();
      Element element1 = element0.lastElementSibling();
      assertNotNull(element1);
      assertEquals(1, element1.siblingIndex());
      assertEquals("y%yZ [{.", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element");
      Element element1 = element0.appendElement("org.jsoup.nodes.Element");
      Element element2 = element1.lastElementSibling();
      assertNull(element2);
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("selecte_", "selecte_");
      Element element0 = document0.head();
      Element element1 = element0.firstElementSibling();
      assertNotNull(element1);
      assertEquals("head", element1.tagName());
      assertEquals("selecte_", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+QGw}pTV_8#d", "InFrameset");
      document0.setParentNode(document0);
      Element element0 = document0.firstElementSibling();
      assertEquals("InFrameset", document0.baseUri());
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.setParentNode(document0);
      document0.nextElementSiblings();
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element");
      Element element1 = element0.previousElementSibling();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Document.createShell("9");
      Element element0 = document0.head();
      Element element1 = element0.nextElementSibling();
      assertEquals("9", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("_@%KB=}F(y cVi@8_n/", "_@%KB=}F(y cVi@8_n/");
      document0.nextElementSibling();
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("S<kjhR9asm\"VJ'k8", "S<kjhR9asm\"VJ'k8");
      Element element0 = document0.appendElement("\"5O");
      Elements elements0 = element0.siblingElements();
      assertEquals("S<kjhR9asm\"VJ'k8", element0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = new Document("textarea");
      document0.siblingElements();
      assertEquals("textarea", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Element element0 = new Element("org.jsoup.odes.Element");
      Document document0 = Parser.parseBodyFragment("org.jsoup.odes.Element", "org.jsoup.odes.Element");
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000047 se{ec{e_ cr", "java.lang.string@0000000047 se{ec{e_ cr");
      Element element0 = document0.head();
      element0.after("D#3C7(({os,^pVT$>J");
      String string0 = element0.cssSelector();
      assertEquals("html > head:nth-child(1)", string0);
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Document.createShell(")!K@9^sP'oqA{");
      Element element0 = document0.head();
      document0.setParentNode(element0);
      String string0 = document0.cssSelector();
      assertEquals("html > head > #root", string0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Document.createShell(")!K@9^sP'oqA{");
      document0.setParentNode(document0);
      String string0 = document0.cssSelector();
      assertEquals(1, document0.childNodeSize());
      assertEquals("#root", string0);
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element", "org.jsoup.nodes.Element");
      Element element0 = document0.toggleClass("");
      element0.cssSelector();
      assertEquals("org.jsoup.nodes.Element", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Element element0 = new Element("org.jsoup.nodes.Element");
      Node[] nodeArray0 = new Node[6];
      // Undeclared exception!
      try { 
        element0.insertChildren(1629, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+QGw}pTV_8#d", "InFrameset");
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
      try { 
        document0.insertChildren((-1073), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      assertEquals(1, document0.childNodeSize());
      
      Node[] nodeArray0 = new Node[0];
      Element element0 = document0.insertChildren(1, nodeArray0);
      assertEquals("org.jsoup.nodes.Element$NodeList", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = new Document(",oM ");
      LinkedHashSet<CDataNode> linkedHashSet0 = new LinkedHashSet<CDataNode>();
      // Undeclared exception!
      try { 
        document0.insertChildren(25, (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Document.createShell("v }S+q");
      LinkedList<DocumentType> linkedList0 = new LinkedList<DocumentType>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1151), (Collection<? extends Node>) linkedList0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":only-f-typ", ":only-f-typ");
      List<DataNode> list0 = document0.dataNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals(":only-f-typ", document0.baseUri());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = new Document("M^*T`<)o(");
      Element element0 = document0.prependText("M^*T`<)o(");
      List<TextNode> list0 = element0.textNodes();
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      List<TextNode> list0 = document0.textNodes();
      assertEquals("org.jsoup.nodes.Element$NodeList", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "org.jsoup.nodes.Element$NodeList");
      document0.prepend("org.jsoup.nodes.Element$NodeList");
      document0.setParentNode(document0);
      document0.nextElementSibling();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = new Document("#root");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-177));
      assertEquals("#root", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ttjns (n]=r>wY", "Ttjns (n]=r>wY");
      document0.is("name");
      assertEquals("Ttjns (n]=r>wY", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = new Document("xhtml");
      document0.getAllElements();
      assertEquals("xhtml", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "nth-last-of-type");
      Element element0 = document0.removeClass("org.jsoup.nodes.Element$NodeList");
      assertEquals(1, element0.childNodeSize());
      assertEquals("nth-last-of-type", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parse("}", "}");
      // Undeclared exception!
      try { 
        document0.before("Ad0e H ?x3Uq+");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = new Document("M^*T`<)o(");
      document0.getElementsByAttribute("aE5");
      assertEquals("M^*T`<)o(", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(":only-f-typ", ":only-f-typ");
      Elements elements0 = document0.getElementsByAttributeValueNot(",Izg&wjl97", "      ");
      assertEquals(":only-f-typ", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf(" _u!:D*m%N", parseSettings0);
      Element element0 = new Element(tag0, " _u!:D*m%N");
      element0.doSetBaseUri((String) null);
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("@onltyY-^-tHe", "@onltyY-^-tHe");
      Comment comment0 = new Comment("@onltyY-^-tHe", "o7yO)b+");
      // Undeclared exception!
      try { 
        document0.after((Node) comment0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("/%", "/%");
      document0.getElementsByAttributeValueContaining("/%", "i9+BvDAd");
      assertEquals(1, document0.childNodeSize());
      assertEquals("/%", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Document.createShell("a|A");
      document0.getElementsByAttributeValueMatching("a|A", ":nth-child(%d)");
      assertEquals(1, document0.childNodeSize());
      assertEquals("a|A", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Document document0 = Document.createShell(" 72<");
      document0.getElementsContainingText((String) null);
      assertEquals(1, document0.childNodeSize());
      assertEquals(" 72<", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Document document0 = Parser.parse("frame", "frame");
      Elements elements0 = document0.getElementsByClass("frame");
      assertEquals("frame", document0.baseUri());
      assertTrue(elements0.isEmpty());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Document document0 = Document.createShell("Tag name must not be empty.");
      document0.getElementsByAttributeValueEnding("Tag name must not be empty.", "Tag name must not be empty.");
      assertEquals("Tag name must not be empty.", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("bj", "bj");
      Evaluator.IsLastOfType evaluator_IsLastOfType0 = new Evaluator.IsLastOfType();
      document0.is((Evaluator) evaluator_IsLastOfType0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("bj", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("+QGw}pTV_8#d", "InFrameset");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("InFrameset", "+QGw}pTV_8#d");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: +QGw}pTV_8#d
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("S<kjhR9asm\"VJ'k8", "S<kjhR9asm\"VJ'k8");
      // Undeclared exception!
      try { 
        document0.wrap("FP\"T");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Document document0 = Document.createShell(" 72<");
      Elements elements0 = document0.getElementsByIndexEquals((-1955));
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, elements0.size());
      assertEquals(" 72<", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Document document0 = Parser.parse("bu", "bu");
      document0.getElementsByAttributeStarting(" />");
      assertEquals(1, document0.childNodeSize());
      assertEquals("bu", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Document document0 = Document.createShell("9");
      // Undeclared exception!
      try { 
        document0.after("selecte_");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Document document0 = new Document("em");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("2", "t3oscK{pB7oTE=5B,Q");
      document0.getElementsByAttributeValue("t3oscK{pB7oTE=5B,Q", "t3oscK{pB7oTE=5B,Q");
      assertEquals("t3oscK{pB7oTE=5B,Q", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("textarea", "textarea");
      document0.wholeText();
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Document document0 = Document.createShell("rFG'U,");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Document document0 = Parser.parse("br", "br");
      Elements elements0 = document0.getElementsContainingOwnText("br");
      assertEquals("br", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Document document0 = Document.createShell("em");
      document0.dataset();
      assertEquals("em", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Element element0 = new Element("textarea");
      element0.val("bu");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Document document0 = new Document("+QGw}pTV_8#d");
      // Undeclared exception!
      try { 
        document0.child((-125));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Document document0 = Parser.parse("Cr", "Cr");
      document0.prependElement("l oBBU=lq");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Document document0 = new Document("xhtml");
      document0.children();
      assertEquals("xhtml", document0.baseUri());
  }
}
