/*
 * This file was automatically generated by EvoSuite
 * Wed Aug 18 03:11:21 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.CharArrayWriter;
import java.io.FileDescriptor;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.nio.BufferOverflowException;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y*,g/[x", "Y*,g/[x");
      Element element0 = document0.head();
      document0.setParentNode(element0);
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("MSnk:~$");
      LinkedHashSet<DataNode> linkedHashSet0 = new LinkedHashSet<DataNode>();
      document0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("Sjz(", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("class");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "4!8?*3_WG", attributes0);
      MockPrintStream mockPrintStream0 = new MockPrintStream("AT4^%*}L");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      pseudoTextElement0.outerHtmlHead(mockPrintStream0, 4, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qoaMs", "qoaMs");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+?U6O8", "+?U6O8");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("lji^", "lji^");
      document0.doSetBaseUri("Data");
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "org.jsoup.parser.Token$TokenType");
      Document document1 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$NodeList", "EIj\"H$q;:@{R");
      document0.appendTo(document1);
      document0.wrap("Sjz(");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Parser.parse("%Rs", "o@K");
      Element element0 = document0.head();
      element0.wrap("mn");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d+(p3|Y", "d+(p3|Y");
      Element element0 = document0.body();
      element0.wrap("fallback");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f,J0Cr 6", "\"p7$@Pt8-q@We#");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.siblingIndex = (-2);
      document1.val("f,J0Cr 6");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Document document0 = Parser.parse("tag name must not be empty.", "#%s");
      Element element0 = document0.body();
      element0.val("#%s");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Tag tag0 = Tag.valueOf("listing");
      Element element0 = new Element(tag0, "listing");
      Element element1 = element0.val("e7");
      element1.val();
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Document document0 = new Document("typemustmtch");
      document0.siblingIndex = (-1110026255);
      document0.toggleClass("typemustmtch");
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Document.createShell("listig");
      Element element0 = document0.body();
      element0.toggleClass("listig");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("optgroup", "optgroup");
      document0.setParentNode(document0);
      document0.toggleClass("#root");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Document.createShell("listig");
      Element element0 = document0.body();
      element0.text("Y*,g/[x");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Element element0 = new Element("&lt;");
      element0.text("&lt;");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "class");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E.FCh :VvmF;]<", "E.FCh :VvmF;]<");
      document0.siblingIndex = (-816);
      document0.tagName("2m/!?");
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("SKIP_ENTIRELY", "org.jsoup.select.CombiningEvaluator$Or");
      document0.tagName("nav");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Document.createShell("listig");
      Element element0 = document0.body();
      element0.tagName("listig");
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("%s", "%s");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("i", "i");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("j}>kx8^M\"<op", "j}>kx8^M\"<op");
      Element element0 = document0.prependElement("title");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      FormElement formElement0 = new FormElement(tag0, "zB6luow1kPqVby'`i", (Attributes) null);
      formElement0.tag();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Tag tag0 = Tag.valueOf("head");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "frameset", attributes0);
      formElement0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Document document0 = Document.createShell("&lt;");
      document0.selectFirst("#root");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("typemustmtch", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "SU", (Attributes) null);
      pseudoTextElement0.selectFirst("typemustmtch");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Document document0 = new Document("MN");
      document0.prependElement("optdArou");
      document0.selectFirst("optdArou");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parse("vM/&+vO)}{!qY@ST", "vM/&+vO)}{!qY@ST");
      document0.selectFirst("body");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("tag name must not be empty.", "GUmWlD7mOToOa !");
      document0.select("#root");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = new Document("Y*,g/[x");
      Element element0 = document0.prependElement("optgroup");
      element0.select("optgroup");
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+?U6O8", "+?U6O8");
      Element element0 = document0.body();
      element0.removeClass("HXNr_ceg 2$u");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("class", "class");
      Element element0 = document0.prependElement("class");
      element0.removeClass("class");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Parser.parse(".", "AaM");
      Element element0 = document0.body();
      Element element1 = element0.before("#root");
      element1.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = new Document("dum3diamh%");
      Element element0 = document0.prependElement("title");
      Element.preserveWhitespace(element0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f,J0Cr 6", "\"p7$@Pt8-q@We#");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.siblingIndex = (-2);
      document0.prependText("<^0T4<]L>");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("*,g/[x", "*,g/[x");
      Element element0 = document0.body();
      element0.prependText("*,g/[x");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MSnk:~$", "MSnk:~$");
      Element element0 = document0.body();
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.ownerDocument();
      document1.siblingIndex = 273;
      document0.prepend("html");
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("f,J0Cr 6", "\"p7$@Pt8-q@We#");
      Document.QuirksMode document_QuirksMode0 = Document.QuirksMode.quirks;
      Document document1 = document0.quirksMode(document_QuirksMode0);
      document1.siblingIndex = (-2);
      document1.prepend("org.jsoup.nodes.PseudoTextElement");
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("i", "i");
      Element element0 = document0.head();
      element0.prepend("R' \"3=M%\"z^");
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("class", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("4!8?*3_WG");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "class", attributes0);
      pseudoTextElement0.prepend("");
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "org.jsoup.parser.Token$TokenType");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y*,g/[x", "Y*,g/[x");
      Element element0 = document0.head();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("$DI%rGbBG_h", ":nth-of-type(");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("dt", "dt");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = new Document("Y*,g/[x");
      Element element0 = document0.prependElement("optgroup");
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = new Document("Y*,g/[x");
      document0.setParentNode(document0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("M;Ez-\"XLU4tgu", "M;Ez-\"XLU4tgu");
      Element element0 = document0.append("p%KpiH_R");
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("</", "typemustmtch");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("Children collection to be inserted must not be null.", "br");
      document0.prependElement(":(fn0?DDbj.Z%O=.D&");
      Element element0 = document0.prependElement("br");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = new Document("Y*,g/[x");
      Element element0 = document0.prependElement("optgroup");
      document0.normalise();
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Element element0 = new Element("&lt;");
      Document document0 = new Document("&lt;");
      document0.appendChild(element0);
      element0.after((Node) document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Document document0 = Parser.parse("\"$poE#.iyy_XeDc", "\"$poE#.iyy_XeDc");
      Element element0 = document0.body();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("class", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("4!8?*3_WG");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "4!8?*3_WG", attributes0);
      Evaluator.ContainsOwnText evaluator_ContainsOwnText0 = new Evaluator.ContainsOwnText((String) null);
      element0.is((Evaluator) evaluator_ContainsOwnText0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = new Document("#root");
      document0.is("#root");
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#%s");
      CDataNode cDataNode0 = new CDataNode("#%s");
      DataNode dataNode0 = DataNode.createFromEncoded("#%s", "#%s");
      Element element0 = new Element(tag0, "\"p7$@Pt8-q@We#");
      Node[] nodeArray0 = new Node[4];
      nodeArray0[0] = (Node) dataNode0;
      nodeArray0[1] = (Node) element0;
      nodeArray0[2] = (Node) cDataNode0;
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("id", false);
      nodeArray0[3] = (Node) xmlDeclaration0;
      element0.insertChildren((-1), nodeArray0);
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y*,g/[x", "Y*,g/[x");
      Element element0 = document0.prependElement("}yME");
      Node[] nodeArray0 = new Node[0];
      element0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = new Document("Tag name must not be empty.");
      document0.setSiblingIndex((-1625949436));
      document0.html("a<4a_jbqiy");
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = new Document("dum3diamh%");
      Element element0 = document0.prependElement("title");
      element0.html("");
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MN", "MN");
      Element element0 = document0.appendElement("br");
      element0.html(">");
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = new Document("ym");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      document0.html((OutputStreamWriter) mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("%Rs");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("%Rs");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "%Rs", attributes0);
      pseudoTextElement0.html();
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("class");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("PH5rxCP/u");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "r<*<L>;}j", attributes0);
      pseudoTextElement0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y*,g/[x", "Y*,g/[x");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "org.jsoup.parser.Token$TokenType");
      Element element0 = document0.text("address");
      Pattern pattern0 = Pattern.compile("textarea");
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MN", "MN");
      document0.getElementsMatchingText("MN");
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Tag tag0 = Tag.valueOf("de.L/2{");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.StructuralEvaluator$PreviousSibling");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "de.L/2{", attributes0);
      Pattern pattern0 = Pattern.compile("org.jsoup.select.StructuralEvaluator$PreviousSibling", 0);
      formElement0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Parser.parse("class", "class");
      Pattern pattern0 = Pattern.compile("class");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qoaMs", "qoaMs");
      document0.getElementsMatchingOwnText("qoaMs");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = new Document("");
      document0.getElementsContainingOwnText("");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Element element0 = new Element("]qa{)mWl^$<D+WZe`]");
      element0.getElementsByTag("jlbfl9");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("html", "html");
      document0.getElementsByTag("html");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+?U6O8", "+?U6O8");
      document0.getElementsByIndexLessThan(1433);
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("class");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("br", (ParseSettings) null);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "formnovalidate", attributes0);
      pseudoTextElement0.getElementsByIndexGreaterThan(92);
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("</", "typemustmtch");
      document0.getElementsByIndexEquals(1);
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Tag tag0 = Tag.valueOf(" />");
      Element element0 = new Element(tag0, "");
      element0.getElementsByAttributeValueStarting(",(:9O4$60ARK3d2.tA", "disabled");
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("typemustmtch", "typemustmtch");
      document0.getElementsByAttributeValueNot("Z", "Z");
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("class", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("org.jsoup.parser.Token$Comment", "AaM");
      FormElement formElement0 = new FormElement(tag0, "String input must not be null", attributes1);
      formElement0.getElementsByAttributeValueMatching("org.jsoup.parser.Token$Comment", ".");
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = new Document("7]Wu");
      document0.getElementsByAttributeValueContaining("Y$~k]gC@XZ.EH", "Y$~k]gC@XZ.EH");
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Element element0 = new Element("%Rs");
      element0.getElementsByAttributeValue("%Rs", "%Rs");
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("ScriptDataEscapedLessthanSign", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.put("textarea", "java.lang.string@0000000016");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "ScriptDataEscapedLessthanSign", attributes0);
      pseudoTextElement0.getElementsByAttributeStarting("textarea");
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Tag tag0 = Tag.valueOf("listing");
      CDataNode cDataNode0 = new CDataNode("Y*,g/[x");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "listing", attributes0);
      element0.getElementsByAttribute("Y*,g/[x");
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("l~+~%zklu%S4-", parseSettings0);
      Attributes attributes0 = new Attributes();
      attributes0.put("B|3N^EP%", "l~+~%zklu%S4-");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "l~+~%zklu%S4-", attributes0);
      pseudoTextElement0.getElementsByAttribute("B|3N^EP%");
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("i", "i");
      Element element0 = document0.prependElement("i");
      Element element1 = element0.prependText("i");
      element1.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("                ", "                ");
      Element element0 = document0.body();
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Document.createShell("&lt;");
      Element element0 = document0.body();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("class", parseSettings0);
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "                    ", attributes0);
      element0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Element element0 = new Element("html");
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("listing", "listing");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Document.createShell("listig");
      Element element0 = document0.body();
      Charset charset0 = Charset.defaultCharset();
      Set<String> set0 = charset0.aliases();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MN", "MN");
      Element element0 = document0.appendElement("MN");
      Locale locale0 = Locale.KOREA;
      Set<String> set0 = locale0.getUnicodeLocaleKeys();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      Tag tag0 = Tag.valueOf("listing");
      CDataNode cDataNode0 = new CDataNode("Y*,g/[x");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "listing", attributes0);
      element0.toggleClass("9[0?b]");
      element0.classNames();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("typemustmtch");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("java.lang.string@0000000011", parseSettings0);
      Element element0 = new Element(tag0, "typemustmtch", attributes0);
      Element element1 = element0.toggleClass("HG<&");
      element1.className();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MU", "MU");
      Element element0 = document0.appendElement("MU");
      element0.children();
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#%s");
      CDataNode cDataNode0 = new CDataNode("#%s");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#%s", attributes0);
      pseudoTextElement0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("}j3&#=8oxvRhQ9Kf+=I", "}j3&#=8oxvRhQ9Kf+=I");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parse("dS", "dS");
      document0.appendElement("dS");
      document0.child(1);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parse("attributeSingleValueCharsSorted", "attributeSingleValueCharsSorted");
      document0.child(0);
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("BjgLCR5'8I`vMA", "BjgLCR5'8I`vMA");
      Element element0 = document0.body();
      Comment comment0 = new Comment("value");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      element0.before((Node) xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = new Document("body");
      Element element0 = document0.prependElement("%Rs");
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("tyemustmatch", "tyemustmatch");
      document0.parentNode = (Node) document0;
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parse("zX\"", "zX\"");
      Tag tag0 = Tag.valueOf("T`h?G',rcj.?=T ");
      CDataNode cDataNode0 = new CDataNode("zX\"");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "java.lang.string@0000000011", attributes0);
      document0.setParentNode(pseudoTextElement0);
      document0.before("1J0;FB6'~zo");
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+?U6O8", "+?U6O8");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = new Document("");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parse("optsArdu", "optsArdu");
      document0.siblingIndex = (-2485);
      document0.attr("V!v;Lrj!;=a.{Bb] { ", true);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Tag tag0 = Tag.valueOf("video");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "r}YBsJQpB-", attributes0);
      pseudoTextElement0.attr("r}YBsJQpB-", false);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MU", "MU");
      Element element0 = document0.appendElement("MU");
      element0.attr("A,", false);
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y*,g/[x", "Y*,g/[x");
      Element element0 = document0.prependElement("optgroup");
      element0.appendTo(document0);
      element0.attr("optgroup", "optgroup");
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Tag tag0 = Tag.valueOf("head");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "hjP1 mU\"nul'", attributes0);
      pseudoTextElement0.attr("vOx<NAYL&a3'~_g~;A@", "lFsting");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parse("typemustmtch", "typemustmtch");
      Element element0 = document0.head();
      element0.appendTo(document0);
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Document.createShell("hb'T4M`t/");
      Element element0 = document0.body();
      element0.appendText("Y");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qoaMs", "qoaMs");
      Element element0 = document0.prependElement("qoaMs");
      element0.appendText("g15d5|r!6:L(llC");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qoaMs", "qoaMs");
      document0.appendText("g15d5|r!6:L(llC");
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Tag tag0 = Tag.valueOf(" />");
      Element element0 = new Element(tag0, "");
      element0.appendElement("%SRi2");
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Document.createShell("listig");
      Element element0 = document0.body();
      element0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$IsLastChild", "_}rHvC:|]0}<");
      Element element0 = document0.text("org.jsoup.select.Evaluator$IsLastChild");
      element0.siblingIndex = (-3274);
      document0.append("<VCq_!");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = new Document("");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3iw", "3iw");
      Element element0 = document0.appendElement("dT");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("typemuttch", "typemuttch");
      document0.setParentNode(document0);
      DataNode dataNode0 = DataNode.createFromEncoded("XYnMHM", "typemuttch");
      document0.after((Node) dataNode0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "class");
      Element element0 = document0.body();
      element0.after(";:v=jxYE&a#\"Nq-ZN");
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = new Document("");
      Document document1 = document0.ownerDocument();
      document1.siblingIndex = 273;
      document0.addClass("%RlqqP2~m$");
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("%Rs");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("%Rs");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "%Rs", attributes0);
      pseudoTextElement0.setSiblingIndex((-1893));
      pseudoTextElement0.addClass("%Rs");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Tag tag0 = Tag.valueOf("x$G<w");
      CDataNode cDataNode0 = new CDataNode("x$G<w");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "", attributes0);
      Element element1 = element0.doClone(cDataNode0);
      element1.addClass("limitedQuirks");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Document document0 = Parser.parse("class", ".");
      document0.addClass("QfkZY|ysp(*");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parse("7", "7");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.wrap("frameset");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parse("", "jmXQ\"m");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("a<4a_Jbqiy");
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("a<4a_Jbqiy");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "a<4a_Jbqiy", attributes0);
      pseudoTextElement0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.wrap("<![CDATA[a<4a_Jbqiy]]>");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("%s", "%s");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.val("org.jsoup.select.Evaluator$CssNthEvaluator");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("typem8uttch", "typem8uttch");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
      try { 
        document1.val("-ptdArou");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#%s", "#%s");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+?U6O8", "+?U6O8");
      document0.html("");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Document document0 = Document.createShell("MSnk:~$");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("%s");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("nth-of-type");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.nodes.Element$2", attributes0);
      pseudoTextElement0.appendTo(pseudoTextElement0);
      // Undeclared exception!
      pseudoTextElement0.tagName("dfn");
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = new Document("kj4l']X(52D<R#");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      Document document0 = new Document("tpemustmatch");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Document document0 = Document.createShell("optsArdu");
      DocumentType documentType0 = new DocumentType("java.lang.string@0000000016", "_K{", "ySC1% uRQ!O T02Iijc", ":nth-child(%d)", "_K{");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+?U6O8", "+?U6O8");
      // Undeclared exception!
      try { 
        document0.selectFirst("*4q*m+>c-13k");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '*4q*m+>c-13k': unexpected token at '*4q*m+>c-13k'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Element element0 = new Element("4/|qa?V");
      // Undeclared exception!
      try { 
        element0.selectFirst((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Parser.parse("MSnk:~$", "");
      // Undeclared exception!
      try { 
        document0.select("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Element element0 = new Element("&lt;");
      // Undeclared exception!
      try { 
        element0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      CDataNode cDataNode0 = new CDataNode("");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = new Document("Split offset must be not be negative");
      CDataNode cDataNode0 = new CDataNode("Split offset must be not be negative");
      document0.parentNode = (Node) cDataNode0;
      // Undeclared exception!
      try { 
        Element.preserveWhitespace(document0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parse("Request must not be null", "Request must not be null");
      List<Node> list0 = Parser.parseXmlFragment("Request must not be null", "Request must not be null");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependText("Request must not be null");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("#%s", "Q#J");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("rg?:=RO4b|,", "c?x,=WZx!\"0");
      Element element0 = document0.appendTo(document0);
      // Undeclared exception!
      element0.prependElement("h6RKIvz^+!,a%");
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("java.lang.string@0000000122", "java.lang.string@0000000122");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependElement("br");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Document.createShell(";m@Av2Q*|r0JIR=HJ");
      Parser parser0 = Parser.htmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document1 = document0.parser(parser1);
      // Undeclared exception!
      try { 
        document1.prependElement("val>/ue");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = new Document("");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Document document0 = Parser.parse("class", "class");
      Tag tag0 = Tag.valueOf("l!4aW-");
      Element element0 = new Element(tag0, "l!4aW-");
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        element0.prependChild(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("typemustmatch", "typemustmatch");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("typemustmtch", "typemustmtch");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.prepend("typemustmtch");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#%s");
      CDataNode cDataNode0 = new CDataNode("#%s");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#%s", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Tag tag0 = Tag.valueOf("org.jsoup.select.evaluator$tag");
      CDataNode cDataNode0 = new CDataNode("PLAINTEXT");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "Insert position out of bounds.", attributes0);
      Element element1 = element0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element1.prepend("org.jsoup.select.evaluator$tag");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("class", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("4!8?*3_WG");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "                    ", attributes0);
      Element element1 = element0.doClone(cDataNode0);
      // Undeclared exception!
      try { 
        element1.parents();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parse("dS", "dS");
      StringBuilder stringBuilder0 = new StringBuilder(65533);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      document0.outerHtmlTail(stringBuilder0, 65533, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("jgC%5'8I`]MA", "jgC%5'8I`]MA");
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 353, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("</", "class");
      MockFileWriter mockFileWriter0 = new MockFileWriter("r^$MfziUv)RW?", false);
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileWriter0, true);
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockPrintWriter0, (-1244), (Document.OutputSettings) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charArrayWriter0, (-2178), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" > ", "BjgLCR5'8I`vMA");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlTail(pipedWriter0, 20, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("M8 0", "M8 0");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.indentAmount(972);
      CharArrayWriter charArrayWriter0 = new CharArrayWriter();
      BufferedWriter bufferedWriter0 = new BufferedWriter(charArrayWriter0);
      // Undeclared exception!
      document0.outerHtmlHead(bufferedWriter0, 1326, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Tag tag0 = Tag.valueOf("samp");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "samp", attributes0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlHead((Appendable) null, 14, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parse("*,g/[x", "*,g/[x");
      CharArrayWriter charArrayWriter0 = new CharArrayWriter(5);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charArrayWriter0, (-622), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Document document0 = new Document("optdarou");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, (-969), document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#%s");
      CDataNode cDataNode0 = new CDataNode("#%s");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#%s", attributes0);
      pseudoTextElement0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.nextElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Tag tag0 = Tag.valueOf("0listing");
      CDataNode cDataNode0 = new CDataNode("Y*,g/[x");
      Element element0 = new Element(tag0, "0listing");
      element0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        element0.nextElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("class", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("4!8?*3_WG");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "4!8?*3_WG", attributes0);
      // Undeclared exception!
      try { 
        element0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Tag tag0 = Tag.valueOf("listing");
      CDataNode cDataNode0 = new CDataNode("legend");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "listing", attributes0);
      // Undeclared exception!
      try { 
        element0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Parser.parse("]O,\"3i.%", "]O,\"3i.%");
      Evaluator.Attribute evaluator_Attribute0 = new Evaluator.Attribute((String) null);
      // Undeclared exception!
      try { 
        document0.is((Evaluator) evaluator_Attribute0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = new Document("{lS=2");
      // Undeclared exception!
      try { 
        document0.is("7+4jt|93p=!s+]Yx 8j");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '4jt|93p=!s': unexpected token at '=!s'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parse("typemuttch", "typemuttch");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.is("attributevalue_doublequoted");
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Element element0 = new Element("]qa{)mWl^$<D+WZe`]");
      DataNode dataNode0 = new DataNode("]qa{)mWl^$<D+WZe`]");
      element0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        element0.is("jlbfl9");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.nodes.DataNode cannot be cast to org.jsoup.nodes.Element
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Document.createShell("MSnk:~$");
      Node[] nodeArray0 = new Node[6];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("value", "value");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html("value");
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("}j*", "}j*");
      List<Node> list0 = document0.childNodes();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.html("                    ");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MU", "MU");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("&lt;");
      Document document0 = parser0.parseInput((Reader) stringReader0, "&lt;");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000016");
      document0.setParentNode(document0);
      MockFileWriter mockFileWriter0 = new MockFileWriter("k#LT. @z", false);
      // Undeclared exception!
      document0.html(mockFileWriter0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("US-ASCII", "w,uGH\"rnVNf7}s?");
      char[] charArray0 = new char[3];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Document.createShell("class");
      FileDescriptor fileDescriptor0 = new FileDescriptor();
      MockFileWriter mockFileWriter0 = new MockFileWriter(fileDescriptor0);
      // Undeclared exception!
      try { 
        document0.html((OutputStreamWriter) mockFileWriter0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.mock.java.io.MockFileWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000016");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("B5|n", "B5|n");
      Element element0 = document0.append("B5|n");
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        element0.html();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse("tyemustmatch", "tyemustmatch");
      TextNode textNode0 = new TextNode("tyemustmatch");
      document0.setParentNode(textNode0);
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Element element0 = new Element("&lt;");
      Attributes attributes0 = element0.attributes();
      Tag tag0 = Tag.valueOf("head");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "textarea", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Tag tag0 = Tag.valueOf("listing");
      CDataNode cDataNode0 = new CDataNode("Y*,g/[x");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "listing", attributes0);
      element0.toggleClass("9[0?b]");
      Attributes attributes1 = attributes0.put("{lS=2", "listing");
      String[] stringArray0 = new String[2];
      attributes0.keys = stringArray0;
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ";$y-=$Y*hnWt<iUe{n", attributes1);
      // Undeclared exception!
      try { 
        pseudoTextElement0.hasClass("9[0?b]");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("qoaMs", "qoaMs");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parse("qlass", "qlass");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("lw!w`r^0{[i@rH", "h6");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("8'&[$B5");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: 8'&[$B5
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      DataNode dataNode0 = DataNode.createFromEncoded("#%s", "#%s");
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("s+", "org.jsoup.Jsoup");
      document0.parentNode = (Node) dataNode0;
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("org.jsoup.Jsoup");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Tag tag0 = Tag.valueOf("5");
      CDataNode cDataNode0 = new CDataNode("5");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "5", attributes0);
      Element element0 = formElement0.doClone(cDataNode0);
      Element element1 = element0.prependChild(cDataNode0);
      Pattern pattern0 = Pattern.compile("5", 22);
      // Undeclared exception!
      try { 
        element1.getElementsMatchingOwnText(pattern0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Document.createShell("&lt;");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("i", "i");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("zz0emi<qu0jp(");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: zz0emi<qu0jp(
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Parser.parse("w$a", "{nf#+ZH3L|SxJmu");
      CDataNode cDataNode0 = new CDataNode("{nf#+ZH3L|SxJmu");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("SKIP_ENTIRELY");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "java.lang.string@0000000011 <![cdata[typemustmtch]]>");
      Element element0 = document0.prependElement("optsArdu");
      element0.setSiblingIndex((-1146));
      // Undeclared exception!
      try { 
        element0.getElementsMatchingOwnText("textarea");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",*,g/[x", "Ydn:/>K~@");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("?[Mn9;Xb hU");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parse(";j!#<t:f^um?Ty", "typemuttch");
      DataNode dataNode0 = DataNode.createFromEncoded(";j!#<t:f^um?Ty", "org.jsoup.select.Evaluator$IsFirstOfType");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText((String) null);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]O,\"3i.%", "]O,\"3i.%");
      document0.setSiblingIndex((-1017));
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("]O,\"3i.%");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(",*,g/[x", ",*,g/[x");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.getElementsByTag(",*,g/[x");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("MN");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("]J>");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "]J>", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Parser.parse("-T;W%8L2Q-fSABvHu", "-T;W%8L2Q-fSABvHu");
      Comment comment0 = new Comment("org.jsoup.select.Evaluator$AttributeStarting");
      document0.parentNode = (Node) comment0;
      // Undeclared exception!
      try { 
        document0.getElementsByIndexEquals(537);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+?U6O8", "+?U6O8");
      // Undeclared exception!
      try { 
        document0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = new Document("+?U6O8");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot((String) null, "$Lg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Tag tag0 = Tag.valueOf("</");
      Element element0 = new Element(tag0, "value");
      element0.childNodes = null;
      Pattern pattern0 = Pattern.compile("figure", 43);
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueMatching("</", pattern0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parse("", "jmXQ\"m");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("class", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "head", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttributeValueMatching("                    ", "E+|<Q{");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: E+|<Q{
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Document.createShell("MSnk:~$");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("-$n%HE_=:H`'W`H$", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = new Document("textarea");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("B>8v.E5IuL_FY:.", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("class", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("4!8?*3_WG");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "class", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttributeStarting("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Tag tag0 = Tag.valueOf("listing");
      CDataNode cDataNode0 = new CDataNode("Y*,g/[x");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "listing", attributes0);
      element0.toggleClass("9[0?b]");
      Attributes attributes1 = attributes0.put("{lS=2", "listing");
      String[] stringArray0 = new String[2];
      attributes0.keys = stringArray0;
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, ";$y-=$Y*hnWt<iUe{n", attributes1);
      // Undeclared exception!
      try { 
        pseudoTextElement0.getElementsByAttribute("org.jsoup.nodes.Element");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.select.Evaluator$IsLastChild", "_}rHvC:|]0}<");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#%s");
      CDataNode cDataNode0 = new CDataNode("#%s");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#%s", attributes0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("a<4a_Jbqiy");
      Document document0 = Parser.parseBodyFragment("a<4a_Jbqiy", "a<4a_Jbqiy");
      document0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Document.createShell("ScriptDataEndTagOpen");
      List<Node> list0 = Parser.parseFragment("org.jsoup.parser.HtmlTreeBuilder", (Element) document0, "org.jsoup.parser.HtmlTreeBuilder");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.empty();
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = new Document("listing");
      DataNode dataNode0 = new DataNode(" > ", " > ");
      Element element0 = document0.doClone(dataNode0);
      // Undeclared exception!
      try { 
        element0.elementSiblingIndex();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Element element0 = new Element("java.lang.string@0000000073");
      DocumentType documentType0 = new DocumentType("java.lang.string@0000000073", "rtHGC", "rtHGC");
      Element element1 = element0.prependChild(documentType0);
      documentType0.before((Node) element1);
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'java.lang.string@0000000073': unexpected token at '@0000000073'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Document.createShell("listig");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = parser0.parseFragmentInput("listig", element0, "listig");
      element1.childNodes = list0;
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Document.createShell("txtaa");
      DocumentType documentType0 = new DocumentType("cABML\"&V~*p~", "cABML\"&V~*p~", "txtaa");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+?U6O8", "+?U6O8");
      LinkedHashSet<String> linkedHashSet0 = new LinkedHashSet<String>();
      linkedHashSet0.add((String) null);
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) linkedHashSet0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.evosuite.runtime.System", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Document document0 = Parser.parse("", "inert");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#%s");
      Element element0 = new Element(tag0, "\"p7$@Pt8-q@We#");
      // Undeclared exception!
      try { 
        element0.child((-1));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("~kxHw?VVM\"<t,r", "~kxHw?VVM\"<t,r");
      TextNode textNode0 = TextNode.createFromEncoded("~kxHw?VVM\"<t,r");
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.before((Node) document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = new Document("ri:xd&fs%");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Parser.parse("typemustmtch", "typemustmtch");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.before("typemustmtch");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parse("7", "7");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y*,g/[x", "Y*,g/[x");
      document0.reparentChild(document0);
      // Undeclared exception!
      document0.attr("id", "Y*,g/[x");
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Document.createShell("%s");
      // Undeclared exception!
      try { 
        document0.attr((String) null, "%s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Tag tag0 = Tag.valueOf("java.lang.string@000000012$");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "java.lang.string@000000012$", attributes0);
      String[] stringArray0 = new String[6];
      attributes0.keys = stringArray0;
      // Undeclared exception!
      try { 
        pseudoTextElement0.attr("}Y", "5Du72+RE");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("optgroup", "optgroup");
      DataNode dataNode0 = DataNode.createFromEncoded("optgroup", "optgroup");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.appendTo(document0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Document.createShell("Ofl");
      Element element0 = document0.head();
      document0.setParentNode(element0);
      // Undeclared exception!
      try { 
        document0.appendTo(element0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+?U6O8", "+?U6O8");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("typemustmatch", "typemustmatch");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.appendElement(">B,!+r");
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("jgC%5'8I`]MA", "jgC%5'8I`]MA");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(835);
      List<Node> list0 = Parser.parseFragment("jgC%5'8I`]MA", (Element) document0, "iw", parseErrorList0);
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement("iw");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("java.:ang.string@000000I12$", "java.:ang.string@000000I12$");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      document0.parser(parser1);
      // Undeclared exception!
      try { 
        document0.appendElement(".a69 hA_U)AQC");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" > ", " > ");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("a<4a_Jbqiy");
      cDataNode0.setParentNode(cDataNode0);
      Document document0 = Parser.parse("a<4a_Jbqiy", "");
      // Undeclared exception!
      try { 
        document0.appendChild(cDataNode0);
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.AbstractList", e);
      }
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Tag tag0 = Tag.valueOf("optgroup");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "optgroup", (Attributes) null);
      pseudoTextElement0.setParentNode(pseudoTextElement0);
      // Undeclared exception!
      try { 
        pseudoTextElement0.appendChild(pseudoTextElement0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput(".", ".");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("typemustmatch", "typemustmatch");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.append("y$~k]gc@xz.eh");
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#%s", "#%s");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("%Rs");
      Element element0 = new Element("%Rs");
      element0.setParentNode(cDataNode0);
      // Undeclared exception!
      try { 
        element0.append("%Rs");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Parser.parse("7]Wu", "7]Wu");
      document0.setParentNode(document0);
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("optgroup", "optgroup");
      document0.setParentNode(document0);
      // Undeclared exception!
      document0.after("q^'37j");
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "/o");
      Comment comment0 = new Comment("br");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.after("org.jsoup.nodes.Element$1");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Ta(a.:ang.string@000000o12$");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "Ta(a.:ang.string@000000o12$", attributes0);
      attributes0.vals = null;
      // Undeclared exception!
      try { 
        pseudoTextElement0.addClass("Ta(a.:ang.string@000000o12$");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Tag tag0 = Tag.valueOf("x$G<w");
      CDataNode cDataNode0 = new CDataNode("x$G<w");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "", attributes0);
      // Undeclared exception!
      try { 
        element0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("%s");
      Attributes attributes0 = cDataNode0.attributes();
      Attributes attributes1 = attributes0.put("%s", true);
      String[] stringArray0 = new String[0];
      attributes1.vals = stringArray0;
      Tag tag0 = Tag.valueOf("nth-of-type");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.nodes.Element$2", attributes1);
      // Undeclared exception!
      try { 
        pseudoTextElement0.addClass("%s");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 2
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "style", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Element$1", parseSettings0);
      Element element0 = null;
      try {
        element0 = new Element(tag0, (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("%Rs");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("%Rs");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "%Rs", attributes0);
      pseudoTextElement0.html((StringBuilder) null);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Tag tag0 = Tag.valueOf("listing");
      CDataNode cDataNode0 = new CDataNode("Y*,g/[x");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "listing", attributes0);
      element0.toggleClass("org.jsoup.SerializationException");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "MSe+[dY::>U)9/", attributes0);
      pseudoTextElement0.addClass("org.jsoup.SerializationException");
      pseudoTextElement0.hasClass("org.jsoup.SerializationException");
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parse("tyemustmatch", "tyemustmatch");
      document0.hasClass("tyemustmatch");
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parse("class", "class");
      Charset charset0 = document0.charset();
      Set<String> set0 = charset0.aliases();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("version", "1`^[\"");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Document.createShell("listig");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("}j3&#=8oxvRhQ9Kf+=I", "}j3&#=8oxvRhQ9Kf+=I");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = new Document("");
      document0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Document document0 = Document.createShell("MSnk:~$");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "class");
      Element element0 = document0.body();
      Element element1 = element0.previousElementSibling();
      element1.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "class");
      Element element0 = document0.body();
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y*,g/[x", "Y*,g/[x");
      Element element0 = document0.prependElement("optgroup");
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Document document0 = Document.createShell("}{]Vk(9`HQt+H");
      Element element0 = document0.body();
      element0.append("}{]Vk(9`HQt+H");
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parse("", "qa:&D`Oi5#D+^Q");
      document0.clearAttributes();
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("listing", "listing");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("typemustmatch", "typemustmatch");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Tag tag0 = Tag.valueOf("x$G<w");
      CDataNode cDataNode0 = new CDataNode("x$G<w");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "", attributes0);
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("                ", "                ");
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("dt", "dt");
      Pattern pattern0 = Pattern.compile("dt");
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parse("}j3&#=8oxvRhQ9Kf+=I", "&lt;");
      Pattern pattern0 = Pattern.compile("&lt;", 28);
      Evaluator.MatchesOwn evaluator_MatchesOwn0 = new Evaluator.MatchesOwn(pattern0);
      document0.is((Evaluator) evaluator_MatchesOwn0);
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parse("class", "class");
      Pattern pattern0 = Pattern.compile("class", (-3277));
      document0.getElementsByAttributeValueMatching("br", pattern0);
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Parser.parse("", "qa:&D`Oi5#D+^Q");
      // Undeclared exception!
      try { 
        document0.select("}fnxP bY8R?ZbyLl4?w");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '}fnxP bY8R?ZbyLl4?w': unexpected token at '}fnxP bY8R?ZbyLl4?w'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("89PICq(@MkQJmb&yOcb", "IwQT]cfr");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput(".(-M0j5%PBAo*io5!TA", "o6L+h;");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parse(";j!#<t:f^um?Ty", "typemuttch");
      document0.classNames();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Parser.parse("~", "#root");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      Document document1 = document0.outputSettings(document_OutputSettings1);
      document1.html();
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Y*,g/[x", "Y*,g/[x");
      CharBuffer charBuffer0 = CharBuffer.allocate(8224);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlTail(charBuffer0, (-490), document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("org.jsoup.select.Evaluator$IsRoot", "java.lang.string000000122");
      document0.prependElement("br");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MN", "MN");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "#root");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("i", "i");
      Element element0 = document0.prependElement("br");
      element0.prependElement("i");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("i", "i");
      document0.prependElement("br");
      document0.toString();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("j9va.lang.strijg@0000000122", "j9va.lang.strijg@0000000122");
      char[] charArray0 = new char[4];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 2147483645, document_OutputSettings1);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!?r%+/kpv -&#", "!?r%+/kpv -&#");
      Element element0 = document0.prependElement("textarea");
      element0.val();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("typemustmtch");
      Attributes attributes0 = cDataNode0.attributes();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("typemustmtch", parseSettings0);
      Element element0 = new Element(tag0, "typemustmtch", attributes0);
      element0.toggleClass("<![CDATA[typemustmtch]]>");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "typemustmtch", attributes0);
      pseudoTextElement0.addClass("<![CDATA[typemustmtch]]>");
      pseudoTextElement0.toggleClass("<![CDATA[typemustmtch]]>");
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("b !'", parseSettings0);
      CDataNode cDataNode0 = new CDataNode(" />");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "&lt;", attributes0);
      Element element1 = element0.toggleClass(":nth-child(%d)");
      element1.toggleClass("utf");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, " />", attributes0);
      pseudoTextElement0.addClass("class");
      pseudoTextElement0.hasClass("utf");
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("a<4a_Jbqiy", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "a<4a_Jbqiy", attributes0);
      Element element0 = pseudoTextElement0.toggleClass("<![CDATA[a<4a_Jbqiy]]>");
      Element element1 = element0.addClass("<![CDATA[a<4a_Jbqiy]]>");
      element1.hasClass("java.lang.string@0000000011");
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parse("class", "class");
      Element element0 = document0.toggleClass("Children collection to be inserted must not be null.");
      Attributes attributes0 = element0.attributes();
      Tag tag0 = Tag.valueOf("html");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "]clb0H$Ao", attributes0);
      pseudoTextElement0.addClass(" ");
      pseudoTextElement0.hasClass("br");
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("a<4a_Jbqiy", parseSettings0);
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "a<4a_Jbqiy", attributes0);
      Element element0 = pseudoTextElement0.toggleClass("<![CDATA[a<4a_Jbqiy]]>");
      Element element1 = element0.addClass("<![CDATA[a<4a_Jbqiy]]>");
      element1.getElementsByClass("<![CDATA[a<4a_Jbqiy]]>");
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("%Rs");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("%Rs");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "%Rs", attributes0);
      pseudoTextElement0.addClass("%Rs");
      pseudoTextElement0.hasClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Tag tag0 = Tag.valueOf("#%s");
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("#%s", "fU7cAJ%m-g_V+=My");
      document0.toggleClass("p-M_Y,ycwCT-J");
      Attributes attributes0 = document0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "#%s", attributes0);
      pseudoTextElement0.hasClass("org.jsoup.select.StructuralEvaluator$ImmediatePreviousSibling");
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.element", "org.jsoup.nodes.element");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.nodes.element");
      document0.appendChild(cDataNode0);
      document0.data();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!;oO|cR`4]DZ!&", "\"r:w9");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "class");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = new Document("Y*,g/[x");
      document0.append(" ");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("]O,\"3i.%", "]O,\"3i.%");
      document0.setParentNode(document0);
      document0.getElementsContainingText("]O,\"3i.%");
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("");
      Element.preserveWhitespace(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.appendElement("br");
      document0.appendElement("br");
      document0.getElementsMatchingOwnText("Q*K");
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("lji^", "lji^");
      document0.title("B{|x6xy)D=}B");
      document0.getElementsMatchingText("N8K&");
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Parser.parse(";j!#<t:f^um?Ty", "typemuttch");
      DataNode dataNode0 = DataNode.createFromEncoded(";j!#<t:f^um?Ty", "org.jsoup.select.Evaluator$IsFirstOfType");
      Element element0 = document0.prependChild(dataNode0);
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = Parser.parse("I'A)4(:Oq1)Q", "I'A)4(:Oq1)Q");
      document0.wholeText();
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Document.createShell("%Rs");
      Element element0 = document0.append("LZ|!gs K-xM");
      element0.prependText("%Rs");
      document0.getElementsContainingText((String) null);
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MN", "MN");
      document0.appendElement("MN");
      document0.getElementsContainingText("MN");
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MN", "MN");
      document0.appendElement("br");
      document0.getElementsContainingText("br");
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parse(";j!#<t:f^um?Ty", "typemuttch");
      DataNode dataNode0 = DataNode.createFromEncoded(";j!#<t:f^um?Ty", "org.jsoup.select.Evaluator$IsFirstOfType");
      document0.prependChild(dataNode0);
      document0.getElementsContainingText((String) null);
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("E.FCh :VvmF;]<", "E.FCh :VvmF;]<");
      document0.getElementById("E.FCh :VvmF;]<");
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Document.createShell("java.lang.string@0000000016");
      document0.setParentNode(document0);
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MN", "MN");
      Element element0 = document0.appendElement("MN");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = new Document("Y*,g/[x");
      Element element0 = document0.prependElement("optgroup");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = new Document("Y*,g/[x");
      Element element0 = document0.prependElement("optgroup");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y*,g/[x", "Y*,g/[x");
      Element element0 = document0.prependElement("Y*,g/[x");
      document0.prependElement("ScriptDataDoubleEscapedLessthanSign");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = Parser.parse("&S&y[", "&S&y[");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Document.createShell("Y,g/[x");
      DocumentType documentType0 = new DocumentType("Y,g/[x", "Y,g/[x", "#root", "-'np[", (String) null);
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.previousElementSibling();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MN", "MN");
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Document.createShell("br");
      document0.siblingElements();
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.element", "org.jsoup.nodes.element");
      Element element0 = document0.body();
      element0.siblingElements();
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Document.createShell("listig");
      Element element0 = document0.body();
      Element element1 = element0.firstElementSibling();
      element1.before("listig");
      element1.cssSelector();
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("%s", "%s");
      document0.toggleClass("%s");
      document0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, false);
      Tag tag0 = Tag.valueOf("class", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("4!8?*3_WG");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "class", attributes0);
      Node[] nodeArray0 = new Node[5];
      // Undeclared exception!
      try { 
        pseudoTextElement0.insertChildren(4, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("listing", "listing");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        document0.insertChildren((-942), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("%s", "%s");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren((-2), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Array must not contain any null objects
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y*,g/[x", "Y*,g/[x");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("class", "Sjz(");
      Elements elements0 = document0.getElementsMatchingOwnText("ym");
      // Undeclared exception!
      try { 
        document0.insertChildren(338, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Parser.parse("class", ".");
      LinkedHashSet<DocumentType> linkedHashSet0 = new LinkedHashSet<DocumentType>();
      // Undeclared exception!
      try { 
        document0.insertChildren((-1625949436), (Collection<? extends Node>) linkedHashSet0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Element element0 = new Element("html");
      LinkedHashSet<Document> linkedHashSet0 = new LinkedHashSet<Document>();
      element0.insertChildren((-1), (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = Parser.parse("7]Wu", "7]Wu");
      List<DataNode> list0 = document0.dataNodes();
      document0.insertChildren(0, (Collection<? extends Node>) list0);
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      document0.textNodes();
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Tag tag0 = Tag.valueOf("listing");
      CDataNode cDataNode0 = new CDataNode("Y*,g/[x");
      Attributes attributes0 = cDataNode0.attributes();
      Element element0 = new Element(tag0, "listing", attributes0);
      Element element1 = element0.append("Y*,g/[x");
      element1.textNodes();
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y*,g/[x", "Y*,g/[x");
      Element element0 = document0.prependElement("Y*,g/[x");
      element0.before("Y*,g/[x");
      element0.nextElementSiblings();
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parse("", "qa:&D`Oi5#D+^Q");
      Elements elements0 = document0.getElementsByIndexGreaterThan((-2883));
      assertEquals("qa:&D`Oi5#D+^Q", document0.baseUri());
      assertEquals(4, elements0.size());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parse("-T;W%8L2Q-fSABvHu", "-T;W%8L2Q-fSABvHu");
      // Undeclared exception!
      try { 
        document0.selectFirst("~J|9DP[L%K");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'K'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Document.createShell("value");
      document0.getAllElements();
      assertEquals("value", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Document document0 = Parser.parse("class", "class");
      Element element0 = document0.removeClass("class");
      assertEquals("class", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y*,g/[x", "Y*,g/[x");
      // Undeclared exception!
      try { 
        document0.before("Y*,g/[x");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Tag tag0 = Tag.valueOf("optgroup");
      Element element0 = new Element(tag0, "RCDATAEndTagName");
      // Undeclared exception!
      try { 
        element0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Elements elements0 = document0.getElementsByAttributeValueNot("-r1q@P( V&>7+h0qe]r", " ");
      assertEquals("org.jsoup.nodes.Element$1", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.shallowClone();
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.nodes.Element$1", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("a", "a");
      List<Node> list0 = document0.childNodesCopy();
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.getElementsByClass("a");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("3iw", "3iw");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = new Document("textarea");
      Element element0 = document0.prependElement("textarea");
      element0.val("textarea");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Parser.parse("class", ".");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("L", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<!;oO|cR`4]DZ!&", "\"r:w9");
      Elements elements0 = document0.getElementsByClass("<!;oO|cR`4]DZ!&");
      assertEquals(1, document0.childNodeSize());
      assertEquals("\"r:w9", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("typemustmtch", "typemustmtch");
      document0.getElementsByAttributeValueEnding("typemustmtch", "button");
      assertEquals("typemustmtch", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Tag tag0 = Tag.valueOf("optgroup");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "optgroup", (Attributes) null);
      pseudoTextElement0.is("optgroup");
      assertEquals("optgroup", pseudoTextElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Document document0 = Document.createShell("MSnk:~$");
      document0.getElementsByAttributeValueMatching("br", "3vX}v]4<XJAhvD");
      assertEquals(1, document0.childNodeSize());
      assertEquals("MSnk:~$", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test344()  throws Throwable  {
      Document document0 = Parser.parse("-T;W%8L2Q-fSABvHu", "-T;W%8L2Q-fSABvHu");
      Element element0 = document0.attr("-T;W%8L2Q-fSABvHu", "-T;W%8L2Q-fSABvHu");
      assertEquals("-T;W%8L2Q-fSABvHu", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test345()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("d+(p3|Y", "d+(p3|Y");
      // Undeclared exception!
      try { 
        document0.wrap("fallback");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test346()  throws Throwable  {
      Document document0 = Parser.parse("-T;W%8L2Q-fSABvHu", "-T;W%8L2Q-fSABvHu");
      Elements elements0 = document0.getElementsByIndexEquals(537);
      assertEquals("-T;W%8L2Q-fSABvHu", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test347()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y*,g/[x", "Y*,g/[x");
      document0.getElementsByAttributeStarting("br");
      assertEquals("Y*,g/[x", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test348()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("+?U6O8", "+?U6O8");
      Elements elements0 = document0.getElementsByIndexLessThan((-1307));
      assertEquals("+?U6O8", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test349()  throws Throwable  {
      Document document0 = Document.createShell("value");
      // Undeclared exception!
      try { 
        document0.after("z");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test350()  throws Throwable  {
      Document document0 = Parser.parse("&S&y[", "&S&y[");
      document0.prepend("<![CDATA[%Rs]]>");
      document0.getElementsContainingText("<![CDATA[%Rs]]>");
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test351()  throws Throwable  {
      Document document0 = Document.createShell("listig");
      Element element0 = document0.body();
      String string0 = element0.cssSelector();
      assertEquals("html > body", string0);
      assertEquals("listig", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test352()  throws Throwable  {
      Tag tag0 = Tag.valueOf(" />");
      Element element0 = new Element(tag0, "");
      // Undeclared exception!
      try { 
        element0.getElementsByAttributeValueStarting(",(:9O4$60ARK3d2.tA", "");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test353()  throws Throwable  {
      Document document0 = new Document("h$h `=~b_Z.<");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("rFDQMR}GJ&-{&LB9D", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test354()  throws Throwable  {
      Tag tag0 = Tag.valueOf(" />");
      Element element0 = new Element(tag0, "");
      String string0 = element0.wholeText();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test355()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("~kxHw?VVM\"<t,r", "~kxHw?VVM\"<t,r");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test356()  throws Throwable  {
      Tag tag0 = Tag.valueOf("optgroup");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "optgroup", (Attributes) null);
      pseudoTextElement0.addClass("optgroup");
      pseudoTextElement0.hasClass("optgroup");
      assertEquals("optgroup", pseudoTextElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test357()  throws Throwable  {
      Document document0 = Parser.parse("class", "class");
      Elements elements0 = document0.getElementsContainingOwnText("n3!0Z=dIs['D");
      assertTrue(elements0.isEmpty());
      assertEquals("class", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test358()  throws Throwable  {
      Document document0 = Parser.parse("vM/&+vO)}{!qY@ST", "vM/&+vO)}{!qY@ST");
      document0.dataset();
      assertEquals("vM/&+vO)}{!qY@ST", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test359()  throws Throwable  {
      Document document0 = Parser.parse("dS", "dS");
      // Undeclared exception!
      try { 
        document0.child(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test360()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Y*,g/[x", "Y*,g/[x");
      document0.previousElementSiblings();
      assertEquals("Y*,g/[x", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test361()  throws Throwable  {
      Document document0 = Document.createShell("value");
      Element element0 = document0.prependElement("class");
      element0.after("z");
      assertEquals(3, document0.childNodeSize());
      assertEquals("value", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test362()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MN", "MN");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test363()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("MU", "MU");
      Elements elements0 = document0.children();
      assertEquals("MU", document0.baseUri());
      assertEquals(1, elements0.size());
  }

  @Test(timeout = 4000)
  public void test364()  throws Throwable  {
      Document document0 = Parser.parse("typemustmtch", "typemustmtch");
      document0.nextElementSiblings();
  }
}
