/*
 * This file was automatically generated by EvoSuite
 * Mon Mar 01 22:54:55 GMT 2021
 */

package org.jsoup.nodes;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.BufferedWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringWriter;
import java.nio.BufferOverflowException;
import java.nio.ByteBuffer;
import java.nio.CharBuffer;
import java.nio.ReadOnlyBufferException;
import java.nio.charset.Charset;
import java.util.Collection;
import java.util.LinkedHashSet;
import java.util.LinkedList;
import java.util.List;
import java.util.Locale;
import java.util.Set;
import java.util.UnknownFormatConversionException;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.evosuite.runtime.mock.java.io.MockFile;
import org.evosuite.runtime.mock.java.io.MockFileOutputStream;
import org.evosuite.runtime.mock.java.io.MockFileWriter;
import org.evosuite.runtime.mock.java.io.MockPrintStream;
import org.evosuite.runtime.mock.java.io.MockPrintWriter;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Comment;
import org.jsoup.nodes.DataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.DocumentType;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.nodes.TextNode;
import org.jsoup.nodes.XmlDeclaration;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.select.Elements;
import org.jsoup.select.Evaluator;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class Element_ESTest extends Element_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      Document document0 = Document.createShell("3S");
      document0.toggleClass("3S");
      document0.toggleClass("Vk'CnK;C/`Nw+Tw");
      document0.hasClass("Unexpected count of entitiesloaded");
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Tag tag0 = Tag.valueOf("aSg");
      Element element0 = new Element(tag0, "aSg");
      document0.parentNode = (Node) element0;
      document0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "textarea", attributes0);
      pseudoTextElement0.text("UQ");
      LinkedList<Comment> linkedList0 = new LinkedList<Comment>();
      pseudoTextElement0.insertChildren((-1), (Collection<? extends Node>) linkedList0);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      StringWriter stringWriter0 = new StringWriter(58);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document0.outerHtmlTail(stringWriter0, 58, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.nodelistChanged();
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("BogusComment", "BogusComment");
      document0.ensureChildNodes();
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      Tag tag0 = Tag.valueOf("Children collection to be inserted must not be null.");
      Element element0 = new Element(tag0, "Children collection to be inserted must not be null.");
      document0.parentNode = (Node) element0;
      document0.wrap("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Element element0 = document0.body();
      element0.wrap("aSg");
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("JWJp{nZDgn70mu", "JWJp{nZDgn70mu");
      Element element0 = document0.body();
      element0.wrap("JWJp{nZDgn70mu");
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.prepend("aSg");
      Element element0 = document0.child(0);
      element0.val("#comment");
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      Tag tag0 = Tag.valueOf("aR}~-$Xf");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Jo`V6S", attributes0);
      formElement0.setSiblingIndex((-735));
      formElement0.val(">");
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("blockquote", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "+* m\"&A:j", attributes0);
      formElement0.val("body");
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      Tag tag0 = Tag.valueOf("aR}~-$Xf");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ">", attributes0);
      formElement0.val(">");
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Node[] nodeArray0 = new Node[2];
      nodeArray0[0] = (Node) document0;
      nodeArray0[1] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.toggleClass("-Q!wjhI");
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      document0.siblingIndex = (-2155);
      document0.toggleClass("Tag name must not be empty.");
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      Element element0 = document0.head();
      element0.toggleClass("textarea");
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      Document document0 = Parser.parse("textarea", "textarea");
      Element element0 = document0.head();
      element0.text("dm<BRKDsyH");
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      Document document0 = Parser.parse("aSg", "aSg");
      Element element0 = document0.appendElement("aSg");
      element0.text("|Y#;tCjptOHc c");
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.text();
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      Document document0 = Parser.parse("=Qtw)F'se", "8NRms|eCra");
      Element element0 = document0.appendElement("]j");
      element0.tagName("org.jsoup.nodes.Element$2");
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      Document document0 = Document.createShell("Children collection to be inserted must not be null.");
      document0.tagName();
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Ot&", "data-");
      document0.tag();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      Document document0 = Document.createShell(":eq(");
      Element element0 = document0.body();
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      Element element0 = new Element("br");
      element0.tag();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cpv", "cpv");
      Element element0 = document0.body();
      element0.shallowClone();
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{e<k", "{e<k");
      Element element0 = document0.appendElement("iV");
      element0.selectFirst("iV");
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      Element element0 = new Element("br");
      element0.html("Xa;x0&:Vh#vL;eFgR");
      element0.selectFirst("br");
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      Tag tag0 = Tag.valueOf("G");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "G", attributes0);
      formElement0.select("param");
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      Element element0 = new Element("aSg");
      element0.select("aSg");
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cpv", "cpv");
      Element element0 = document0.body();
      element0.removeClass("cpv");
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vzsq", "vzsq");
      Element element0 = document0.head();
      element0.removeClass("vzsq");
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Element element0 = document0.appendElement("]j");
      element0.previousElementSiblings();
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = Parser.parseBodyFragmentRelaxed("!(SE.R|RCel-", "g^obj*eu<:{");
      Document document1 = document0.parser(parser0);
      document1.siblingIndex = (-647);
      document0.prependText("1{8}g-sb");
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      Document document0 = Parser.parse("", "blockquote");
      Element element0 = document0.body();
      element0.prependText("?");
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      Document document0 = Document.createShell("id");
      document0.prependElement("head");
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Element element0 = document0.appendElement("mdK%1ladTR~aA?");
      element0.prependChild(document0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      Document document0 = Parser.parse("", "org.jsoup.parser.ParseErrorList");
      Element element0 = document0.body();
      element0.prepend("org.jsoup.parser.ParseErrorList");
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      Document document0 = new Document("k!%-]`it\"t");
      document0.prepend("");
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      Document document0 = Document.createShell(";v_");
      document0.parents();
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      Document document0 = Parser.parse("", "org.jsoup.parser.ParseErrorList");
      Element element0 = document0.body();
      element0.parents();
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("*Eh&6oQ", "*Eh&6oQ");
      Node[] nodeArray0 = new Node[9];
      nodeArray0[0] = (Node) document0;
      DataNode dataNode0 = DataNode.createFromEncoded("#root", "#root");
      nodeArray0[1] = (Node) dataNode0;
      nodeArray0[2] = (Node) document0;
      nodeArray0[3] = (Node) document0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      nodeArray0[8] = (Node) document0;
      document0.addChildren(nodeArray0);
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("|-=<y23C1", "d?");
      Element element0 = document0.head();
      element0.parent();
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Tag tag0 = Tag.valueOf("aSg");
      Element element0 = new Element(tag0, "aSg");
      document0.parentNode = (Node) element0;
      document0.parent();
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("z#S(7AR!8", "Fj&n2r\"q8Y9!0G\"#lB");
      document0.nodeName();
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      Document document0 = Parser.parse("", "blockquote");
      Element element0 = document0.appendElement(" > ");
      element0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("$6wzW54XZ>", "$6wzW54XZ>");
      Elements elements0 = document0.getElementsContainingText((String) null);
      document0.insertChildren(0, (Collection<? extends Node>) elements0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("vzsq", "vzsq");
      Element element0 = document0.head();
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Evaluator.AllElements evaluator_AllElements0 = new Evaluator.AllElements();
      document0.is((Evaluator) evaluator_AllElements0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      Document document0 = Parser.parse("{k", "{k");
      Element element0 = document0.appendElement("iV");
      element0.is("iV");
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      Document document0 = Document.createShell("^3%Ku6l2L");
      Node[] nodeArray0 = new Node[1];
      nodeArray0[0] = (Node) document0;
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      Document document0 = Document.createShell("^3%Ku6l2L");
      Node[] nodeArray0 = new Node[0];
      document0.insertChildren(0, nodeArray0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      Document document0 = Parser.parse("aSg", "aSg");
      Element element0 = document0.child(0);
      Elements elements0 = document0.getElementsMatchingText("mdK%1ladTR~aA?");
      element0.insertChildren(0, (Collection<? extends Node>) elements0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      Tag tag0 = Tag.valueOf("aSg");
      Element element0 = new Element(tag0, "aSg");
      LinkedHashSet<CDataNode> linkedHashSet0 = new LinkedHashSet<CDataNode>();
      element0.insertChildren(0, (Collection<? extends Node>) linkedHashSet0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Y<adz");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, " ", attributes0);
      formElement0.setSiblingIndex(679);
      formElement0.html(" ");
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      Document document0 = Parser.parse("$Txc]/gpJ%1l?W", "i6Z_UG[R:>iD%[aRe");
      document0.html("");
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!(SE.R|RCel-", "!(SE.R|RCel-");
      PipedReader pipedReader0 = new PipedReader(124);
      PipedWriter pipedWriter0 = new PipedWriter(pipedReader0);
      document0.html(pipedWriter0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      Document document0 = new Document("KB)_r700|zteDY");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("m##wn<E", "`zh(0a=V]'KVK{AW");
      document0.getElementsByAttributeValueContaining("<>Z", "PSv7\"VN8pC W7;Ivo<n");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!(SE.R|RCel-", "!(SE.R|RCel-");
      document0.hasAttributes();
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!(SE.R|RCel-", "g^obj*eu<:{");
      Pattern pattern0 = Pattern.compile("g^obj*eu<:{", 8212);
      document0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Element element0 = document0.prepend("aSg");
      Pattern pattern0 = Pattern.compile("aSg");
      element0.getElementsMatchingText(pattern0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.prependText("title");
      document0.getElementsMatchingText("title");
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("#cdata", "#cdata");
      Pattern pattern0 = Pattern.compile("#cdata");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      Document document0 = Parser.parse("", "blockquote");
      document0.html("#root");
      document0.getElementsMatchingOwnText("#root");
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cpv", "cpv");
      document0.getElementsByTag("cpv");
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      Document document0 = Document.createShell("W}`9-OEW9[~A");
      Element element0 = document0.prependElement("W}`9-OEW9[~A");
      element0.getElementsByTag("W}`9-OEW9[~A");
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      document0.getElementsByIndexLessThan((-1091670721));
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.getElementsByIndexGreaterThan((-1969271991));
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.getElementsByIndexEquals(0);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      Document document0 = Document.createShell("#comment");
      document0.getElementsByClass("org.jsoup.nodes.Element");
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.addClass("aSg");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Element$1");
      element0.getElementsByClass("org.jsoup.nodes.Element$1");
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      Tag tag0 = Tag.valueOf("xctqtyes");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "xctqtyes", attributes0);
      formElement0.getElementsByAttributeValueNot("nY$O9[j\"w<=N[1k", "                   ");
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      Document document0 = Parser.parse(" > ", "");
      document0.getElementsByAttributeValueMatching("KB)_r700|zteDY", "");
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.toggleClass("aSg");
      document0.getElementsByAttributeStarting("class");
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      Document document0 = Parser.parse(" > ", "");
      document0.getElementsByAttribute("+ -vF;6");
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      Tag tag0 = Tag.valueOf("3u^Vs");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("v |#R<O=%]s", "3u^Vs");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "`Tpk-", attributes1);
      pseudoTextElement0.getElementsByAttribute("v |#R<O=%]s");
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Element element0 = document0.prepend("aSg");
      Element element1 = document0.child(0);
      element0.appendElement("fmZ");
      element1.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      Document document0 = Document.createShell("W}`9-OEW9[~A");
      Element element0 = document0.prependElement("W}`9-OEW9[~A");
      element0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Element element0 = document0.prepend("aSg");
      Element element1 = element0.child(0);
      element1.empty();
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aSg", "O0wZtD9U{E2~+'6s/h{");
      document0.siblingIndex = (-1110026255);
      document0.empty();
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Element element0 = document0.child(0);
      element0.empty();
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      Document document0 = Parser.parse("", "blockquote");
      Element element0 = document0.body();
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = Parser.parseBodyFragmentRelaxed("!(SE.R|RCel-", "g^obj*eu<:{");
      Document document1 = document0.parser(parser0);
      document1.siblingIndex = (-647);
      document1.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      Document document0 = Document.createShell("Y^6qzA!,Ie!!-J~#");
      Element element0 = document0.head();
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      Document document0 = Parser.parse("aSg", "aSg");
      document0.doClone((Node) null);
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!(SE.R|Rcel-", "!(SE.R|Rcel-");
      Element element0 = document0.appendElement("aSg");
      element0.doClone(document0);
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Element element0 = document0.body();
      element0.clone();
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      document0.siblingIndex = (-2162);
      Set<String> set0 = document0.classNames();
      document0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Element element0 = document0.child(0);
      Locale locale0 = Locale.FRANCE;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Fs", "Fs");
      Element element0 = document0.appendElement("Fs");
      Locale locale0 = Locale.UK;
      Set<String> set0 = locale0.getUnicodeLocaleAttributes();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Element element0 = document0.toggleClass("aSg");
      element0.className();
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      Document document0 = Document.createShell("#comment");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("G", parseSettings0);
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "G", attributes0);
      pseudoTextElement0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      Document document0 = Document.createShell("^3%Ku6l2L");
      document0.childNodeSize();
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aSg", "aSg");
      document0.appendElement("]j");
      document0.child(1);
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.parentNode = (Node) document0;
      document0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      Document document0 = Document.createShell(";{9o![rJ;}lfB!e");
      Element element0 = document0.appendElement("w-Y8$");
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.head();
      element0.before((Node) document0);
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.body();
      element0.before((Node) document0);
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Tag tag0 = Tag.valueOf("aSg");
      Element element0 = new Element(tag0, "aSg");
      document0.parentNode = (Node) element0;
      document0.before("mdk%1ladtr~aa?");
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      Document document0 = Document.createShell("ectities");
      Element element0 = document0.appendElement("b,");
      element0.before("ectities");
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      Document document0 = Parser.parse("3R7gSJ]'<c|Og;UX", "3R7gSJ]'<c|Og;UX");
      Element element0 = document0.body();
      element0.before("java.lang.string@0000000076 /#?m asg");
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("HpHt", "html");
      document0.baseUri();
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      Tag tag0 = Tag.valueOf("aR}~-$Xf");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ">", attributes0);
      Element element0 = formElement0.val(">");
      element0.attributes();
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      document0.siblingIndex = (-2155);
      document0.attr("#root", false);
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "CEQ4^s<eu|VsXBAbPq");
      Element element0 = document0.body();
      element0.attr("CEQ4^s<eu|VsXBAbPq", false);
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.parentNode = (Node) document0;
      document0.attr("aSgaSg", true);
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      Document document0 = Document.createShell("^3%Ku6l2L");
      Element element0 = document0.body();
      element0.attr("5WgEt'bWC", "#root");
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      Document document0 = Document.createShell("var");
      document0.parentNode = (Node) document0;
      Element element0 = document0.body();
      document0.appendTo(element0);
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#7", " ");
      Element element0 = document0.body();
      element0.appendText(".");
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("#7", " ");
      document0.appendText(".");
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3;d<7b&Il1'3`", "3");
      Element element0 = document0.appendElement("3;d<7b&Il1'3`");
      element0.appendElement("br");
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      Document document0 = Document.createShell("body");
      document0.appendElement("body");
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";{C9o![rJ;}l$fB!e", ";{C9o![rJ;}l$fB!e");
      document0.appendChild(document0);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      Tag tag0 = Tag.valueOf("body");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "body", attributes0);
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("org.jsoup.nodes.Element$NodeList", (String) null, true);
      formElement0.appendChild(xmlDeclaration0);
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Element element0 = document0.prepend("aSg");
      Element element1 = document0.child(0);
      Element element2 = element1.appendTo(element0);
      element2.append("#comment");
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Element element0 = document0.child(0);
      element0.append("#comment");
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Tag tag0 = Tag.valueOf("aSg");
      Element element0 = new Element(tag0, "aSg");
      document0.parentNode = (Node) element0;
      document0.append("aSg");
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      Document document0 = new Document("{0]Jr\"G/eL/@v1'$Q");
      document0.append("");
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      Document document0 = Document.createShell("body");
      Element element0 = document0.head();
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Element element0 = document0.appendElement("Tag name must not be empty.");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";(_", ";(_");
      document0.parentNode = (Node) document0;
      Element element0 = document0.prependText("lL<#&b*2;KYnlXNd");
      element0.after((Node) document0);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      Document document0 = Document.createShell("aR}~-$Xf");
      Element element0 = document0.head();
      element0.after("aR}~-$Xf");
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("!(SE.|R l-", "org.jsoup.nodes.Element$1");
      Element element0 = document0.appendElement("value");
      element0.after("!(SE.|R l-");
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("!(SE.|R l-", "org.jsoup.nodes.Element$1");
      Document document1 = document0.normalise();
      Element element0 = document1.body();
      element0.after("!(SE.|R l-");
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lng", "lng");
      document0.siblingIndex = (-1);
      document0.addClass("lng");
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!(SqE.R|RCel-", "!(SqE.R|RCel-");
      Element element0 = document0.body();
      element0.addClass("textarea");
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      document0.addClass(">%,6*ZZ*e[f^m");
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      Document document0 = Document.createShell("{|");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.wrap("org.jsoup.parser.HtmlTreeBuilderState$Constants");
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      Document document0 = new Document("/4&");
      // Undeclared exception!
      try { 
        document0.wrap("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      Document document0 = new Document("Unexpected con[of en&ities loaded");
      Element element0 = document0.attr("NX9\"z", true);
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.wholeText();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      Document document0 = Parser.parse("vr", "vr");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.val("vr");
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      Tag tag0 = Tag.valueOf("vr");
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("O*_<)", "O*_<)");
      FormElement formElement0 = new FormElement(tag0, "#", attributes1);
      attributes1.keys = null;
      // Undeclared exception!
      try { 
        formElement0.val("vr");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      Tag tag0 = Tag.valueOf("{|");
      Attributes attributes0 = new Attributes();
      String[] stringArray0 = new String[7];
      attributes0.keys = stringArray0;
      FormElement formElement0 = new FormElement(tag0, ". Mimetype=", attributes0);
      // Undeclared exception!
      try { 
        formElement0.val("{|");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 0
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      Document document0 = Document.createShell("^3%Ku6l2L");
      // Undeclared exception!
      try { 
        document0.toggleClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("Charset must not be null", parseSettings0);
      Attributes attributes0 = new Attributes();
      Attributes attributes1 = attributes0.put("Charset must not be null", "org.jsoup.parser.HtmlTreeBuilder");
      String[] stringArray0 = new String[1];
      attributes1.vals = stringArray0;
      FormElement formElement0 = new FormElement(tag0, "Charset must not be null", attributes1);
      // Undeclared exception!
      try { 
        formElement0.toggleClass("q");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // 1
         //
         verifyException("org.jsoup.nodes.Attributes", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("k]4{s!A=n5/", "~ZE70BkR#ko");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pttern sbntx error:", "Pttern sbntx error:");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R:2ko", "d'#P^JOVL$_");
      Comment comment0 = new Comment("R:2ko");
      document0.setParentNode(comment0);
      // Undeclared exception!
      try { 
        document0.text();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.tagName("Children collection to be inserted must not be null.");
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput("b!+r{3^", "b!+r{3^");
      // Undeclared exception!
      try { 
        document0.tagName("o_|fJZn");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Document document0 = Parser.parse("i>km2s#D(,($~[kszW", "i>km2s#D(,($~[kszW");
      // Undeclared exception!
      try { 
        document0.tagName("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Tag name must not be empty.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Tag tag0 = Tag.valueOf("aSg");
      Element element0 = new Element(tag0, "aSg");
      document0.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        document0.siblingElements();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Illegal Capacity: -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "CEQ4^s<eu|VsXBAbPq");
      // Undeclared exception!
      try { 
        document0.selectFirst("CEQ4^s<eu|VsXBAbPq");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query 'CEQ4^s<eu|VsXBAbPq': unexpected token at '^s<eu|VsXBAbPq'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      // Undeclared exception!
      try { 
        document0.selectFirst("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      Tag tag0 = Tag.valueOf("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
      Attributes attributes0 = new Attributes();
      Element element0 = new Element(tag0, "Could not determine a form action URL for submit. Ensure you set a base URI when parsing.", attributes0);
      // Undeclared exception!
      try { 
        element0.select("Could not determine a form action URL for submit. Ensure you set a base URI when parsing.");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      // Undeclared exception!
      try { 
        document0.select((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      Document document0 = Document.createShell("d^%3+FeD2KFrWj8{_");
      // Undeclared exception!
      try { 
        document0.removeClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("5I7lfCFQ", "5I7lfCFQ");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("5I7lfCFQ", "5I7lfCFQ", false);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.previousElementSiblings();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Tag tag0 = Tag.valueOf("xctqtyes");
      Document document0 = Parser.parseBodyFragment("[4", "section");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "xctqtyes", attributes0);
      List<Node> list0 = Parser.parseFragment("xctqtyes", (Element) formElement0, "xctqtyes");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.prependText("section");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableList", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      // Undeclared exception!
      try { 
        document0.prependText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Document document0 = Document.createShell("var");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.prependElement("var");
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      Document document0 = Document.createShell("#comment");
      DocumentType documentType0 = new DocumentType("org.jsoup.nodes.Element$1", "] 5&Awnb3I)", "#comment", "#comment");
      document0.appendChild(documentType0);
      Element element0 = document0.html("g-1H");
      // Undeclared exception!
      try { 
        element0.prependChild(documentType0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Document document0 = Document.createShell("var");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.prepend("<!DOCTYPE");
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Document document0 = Document.createShell("^3%Ku6l2L");
      // Undeclared exception!
      try { 
        document0.prepend((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("se", "se");
      MockPrintWriter mockPrintWriter0 = new MockPrintWriter("</");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(173);
      // Undeclared exception!
      document0.outerHtmlTail(mockPrintWriter0, 173, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";{C9o![rJ;}l$fB!e", ";{C9o![rJ;}l$fB!e");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) ";{C9o![rJ;}l$fB!e");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(charBuffer0, 1, document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Document document0 = new Document("[r");
      Document document1 = document0.normalise();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(102);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        document1.outerHtmlTail(charBuffer0, 102, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.CharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail((Appendable) null, 24, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("dw", "dw");
      MockFileWriter mockFileWriter0 = new MockFileWriter("2", true);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlTail(mockFileWriter0, (-1590), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream("]j", false);
      MockPrintStream mockPrintStream0 = new MockPrintStream(mockFileOutputStream0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.indentAmount(1486);
      // Undeclared exception!
      document0.outerHtmlHead(mockPrintStream0, 1486, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("2i67Cm[sR", "2i67Cm[sR");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "2i67Cm[sR");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, (-1517), document_OutputSettings0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      char[] charArray0 = new char[1];
      CharBuffer charBuffer0 = CharBuffer.wrap(charArray0, 0, 0);
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(charBuffer0, 1780, document_OutputSettings0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      Element element0 = new Element("xctqtyes");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "xctqtyes");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      element0.outerHtmlHead(stringBuilder0, 2147483645, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead((Appendable) null, 3252, document_OutputSettings0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      Document document0 = Document.createShell("#root");
      MockPrintStream mockPrintStream0 = new MockPrintStream("#root");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        document0.outerHtmlHead(mockPrintStream0, (-1453454314), document_OutputSettings0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // width must be > 0
         //
         verifyException("org.jsoup.internal.StringUtil", e);
      }
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Element element0 = new Element("br");
      DocumentType documentType0 = new DocumentType((String) null, "even", "&pbf", ":nth-child(%d)");
      element0.parentNode = (Node) documentType0;
      StringBuilder stringBuilder0 = new StringBuilder("br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      // Undeclared exception!
      try { 
        element0.outerHtmlHead(stringBuilder0, 501, document_OutputSettings0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(";_", ";_");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      try { 
        document0.outerHtmlHead(pipedWriter0, 118, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      Document document0 = Document.createShell("^3%Ku6l2L");
      // Undeclared exception!
      try { 
        document0.lastElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      Document document0 = Document.createShell(";v_");
      document0.parentNode = (Node) document0;
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      // Undeclared exception!
      document0.is((Evaluator) evaluator_IsOnlyOfType0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      Document document0 = Parser.parse("/`DqCun#GaUu.U ", "/`DqCun#GaUu.U ");
      // Undeclared exception!
      try { 
        document0.is((Evaluator) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      Document document0 = Parser.parse("$Txc]/gpJ%1l?W", "i6Z_UG[R:>iD%[aRe");
      // Undeclared exception!
      try { 
        document0.is("");
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '': unexpected token at ''
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Document document0 = Document.createShell("var");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.is("var");
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      Document document0 = Document.createShell("8vJwR*S5cNF}+6\"q6");
      Node[] nodeArray0 = new Node[8];
      nodeArray0[0] = (Node) document0;
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("8vJwR*S5cNF}+6\"q6", false);
      nodeArray0[1] = (Node) xmlDeclaration0;
      nodeArray0[2] = (Node) document0;
      Comment comment0 = new Comment("ro?s*4M0,Z:Xp3ZaDs");
      nodeArray0[3] = (Node) comment0;
      nodeArray0[4] = (Node) document0;
      nodeArray0[5] = (Node) document0;
      nodeArray0[6] = (Node) document0;
      nodeArray0[7] = (Node) document0;
      // Undeclared exception!
      try { 
        document0.insertChildren((-1), nodeArray0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.html("aSg");
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[5]re", "d^%3+FeD2KFrWj8{_");
      // Undeclared exception!
      try { 
        document0.html((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      PipedWriter pipedWriter0 = new PipedWriter();
      // Undeclared exception!
      try { 
        document0.html(pipedWriter0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Pipe not connected
         //
         verifyException("org.jsoup.nodes.Node$OuterHtmlVisitor", e);
      }
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Document document0 = Document.createShell("vr");
      document0.parentNode = (Node) document0;
      MockFile mockFile0 = new MockFile("9fL8@|qm5U&1.7a/", "40^koJ>=Sg/,tF");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      BufferedWriter bufferedWriter0 = new BufferedWriter(mockFileWriter0);
      // Undeclared exception!
      document0.html(bufferedWriter0);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aSg", "aSg");
      CharBuffer charBuffer0 = CharBuffer.wrap((CharSequence) "aSg");
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: ReadOnlyBufferException");
      
      } catch(ReadOnlyBufferException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.StringCharBuffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Document document0 = Parser.parse("j", "j");
      Charset charset0 = Charset.defaultCharset();
      ByteBuffer byteBuffer0 = ByteBuffer.allocateDirect(0);
      CharBuffer charBuffer0 = charset0.decode(byteBuffer0);
      // Undeclared exception!
      try { 
        document0.html(charBuffer0);
        fail("Expecting exception: BufferOverflowException");
      
      } catch(BufferOverflowException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.nio.Buffer", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.html();
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!(SE.R|RCel-", "!(SE.R|RCel-");
      DataNode dataNode0 = new DataNode("=MbB");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.html();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Document document0 = Parser.parse("", "blockquote");
      // Undeclared exception!
      try { 
        document0.hasClass((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Document document0 = Document.createShell("W}`9-OEW9[~A");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Document document0 = Document.createShell("");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("pO@O_ez(N'Lh^3xV*l");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: pO@O_ez(N'Lh^3xV*l
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Fs", "Fs");
      DocumentType documentType0 = new DocumentType("UJ(", "Fs", "Fs", "");
      document0.setParentNode(documentType0);
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("Fs");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pttern sbntx error:", "Pttern sbntx error:");
      document0.setSiblingIndex((-3106));
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText("Pttern sbntx error:");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      Document document0 = Parser.parse("]j", "]j");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$MatchesOwn", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      Tag tag0 = Tag.valueOf("G");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Entities$1", attributes0);
      // Undeclared exception!
      try { 
        formElement0.getElementsMatchingOwnText((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingOwnText("!)u|ddB'X?XTq");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: !)u|ddB'X?XTq
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      DataNode dataNode0 = new DataNode("org.jsoup.parser.Token$CData");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingText("id");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("yUX$WWvU", "U7}X{");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("U7}X{", false);
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("Fy|^R3wjm");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      Document document0 = Document.createShell("dx");
      Element element0 = document0.appendElement("dx");
      element0.siblingIndex = (-2147);
      // Undeclared exception!
      try { 
        document0.getElementsContainingOwnText("dx");
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      Document document0 = new Document("<h%|w)h:,P']V8c");
      // Undeclared exception!
      try { 
        document0.getElementsByTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      Document document0 = Document.createShell("i6Z_UG[R:>iD%[aRe");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("", "&'C=!mB");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[5]re", "d^%3+FeD2KFrWj8{_");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueNot("[5]re", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("java.lang.string@0000000056 asg unexpected count ]j entities loaded", "java.lang.string@0000000056 asg unexpected count ]j entities loaded");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("java.lang.string@0000000056 asg unexpected count ]j entities loaded", (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      Document document0 = Parser.parse("aSg", "aSg");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("aSg", "\"");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueEnding("rp", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      Document document0 = Document.createShell("W}`9-OEW9[~A");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValue("", "W}`9-OEW9[~A");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      Document document0 = Document.createShell("+-t@?Po");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeStarting((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Document document0 = Parser.parse("", "blockquote");
      // Undeclared exception!
      try { 
        document0.getElementById("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      // Undeclared exception!
      try { 
        document0.firstElementSibling();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("8>L?", "8>L?");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.dataNodes();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("}ctqties", "}ctqties");
      document0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.data();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Tag tag0 = Tag.valueOf("aSg");
      Element element0 = new Element(tag0, "aSg");
      document0.parentNode = (Node) element0;
      Element element1 = document0.toggleClass("aSg");
      // Undeclared exception!
      try { 
        element1.cssSelector();
        fail("Expecting exception: IllegalStateException");
      
      } catch(IllegalStateException e) {
         //
         // Could not parse query '#root.java.lang.String@0000000061': unexpected token at '@0000000061'
         //
         verifyException("org.jsoup.select.QueryParser", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("R:", "R:");
      Element element0 = document0.body();
      List<Node> list0 = Parser.parseXmlFragment("R:", "R:");
      element0.childNodes = list0;
      // Undeclared exception!
      try { 
        element0.cssSelector();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      Document document0 = Parser.parse("xEd^4bLs0tR0KrG{", "xEd^4bLs0tR0KrG{");
      Comment comment0 = new Comment("xEd^4bLs0tR0KrG{");
      XmlDeclaration xmlDeclaration0 = comment0.asXmlDeclaration();
      document0.setParentNode(xmlDeclaration0);
      // Undeclared exception!
      try { 
        document0.cssSelector();
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("n&L7z9nGQX#*6vb2T", "]");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.charset((Charset) null);
      Document document1 = document0.outputSettings(document_OutputSettings0);
      // Undeclared exception!
      try { 
        document1.clone();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Document$OutputSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("kTkj8zX=Xjr:fa+", "\"kj.3>AoxOVr<m:");
      // Undeclared exception!
      try { 
        document0.classNames((Set<String>) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      Document document0 = new Document("Unexpected con[of en&ities loaded");
      Element element0 = document0.attr("NX9\"z", true);
      element0.childNodes = null;
      // Undeclared exception!
      try { 
        document0.children();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test212()  throws Throwable  {
      Document document0 = Parser.parse("aSg", "aSg");
      // Undeclared exception!
      try { 
        document0.child((-892));
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test213()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.before("aSg");
  }

  @Test(timeout = 4000)
  public void test214()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.attr("G", "n8AA.Cdj");
  }

  @Test(timeout = 4000)
  public void test215()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!(SE.R|RCel-", "!(SE.R|RCel-");
      // Undeclared exception!
      try { 
        document0.attr((String) null, (String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.ParseSettings", e);
      }
  }

  @Test(timeout = 4000)
  public void test216()  throws Throwable  {
      Document document0 = Parser.parse("$Txc]/gpJ%1l?W", "i6Z_UG[R:>iD%[aRe");
      // Undeclared exception!
      try { 
        document0.appendTo((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test217()  throws Throwable  {
      Document document0 = Parser.parse("aSg", "aSg");
      document0.appendTo(document0);
      // Undeclared exception!
      document0.appendElement("mdK%1ladTR~aA?");
  }

  @Test(timeout = 4000)
  public void test218()  throws Throwable  {
      Document document0 = Document.createShell("dx");
      List<Node> list0 = Parser.parseXmlFragment("dx", "#root");
      document0.childNodes = list0;
      // Undeclared exception!
      try { 
        document0.appendElement("dx");
        fail("Expecting exception: UnsupportedOperationException");
      
      } catch(UnsupportedOperationException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("java.util.Collections$UnmodifiableCollection", e);
      }
  }

  @Test(timeout = 4000)
  public void test219()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      Document document0 = parser1.parseInput("b!+r{3^", "b!+r{3^");
      // Undeclared exception!
      try { 
        document0.appendElement("b!+r{3^");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test220()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      // Undeclared exception!
      try { 
        document0.appendElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test221()  throws Throwable  {
      Document document0 = new Document("8>L?");
      CDataNode cDataNode0 = new CDataNode("org.jsoup.select.Evaluator$IsNthLastOfType");
      Node node0 = cDataNode0.doClone(document0);
      // Undeclared exception!
      try { 
        document0.appendChild(node0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test222()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      // Undeclared exception!
      try { 
        document0.appendChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test223()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.append("aSg");
  }

  @Test(timeout = 4000)
  public void test224()  throws Throwable  {
      Document document0 = Parser.parse("", "blockquote");
      // Undeclared exception!
      try { 
        document0.append((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test225()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("", "");
      TextNode textNode0 = TextNode.createFromEncoded("", (String) null);
      Element element0 = document0.doClone(textNode0);
      // Undeclared exception!
      try { 
        element0.append("ZB");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test226()  throws Throwable  {
      Document document0 = Document.createShell("Y^6qzA!,Ie!!-J~#");
      Element element0 = document0.head();
      element0.prependChild(document0);
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test227()  throws Throwable  {
      Document document0 = Document.createShell("var");
      document0.parentNode = (Node) document0;
      // Undeclared exception!
      document0.after("var");
  }

  @Test(timeout = 4000)
  public void test228()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aSg", "aSg");
      Tag tag0 = Tag.valueOf("aSg");
      Element element0 = new Element(tag0, "aSg");
      document0.parentNode = (Node) element0;
      // Undeclared exception!
      try { 
        document0.after("aSg");
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test229()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("he(2-67", "he(2-67");
      DataNode dataNode0 = new DataNode("=MbB");
      document0.setParentNode(dataNode0);
      // Undeclared exception!
      try { 
        document0.after("he(2-67");
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test230()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!(SE.R|RCel-", "!(SE.R|RCel-");
      // Undeclared exception!
      try { 
        document0.addClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test231()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "zkJw;;j[C", attributes0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test232()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((Tag) null, "aSg");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test233()  throws Throwable  {
      Element element0 = null;
      try {
        element0 = new Element((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test234()  throws Throwable  {
      Element element0 = new Element("jSKtr+");
      element0.html((OutputStreamWriter) null);
  }

  @Test(timeout = 4000)
  public void test235()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Element element0 = document0.toggleClass("aSg");
      Set<String> set0 = document0.classNames();
      element0.classNames(set0);
  }

  @Test(timeout = 4000)
  public void test236()  throws Throwable  {
      Document document0 = Parser.parse("$Txc]/gpJ%1l?W", "i6Z_UG[R:>iD%[aRe");
      document0.append("KB)_r700|zteDY");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test237()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("Pattern syntax error:", "Pattern syntax error:");
      CDataNode cDataNode0 = new CDataNode("m\" e:'ep<*87%5;:~%");
      cDataNode0.clearAttributes();
      document0.prependChild(cDataNode0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test238()  throws Throwable  {
      Element element0 = new Element("BtRMsW9Il}\"Wc/%Z");
      element0.elementSiblingIndex();
  }

  @Test(timeout = 4000)
  public void test239()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.parentNode = (Node) document0;
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test240()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("jD'Z!&H0/h&a", "jD'Z!&H0/h&a");
      Element element0 = document0.prependElement("Tag name must not be empty.");
      element0.nextElementSibling();
  }

  @Test(timeout = 4000)
  public void test241()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Element element0 = document0.appendElement("Tag name must not be empty.");
      element0.cssSelector();
  }

  @Test(timeout = 4000)
  public void test242()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.attributes();
  }

  @Test(timeout = 4000)
  public void test243()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      document0.children();
  }

  @Test(timeout = 4000)
  public void test244()  throws Throwable  {
      Document document0 = Parser.parse("aSg", "aSg");
      document0.className();
  }

  @Test(timeout = 4000)
  public void test245()  throws Throwable  {
      Document document0 = Parser.parse("j", "j");
      Pattern pattern0 = Pattern.compile("V9'TO");
      document0.getElementsMatchingOwnText(pattern0);
  }

  @Test(timeout = 4000)
  public void test246()  throws Throwable  {
      Document document0 = Document.createShell("^3%Ku6l2L");
      document0.attr("5WgEt'bWC", "#root");
  }

  @Test(timeout = 4000)
  public void test247()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("**ARG1?3", parseSettings0);
      Element element0 = new Element(tag0, "**ARG1?3");
      element0.isBlock();
  }

  @Test(timeout = 4000)
  public void test248()  throws Throwable  {
      Element element0 = new Element("BtRMsW9Il}\"Wc/%Z");
      element0.baseUri();
  }

  @Test(timeout = 4000)
  public void test249()  throws Throwable  {
      Document document0 = Document.createShell("3S");
      // Undeclared exception!
      try { 
        document0.getElementsMatchingText((Pattern) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.select.Evaluator$Matches", e);
      }
  }

  @Test(timeout = 4000)
  public void test250()  throws Throwable  {
      Document document0 = Document.createShell(";v_");
      Evaluator.IsOnlyOfType evaluator_IsOnlyOfType0 = new Evaluator.IsOnlyOfType();
      document0.is((Evaluator) evaluator_IsOnlyOfType0);
  }

  @Test(timeout = 4000)
  public void test251()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Tag name must not be empty.", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        document0.select("[.HnyZ7m!%VfSfJ<{d");
        fail("Expecting exception: UnknownFormatConversionException");
      
      } catch(UnknownFormatConversionException e) {
         //
         // Conversion = 'V'
         //
         verifyException("java.util.Formatter$FormatSpecifier", e);
      }
  }

  @Test(timeout = 4000)
  public void test252()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("BogusComment", "BogusComment");
      document0.id();
  }

  @Test(timeout = 4000)
  public void test253()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("meta[charset]", "");
      document0.clone();
  }

  @Test(timeout = 4000)
  public void test254()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.title("aSg");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test255()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("[r", "[r");
      PipedWriter pipedWriter0 = new PipedWriter();
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      document_OutputSettings0.prettyPrint(false);
      try { 
        document0.outerHtmlTail(pipedWriter0, 0, document_OutputSettings0);
        fail("Expecting exception: IOException");
      
      } catch(IOException e) {
         //
         // Pipe not connected
         //
         verifyException("java.io.PipedWriter", e);
      }
  }

  @Test(timeout = 4000)
  public void test256()  throws Throwable  {
      Element element0 = new Element("br");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
      document_OutputSettings0.syntax(document_OutputSettings_Syntax0);
      element0.outerHtmlHead(stringBuilder0, 192, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test257()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("aSg", "aSg");
      // Undeclared exception!
      try { 
        document0.html((MockPrintStream) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test258()  throws Throwable  {
      Tag tag0 = Tag.valueOf("br");
      Element element0 = new Element(tag0, "br");
      StringBuilder stringBuilder0 = new StringBuilder((CharSequence) "br");
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      element0.parentNode = (Node) element0;
      element0.outerHtmlHead(stringBuilder0, 192, document_OutputSettings0);
  }

  @Test(timeout = 4000)
  public void test259()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      document0.appendElement("br");
      document0.html();
  }

  @Test(timeout = 4000)
  public void test260()  throws Throwable  {
      Document document0 = Parser.parse("ectities", "ectities");
      MockFile mockFile0 = new MockFile("W@-tlsk", "ectities");
      MockFileWriter mockFileWriter0 = new MockFileWriter(mockFile0);
      Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
      Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.prettyPrint(false);
      document0.outerHtmlHead(mockFileWriter0, 53, document_OutputSettings1);
  }

  @Test(timeout = 4000)
  public void test261()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.nodes.Element", attributes0);
      formElement0.val("c");
  }

  @Test(timeout = 4000)
  public void test262()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "{|", attributes0);
      formElement0.val();
  }

  @Test(timeout = 4000)
  public void test263()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("aSg", "aSg");
      Element element0 = document0.toggleClass("aSg");
      element0.toggleClass("aSg");
      document0.toggleClass("aSg");
  }

  @Test(timeout = 4000)
  public void test264()  throws Throwable  {
      Document document0 = Document.createShell("strong");
      Element element0 = document0.toggleClass("org.jsoup.nodes.Element$1");
      element0.toggleClass("t>:sZZAnF|&3T?}8/E");
      document0.hasClass("t>:sZZAnF|&3T?}8/E");
  }

  @Test(timeout = 4000)
  public void test265()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.toggleClass("aSg");
      document0.toggleClass("U/6");
      document0.toggleClass("fw4*qCh!ym,zI&[B#,U");
      document0.hasClass("U/6");
  }

  @Test(timeout = 4000)
  public void test266()  throws Throwable  {
      Document document0 = Parser.parse("", "");
      document0.toggleClass("");
      document0.toggleClass("Unexpected count of entities loaded");
      document0.hasClass("class");
  }

  @Test(timeout = 4000)
  public void test267()  throws Throwable  {
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("id", "id");
      document0.toggleClass("aR}~-dXf");
      document0.toggleClass(" ");
      document0.hasClass("aR}~-dXf");
  }

  @Test(timeout = 4000)
  public void test268()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.toggleClass("aSg");
      document0.toggleClass("org.jsoup.nodes.Element$NodeList");
      document0.hasClass("-Q!wjhI");
  }

  @Test(timeout = 4000)
  public void test269()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aSg", "aSg");
      document0.toggleClass("]j");
      document0.toggleClass("Unexpected count of entities loaded");
      document0.hasClass("java.lang.string@0000000044 unexpected class of entities loaded");
  }

  @Test(timeout = 4000)
  public void test270()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aSg", "aSg");
      document0.toggleClass("]j");
      document0.hasClass("java.lang.string@0000000044 unexpected class of entities loaded");
  }

  @Test(timeout = 4000)
  public void test271()  throws Throwable  {
      Document document0 = Document.createShell(";{C9o![rJ;}l$fB!e");
      document0.hasClass("ForeignContent");
  }

  @Test(timeout = 4000)
  public void test272()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<?Cj\"o2J", "Z )Q89a@TqJ");
      document0.data();
  }

  @Test(timeout = 4000)
  public void test273()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("7!V\"-", "7!V\"-");
      Charset charset0 = Charset.defaultCharset();
      document0.charset(charset0);
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test274()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment(" ", "mdk%1ladtr~aa?");
      document0.hasText();
  }

  @Test(timeout = 4000)
  public void test275()  throws Throwable  {
      Document document0 = Document.createShell("{|");
      document0.parentNode = (Node) document0;
      Element.preserveWhitespace(document0.parentNode);
  }

  @Test(timeout = 4000)
  public void test276()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("9K3xPtk#N$;:%2+");
      Element.preserveWhitespace(cDataNode0);
  }

  @Test(timeout = 4000)
  public void test277()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("3;d<7b&Il1'3`", "3");
      document0.appendElement("br");
      document0.getElementsContainingOwnText("");
  }

  @Test(timeout = 4000)
  public void test278()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("noshade", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("w$0\"su}o%");
      Attributes attributes0 = cDataNode0.attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "noshade", attributes0);
      pseudoTextElement0.prependChild(cDataNode0);
      pseudoTextElement0.ownText();
  }

  @Test(timeout = 4000)
  public void test279()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "textarea", attributes0);
      pseudoTextElement0.text("UQ");
      pseudoTextElement0.getElementsContainingText("UQ");
  }

  @Test(timeout = 4000)
  public void test280()  throws Throwable  {
      Element element0 = new Element("aSg");
      XmlDeclaration xmlDeclaration0 = new XmlDeclaration("aSg", "aSg", false);
      element0.appendChild(xmlDeclaration0);
      element0.ownText();
  }

  @Test(timeout = 4000)
  public void test281()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("lng", "lng");
      document0.getElementsContainingOwnText("0");
  }

  @Test(timeout = 4000)
  public void test282()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Element element0 = document0.prepend("aSg");
      element0.wholeText();
  }

  @Test(timeout = 4000)
  public void test283()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Element element0 = document0.prepend("aSg");
      Element element1 = element0.append("aSg");
      element1.text();
  }

  @Test(timeout = 4000)
  public void test284()  throws Throwable  {
      Document document0 = Parser.parse("$Txc]/gpJ%1l?W", "i6Z_UG[R:>iD%[aRe");
      Element element0 = document0.append("KB)_r700|zteDY");
      element0.getElementsContainingText("");
  }

  @Test(timeout = 4000)
  public void test285()  throws Throwable  {
      Document document0 = Parser.parse("=Qtw)F'se", "8NRms|eCra");
      document0.appendElement("]j");
      document0.getElementsMatchingText("asg");
  }

  @Test(timeout = 4000)
  public void test286()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("[r", "[r");
      document0.appendElement("br");
      document0.getElementsMatchingText(" > ");
  }

  @Test(timeout = 4000)
  public void test287()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("<?-+RPV6pG+mW", "-mw%<r&@#");
      document0.getElementsMatchingText("i");
  }

  @Test(timeout = 4000)
  public void test288()  throws Throwable  {
      Document document0 = Parser.parse("", "blockquote");
      Element element0 = document0.head();
      Element element1 = element0.html("#root");
      element1.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test289()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Document document0 = parser0.parseInput("n&L7z9nGQX#*6vb2T", "]");
      document0.setParentNode(document0);
      document0.lastElementSibling();
  }

  @Test(timeout = 4000)
  public void test290()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.parentNode = (Node) document0;
      document0.firstElementSibling();
  }

  @Test(timeout = 4000)
  public void test291()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      Element element0 = document0.body();
      element0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test292()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      document0.previousElementSibling();
  }

  @Test(timeout = 4000)
  public void test293()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Element element0 = document0.head();
      Elements elements0 = element0.nextElementSiblings();
      assertFalse(elements0.isEmpty());
      assertEquals("aSg", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test294()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("aSg", "rp");
      document0.nextElementSibling();
      assertEquals("rp", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test295()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Element element0 = document0.appendElement("Q!;v)4mE1zIpi6");
      element0.siblingElements();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test296()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("b_", "b_");
      Element element0 = document0.head();
      element0.before("b_");
      String string0 = element0.cssSelector();
      assertEquals("b_", element0.baseUri());
      assertEquals("html > head:nth-child(3)", string0);
  }

  @Test(timeout = 4000)
  public void test297()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Element element0 = document0.toggleClass("aSg");
      element0.cssSelector();
      assertEquals("aSg", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test298()  throws Throwable  {
      Document document0 = Document.createShell("G");
      Node[] nodeArray0 = new Node[1];
      // Undeclared exception!
      try { 
        document0.insertChildren((-354), nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test299()  throws Throwable  {
      Document document0 = new Document("/4&");
      Node[] nodeArray0 = new Node[3];
      // Undeclared exception!
      try { 
        document0.insertChildren(31, nodeArray0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test300()  throws Throwable  {
      Document document0 = Parser.parse("$Txc]/gpJ%1l?W", "i6Z_UG[R:>iD%[aRe");
      Elements elements0 = document0.siblingElements();
      // Undeclared exception!
      try { 
        document0.insertChildren(360, (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test301()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      Elements elements0 = document0.getElementsByAttributeValueStarting("#root", "aSg");
      // Undeclared exception!
      try { 
        document0.insertChildren((-873), (Collection<? extends Node>) elements0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Insert position out of bounds.
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test302()  throws Throwable  {
      Document document0 = Document.createShell("aP1@[#C`u#3p55/.+");
      DataNode dataNode0 = DataNode.createFromEncoded("InBody", "wbr");
      document0.appendChild(dataNode0);
      document0.dataNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test303()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("!(SE.R|RCel-", "!(SE.R|RCel-");
      document0.prepend("!(SE.R|RCel-");
      document0.textNodes();
      assertEquals(2, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test304()  throws Throwable  {
      Document document0 = new Document("aSg");
      Element element0 = document0.prepend("aSg");
      document0.parentNode = (Node) element0;
      element0.previousElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("aSg", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test305()  throws Throwable  {
      Document document0 = Document.createShell("^3%Ku6l2L");
      Elements elements0 = document0.getElementsByIndexGreaterThan(18);
      assertEquals("^3%Ku6l2L", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test306()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("{e<k", "{e<k");
      document0.selectFirst("iV");
      assertEquals("{e<k", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test307()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.getAllElements();
      assertEquals(1, document0.childNodeSize());
      assertEquals("aSg", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test308()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cpv", "cpv");
      Element element0 = document0.removeClass("cpv");
      assertEquals(1, element0.childNodeSize());
      assertEquals("cpv", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test309()  throws Throwable  {
      Document document0 = Document.createShell("ectities");
      // Undeclared exception!
      try { 
        document0.before("ectities");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test310()  throws Throwable  {
      Document document0 = new Document("aSg");
      // Undeclared exception!
      try { 
        document0.getElementsByAttribute("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test311()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aSg", "aSg");
      document0.getElementsByAttributeValueNot("Unexpected count of entities loaded", "java.lang.string@0000000044 unexpected class of entities loaded");
      assertEquals(1, document0.childNodeSize());
      assertEquals("aSg", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test312()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("cpv", "cpv");
      Element element0 = document0.shallowClone();
      assertEquals("cpv", element0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test313()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.doSetBaseUri("F$90+z");
      assertEquals("F$90+z", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test314()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      // Undeclared exception!
      try { 
        document0.after((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test315()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("!(SqE.R|RC8l-", "!(SqE.R|RC8l-");
      // Undeclared exception!
      try { 
        document0.text((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test316()  throws Throwable  {
      Document document0 = Document.createShell("#comment");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueContaining("org.jsoup.nodes.Element$1", (String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test317()  throws Throwable  {
      Document document0 = new Document("#comment");
      Pattern pattern0 = Pattern.compile("Data");
      document0.getElementsByAttributeValueMatching(" />", pattern0);
      assertEquals("#comment", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test318()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Insert position out of bounds.", "Insert position out of bounds.");
      Elements elements0 = document0.getElementsContainingText("id");
      assertEquals("Insert position out of bounds.", document0.baseUri());
      assertEquals(0, elements0.size());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test319()  throws Throwable  {
      Document document0 = Parser.parse("aSg", "aSg");
      // Undeclared exception!
      try { 
        document0.getElementsByClass((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test320()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("BogusComment", "BogusComment");
      document0.getElementsByAttributeValueEnding("TagName", "C%:Ox3");
      assertEquals("BogusComment", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test321()  throws Throwable  {
      Document document0 = Parser.parse("{k", "{k");
      document0.is("iV");
      assertEquals("{k", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test322()  throws Throwable  {
      Document document0 = Document.createShell("#comment");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueMatching("[}[W", "N=9Na^(*k%");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Pattern syntax error: N=9Na^(*k%
         //
         verifyException("org.jsoup.nodes.Element", e);
      }
  }

  @Test(timeout = 4000)
  public void test323()  throws Throwable  {
      Document document0 = Parser.parse(":nth-last-child(", ":nth-last-child(");
      Elements elements0 = document0.getElementsByIndexEquals(2700);
      assertEquals(":nth-last-child(", document0.baseUri());
      assertTrue(elements0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test324()  throws Throwable  {
      Document document0 = new Document("Pattern syntax error: ");
      document0.getElementsByAttributeStarting("Pattern syntax error: ");
      assertEquals("Pattern syntax error: ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test325()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";{C9o![rJ;}l$fB!e", ";{C9o![rJ;}l$fB!e");
      // Undeclared exception!
      try { 
        document0.prependElement("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String must not be empty
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test326()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed(";{C9o![rJ;}l$fB!e", ";{C9o![rJ;}l$fB!e");
      Elements elements0 = document0.getElementsByIndexLessThan(8204);
      assertEquals(3, elements0.size());
      assertEquals(";{C9o![rJ;}l$fB!e", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test327()  throws Throwable  {
      Document document0 = Document.createShell("var");
      // Undeclared exception!
      try { 
        document0.after("var");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test328()  throws Throwable  {
      Document document0 = Parser.parse("", "blockquote");
      Elements elements0 = document0.getElementsMatchingOwnText("#root");
      assertEquals("blockquote", document0.baseUri());
      assertEquals(0, elements0.size());
  }

  @Test(timeout = 4000)
  public void test329()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("b_", "b_");
      Element element0 = document0.head();
      assertNotNull(element0);
      
      String string0 = element0.cssSelector();
      assertEquals("html > head", string0);
      assertEquals(0, element0.siblingIndex());
      assertEquals("b_", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test330()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Cannot set a request body for HTTP method ", "'");
      // Undeclared exception!
      try { 
        document0.getElementsByAttributeValueStarting("'", "'");
        fail("Expecting exception: StringIndexOutOfBoundsException");
      
      } catch(StringIndexOutOfBoundsException e) {
      }
  }

  @Test(timeout = 4000)
  public void test331()  throws Throwable  {
      Tag tag0 = Tag.valueOf("aR}~-$Xf");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Jo`V6S", attributes0);
      formElement0.getElementsByAttributeValue(">", ">");
      assertEquals("Jo`V6S", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test332()  throws Throwable  {
      Document document0 = new Document("aSg");
      // Undeclared exception!
      try { 
        document0.attr((String) null, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test333()  throws Throwable  {
      Document document0 = Document.createShell(";{9o![rJ;}lfB!e");
      document0.wholeText();
      assertEquals(";{9o![rJ;}lfB!e", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test334()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      // Undeclared exception!
      try { 
        document0.before((Node) document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test335()  throws Throwable  {
      Document document0 = Parser.parse("aSg", "aSg");
      document0.dataset();
      assertEquals("aSg", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test336()  throws Throwable  {
      Document document0 = Document.createShell("body");
      Element element0 = document0.tagName("body");
      assertEquals(1, element0.childNodeSize());
      assertEquals("body", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test337()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("aSg", "aSg");
      // Undeclared exception!
      try { 
        document0.child(1);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test338()  throws Throwable  {
      Document document0 = Document.createShell("var");
      document0.previousElementSiblings();
      assertEquals("var", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test339()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("org.jsoup.nodes.Element$1", "org.jsoup.nodes.Element$1");
      // Undeclared exception!
      try { 
        document0.prependChild((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test340()  throws Throwable  {
      Document document0 = Parser.parse("aSg", "aSg");
      // Undeclared exception!
      try { 
        document0.appendText((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test341()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("JWJp{nZDgn70mu", "JWJp{nZDgn70mu");
      // Undeclared exception!
      try { 
        document0.wrap("JWJp{nZDgn70mu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test342()  throws Throwable  {
      Document document0 = Document.createShell("aSg");
      document0.nextElementSiblings();
      assertEquals(1, document0.childNodeSize());
      assertEquals("aSg", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test343()  throws Throwable  {
      Element element0 = new Element("jSKtr+");
      element0.getElementById("jSKtr+");
  }
}
