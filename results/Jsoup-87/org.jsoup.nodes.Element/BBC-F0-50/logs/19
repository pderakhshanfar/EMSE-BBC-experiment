* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.jsoup.nodes.Element
* Starting Client-0
* Connecting to master process on port 18281
* Analyzing classpath: 
  - subjects/buggy-versions/Jsoup-87/target/classes
* Finished analyzing classpath
* Generating tests for class org.jsoup.nodes.Element
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2768
* Using seed 3209656752
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 1405 / 2768
[MASTER] 02:57:47.326 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
[MASTER] 02:57:48.757 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
* Search finished after 602s and 903 generations, 357565 statements, best individual has fitness: 423.0
* Minimizing test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 99%
* Total number of goals: 410
* Number of covered goals: 404
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 97%
* Total number of goals: 308
* Number of covered goals: 300
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 129
* Number of covered goals: 129
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 96%
* Total number of goals: 843
* Number of covered goals: 813
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 63%
* Total number of goals: 695
* Number of covered goals: 441
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 99%
* Total number of goals: 102
* Number of covered goals: 101
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 99%
* Total number of goals: 102
* Number of covered goals: 101
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 94%
* Total number of goals: 308
* Number of covered goals: 289
* Generated 347 tests with total length 1100
* Resulting test suite's coverage: 88% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 03:09:01.021 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.6827166666666666% of time used, but only 71/347 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 29%
* Compiling and checking tests
[MASTER] 03:09:14.222 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:14.552 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:14.824 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:15.085 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:15.364 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:15.627 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:16.143 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:16.393 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:16.655 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:17.003 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:17.274 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:17.525 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:17.768 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:18.024 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:18.289 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:18.531 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:18.754 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:18.977 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:19.244 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:19.499 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:19.784 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:20.007 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:20.295 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:20.490 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:20.711 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:20.959 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:21.177 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:21.398 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:21.641 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:21.864 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:22.147 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:22.636 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:23.043 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:23.300 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:23.632 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:23.861 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:24.127 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:24.387 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:24.650 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:25.018 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:25.979 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:26.190 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:26.418 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:26.666 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:26.921 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:27.126 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:27.352 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:27.590 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:27.832 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:28.074 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:28.327 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:28.580 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:28.833 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:29.081 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:29.341 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:29.630 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:29.853 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:30.144 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:30.425 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:30.661 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:30.942 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:31.217 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:31.485 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:31.723 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:31.954 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:32.342 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:32.579 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:32.792 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:33.032 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:33.234 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:33.481 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:33.774 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:34.019 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:34.238 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:34.503 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:34.727 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:34.958 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:35.179 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:35.441 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:35.465 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.AssertionError: null
[MASTER] 03:09:35.467 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Document document0 = Parser.parseBodyFragmentRelaxed(".A^9s:`P8Zfn{{sxyN", "9m#FbQkZ3-j]mc");
assertNotNull(document0);
assertEquals(1, document0.childNodeSize());
assertEquals("#root", document0.tagName());
assertEquals("9m#FbQkZ3-j]mc", document0.location());
assertFalse(document0.hasParent());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("9m#FbQkZ3-j]mc", document0.baseUri());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertFalse(document0.isBlock());

Document document1 = (Document)document0.addClass("#root");
assertNotNull(document1);
assertSame(document0, document1);
assertSame(document1, document0);
assertEquals(1, document0.childNodeSize());
assertEquals("#root", document0.tagName());
assertEquals("9m#FbQkZ3-j]mc", document0.location());
assertFalse(document0.hasParent());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("9m#FbQkZ3-j]mc", document0.baseUri());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertFalse(document0.isBlock());
assertEquals(1, document1.childNodeSize());
assertEquals("9m#FbQkZ3-j]mc", document1.baseUri());
assertEquals("9m#FbQkZ3-j]mc", document1.location());
assertFalse(document1.updateMetaCharsetElement());
assertEquals(0, document1.siblingIndex());
assertEquals("#root", document1.tagName());
assertEquals("#document", document1.nodeName());
assertFalse(document1.isBlock());
assertFalse(document1.hasParent());
assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());

Document document2 = (Document)document0.val(".A^9s:`P8Zfn{{sxyN");
assertNotNull(document2);
assertSame(document0, document1);
assertSame(document0, document2);
assertSame(document2, document1);
assertSame(document2, document0);
assertEquals(1, document0.childNodeSize());
assertEquals("#root", document0.tagName());
assertEquals("9m#FbQkZ3-j]mc", document0.location());
assertFalse(document0.hasParent());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("9m#FbQkZ3-j]mc", document0.baseUri());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertFalse(document0.isBlock());
assertEquals("9m#FbQkZ3-j]mc", document2.location());
assertEquals("#root", document2.tagName());
assertEquals(1, document2.childNodeSize());
assertEquals(0, document2.siblingIndex());
assertFalse(document2.isBlock());
assertEquals("#document", document2.nodeName());
assertFalse(document2.hasParent());
assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
assertFalse(document2.updateMetaCharsetElement());
assertEquals("9m#FbQkZ3-j]mc", document2.baseUri());

Document document3 = document0.normalise();
assertNotNull(document3);
assertSame(document0, document1);
assertSame(document0, document3);
assertSame(document0, document2);
assertSame(document3, document0);
assertSame(document3, document1);
assertSame(document3, document2);
assertEquals(1, document0.childNodeSize());
assertEquals("#root", document0.tagName());
assertEquals("9m#FbQkZ3-j]mc", document0.location());
assertFalse(document0.hasParent());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("9m#FbQkZ3-j]mc", document0.baseUri());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertFalse(document0.isBlock());
assertFalse(document3.isBlock());
assertEquals(0, document3.siblingIndex());
assertFalse(document3.updateMetaCharsetElement());
assertEquals("#document", document3.nodeName());
assertEquals(1, document3.childNodeSize());
assertEquals("9m#FbQkZ3-j]mc", document3.location());
assertEquals("#root", document3.tagName());
assertEquals("9m#FbQkZ3-j]mc", document3.baseUri());
assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
assertFalse(document3.hasParent());

Elements elements0 = document0.getElementsByTag("#doctype");
assertNotNull(elements0);
assertSame(document0, document1);
assertSame(document0, document3);
assertSame(document0, document2);
assertEquals(1, document0.childNodeSize());
assertEquals("#root", document0.tagName());
assertEquals("9m#FbQkZ3-j]mc", document0.location());
assertFalse(document0.hasParent());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("9m#FbQkZ3-j]mc", document0.baseUri());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertFalse(document0.isBlock());
assertEquals(0, elements0.size());
assertTrue(elements0.isEmpty());

Document document4 = (Document)document0.attr("#doctype", false);
assertNotNull(document4);
assertSame(document0, document1);
assertSame(document0, document3);
assertSame(document0, document4);
assertSame(document0, document2);
assertSame(document4, document3);
assertSame(document4, document1);
assertSame(document4, document2);
assertSame(document4, document0);
assertEquals(1, document0.childNodeSize());
assertEquals("#root", document0.tagName());
assertEquals("9m#FbQkZ3-j]mc", document0.location());
assertFalse(document0.hasParent());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("9m#FbQkZ3-j]mc", document0.baseUri());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertFalse(document0.isBlock());
assertFalse(document4.isBlock());
assertFalse(document4.hasParent());
assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
assertEquals(1, document4.childNodeSize());
assertEquals("#root", document4.tagName());
assertEquals("9m#FbQkZ3-j]mc", document4.location());
assertEquals("9m#FbQkZ3-j]mc", document4.baseUri());
assertEquals(0, document4.siblingIndex());
assertFalse(document4.updateMetaCharsetElement());
assertEquals("#document", document4.nodeName());

Document document5 = (Document)document2.addClass(".A^9s:`P8Zfn{{sxyN");
assertNotNull(document5);
assertSame(document0, document1);
assertSame(document0, document5);
assertSame(document0, document3);
assertSame(document0, document4);
assertSame(document0, document2);
assertSame(document2, document1);
assertSame(document2, document4);
assertSame(document2, document3);
assertSame(document2, document5);
assertSame(document2, document0);
assertSame(document5, document3);
assertSame(document5, document2);
assertSame(document5, document0);
assertSame(document5, document1);
assertSame(document5, document4);
assertEquals(1, document0.childNodeSize());
assertEquals("#root", document0.tagName());
assertEquals("9m#FbQkZ3-j]mc", document0.location());
assertFalse(document0.hasParent());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("9m#FbQkZ3-j]mc", document0.baseUri());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertFalse(document0.isBlock());
assertEquals("9m#FbQkZ3-j]mc", document2.location());
assertEquals("#root", document2.tagName());
assertEquals(1, document2.childNodeSize());
assertEquals(0, document2.siblingIndex());
assertFalse(document2.isBlock());
assertEquals("#document", document2.nodeName());
assertFalse(document2.hasParent());
assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
assertFalse(document2.updateMetaCharsetElement());
assertEquals("9m#FbQkZ3-j]mc", document2.baseUri());
assertEquals(Document.QuirksMode.noQuirks, document5.quirksMode());
assertEquals("9m#FbQkZ3-j]mc", document5.location());
assertEquals("9m#FbQkZ3-j]mc", document5.baseUri());
assertFalse(document5.hasParent());
assertEquals(0, document5.siblingIndex());
assertFalse(document5.isBlock());
assertFalse(document5.updateMetaCharsetElement());
assertEquals(1, document5.childNodeSize());
assertEquals("#document", document5.nodeName());
assertEquals("#root", document5.tagName());

boolean boolean0 = document0.hasClass("java.lang.string@0000000117");
assertTrue(boolean0);
assertSame(document0, document1);
assertSame(document0, document5);
assertSame(document0, document3);
assertSame(document0, document4);
assertSame(document0, document2);
assertEquals(1, document0.childNodeSize());
assertEquals("#root", document0.tagName());
assertEquals("9m#FbQkZ3-j]mc", document0.location());
assertFalse(document0.hasParent());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertFalse(document0.updateMetaCharsetElement());
assertEquals("9m#FbQkZ3-j]mc", document0.baseUri());
assertEquals("#document", document0.nodeName());
assertEquals(0, document0.siblingIndex());
assertFalse(document0.isBlock());


[MASTER] 03:09:35.710 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:35.935 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:36.199 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:36.436 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:36.659 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:36.916 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:37.182 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:09:37.466 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Writing tests to file
* Writing JUnit test case 'Element_ESTest' to results/Jsoup-87/org.jsoup.nodes.Element/BBC-F0-50/tests/19
* Done!

* Computation finished
