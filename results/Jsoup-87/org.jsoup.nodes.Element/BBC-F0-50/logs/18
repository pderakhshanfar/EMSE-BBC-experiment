* EvoSuite 1.1.1-SNAPSHOT
* Configuration: BBC-F0-50
* Going to generate test cases for class: org.jsoup.nodes.Element
* Starting Client-0
* Connecting to master process on port 9610
* Analyzing classpath: 
  - subjects/buggy-versions/Jsoup-87/target/classes
* Finished analyzing classpath
* Generating tests for class org.jsoup.nodes.Element
* Test criteria:
  - Line Coverage
  - Branch Coverage
  - Exception
  - Mutation testing (weak)
  - Method-Output Coverage
  - Top-Level Method Coverage
  - No-Exception Top-Level Method Coverage
  - Context Branch Coverage
* Total number of test goals for DYNAMOSA: 2768
* Using seed 406864085
* Starting evolution
bbc usage percentage is: 50%
* Initial Number of Goals in DynaMOSA = 1405 / 2768
[MASTER] 02:57:49.156 [logback-2] ERROR TestCluster - Failed to check cache for java.util.LinkedList<E> : Type points to itself
[MASTER] 02:58:09.490 [logback-2] ERROR TestCluster - Failed to check cache for java.util.Comparator<T> : Type points to itself
* Search finished after 604s and 915 generations, 346178 statements, best individual has fitness: 451.0
* Minimizing test suite
[MASTER] 03:08:48.572 [logback-1] WARN  TestSuiteMinimizer - Minimization timeout. Roll back to original test suite
* Going to analyze the coverage criteria
* Coverage analysis for criterion LINE
* Coverage of criterion LINE: 99%
* Total number of goals: 410
* Number of covered goals: 405
* Coverage analysis for criterion BRANCH
* Coverage of criterion BRANCH: 94%
* Total number of goals: 308
* Number of covered goals: 291
* Coverage analysis for criterion EXCEPTION
* Coverage of criterion EXCEPTION: 100%
* Total number of goals: 124
* Number of covered goals: 124
* Coverage analysis for criterion WEAKMUTATION
* Coverage of criterion WEAKMUTATION: 96%
* Total number of goals: 843
* Number of covered goals: 808
* Coverage analysis for criterion OUTPUT
* Coverage of criterion OUTPUT: 62%
* Total number of goals: 695
* Number of covered goals: 432
* Coverage analysis for criterion METHOD
* Coverage of criterion METHOD: 99%
* Total number of goals: 102
* Number of covered goals: 101
* Coverage analysis for criterion METHODNOEXCEPTION
* Coverage of criterion METHODNOEXCEPTION: 99%
* Total number of goals: 102
* Number of covered goals: 101
* Coverage analysis for criterion CBRANCH
* Coverage of criterion CBRANCH: 91%
* Total number of goals: 308
* Number of covered goals: 280
* Generated 357 tests with total length 5355
* Resulting test suite's coverage: 87% (average coverage for all fitness functions)
* Generating assertions
[MASTER] 03:09:34.822 [logback-1] WARN  SimpleMutationAssertionGenerator - Assertion minimization is taking too long (0.7173166666666667% of time used, but only 21/357 tests minimized), falling back to using all assertions
* Resulting test suite's mutation score: 15%
* Compiling and checking tests
[MASTER] 03:10:06.516 [logback-2] ERROR JUnitAnalyzer - Cannot create tmp dir: /tmp/EvoSuite_320_1629256206516
[MASTER] 03:10:06.518 [logback-1] WARN  JUnitAnalyzer - Failed to create tmp dir
[MASTER] 03:10:07.076 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:07.418 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:07.769 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:08.055 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:08.324 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:08.589 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:08.897 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:09.218 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:09.503 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:09.772 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:10.075 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:10.320 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:10.564 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:10.794 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:11.030 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:11.310 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:11.603 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:11.880 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:12.121 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:12.382 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:12.625 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:12.957 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:13.230 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:13.873 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:14.140 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:14.450 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:14.738 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:14.972 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:15.241 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:15.507 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:15.901 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:16.146 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:16.441 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:16.780 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:17.008 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:17.295 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:17.648 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:17.956 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:18.196 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:18.427 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:18.662 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:18.914 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:19.179 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:19.497 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:19.783 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:19.787 [logback-1] WARN  JUnitAnalyzer - Found unstable test named test0 -> class java.lang.SecurityException: Security manager blocks ("java.lang.RuntimePermission" "writeFileDescriptor")
java.lang.Thread.getStackTrace(Thread.java:1559)
org.evosuite.runtime.sandbox.MSecurityManager.checkPermission(MSecurityManager.java:433)
java.lang.SecurityManager.checkWrite(SecurityManager.java:954)
java.io.FileOutputStream.<init>(FileOutputStream.java:245)
org.evosuite.runtime.mock.java.io.MockFileOutputStream.<init>(MockFileOutputStream.java:114)
org.jsoup.nodes.Element_364_tmp__ESTest.test0(Element_364_tmp__ESTest.java:409)
sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method)
sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62)
sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43)
java.lang.reflect.Method.invoke(Method.java:498)
org.junit.runners.model.FrameworkMethod$1.runReflectiveCall(FrameworkMethod.java:59)
org.junit.internal.runners.model.ReflectiveCallable.run(ReflectiveCallable.java:12)
org.junit.runners.model.FrameworkMethod.invokeExplosively(FrameworkMethod.java:56)
org.junit.internal.runners.statements.InvokeMethod.evaluate(InvokeMethod.java:17)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:288)
org.junit.internal.runners.statements.FailOnTimeout$CallableStatement.call(FailOnTimeout.java:282)
java.util.concurrent.FutureTask.run(FutureTask.java:266)
java.lang.Thread.run(Thread.java:748)

[MASTER] 03:10:19.802 [logback-1] WARN  JUnitAnalyzer - Failing test:
 Document document0 = Parser.parse("$Txc]/gpJ%1l?W", "i6Z_UG[R:>iD%[aRe");
assertNotNull(document0);
assertEquals("i6Z_UG[R:>iD%[aRe", document0.location());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#document", document0.nodeName());
assertEquals("i6Z_UG[R:>iD%[aRe", document0.baseUri());
assertEquals(1, document0.childNodeSize());

String string0 = document0.id();
assertEquals("", string0);
assertNotNull(string0);
assertEquals("i6Z_UG[R:>iD%[aRe", document0.location());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#document", document0.nodeName());
assertEquals("i6Z_UG[R:>iD%[aRe", document0.baseUri());
assertEquals(1, document0.childNodeSize());

Document document1 = (Document)document0.append("KB)_r700|zteDY");
assertNotNull(document1);
assertEquals("i6Z_UG[R:>iD%[aRe", document0.location());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#document", document0.nodeName());
assertEquals("i6Z_UG[R:>iD%[aRe", document0.baseUri());
assertEquals(2, document0.childNodeSize());
assertEquals("#document", document1.nodeName());
assertFalse(document1.isBlock());
assertEquals("#root", document1.tagName());
assertEquals(0, document1.siblingIndex());
assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
assertEquals(2, document1.childNodeSize());
assertFalse(document1.updateMetaCharsetElement());
assertEquals("i6Z_UG[R:>iD%[aRe", document1.baseUri());
assertFalse(document1.hasParent());
assertEquals("i6Z_UG[R:>iD%[aRe", document1.location());
assertSame(document0, document1);
assertSame(document1, document0);

List<Node> list0 = document0.childNodesCopy();
assertNotNull(list0);
assertEquals("i6Z_UG[R:>iD%[aRe", document0.location());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#document", document0.nodeName());
assertEquals("i6Z_UG[R:>iD%[aRe", document0.baseUri());
assertEquals(2, document0.childNodeSize());
assertEquals(2, list0.size());
assertFalse(list0.isEmpty());
assertSame(document0, document1);

Elements elements0 = document1.siblingElements();
assertNotNull(elements0);
assertEquals("i6Z_UG[R:>iD%[aRe", document0.location());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#document", document0.nodeName());
assertEquals("i6Z_UG[R:>iD%[aRe", document0.baseUri());
assertEquals(2, document0.childNodeSize());
assertEquals("#document", document1.nodeName());
assertFalse(document1.isBlock());
assertEquals("#root", document1.tagName());
assertEquals(0, document1.siblingIndex());
assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
assertEquals(2, document1.childNodeSize());
assertFalse(document1.updateMetaCharsetElement());
assertEquals("i6Z_UG[R:>iD%[aRe", document1.baseUri());
assertFalse(document1.hasParent());
assertEquals("i6Z_UG[R:>iD%[aRe", document1.location());
assertTrue(elements0.isEmpty());
assertEquals(0, elements0.size());
assertSame(document0, document1);
assertSame(document1, document0);

Map<String, String> map0 = document0.dataset();
assertNotNull(map0);
assertEquals("i6Z_UG[R:>iD%[aRe", document0.location());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#document", document0.nodeName());
assertEquals("i6Z_UG[R:>iD%[aRe", document0.baseUri());
assertEquals(2, document0.childNodeSize());
assertTrue(map0.isEmpty());
assertEquals(0, map0.size());
assertSame(document0, document1);

Document document2 = document0.normalise();
assertNotNull(document2);
assertEquals("i6Z_UG[R:>iD%[aRe", document0.location());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#document", document0.nodeName());
assertEquals("i6Z_UG[R:>iD%[aRe", document0.baseUri());
assertEquals(1, document0.childNodeSize());
assertEquals("i6Z_UG[R:>iD%[aRe", document2.baseUri());
assertEquals("#root", document2.tagName());
assertFalse(document2.isBlock());
assertEquals("#document", document2.nodeName());
assertEquals(0, document2.siblingIndex());
assertFalse(document2.updateMetaCharsetElement());
assertEquals(1, document2.childNodeSize());
assertFalse(document2.hasParent());
assertEquals("i6Z_UG[R:>iD%[aRe", document2.location());
assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
assertSame(document0, document2);
assertSame(document0, document1);
assertSame(document2, document1);
assertSame(document2, document0);

Elements elements1 = document1.getElementsContainingText("");
assertNotNull(elements1);
assertEquals("i6Z_UG[R:>iD%[aRe", document0.location());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#document", document0.nodeName());
assertEquals("i6Z_UG[R:>iD%[aRe", document0.baseUri());
assertEquals(1, document0.childNodeSize());
assertEquals("#document", document1.nodeName());
assertFalse(document1.isBlock());
assertEquals("#root", document1.tagName());
assertEquals(0, document1.siblingIndex());
assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
assertFalse(document1.updateMetaCharsetElement());
assertEquals("i6Z_UG[R:>iD%[aRe", document1.baseUri());
assertEquals(1, document1.childNodeSize());
assertFalse(document1.hasParent());
assertEquals("i6Z_UG[R:>iD%[aRe", document1.location());
assertFalse(elements1.isEmpty());
assertEquals(4, elements1.size());
assertFalse(elements1.equals((Object)elements0));
assertSame(document0, document2);
assertSame(document0, document1);
assertSame(document1, document2);
assertSame(document1, document0);
assertNotSame(elements1, elements0);

String string1 = document0.id();
assertEquals("", string1);
assertNotNull(string1);
assertEquals("i6Z_UG[R:>iD%[aRe", document0.location());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#document", document0.nodeName());
assertEquals("i6Z_UG[R:>iD%[aRe", document0.baseUri());
assertEquals(1, document0.childNodeSize());
assertSame(document0, document2);
assertSame(document0, document1);

Elements elements2 = document1.getElementsContainingOwnText("");
assertNotNull(elements2);
assertEquals("i6Z_UG[R:>iD%[aRe", document0.location());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#document", document0.nodeName());
assertEquals("i6Z_UG[R:>iD%[aRe", document0.baseUri());
assertEquals(1, document0.childNodeSize());
assertEquals("#document", document1.nodeName());
assertFalse(document1.isBlock());
assertEquals("#root", document1.tagName());
assertEquals(0, document1.siblingIndex());
assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
assertFalse(document1.updateMetaCharsetElement());
assertEquals("i6Z_UG[R:>iD%[aRe", document1.baseUri());
assertEquals(1, document1.childNodeSize());
assertFalse(document1.hasParent());
assertEquals("i6Z_UG[R:>iD%[aRe", document1.location());
assertEquals(4, elements2.size());
assertFalse(elements2.isEmpty());
assertFalse(elements2.equals((Object)elements0));
assertTrue(elements2.equals((Object)elements1));
assertSame(document0, document2);
assertSame(document0, document1);
assertSame(document1, document2);
assertSame(document1, document0);
assertNotSame(elements2, elements1);
assertNotSame(elements2, elements0);

Document document3 = (Document)document0.attr("$Txc]/gpJ%1l?W", "class");
assertNotNull(document3);
assertEquals("i6Z_UG[R:>iD%[aRe", document0.location());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#document", document0.nodeName());
assertEquals("i6Z_UG[R:>iD%[aRe", document0.baseUri());
assertEquals(1, document0.childNodeSize());
assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
assertEquals(1, document3.childNodeSize());
assertFalse(document3.updateMetaCharsetElement());
assertEquals("i6Z_UG[R:>iD%[aRe", document3.location());
assertFalse(document3.hasParent());
assertFalse(document3.isBlock());
assertEquals("#document", document3.nodeName());
assertEquals("i6Z_UG[R:>iD%[aRe", document3.baseUri());
assertEquals(0, document3.siblingIndex());
assertEquals("#root", document3.tagName());
assertSame(document0, document3);
assertSame(document0, document2);
assertSame(document0, document1);
assertSame(document3, document1);
assertSame(document3, document0);
assertSame(document3, document2);

Map<String, String> map1 = document1.dataset();
assertNotNull(map1);
assertEquals("i6Z_UG[R:>iD%[aRe", document0.location());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#document", document0.nodeName());
assertEquals("i6Z_UG[R:>iD%[aRe", document0.baseUri());
assertEquals(1, document0.childNodeSize());
assertEquals("#document", document1.nodeName());
assertFalse(document1.isBlock());
assertEquals("#root", document1.tagName());
assertEquals(0, document1.siblingIndex());
assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
assertFalse(document1.updateMetaCharsetElement());
assertEquals("i6Z_UG[R:>iD%[aRe", document1.baseUri());
assertEquals(1, document1.childNodeSize());
assertFalse(document1.hasParent());
assertEquals("i6Z_UG[R:>iD%[aRe", document1.location());
assertTrue(map1.isEmpty());
assertEquals(0, map1.size());
assertTrue(map1.equals((Object)map0));
assertSame(document0, document3);
assertSame(document0, document2);
assertSame(document0, document1);
assertSame(document1, document2);
assertSame(document1, document3);
assertSame(document1, document0);
assertNotSame(map1, map0);

Elements elements3 = document0.children();
assertNotNull(elements3);
assertEquals("i6Z_UG[R:>iD%[aRe", document0.location());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#document", document0.nodeName());
assertEquals("i6Z_UG[R:>iD%[aRe", document0.baseUri());
assertEquals(1, document0.childNodeSize());
assertEquals(1, elements3.size());
assertFalse(elements3.isEmpty());
assertFalse(elements3.equals((Object)elements2));
assertFalse(elements3.equals((Object)elements0));
assertFalse(elements3.equals((Object)elements1));
assertSame(document0, document3);
assertSame(document0, document2);
assertSame(document0, document1);
assertNotSame(elements3, elements2);
assertNotSame(elements3, elements0);
assertNotSame(elements3, elements1);

Document document4 = (Document)document0.addClass("");
assertNotNull(document4);
assertEquals("i6Z_UG[R:>iD%[aRe", document0.location());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#document", document0.nodeName());
assertEquals("i6Z_UG[R:>iD%[aRe", document0.baseUri());
assertEquals(1, document0.childNodeSize());
assertFalse(document4.isBlock());
assertEquals("#document", document4.nodeName());
assertFalse(document4.updateMetaCharsetElement());
assertEquals(1, document4.childNodeSize());
assertEquals("#root", document4.tagName());
assertEquals(0, document4.siblingIndex());
assertFalse(document4.hasParent());
assertEquals("i6Z_UG[R:>iD%[aRe", document4.baseUri());
assertEquals("i6Z_UG[R:>iD%[aRe", document4.location());
assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
assertSame(document0, document3);
assertSame(document0, document2);
assertSame(document0, document4);
assertSame(document0, document1);
assertSame(document4, document0);
assertSame(document4, document2);
assertSame(document4, document3);
assertSame(document4, document1);

Elements elements4 = document4.getElementsByIndexLessThan((-1334));
assertNotNull(elements4);
assertEquals("i6Z_UG[R:>iD%[aRe", document0.location());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#document", document0.nodeName());
assertEquals("i6Z_UG[R:>iD%[aRe", document0.baseUri());
assertEquals(1, document0.childNodeSize());
assertFalse(document4.isBlock());
assertEquals("#document", document4.nodeName());
assertFalse(document4.updateMetaCharsetElement());
assertEquals(1, document4.childNodeSize());
assertEquals("#root", document4.tagName());
assertEquals(0, document4.siblingIndex());
assertFalse(document4.hasParent());
assertEquals("i6Z_UG[R:>iD%[aRe", document4.baseUri());
assertEquals("i6Z_UG[R:>iD%[aRe", document4.location());
assertEquals(Document.QuirksMode.noQuirks, document4.quirksMode());
assertEquals(0, elements4.size());
assertTrue(elements4.isEmpty());
assertTrue(elements4.equals((Object)elements0));
assertFalse(elements4.equals((Object)elements1));
assertFalse(elements4.equals((Object)elements2));
assertFalse(elements4.equals((Object)elements3));
assertSame(document0, document3);
assertSame(document0, document2);
assertSame(document0, document4);
assertSame(document0, document1);
assertSame(document4, document0);
assertSame(document4, document2);
assertSame(document4, document3);
assertSame(document4, document1);
assertNotSame(elements4, elements1);
assertNotSame(elements4, elements2);
assertNotSame(elements4, elements3);
assertNotSame(elements4, elements0);

FileDescriptor fileDescriptor0 = new FileDescriptor();
assertNotNull(fileDescriptor0);
assertFalse(fileDescriptor0.valid());

MockFileOutputStream mockFileOutputStream0 = new MockFileOutputStream(fileDescriptor0);
assertNotNull(mockFileOutputStream0);

MockPrintWriter mockPrintWriter0 = new MockPrintWriter(mockFileOutputStream0);
assertNotNull(mockPrintWriter0);

MockPrintWriter mockPrintWriter1 = (MockPrintWriter)mockPrintWriter0.append((CharSequence) "");
assertNotNull(mockPrintWriter1);
assertFalse(fileDescriptor0.valid());
assertSame(mockPrintWriter0, mockPrintWriter1);
assertSame(mockPrintWriter1, mockPrintWriter0);

Document.OutputSettings document_OutputSettings0 = new Document.OutputSettings();
assertNotNull(document_OutputSettings0);
assertEquals(1, document_OutputSettings0.indentAmount());
assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
assertTrue(document_OutputSettings0.prettyPrint());
assertFalse(document_OutputSettings0.outline());
assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());

Document.OutputSettings document_OutputSettings1 = document_OutputSettings0.clone();
assertNotNull(document_OutputSettings1);
assertEquals(1, document_OutputSettings0.indentAmount());
assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
assertTrue(document_OutputSettings0.prettyPrint());
assertFalse(document_OutputSettings0.outline());
assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
assertTrue(document_OutputSettings1.prettyPrint());
assertEquals(1, document_OutputSettings1.indentAmount());
assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings1.syntax());
assertFalse(document_OutputSettings1.outline());
assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
assertNotSame(document_OutputSettings0, document_OutputSettings1);
assertNotSame(document_OutputSettings1, document_OutputSettings0);

Document.OutputSettings.Syntax document_OutputSettings_Syntax0 = Document.OutputSettings.Syntax.xml;
Document.OutputSettings document_OutputSettings2 = document_OutputSettings1.syntax(document_OutputSettings_Syntax0);
assertNotNull(document_OutputSettings2);
assertEquals(1, document_OutputSettings0.indentAmount());
assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
assertTrue(document_OutputSettings0.prettyPrint());
assertFalse(document_OutputSettings0.outline());
assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
assertTrue(document_OutputSettings1.prettyPrint());
assertEquals(1, document_OutputSettings1.indentAmount());
assertFalse(document_OutputSettings1.outline());
assertEquals(1, document_OutputSettings2.indentAmount());
assertFalse(document_OutputSettings2.outline());
assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
assertTrue(document_OutputSettings2.prettyPrint());
assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
assertNotSame(document_OutputSettings0, document_OutputSettings2);
assertNotSame(document_OutputSettings0, document_OutputSettings1);
assertSame(document_OutputSettings1, document_OutputSettings2);
assertNotSame(document_OutputSettings1, document_OutputSettings0);
assertSame(document_OutputSettings2, document_OutputSettings1);
assertNotSame(document_OutputSettings2, document_OutputSettings0);

Document.OutputSettings document_OutputSettings3 = document_OutputSettings2.indentAmount(2147483645);
assertNotNull(document_OutputSettings3);
assertEquals(1, document_OutputSettings0.indentAmount());
assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
assertTrue(document_OutputSettings0.prettyPrint());
assertFalse(document_OutputSettings0.outline());
assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
assertEquals(2147483645, document_OutputSettings1.indentAmount());
assertTrue(document_OutputSettings1.prettyPrint());
assertFalse(document_OutputSettings1.outline());
assertFalse(document_OutputSettings2.outline());
assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
assertTrue(document_OutputSettings2.prettyPrint());
assertEquals(2147483645, document_OutputSettings2.indentAmount());
assertFalse(document_OutputSettings3.outline());
assertTrue(document_OutputSettings3.prettyPrint());
assertEquals(2147483645, document_OutputSettings3.indentAmount());
assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
assertNotSame(document_OutputSettings0, document_OutputSettings3);
assertNotSame(document_OutputSettings0, document_OutputSettings2);
assertNotSame(document_OutputSettings0, document_OutputSettings1);
assertSame(document_OutputSettings1, document_OutputSettings3);
assertSame(document_OutputSettings1, document_OutputSettings2);
assertNotSame(document_OutputSettings1, document_OutputSettings0);
assertSame(document_OutputSettings2, document_OutputSettings1);
assertNotSame(document_OutputSettings2, document_OutputSettings0);
assertSame(document_OutputSettings2, document_OutputSettings3);
assertSame(document_OutputSettings3, document_OutputSettings1);
assertSame(document_OutputSettings3, document_OutputSettings2);
assertNotSame(document_OutputSettings3, document_OutputSettings0);

document0.indent(mockPrintWriter1, 2147483645, document_OutputSettings3);
assertEquals("i6Z_UG[R:>iD%[aRe", document0.location());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#document", document0.nodeName());
assertEquals("i6Z_UG[R:>iD%[aRe", document0.baseUri());
assertEquals(1, document0.childNodeSize());
assertEquals(1, document_OutputSettings0.indentAmount());
assertEquals(Document.OutputSettings.Syntax.html, document_OutputSettings0.syntax());
assertTrue(document_OutputSettings0.prettyPrint());
assertFalse(document_OutputSettings0.outline());
assertEquals(Entities.EscapeMode.base, document_OutputSettings0.escapeMode());
assertEquals(Entities.EscapeMode.base, document_OutputSettings1.escapeMode());
assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings1.syntax());
assertEquals(2147483645, document_OutputSettings1.indentAmount());
assertTrue(document_OutputSettings1.prettyPrint());
assertFalse(document_OutputSettings1.outline());
assertFalse(document_OutputSettings2.outline());
assertEquals(Entities.EscapeMode.base, document_OutputSettings2.escapeMode());
assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings2.syntax());
assertTrue(document_OutputSettings2.prettyPrint());
assertEquals(2147483645, document_OutputSettings2.indentAmount());
assertFalse(document_OutputSettings3.outline());
assertTrue(document_OutputSettings3.prettyPrint());
assertEquals(2147483645, document_OutputSettings3.indentAmount());
assertEquals(Document.OutputSettings.Syntax.xml, document_OutputSettings3.syntax());
assertEquals(Entities.EscapeMode.base, document_OutputSettings3.escapeMode());
assertFalse(fileDescriptor0.valid());
assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings3));
assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings2));
assertFalse(document_OutputSettings0.equals((Object)document_OutputSettings1));
assertFalse(document_OutputSettings1.equals((Object)document_OutputSettings0));
assertFalse(document_OutputSettings2.equals((Object)document_OutputSettings0));
assertFalse(document_OutputSettings3.equals((Object)document_OutputSettings0));
assertSame(document0, document3);
assertSame(document0, document2);
assertSame(document0, document4);
assertSame(document0, document1);
assertSame(mockPrintWriter0, mockPrintWriter1);
assertSame(mockPrintWriter1, mockPrintWriter0);
assertNotSame(document_OutputSettings0, document_OutputSettings3);
assertNotSame(document_OutputSettings0, document_OutputSettings2);
assertNotSame(document_OutputSettings0, document_OutputSettings1);
assertSame(document_OutputSettings1, document_OutputSettings3);
assertSame(document_OutputSettings1, document_OutputSettings2);
assertNotSame(document_OutputSettings1, document_OutputSettings0);
assertSame(document_OutputSettings2, document_OutputSettings1);
assertNotSame(document_OutputSettings2, document_OutputSettings0);
assertSame(document_OutputSettings2, document_OutputSettings3);
assertSame(document_OutputSettings3, document_OutputSettings1);
assertSame(document_OutputSettings3, document_OutputSettings2);
assertNotSame(document_OutputSettings3, document_OutputSettings0);

Elements elements5 = document3.nextElementSiblings();
assertNotNull(elements5);
assertEquals("i6Z_UG[R:>iD%[aRe", document0.location());
assertFalse(document0.hasParent());
assertEquals("#root", document0.tagName());
assertFalse(document0.isBlock());
assertFalse(document0.updateMetaCharsetElement());
assertEquals(0, document0.siblingIndex());
assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
assertEquals("#document", document0.nodeName());
assertEquals("i6Z_UG[R:>iD%[aRe", document0.baseUri());
assertEquals(1, document0.childNodeSize());
assertTrue(elements5.isEmpty());
assertEquals(0, elements5.size());
assertEquals(Document.QuirksMode.noQuirks, document3.quirksMode());
assertEquals(1, document3.childNodeSize());
assertFalse(document3.updateMetaCharsetElement());
assertEquals("i6Z_UG[R:>iD%[aRe", document3.location());
assertFalse(document3.hasParent());
assertFalse(document3.isBlock());
assertEquals("#document", document3.nodeName());
assertEquals("i6Z_UG[R:>iD%[aRe", document3.baseUri());
assertEquals(0, document3.siblingIndex());
assertEquals("#root", document3.tagName());
assertFalse(elements5.equals((Object)elements2));
assertFalse(elements5.equals((Object)elements1));
assertTrue(elements5.equals((Object)elements0));
assertFalse(elements5.equals((Object)elements3));
assertTrue(elements5.equals((Object)elements4));
assertSame(document0, document3);
assertSame(document0, document2);
assertSame(document0, document4);
assertSame(document0, document1);
assertNotSame(elements5, elements2);
assertNotSame(elements5, elements1);
assertNotSame(elements5, elements4);
assertNotSame(elements5, elements3);
assertNotSame(elements5, elements0);
assertSame(document3, document1);
assertSame(document3, document0);
assertSame(document3, document2);
assertSame(document3, document4);


[MASTER] 03:10:23.428 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:23.710 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:23.954 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:24.246 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:24.529 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:24.780 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:25.060 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:25.389 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:25.622 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:25.900 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:26.186 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:26.450 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:26.692 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:26.927 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:27.234 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:27.481 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:27.741 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:28.011 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:28.265 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:28.529 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:28.763 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:29.473 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:29.735 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:29.964 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:30.220 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:30.531 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:30.756 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:31.039 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:31.328 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:31.699 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:31.947 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:32.216 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:32.486 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:32.802 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:33.044 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:33.368 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:33.666 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:34.081 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:34.343 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:34.666 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:34.915 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:35.180 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:35.435 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:35.737 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:36.105 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:36.351 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:36.642 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:36.932 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:37.214 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:37.489 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:37.878 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:38.156 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:38.469 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:38.709 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:38.958 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:39.233 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:39.465 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:39.834 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:40.094 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:40.334 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:40.559 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:40.871 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:41.130 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:41.393 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:41.649 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:42.014 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:42.258 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
[MASTER] 03:10:42.550 [logback-1] WARN  JUnitAnalyzer - EvoSuite problem: tests set up a security manager, but they do not remove it after execution
* Permissions denied during test execution: 
  - java.lang.RuntimePermission: 
         writeFileDescriptor: 1
* Writing tests to file
* Writing JUnit test case 'Element_ESTest' to results/Jsoup-87/org.jsoup.nodes.Element/BBC-F0-50/tests/18
* Done!

* Computation finished
