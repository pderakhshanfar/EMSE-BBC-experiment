/*
 * This file was automatically generated by EvoSuite
 * Fri Oct 22 21:53:02 GMT 2021
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import java.util.regex.Pattern;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.HtmlTreeBuilderState;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.XmlTreeBuilder;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("bGdy", parseSettings0);
      Element element0 = new Element(tag0, "bGdy");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(element0, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("XV*)", "<B<&7V]rP2z^3[");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7V]rP2z^3[", document0, "<B<&7V]rP2z^3[", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = Parser.parseBodyFragmentRelaxed("nth-last-of-type", "nth-last-of-type");
      htmlTreeBuilder0.parseFragment("nth-last-of-type", document0, "nth-last-of-type", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals("nth-last-of-type", document0.location());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment(", state=", (Element) null, ", state=", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("bEETaGNp;c:F0tkl");
      htmlTreeBuilder0.insertOnStackAfter(element0, (Element) null);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("Invalid character reference: %s", "H[W3");
      Document document1 = new Document("H[W3");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(document1, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("body", (Element) null, "body", parser0);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.ForeignContent;
      htmlTreeBuilder0.error(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InSelect;
      htmlTreeBuilder0.transition(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.newPendingTableCharacters();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InRow;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.error(htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "", parser0);
      htmlTreeBuilder0.clearStackToTableContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment(", state=", (Element) null, ", state=", parser0);
      String string0 = htmlTreeBuilder0.toString();
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "c");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "", parser0);
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("li", parseSettings0);
      Element element0 = new Element(tag0, "B[");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("nAo9K>6(c6`@@6hj", element0, "nAo9K>6(c6`@@6hj", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.insertInFosterParent(element0);
      assertEquals(1, element0.siblingIndex());
      
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("li", parseSettings0);
      Element element0 = new Element(tag0, "B[");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("nAo9K>6(c6`@@6hj", element0, "nAo9K>6(c6`@@6hj", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = Parser.parse("org.jsoup.nodes.Attributes$Dataset", "org.jsoup.nodes.Attributes$Dataset");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("XV*)", document0, "noresize", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals(1, element0.childNodeSize());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]oP2\"^3[", (Element) null, "colgroup", parser0);
      Token.Character token_Character0 = new Token.Character();
      Token.Character token_Character1 = token_Character0.data("colgroup");
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InFrameset;
      boolean boolean0 = htmlTreeBuilder0.process(token_Character1, htmlTreeBuilderState0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "#docu.ment", parser0);
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.Comment token_Comment0 = tokeniser0.commentPending;
      boolean boolean0 = htmlTreeBuilder0.process(token_Comment0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("", document0, "", parser0);
      Token.Doctype token_Doctype0 = new Token.Doctype();
      boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("KPo-^*Yb/y", "applet");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("y_HWXr>~pur244S1", document0, "hgroup", parser0);
      Element element0 = htmlTreeBuilder0.pop();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("<B<&7IrP2z^[", "<B<&7IrP2z^[");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7IrP2z^[", document0, "<B<&7IrP2z^[", parser0);
      htmlTreeBuilder0.push(document0);
      Element element0 = htmlTreeBuilder0.pop();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.originalState();
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment(">", (Element) null, "option", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("option");
      boolean boolean0 = htmlTreeBuilder0.onStack(element0);
      assertEquals(1, element0.siblingIndex());
      assertTrue(boolean0);
      assertEquals("option", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "+LY&]#<%i:<k7f]sh8");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "*y-", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.onStack(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("H[W3", "H[W3");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("H[W3", document0, "", parser0);
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7V]rP2z^3[", "<B<&7V]rP2z^3[");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7V]rP2z^3[", document0, "<B<&7V]rP2z^3[", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertEquals(1, document0.siblingIndex());
      
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("mmmqJXM", (Element) null, "colgroup", parser0);
      Element element0 = htmlTreeBuilder0.getHeadElement();
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.lastFormattingElement();
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertEquals("colgroup", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Document document0 = Parser.parse("*KWt", "*KWt");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("li", document0, "k~dh\"g./U", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("5H~P:jU");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "5H~P:jU", parser0);
      Element element0 = document0.body();
      boolean boolean0 = htmlTreeBuilder0.isSpecial(element0);
      assertEquals(1, element0.siblingIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7V]rP2z^3[", "<B<&7V]rP2z^3[");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("<B<&7V]rP2z^3[", document0, "<B<&7V]rP2z^3[", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(document0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", (Element) null, "", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements((Element) null);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "c");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setFosterInserts(true);
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("YPn3u+ \u0000", "yTUMu");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("", document0, "YPn3u+ \u0000", parser0);
      assertEquals(0, list0.size());
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      token_StartTag0.nameAttr("[WT+d^E", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, false);
      assertEquals(0, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("font");
      htmlTreeBuilder0.initialiseParse(stringReader0, "FF_i|%z1aEk,.", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("style");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("!y", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("7wVC'=\"z", "7wVC'=\"z");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("7wVC'=\"z", document0, "7wVC'=\"z", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.nameAttr("plaintext", (Attributes) null);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
      assertTrue(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Attributes$Dataset");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.nodes.Attributes$Dataset", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("", pseudoTextElement0, "link", parser0);
      assertTrue(list0.isEmpty());
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.Comment token_Comment0 = new Token.Comment();
      htmlTreeBuilder0.insert(token_Comment0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("^+", attributes0);
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      assertEquals("link", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Attributes$Dataset");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.nodes.Attributes$Dataset", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("", pseudoTextElement0, "link", parser0);
      assertTrue(list0.isEmpty());
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("^+", attributes0);
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      assertEquals("link", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("", "");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "", parser0);
      boolean boolean0 = htmlTreeBuilder0.inTableScope("menu");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "b");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "basefont", parser0);
      assertFalse(list0.isEmpty());
      
      String[] stringArray0 = new String[6];
      stringArray0[2] = "";
      stringArray0[3] = "b";
      stringArray0[4] = "caption";
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[1];
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", (Element) null, "", parser0);
      assertEquals(1, list0.size());
      
      stringArray0[0] = "";
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Attributes$Dataset");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.nodes.Attributes$Dataset", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("", pseudoTextElement0, "link", parser0);
      assertEquals(0, list0.size());
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("link", attributes0);
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      assertEquals(0, element0.siblingIndex());
      
      String[] stringArray0 = new String[3];
      boolean boolean0 = htmlTreeBuilder0.inScope("link", stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", (Element) null, "", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("xmp");
      assertEquals(1, element0.siblingIndex());
      
      boolean boolean0 = htmlTreeBuilder0.inScope("xmp");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("head");
      Pattern pattern0 = Pattern.compile("head");
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      boolean boolean0 = htmlTreeBuilder0.inScope("head");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("body", (Element) null, "body", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("body");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "<B<&7L]bP2z^3[");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("BetweenDoctypePublicAndSystemIdentifiers", document0, "<B<&7L]bP2z^3[", parser0);
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("BetweenDoctypePublicAndSystemIdentifiers");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("body", (Element) null, "body", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("body");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = parser0.parseInput("input", "input");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("input", document0, "", parser0);
      assertEquals(1, list0.size());
      assertEquals(1, document0.childNodeSize());
      
      htmlTreeBuilder0.popStackToBefore("table");
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertEquals(0, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "", parser0);
      assertFalse(list0.isEmpty());
      
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("_ZuR\"\"g/|)DKMJ", "}Lcp");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "Rg]v^{", parser0);
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf(";vCpHRQ3mb^ qP");
      Element element0 = new Element(tag0, "'EsQQkL");
      htmlTreeBuilder0.setHeadElement(element0);
      Element element1 = htmlTreeBuilder0.getHeadElement();
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "", parser0);
      Element element0 = htmlTreeBuilder0.getFromStack("^+");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]oP2\"^3[", (Element) null, "<B<&7L]oP2\"^3[", parser0);
      htmlTreeBuilder0.insertStartTag("8#");
      htmlTreeBuilder0.insertStartTag("<B<&7L]oP2\"^3[");
      Element element0 = htmlTreeBuilder0.getFromStack("<B<&7L]oP2\"^3[");
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.doc;
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("ddS@f!}Yp ", document0, "ddS@f!}Yp ", parser0);
      htmlTreeBuilder0.insertStartTag("title");
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      Element element0 = htmlTreeBuilder0.getFromStack("title");
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("<B<&7L]bP2z^3[", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "d,]~I'*ji5dw Nw", attributes0);
      htmlTreeBuilder0.parseFragment("", formElement0, "[E9<Hwcy*6f(ZAG]5", parser0);
      FormElement formElement1 = htmlTreeBuilder0.getFormElement();
      assertFalse(formElement1.hasParent());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("li", (ParseSettings) null);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "li", attributes0);
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("li", formElement0, "li", parser0);
      htmlTreeBuilder0.insertInFosterParent(formElement0);
      assertEquals(1, formElement0.siblingIndex());
      
      FormElement formElement1 = htmlTreeBuilder0.getFormElement();
      assertEquals(1, formElement1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("n~P~>wZw1s4VO^:");
      htmlTreeBuilder0.doc = document0;
      Document document1 = htmlTreeBuilder0.getDocument();
      assertEquals(0, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("sgSV^-\"y[0Cal@Eo", "table");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("sgSV^-\"y[0Cal@Eo", document0, "jB", parser0);
      Document document1 = htmlTreeBuilder0.getDocument();
      assertEquals("jB", document1.location());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("Text", ":nth-last-of-type(");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("H_ C.3~", document0, "_", parser0);
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals("_", string0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "", parser0);
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("<B>Uj7L] b{2;0]z", "<B>Uj7L] b{2;0]z");
      Parser parser0 = Parser.xmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("<B>Uj7L] b{2;0]z", document0, "<B>Uj7L] b{2;0]z", parser0);
      assertEquals(1, list0.size());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("C");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("C");
      assertNotNull(element1);
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("peS \":.-Chvd^8gD");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("<B<&7]rP2z^[", document0, "peS \":.-Chvd^8gD", parser0);
      assertEquals(1, list0.size());
      
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("b");
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.framesetOk(true);
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("Tag name must not be empty.");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("noscript", document0, "form", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.insertStartTag("B[");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNotNull(element0);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertEquals(1, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("<B<U7L] bP2;0Pz3", "<B<U7L] bP2;0Pz3");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<U7L] bP2;0Pz3", document0, "<B<U7L] bP2;0Pz3", parser0);
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertNotNull(element0);
      
      element0.unwrap();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertEquals(0, element0.siblingIndex());
      assertTrue(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("<V<&LNoP2,eZE", (Element) null, "<V<&LNoP2,eZE", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("<V<&LNoP2,eZE");
      htmlTreeBuilder0.insert(element0);
      // Undeclared exception!
      htmlTreeBuilder0.toString();
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.resetInsertionMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("}aw7+GTe^Bp");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack((Element) null, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("Text", ":nth-last-of-type(");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("H_ C.3~", document0, "Text", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeLastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("Invalid character reference: %s", "H[W3");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromStack(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("#root", "&KgWnt]HY6s");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.reconstructFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.Comment token_Comment0 = new Token.Comment();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTable;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Comment0, htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("RN[t&|'IDa`L&b", "dt");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("colgroup", document0, "OF|y-[EUL,mo,*dwA@", parser0);
      htmlTreeBuilder0.popStackToClose("dt");
      Token.Character token_Character0 = new Token.Character();
      Token.Character token_Character1 = token_Character0.data("RN[t&|'IDa`L&b");
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterHead;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Character1, htmlTreeBuilderState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("Cbk=B)\"5C~D<po6%q:>2", (Attributes) null);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Initial;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_StartTag1, htmlTreeBuilderState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.EndTag token_EndTag0 = new Token.EndTag();
      Token.TokenType token_TokenType0 = Token.TokenType.Character;
      token_EndTag0.type = token_TokenType0;
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.BeforeHtml;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_EndTag0, htmlTreeBuilderState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_StartTag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("<B<HcL&7]rP2[");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<HcL&7]rP2[", document0, "<B<HcL&7]rP2[", parser0);
      Token.EOF token_EOF0 = new Token.EOF();
      Token.TokenType token_TokenType0 = Token.TokenType.Character;
      token_EOF0.type = token_TokenType0;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_EOF0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToBefore("thead");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7V]rP2z^3[", (Element) null, "", parser0);
      htmlTreeBuilder0.popStackToBefore("<B<&7V]rP2z^3[");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]oP2\"^3[", (Element) null, "<B<&7L]oP2\"^3[", parser0);
      Document document0 = htmlTreeBuilder0.doc;
      htmlTreeBuilder0.insert(document0);
      // Undeclared exception!
      htmlTreeBuilder0.parseFragment("TreeBuilder{currentToken=", document0, "caption", parser0);
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("Invalid character reference: %s", "H[W3");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("H[W3", document0, "Invalid character reference: %s", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "<B<&7L]bP2z^3[");
      Parser parser0 = Parser.htmlParser();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("tbody", document0, (String) null, parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("Tag name must not be empty.", "Tag name must not be empty.");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.onStack(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.maybeSetBaseUri((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.lastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isSpecial((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag("org.jsoup.nodes.Document$OutputSettings");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag((String) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("3fD-bk", "3fD-bk");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "", parser0);
      htmlTreeBuilder0.popStackToClose("org.jsoup.select.Evaluator$IndexEvaluator");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("H[W3", "H[W3");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("H[W3", document0, "", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("org.jsoup.select.StructuralEvaluator$Root", attributes0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm(token_StartTag1, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm(token_StartTag0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty((Token.StartTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(1420);
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      CDataNode cDataNode0 = new CDataNode((String) null);
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("C [Q;7VpY3k*@;jk7p", attributes0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_StartTag1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      ParseErrorList parseErrorList0 = parser0.getErrors();
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      Token.Comment token_Comment0 = tokeniser0.commentPending;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Comment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.Character token_Character0 = new Token.Character();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("}aw7+GTe^Bp");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", (Element) null, "", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("9`R:B");
      Parser parser0 = Parser.htmlParser();
      stringReader0.close();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(stringReader0, "y", parser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      PipedReader pipedReader0 = new PipedReader(100);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(pipedReader0, "org.jsoup.nodes.Attributes$Dataset", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      PipedWriter pipedWriter0 = new PipedWriter();
      PipedReader pipedReader0 = new PipedReader(pipedWriter0);
      Parser parser0 = new Parser(htmlTreeBuilder0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(pipedReader0, "", parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("body");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("*[|DtCNI&_BnV", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getFromStack("XsY 9lzH");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getActiveFormattingElement("tr");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.generateImpliedEndTags("");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parse("<B<U7L] bP2;0Pz3", "<B<U7L] bP2;0Pz3");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<U7L] bP2;0Pz3", document0, "<B<U7L] bP2;0Pz3", parser0);
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(element1);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("}aw7+GTeBp");
      Pattern pattern0 = Pattern.compile("}aw7+GTeBp");
      Elements elements0 = document0.getElementsMatchingOwnText(pattern0);
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Document document0 = Parser.parse("*KWt", "*KWt");
      htmlTreeBuilder0.parseFragment("li", document0, "k~dh\"g./U", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("jr9lh\u0007AbJ");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("style", (Element) null, "U|od&:jYJr@q)+{Dh", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("!B;bc");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("<B<&7L]bP2z^3[");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "<B<&7L]bP2z^3[", parser0);
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals("<B<&7L]bP2z^3[", document0.location());
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<U&7L]bP2;z7#", "<B<U&7L]bP2;z7#");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<U&7L]bP2;z7#", document0, "<B<U&7L]bP2;z7#", parser0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "#docu.ment", parser0);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7V]rP2z^3[", "<B<&7V]rP2z^3[");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7V]rP2z^3[", document0, "<B<&7V]rP2z^3[", parser0);
      htmlTreeBuilder0.pop();
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7]rP2z^[", "<B<&7]rP2z^[");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7]rP2z^[", document0, "<B<&7]rP2z^[", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("style", (Element) null, "U|od&:jYJr@q)+{Dh", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7V]rP2z^3[", "<B<&7V]rP2z^3[");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7V]rP2z^3[", document0, "<B<&7V]rP2z^3[", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      Element element0 = htmlTreeBuilder0.pop();
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("X*)", "<B<&7L]bP2z^3[");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("Cbk=B)\"5C~D<po6%q:>2", document0, "cR", parser0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("r[{C^u!\"H)hVWx", "r[{C^u!\"H)hVWx");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("r[{C^u!\"H)hVWx", document0, "r[{C^u!\"H)hVWx", parser0);
      htmlTreeBuilder0.generateImpliedEndTags("link");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment(">", (Element) null, "option", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("option");
      assertEquals("option", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope(">");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("body", (Element) null, "body", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("body");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("r[{C^u!\"H)hVWx", "r[{C^u!\"H)hVWx");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("r[{C^u!\"H)hVWx", document0, "r[{C^u!\"H)hVWx", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("link");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "", parser0);
      htmlTreeBuilder0.popStackToClose("org.jsoup.select.Evaluator$IndexEvaluator");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("<B<U&7L]bP2;z3#");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("<B<U&7L]bP2;z3#", document0, "<B<U&7L]bP2;z3#", parser0);
      assertEquals(1, list0.size());
      
      String[] stringArray0 = new String[6];
      stringArray0[2] = "<B<U&7L]bP2;z3#";
      stringArray0[4] = "<B<U&7L]bP2;z3#";
      stringArray0[5] = "b";
      boolean boolean0 = htmlTreeBuilder0.inScope("<B<U&7L]bP2;z3#", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Document document0 = Parser.parseBodyFragmentRelaxed("nth-last-of-type", "nth-last-of-type");
      htmlTreeBuilder0.parseFragment("nth-last-of-type", document0, "nth-last-of-type", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      boolean boolean0 = htmlTreeBuilder0.inTableScope("html");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7V]rP2z^3[", "<B<&7V]rP2z^3[");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7V]rP2z^3[", document0, "<B<&7V]rP2z^3[", parser0);
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("<B<&7V]rP2z^3[");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "", parser0);
      htmlTreeBuilder0.popStackToClose("html");
      String[] stringArray0 = new String[2];
      boolean boolean0 = htmlTreeBuilder0.inScope("", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      Document document0 = Parser.parseBodyFragment("Invalid character reference: %s", "H[W3");
      Element element0 = document0.head();
      element0.before("H[W3");
      assertEquals(2, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      Tag tag0 = Tag.valueOf("head", parseSettings0);
      Element element0 = new Element(tag0, "<B<&7V]rP2z^3[");
      htmlTreeBuilder0.parseFragment("<B<&7V]rP2z^3[", element0, "head", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("head");
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("table", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "d,]~I'*ji5dw Nw", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("", formElement0, "table", parser0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = new ParseSettings(true, false);
      CDataNode cDataNode0 = new CDataNode("figcaption");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("colgroup", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "figcaption", attributes0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("code", formElement0, "frameset", parser0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Element element0 = new Element("caption");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("sgSV^-\"y[0Cal@Eo", element0, "jB", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Tag tag0 = Tag.valueOf("thead");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.nodes.Attributes$Dataset", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("tfoot", pseudoTextElement0, "UZ+8b", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("tbody");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("tbody", element0, "tbody", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Tag tag0 = Tag.valueOf("tr", (ParseSettings) null);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "tr", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("P?~K'~mV!E", formElement0, "applet", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("th");
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("", formElement0, "th", parser0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      CDataNode cDataNode0 = new CDataNode("Comment");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("td");
      FormElement formElement0 = new FormElement(tag0, "6n8", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("RDPg10]zK_", formElement0, "", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Tag tag0 = Tag.valueOf("select");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "QeKF]Llo$yDS", (Attributes) null);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("org.jsoup.parser.HtmlTreeBuilder", pseudoTextElement0, "OL;/9lco/qZ'aC", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]oP2\"^3[", (Element) null, "<B<&7L]oP2\"^3[", parser0);
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment(" <B&7L]bP2z^[", (Element) null, "", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter((Element) null, (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "<B<&7L]bP2z^3[");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("Tag name must not be empty.");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("<B<&7]rP2z^[");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7]rP2z^[", document0, "<B<&7]rP2z^[", parser0);
      htmlTreeBuilder0.insertStartTag("tfoot");
      htmlTreeBuilder0.clearStackToTableBodyContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "", parser0);
      htmlTreeBuilder0.popStackToClose("org.jsoup.select.Evaluator$IndexEvaluator");
      htmlTreeBuilder0.clearStackToTableRowContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("body", (Element) null, "body", parser0);
      htmlTreeBuilder0.popStackToBefore("body");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("}aw7+GTeBp");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<j9}]|9E#[", document0, "d,]~I'*ji5dw Nw", parser0);
      String[] stringArray0 = new String[3];
      stringArray0[1] = "html";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[1];
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "#docu.ment", parser0);
      stringArray0[0] = "rJ,-{";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(1, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("li", (ParseSettings) null);
      Element element0 = new Element(tag0, "B[");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("nAo9K>6(c6`@@6hj", element0, "nAo9K>6(c6`@@6hj", parser0);
      assertEquals(1, list0.size());
      
      Element element1 = htmlTreeBuilder0.insertStartTag("B[");
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(element1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("Tag name must not be empty.");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("noscript", document0, "form", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("fieldset", (Element) null, "fieldset", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("fieldset", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("hP]C=T6L`fX", "xmlns:");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("meta", document0, "meta", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("input");
      assertEquals("meta", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Tag tag0 = Tag.valueOf("org.jsoup.nodes.Attributes$Dataset");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "org.jsoup.nodes.Attributes$Dataset", attributes0);
      htmlTreeBuilder0.parseFragment("", pseudoTextElement0, "link", parser0);
      htmlTreeBuilder0.setFosterInserts(true);
      Token.Comment token_Comment0 = new Token.Comment();
      htmlTreeBuilder0.insert(token_Comment0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("videj");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "8UU=;WAAA,n'VLE?", parser0);
      htmlTreeBuilder0.insertStartTag("style");
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("muted", (Element) null, "thead", parser0);
      htmlTreeBuilder0.insertStartTag("script");
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7rPz^[", "org.jsoup.parser.ParseErrorList");
      document0.html("<![CDATA[");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "", parser0);
      assertEquals(1, list0.size());
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      token_StartTag0.nameAttr("#document", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, true);
      assertEquals("", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("object");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("<rq;e9/>t67Z\"", document0, "<rq;e9/>t67Z\"", parser0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      List<Node> list0 = Parser.parseFragment("<html>\n <head />\n <body>\n  <b>Uj7L] b{2;0]z</b>\n </body>\n</html>", (Element) null, "<B>Uj7L] b{2;0]z", parseErrorList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("frameset", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "frameset", attributes0);
      Parser parser0 = Parser.htmlParser();
      parser0.setTrackErrors(100);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", formElement0, "W?fI 8~j`xx$0:umRE2", parser0);
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "");
      htmlTreeBuilder0.maybeSetBaseUri(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("3fD-bk", "3fD-bk");
      Element element0 = document0.tagName("plaintext");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("h{dlni}0fsxz=y", element0, "<B<&7L]bP2z^3[", parser0);
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      ParseSettings parseSettings0 = xmlTreeBuilder0.defaultSettings();
      Tag tag0 = Tag.valueOf("noscript", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "noscript", attributes0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("i", formElement0, "plaintext", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("script");
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "tfogw", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("i}p2_N#7BIDO0YhYis", pseudoTextElement0, "script", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "");
      document0.tagName("xmp");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "", parser0);
      assertEquals(1, document0.childNodeSize());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Tag tag0 = Tag.valueOf("title");
      Attributes attributes0 = new Attributes();
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "link", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("title", pseudoTextElement0, "link", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inTableScope("html");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("<B<&7L]bP2z^3[");
      boolean boolean0 = htmlTreeBuilder0.isSpecial(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.push(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7V]rP2z^3[", "<B<&7V]rP2z^3[");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isInActiveFormattingElements(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("<B<&7L]oP2\"^3[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.getDocument();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("bGdy", (Element) null, "<b<&7]rp2z^[", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.replaceActiveFormattingElement(document0, (Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[7];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableRowContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.generateImpliedEndTags();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("tfoot");
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("tfoot", formElement0, "73l0(R,NDv0", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("<B<&7L]bP2z^3[", "");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "#document", parser0);
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.Comment token_Comment0 = tokeniser0.commentPending;
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterHead;
      boolean boolean0 = htmlTreeBuilder0.process(token_Comment0, htmlTreeBuilderState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inListItemScope("BetweenDoctypePublicAndSystemIdentifiers");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableBodyContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("<B<&7L]bP2z^3[");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("<B<&7L]bP2z^3[", document0, "<B<&7L]bP2z^3[", parser0);
      assertEquals(1, list0.size());
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("<!--", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      htmlTreeBuilder0.setFormElement(formElement0);
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("rpv5$QU@'Gu<", (Element) null, "caption", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("thead");
      htmlTreeBuilder0.replaceOnStack(element0, (Element) null);
      htmlTreeBuilder0.pop();
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inButtonScope("<B<&7V]rP2z^3[");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }
}
