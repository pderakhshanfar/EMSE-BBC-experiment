/*
 * This file was automatically generated by EvoSuite
 * Thu Oct 07 22:23:59 GMT 2021
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.HtmlTreeBuilderState;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.XmlTreeBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Document.createShell("org.jsoup.select.Collector$Accumulator");
      Element element0 = document0.createElement("tfoot");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(element0, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("bgVornd");
      htmlTreeBuilder0.parseFragment("-4`T7U", element0, "-4`T7U", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("head");
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Element element0 = new Element("bgVornd");
      htmlTreeBuilder0.parseFragment("bgVornd", element0, "bgVornd", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("bgVornd");
      htmlTreeBuilder0.parseFragment("-4`T7U", element0, "-4`T7U", parser0);
      Document document0 = Parser.parse("H", "H");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("org.jsoup.select.Evaluator$IsOnlyChild", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.sup.kelect.Collector$Accumula6or");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.sup.kelect.Collector$Accumula6or", parser0);
      htmlTreeBuilder0.push((Element) null);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack((Element) null);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // -1
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      Document document0 = xmlTreeBuilder0.parse("center", "center");
      htmlTreeBuilder0.insert(document0);
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterFrameset;
      htmlTreeBuilder0.error(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InCaption;
      htmlTreeBuilder0.transition(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.newPendingTableCharacters();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.framesetOk(false);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("gf%5b'");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = new Document("[");
      htmlTreeBuilder0.initialiseParse(stringReader0, "gf%5b'", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
      assertEquals("[", document0.location());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      htmlTreeBuilder0.clearStackToTableRowContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      String string0 = htmlTreeBuilder0.toString();
      assertEquals("TreeBuilder{currentToken=null, state=Initial, currentElement=null}", string0);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("select");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "-svlq|q", parser0);
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Element element0 = new Element("bgVornd");
      htmlTreeBuilder0.parseFragment("BeforeDoctypeSystemIdentifier", element0, "BeforeDoctypeSystemIdentifier", parser0);
      Document document0 = new Document("bgVornd");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals("#document", element1.nodeName());
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("header");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("header", element0, "*6:jB", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.processStartTag("M9+WS\"MxsA3i");
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals(1, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      Token.Doctype token_Doctype0 = new Token.Doctype();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InBody;
      boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0, htmlTreeBuilderState0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("gf%5b'");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "gf%5b'", parser0);
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token token0 = tokeniser0.read();
      boolean boolean0 = htmlTreeBuilder0.process(token0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("M|(YUO13lRfj^ZBjQ", "M|(YUO13lRfj^ZBjQ");
      Token.Doctype token_Doctype0 = new Token.Doctype();
      boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput((Reader) stringReader0, "#cdata");
      Element element0 = htmlTreeBuilder0.pop();
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Tag tag0 = Tag.valueOf("D\".MG,mjrEG'j:", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Collector$Accumulator", attributes0);
      htmlTreeBuilder0.push(formElement0);
      Element element0 = htmlTreeBuilder0.pop();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.originalState();
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Element element0 = new Element(":,]Pv-ed/G");
      htmlTreeBuilder0.parseFragment(":,]Pv-ed/G", element0, ":,]Pv-ed/G", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("title", (Attributes) null);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterAfterBody;
      htmlTreeBuilder0.process(token_StartTag1, htmlTreeBuilderState0);
      HtmlTreeBuilderState htmlTreeBuilderState1 = htmlTreeBuilder0.originalState();
      assertFalse(htmlTreeBuilderState1.equals((Object)htmlTreeBuilderState0));
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("bgVornd");
      htmlTreeBuilder0.parseFragment("org.jsoup.select.Evaluator$IsFirstOfType", element0, "r,E${X)P;g", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("#root");
      Attributes attributes0 = cDataNode0.attributes();
      token_StartTag0.nameAttr("#root", attributes0);
      Element element1 = htmlTreeBuilder0.insert(token_StartTag0);
      boolean boolean0 = htmlTreeBuilder0.onStack(element1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("bgsound");
      List<Node> list0 = parser0.parseFragmentInput("bgsound", element0, "bgsound");
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.onStack(element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Element element0 = new Element("bgVornd");
      htmlTreeBuilder0.parseFragment("bgVornd", element0, "bgVornd", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.lastFormattingElement();
      assertFalse(element1.isBlock());
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Element element0 = new Element("header");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("header", element0, "*6:jB", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.processStartTag("*6:jB");
      Element element1 = htmlTreeBuilder0.lastFormattingElement();
      assertNotNull(element1);
      assertTrue(element1.hasParent());
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element(",4}w`kx>3=vx");
      htmlTreeBuilder0.parseFragment("select", element0, "tfoot", parser0);
      Element element1 = htmlTreeBuilder0.pop();
      boolean boolean0 = htmlTreeBuilder0.isSpecial(element1);
      assertTrue(boolean0);
      assertEquals(0, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Element element0 = new Element("bgVornd");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("bgVornd", element0, "bgVornd", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(element0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      Document document0 = Document.createShell("head");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("head", document0, "head", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(document0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("bgVornd");
      htmlTreeBuilder0.parseFragment("org.jsoup.select.Evaluator$IsFirstOfType", element0, "r,E${X)P;g", parser0);
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.nameAttr("style", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
      assertTrue(element0.hasParent());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("script");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "script", parser0);
      htmlTreeBuilder0.insertStartTag("script");
      boolean boolean0 = htmlTreeBuilder0.inTableScope("script");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("bgVornd");
      htmlTreeBuilder0.parseFragment("LmI0/c", element0, "LmI0/c", parser0);
      htmlTreeBuilder0.insertStartTag("noembed");
      String[] stringArray0 = new String[4];
      stringArray0[1] = "noembed";
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("orgvjsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "orgvjsoup.select.Collector$Accumulator", parser0);
      String[] stringArray0 = new String[3];
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("rp");
      htmlTreeBuilder0.initialiseParse(stringReader0, "rp", parser0);
      htmlTreeBuilder0.insertStartTag("rp");
      boolean boolean0 = htmlTreeBuilder0.inScope("rp");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Element element0 = new Element("alNS1~Uf,");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("alNS1~Uf,", element0, "org.jsoup.parser.XmlTreeBuilder$1", parser0);
      assertEquals(1, list0.size());
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("noscript");
      Attributes attributes0 = cDataNode0.attributes();
      token_StartTag0.nameAttr("noscript", attributes0);
      htmlTreeBuilder0.insertForm(token_StartTag0, true);
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("noscript");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("head");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "head", parser0);
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("TreeBuilder{currentToken=null, state=Initial, currentElement=null}");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertTrue(arrayList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("scrip", "\"vr5pQ$[9@");
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertEquals(2, arrayList0.size());
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("orgvjsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "orgvjsoup.select.Collector$Accumulator", parser0);
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      htmlTreeBuilder0.processStartTag("org.jsoup.select.Collector$Accumulator");
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertEquals(0, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("u4d~QT_gmo", "E8");
      htmlTreeBuilder0.setHeadElement(document0);
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      Element element0 = htmlTreeBuilder0.getFromStack("org.jsoup.select.Collector$Accumulator");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InCaption");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "InCaption", parser0);
      htmlTreeBuilder0.processStartTag("InCaption");
      Element element0 = htmlTreeBuilder0.getFromStack("InCaption");
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("uB#a3} lg;#zvk,^^");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("                 ", element0, "g\"!KEFjXUib yT)J", parser0);
      Element element1 = htmlTreeBuilder0.getFromStack("html");
      assertNotNull(element1);
      assertEquals(1, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("body", (ParseSettings) null);
      CDataNode cDataNode0 = new CDataNode("+8!7i@F>4|^$4+%+<G");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "+8!7i@F>4|^$4+%+<G", attributes0);
      htmlTreeBuilder0.setFormElement(formElement0);
      FormElement formElement1 = htmlTreeBuilder0.getFormElement();
      assertFalse(formElement1.hasParent());
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("scrip", "\"vr5pQ$[9@");
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertEquals(2, document0.siblingIndex());
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertEquals(2, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      Document document0 = htmlTreeBuilder0.getDocument();
      assertFalse(document0.updateMetaCharsetElement());
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals("org.jsoup.select.Collector$Accumulator", string0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("", "");
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals("", string0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parseFragment("script", (Element) null, "ViH{5.%2D3oZ{", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("script");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("script");
      assertEquals("ViH{5.%2D3oZ{", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Element element0 = new Element(",]Pv-ed/G");
      htmlTreeBuilder0.parseFragment(",]Pv-ed/G", element0, ",]Pv-ed/G", parser0);
      element0.appendElement("; ");
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement(",]Pv-ed/G");
      assertEquals(1, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("og.jsoup.select.Collecr$Accumulator");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "og.jsoup.select.Collecr$Accumulator", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("@.LPQouBNCUmk[>h9`:");
      Document document0 = Document.createShell("og.jsoup.select.Collecr$Accumulator");
      htmlTreeBuilder0.insertOnStackAfter(element0, document0);
      Element element1 = htmlTreeBuilder0.insertStartTag("og.jsoup.select.Collecr$Accumulator");
      Element element2 = htmlTreeBuilder0.aboveOnStack(element1);
      assertNotNull(element2);
      assertEquals(2, element2.childNodeSize());
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      htmlTreeBuilder0.processStartTag("org.jsoup.select.Collector$Accumulator");
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Tag tag0 = Tag.valueOf("D\".MG,mjrEG'j:", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "org.jsoup.select.Collector$Accumulator", attributes0);
      htmlTreeBuilder0.push(formElement0);
      Element element0 = htmlTreeBuilder0.aboveOnStack(formElement0);
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("ScriptDataDoubleEscapedDashDash");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("org.jsoup.select.Evaluator$IsOnlyChild", attributes0);
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      htmlTreeBuilder0.insertInFosterParent(element0);
      // Undeclared exception!
      htmlTreeBuilder0.toString();
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.EndTag token_EndTag0 = new Token.EndTag();
      htmlTreeBuilder0.currentToken = (Token) token_EndTag0;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.resetInsertionMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack((Element) null, (Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeLastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromStack((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("style", "style");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.reconstructFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("/", "/");
      HtmlTreeBuilder htmlTreeBuilder1 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder1.pushActiveFormattingElements(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseFragmentInput("version", (Element) null, "style");
      htmlTreeBuilder0.popStackToClose("htjp");
      Token.CData token_CData0 = new Token.CData("version");
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterHead;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 1, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.BeforeHtml;
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("org.jsoup.sel9ct.Evakuator$IsFirs.OfType");
      Attributes attributes0 = cDataNode0.attributes();
      token_StartTag0.nameAttr("org.jsoup.sel9ct.Evakuator$IsFirs.OfType", attributes0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_StartTag0, htmlTreeBuilderState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Initial;
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("#rooZt");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("#rooZt", attributes0);
      Token.TokenType token_TokenType0 = Token.TokenType.Comment;
      token_StartTag1.type = token_TokenType0;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_StartTag0, htmlTreeBuilderState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.EndTag token_EndTag0 = tokeniser0.endPending;
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Text;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_EndTag0, htmlTreeBuilderState0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = parser0.getErrors();
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_StartTag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("M|(YUO13lRfj^ZBjQ", "M|(YUO13lRfj^ZBjQ");
      Token.Doctype token_Doctype0 = new Token.Doctype();
      Token.TokenType token_TokenType0 = Token.TokenType.StartTag;
      token_Doctype0.type = token_TokenType0;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Doctype0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Doctype cannot be cast to org.jsoup.parser.Token$StartTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose("shC>2Ugv}9>-gU->]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToBefore((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Colle=tor$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Colle=tor$Accumulator", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("org.jsoup.select.Collector$Accumulator", "org.jsoup.select.Collector$Accumulator");
      htmlTreeBuilder0.insertInFosterParent(document0);
      // Undeclared exception!
      htmlTreeBuilder0.parseFragment("iYfOu*yxI", document0, "org.jsoup.select.Collector$Accumulator", parser0);
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("U[P");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("orgvjsoup.select.Collector$Accumulator", element0, "                    ", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Document document0 = Parser.parseBodyFragment("org.jsoup.select.Collector$Accumulator", "{D)Fr");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("{D)Fr", document0, (String) null, parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Tag tag0 = Tag.valueOf("tfoot");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "LMt?nLsH: f5rJS^", attributes0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.onStack(formElement0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.maybeSetBaseUri((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.lastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isSpecial((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag("noresize");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag("body");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document(" <%s>");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(document0, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("bgsound");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      CharacterReader characterReader0 = new CharacterReader("org.jsoup.select.Collector$Accumulator");
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(888);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("org.jsoup.select.Collector$Accumulator", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent(formElement0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InCaption");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "InCaption", parser0);
      htmlTreeBuilder0.processStartTag("InCaption");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm((Token.StartTag) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      ParseErrorList parseErrorList0 = parser0.getErrors();
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm(token_StartTag0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty((Token.StartTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      CharacterReader characterReader0 = new CharacterReader("pre");
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Token.StartTag token_StartTag1 = (Token.StartTag)token_StartTag0.name("mn mM JBn!g&~!");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_StartTag1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 25);
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(25);
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.Comment token_Comment0 = new Token.Comment();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Comment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.Character token_Character0 = new Token.Character();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("2P");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      stringReader0.close();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
        fail("Expecting exception: RuntimeException");
      
      } catch(RuntimeException e) {
         //
         // java.io.IOException: Stream closed
         //
         verifyException("org.jsoup.parser.CharacterReader", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("body");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(stringReader0, "body", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      PipedReader pipedReader0 = new PipedReader(63);
      Parser parser0 = Parser.xmlParser();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(pipedReader0, "org.jsoup.select.StructuralEvaluator$ImmediateParent", parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("fieldset");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getFromStack("th");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getActiveFormattingElement("}o/}!<g*aRM\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.BeforeHead;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.error(htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("M|(YUO13lRfj^ZBjQ", "M|(YUO13lRfj^ZBjQ");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("M|(YUO13lRfj^ZBjQ");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("", attributes0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_StartTag1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("gf%5b'");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "gf%5b'", parser0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Element element0 = new Element("bgVornd");
      htmlTreeBuilder0.parseFragment("bgVornd", element0, "bgVornd", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("x&");
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("bgVornd");
      htmlTreeBuilder0.parseFragment("org.jsoup.select.Evaluator$IsFirstOfType", element0, "r,E${X)P;g", parser0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = new Document("bgvornd");
      htmlTreeBuilder0.parseFragment("d e$E/0}KS&t", document0, "bgvornd", parser0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertFalse(document0.hasParent());
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("M|(YUO13lRfj^ZBjQ", "M|(YUO13lRfj^ZBjQ");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Element element0 = new Element("v.%V;m");
      htmlTreeBuilder0.parseFragment("v.%V;m", element0, "llLV|,+QPi7u", parser0);
      Element element1 = htmlTreeBuilder0.insertStartTag(";.FBDcV@");
      htmlTreeBuilder0.pushActiveFormattingElements(element1);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("/", "/");
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      StringReader stringReader0 = new StringReader("/");
      Document document1 = xmlTreeBuilder0.parse(stringReader0, "*=|r64g!b*E4xUYO");
      Element element0 = document1.attr("A[kktbc@Sc0W}a{M", true);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertFalse(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("\"vr1pQ$[9C", "\"vr1pQ$[9C");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("bgVornd");
      htmlTreeBuilder0.parseFragment("org.jsoup.sel9ct.Evakuator$IsFirs.OfType", element0, "bgVornd", parser0);
      Document document0 = Parser.parse("colgroup", "#root");
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("bgsound");
      parser0.parseFragmentInput("bgsound", element0, "bgsound");
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element1);
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("b*@ ml+Vp)");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "basefont", parser0);
      htmlTreeBuilder0.processStartTag("optgroup");
      htmlTreeBuilder0.generateImpliedEndTags("p&f$nX^Q");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InCaption");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "InCaption", parser0);
      htmlTreeBuilder0.processStartTag("InCaption");
      htmlTreeBuilder0.generateImpliedEndTags("InCaption");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.generateImpliedEndTags("InCaption");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("{%VV@zC+*");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "{%VV@zC+*", parser0);
      htmlTreeBuilder0.processStartTag("optgroup");
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("bej([>u");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("{%VVjzC+*");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "{%VVjzC+*", parser0);
      htmlTreeBuilder0.processStartTag("`1l");
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("`1l");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("bgVornd");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("org.jsoup.select.Evaluator$IsFirstOfType", element0, "r,E${X)P;g", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("fieldset");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("orgvjsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "orgvjsoup.select.Collector$Accumulator", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("TreeBuilder{currentToken=null, state=Initial, currentElement=null}");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Element element0 = new Element("bg`nd");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("bg`nd", element0, "bg`nd", parser0);
      assertEquals(1, list0.size());
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
      String[] stringArray0 = new String[6];
      stringArray0[2] = "bg`nd";
      boolean boolean0 = htmlTreeBuilder0.inScope(";L4q", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("bgVornd");
      htmlTreeBuilder0.parseFragment("org.jsoup.select.Evaluator$IsFirstOfType", element0, "r,E${X)P;g", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("#root");
      Attributes attributes0 = cDataNode0.attributes();
      token_StartTag0.nameAttr("#root", attributes0);
      Element element1 = htmlTreeBuilder0.insert(token_StartTag0);
      assertEquals("r,E${X)P;g", element1.baseUri());
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("E");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Element element0 = new Element("bg`nd");
      htmlTreeBuilder0.parseFragment("bg`nd", element0, "bg`nd", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
      String[] stringArray0 = new String[6];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope(";L4q", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      boolean boolean0 = htmlTreeBuilder0.inScope("ezPl");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("marquee");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("marquee", element0, "org.jsoup.sel9ct.Evakuator$IsFirs.OfType", parser0);
      boolean boolean0 = htmlTreeBuilder0.inTableScope("mA&j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("bgVornd");
      htmlTreeBuilder0.parseFragment("bgVornd", element0, "M-WP#zh:^,RH", parser0);
      Element element1 = htmlTreeBuilder0.pop();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("frameset", element1, "g|5yfKXi", parser0);
      assertEquals(0, element1.siblingIndex());
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("frameset");
      ParseErrorList parseErrorList0 = parser0.getErrors();
      List<Node> list0 = Parser.parseFragment("org.jsoup.parser.XmlTreeBuilder$1", element0, "HiSRON<3ko_;yySv", parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("incaption");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "incaption", parser0);
      Element element0 = document0.head();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("area", element0, "area", parser0);
      assertEquals(1, list0.size());
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Element element0 = new Element("p?km]iVu(tc:*");
      htmlTreeBuilder0.parseFragment("LmI0/c", element0, "p?km]iVu(tc:*", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      token_StartTag0.nameAttr("colgroup", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, true);
      // Undeclared exception!
      try { 
        Parser.parseFragment("noscript", (Element) formElement0, "6;^asjJok=AT", (ParseErrorList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("caption", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "mwrF", attributes0);
      List<Node> list0 = Parser.parseFragment("caption", (Element) formElement0, "j(:NWKlYDDF.e>!lY", (ParseErrorList) null);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("tfoot", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "LMt?nLsH: f5rJS^", attributes0);
      // Undeclared exception!
      try { 
        Parser.parseFragment("#document", (Element) formElement0, "tr", (ParseErrorList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      Element element0 = new Element("thead");
      element0.append("thead");
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = htmlTreeBuilder0.settings;
      Tag tag0 = Tag.valueOf("tbody", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "#root", attributes0);
      // Undeclared exception!
      try { 
        Parser.parseFragment("g", (Element) formElement0, "6'|?E4pJ?F8#R#", (ParseErrorList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = htmlTreeBuilder0.settings;
      Tag tag0 = Tag.valueOf("tr", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "mwrF", attributes0);
      // Undeclared exception!
      try { 
        Parser.parseFragment("B]n:f&", (Element) formElement0, "Moxa_]y]yHgm:", (ParseErrorList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("th");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("org.jsoup.select.Evaluator$TagEndsWith", element0, "", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = htmlTreeBuilder0.settings;
      Tag tag0 = Tag.valueOf("td", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "ezPl", attributes0);
      ParseErrorList parseErrorList0 = parser0.getErrors();
      List<Node> list0 = Parser.parseFragment("l/`V;t0Z't|qYJ4Z", (Element) formElement0, "org.jsoup.nodes.Document$OutputSettings", parseErrorList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Element element0 = new Element("select");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("maxSize must be 0 (unlimited) or larger", element0, "maxSize must be 0 (unlimited) or larger", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "Should not be reachable", parser0);
      htmlTreeBuilder0.processStartTag("*x$l(N=dQh.6B_Wn");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("alNS1~Uf,");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("alNS1~Uf,", element0, "c,1ah=fE", parser0);
      assertEquals(1, list0.size());
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("noscript");
      Attributes attributes0 = cDataNode0.attributes();
      token_StartTag0.nameAttr("bgsound", attributes0);
      Element element1 = htmlTreeBuilder0.insert(token_StartTag0);
      htmlTreeBuilder0.replaceOnStack(element1, (Element) null);
      assertEquals("c,1ah=fE", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("uB#a3} lg;#zvk,^^");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("                 ", element0, "g\"!KEFjXUib yT)J", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(element0, element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("org.jsoup.select.Collector$Accumulator", attributes0);
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(element0, element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("alNS1~Uf,");
      htmlTreeBuilder0.parseFragment("alNS1~Uf,", element0, "c,1ah=fE", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("noscript");
      Attributes attributes0 = cDataNode0.attributes();
      token_StartTag0.nameAttr("bgsound", attributes0);
      Element element1 = htmlTreeBuilder0.insert(token_StartTag0);
      htmlTreeBuilder0.push(element0);
      Element element2 = htmlTreeBuilder0.aboveOnStack(element1);
      assertEquals(0, element2.siblingIndex());
      assertNotNull(element2);
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("orgvjsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput((Reader) stringReader0, "&nbsp;");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("alNS1~Uf,");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("bgVornd");
      htmlTreeBuilder0.parseFragment("alNS1~Uf,", element0, "org.jsoup.parser.XmlTreeBuilder$1", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("noscript");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("bgsound", attributes0);
      htmlTreeBuilder0.insertForm(token_StartTag1, true);
      htmlTreeBuilder0.clearStackToTableBodyContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("mNrquee");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("mNrquee", element0, "mNrquee", parser0);
      htmlTreeBuilder0.processStartTag("template");
      htmlTreeBuilder0.clearStackToTableBodyContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("marquee");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("marquee", element0, "org.jsoup.sel9ct.Evakuator$IsFirs.OfType", parser0);
      htmlTreeBuilder0.clearStackToTableContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Element element0 = new Element("alNS1~Uf,");
      htmlTreeBuilder0.parseFragment("alNS1~Uf,", element0, "c,ha(=fE", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("noscript");
      Attributes attributes0 = cDataNode0.attributes();
      token_StartTag0.nameAttr("bgsound", attributes0);
      htmlTreeBuilder0.insert(token_StartTag0);
      htmlTreeBuilder0.popStackToBefore("bgsound");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("bgVornd");
      htmlTreeBuilder0.parseFragment("org.jsoup.select.Evaluator$IsFirstOfType", element0, "r,E${X)P;g", parser0);
      htmlTreeBuilder0.popStackToBefore("s");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("InCaption");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.initialiseParse(stringReader0, "InCaption", parser0);
      htmlTreeBuilder0.processStartTag("InCaption");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "InCaption";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Element element0 = new Element("bg~`rnd");
      htmlTreeBuilder0.parseFragment("bg~`rnd", element0, "bg~`rnd", parser0);
      String[] stringArray0 = new String[1];
      stringArray0[0] = "noembed";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Element element0 = new Element("bg~`rnd");
      htmlTreeBuilder0.parseFragment("bg~`rnd", element0, "bg~`rnd", parser0);
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("bgVornd");
      htmlTreeBuilder0.parseFragment("org.jsoup.select.Evaluator$IsFirstOfType", element0, "r,E${X)P;g", parser0);
      htmlTreeBuilder0.popStackToClose("html");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("alNS1~Uf,");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("alNS1~Uf,", element0, "org.jsoup.parser.XmlTreeBuilder$1", parser0);
      assertEquals(1, list0.size());
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("noscript");
      Attributes attributes0 = cDataNode0.attributes();
      token_StartTag0.nameAttr("org.jsoup.parser.XmlTreeBuilder$1", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, true);
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(formElement0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("marquee");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("marquee", element0, "org.jsoup.sel9ct.Evakuator$IsFirs.OfType", parser0);
      assertEquals(1, list0.size());
      
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Element element0 = new Element("alNS1~Uf,");
      htmlTreeBuilder0.parseFragment("alNS1~Uf,", element0, "alNS1~Uf,", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      token_StartTag0.nameAttr("noscript", attributes0);
      htmlTreeBuilder0.insertForm(token_StartTag0, true);
      Element element1 = htmlTreeBuilder0.getFromStack("noscript");
      assertEquals(0, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Element element0 = new Element("v.%V;m");
      htmlTreeBuilder0.parseFragment("v.%V;m", element0, "llLV|,+QPi7u", parser0);
      Element element1 = htmlTreeBuilder0.insertStartTag(";.FBDcV@");
      htmlTreeBuilder0.pushActiveFormattingElements(element1);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("org.jsoup.select.Collector$Accumulator");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "org.jsoup.select.Collector$Accumulator", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("ScriptDataDoubleEscapedDashDash");
      Attributes attributes0 = cDataNode0.attributes();
      token_StartTag0.nameAttr("select", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, false);
      assertEquals(0, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("{%VV@zC+*");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "[^%s]", parser0);
      htmlTreeBuilder0.processStartTag("object");
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("object");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("marquee");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment("marquee", element0, "org.jsoup.sel9ct.Evakuator$IsFirs.OfType", parser0);
      htmlTreeBuilder0.setFosterInserts(true);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("marquee");
      Attributes attributes0 = cDataNode0.attributes();
      token_StartTag0.nameAttr("scripf", attributes0);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterAfterBody;
      boolean boolean0 = htmlTreeBuilder0.process(token_StartTag0, htmlTreeBuilderState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("th");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "", parser0);
      htmlTreeBuilder0.insertStartTag("style");
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("script");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.initialiseParse(stringReader0, "script", parser0);
      htmlTreeBuilder0.insertStartTag("script");
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = new Document("bgvornd");
      htmlTreeBuilder0.parseFragment("d e$E/0}KS&t", document0, "bgvornd", parser0);
      Token.CData token_CData0 = new Token.CData("bgvornd");
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InCaption;
      boolean boolean0 = htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("bgVornd");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("alNS1~Uf,", element0, "org.jsoup.parser.XmlTreeBuilder$1", parser0);
      assertEquals(1, list0.size());
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("bgVornd");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("c", attributes0);
      token_StartTag1.selfClosing = true;
      token_StartTag0.nameAttr("bgsound", attributes0);
      Element element1 = htmlTreeBuilder0.insert(token_StartTag0);
      assertEquals("org.jsoup.parser.XmlTreeBuilder$1", element1.baseUri());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.BeforeHtml;
      Parser parser0 = Parser.xmlParser();
      Element element0 = new Element("wbkfoNd");
      htmlTreeBuilder0.parseFragment("wbkfoNd", element0, "org.jsoup.sel9ct.Evakuator$IsFirs.OfType", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("org.jsoup.sel9ct.Evakuator$IsFirs.OfType");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("org.jsoup.sel9ct.Evakuator$IsFirs.OfType", attributes0);
      token_StartTag1.selfClosing = true;
      boolean boolean0 = htmlTreeBuilder0.process(token_StartTag0, htmlTreeBuilderState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("bkfgVoNd");
      htmlTreeBuilder0.parseFragment("org.jsoup.sel9ct.Evakuator$IsFirs.OfType", element0, "bkfgVoNd", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("#rooZt");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("#rooZt", attributes0);
      Element element1 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertNotSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("marquee");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("marquee", element0, "org.jsoup.sel9ct.Evakuator$IsFirs.OfType", parser0);
      assertEquals(1, list0.size());
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("marquee");
      Attributes attributes0 = cDataNode0.attributes();
      token_StartTag0.nameAttr("scripf", attributes0);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterAfterBody;
      htmlTreeBuilder0.process(token_StartTag0, htmlTreeBuilderState0);
      boolean boolean0 = htmlTreeBuilder0.inTableScope("mA&j");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = new Document("[");
      htmlTreeBuilder0.maybeSetBaseUri(document0);
      assertFalse(document0.isBlock());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("plaintext");
      List<Node> list0 = htmlTreeBuilder0.parseFragment("gf%5b'", element0, "", parser0);
      assertFalse(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Element element0 = new Element("alNS1~Uf,");
      htmlTreeBuilder0.parseFragment("alNS1~Uf,", element0, "org.jsoup.parser.XmlTreeBuilder$1", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("noscript");
      Attributes attributes0 = cDataNode0.attributes();
      token_StartTag0.nameAttr("noscript", attributes0);
      Element element1 = htmlTreeBuilder0.insert(token_StartTag0);
      // Undeclared exception!
      try { 
        Parser.parseFragment("TreeBuilder{currentToken=org.jsoup.parser.Token$EOF@1d, state=InBody, currentElement=<noscript #cdata=\"noscript\" />}", element1, "AfterBody", (ParseErrorList) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tokeniser", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("script", (ParseSettings) null);
      FormElement formElement0 = new FormElement(tag0, "4d5ObIq&wN)Kn9+|s/", attributes0);
      ParseErrorList parseErrorList0 = new ParseErrorList(100, (-169));
      List<Node> list0 = Parser.parseFragment("ioy", (Element) formElement0, "%20", parseErrorList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("style", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "", attributes0);
      List<Node> list0 = Parser.parseFragment("style", (Element) formElement0, "YB\",GT=<n0;'!{c'?,", (ParseErrorList) null);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("title");
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("button", element0, "~sn\"uFdbN", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parseFragment(">+@C'oj", (Element) null, "org.jsoup.select.Collector$Accumulator", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("org.jsoup.select.Collector$Accumulator");
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertEquals("org.jsoup.select.Collector$Accumulator", element1.baseUri());
      assertNotNull(element1);
      assertEquals(2, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inTableScope("mA&j");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("bgsound");
      htmlTreeBuilder0.parseFragment("*6:jB", element0, "d e$E/0}KS&t", parser0);
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      Token.Comment token_Comment0 = tokeniser0.commentPending;
      htmlTreeBuilder0.insert(token_Comment0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("bg~`rnd");
      boolean boolean0 = htmlTreeBuilder0.isSpecial(element0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("alNS1~Uf,");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.push(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setFosterInserts(true);
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("header");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isInActiveFormattingElements(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("dl");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.getDocument();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[4];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inButtonScope("noscript");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableRowContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.generateImpliedEndTags();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("table", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "4d5ObIq&wN)Kn9+|s/", attributes0);
      ParseErrorList parseErrorList0 = new ParseErrorList(98688, 100);
      Parser.parseFragment("org.jsoup.select.Collector$Accumulator", (Element) formElement0, "7R*`h$", parseErrorList0);
      assertEquals(2, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterAfterBody;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_StartTag0, htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilderState$21", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inListItemScope("E");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableBodyContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Element element0 = new Element("p#ETM9H");
      htmlTreeBuilder0.parseFragment("p#ETM9H", element0, "d*HY+pQYTA4v7", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      CDataNode cDataNode0 = new CDataNode("W0=<>l");
      Attributes attributes0 = cDataNode0.attributes();
      token_StartTag0.nameAttr("W0=<>l", attributes0);
      htmlTreeBuilder0.insertForm(token_StartTag0, true);
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertTrue(formElement0.hasParent());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = new Element("alNS1~Uf,");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(element0, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Element element0 = new Element("bg~`rnd");
      htmlTreeBuilder0.parseFragment("bg~`rnd", element0, "bg~`rnd", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      htmlTreeBuilder0.reconstructFormattingElements();
      String[] stringArray0 = new String[1];
      htmlTreeBuilder0.inScope("bg~`rnd", stringArray0);
  }
}
