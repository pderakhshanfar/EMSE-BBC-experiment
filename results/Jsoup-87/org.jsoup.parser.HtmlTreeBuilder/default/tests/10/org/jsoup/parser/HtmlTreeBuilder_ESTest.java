/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 31 23:03:58 GMT 2021
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.TextNode;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.HtmlTreeBuilderState;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.select.Elements;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      StringReader stringReader0 = new StringReader("org.jsoup.select.Evaluator$IsRoot");
      assertNotNull(stringReader0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "org.jsoup.select.Evaluator$IsRoot", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = new Element("](_S`Tf'W$Fwz");
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(document0, element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("P%2JHa_", "P%2JHa_");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("P%2JHa_", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("P%2JHa_", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("P%2JHa_", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("P%2JHa_", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("P%2JHa_");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("=pXB8LLX9");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "}37<bm/2]22_", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("}37<bm/2]22_", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("}37<bm/2]22_", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("}37<bm/2]22_", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("}37<bm/2]22_", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("}37<bm/2]22_", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("}37<bm/2]22_", document0.location());
      assertEquals(1, document0.childNodeSize());
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("}37<bm/2]22_", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("}37<bm/2]22_", document0.location());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("org.jsoup.select.Evaluator$Class");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = Document.createShell("");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Document document1 = htmlTreeBuilder0.parse(stringReader0, "T>|'", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("T>|'", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("T>|'", document1.baseUri());
      assertNotNull(document1);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("T>|'", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("T>|'", document1.baseUri());
      
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("XB8LLQa");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = Parser.parseBodyFragment("XB8LLQa", "XB8LLQa");
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("XB8LLQa", document0.baseUri());
      assertEquals("XB8LLQa", document0.location());
      assertNotNull(document0);
      
      Document document1 = htmlTreeBuilder0.parse(stringReader0, "yh", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("yh", document1.baseUri());
      assertEquals("yh", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("yh", document1.baseUri());
      assertEquals("yh", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("XB8LLQa", document0.baseUri());
      assertEquals("XB8LLQa", document0.location());
      
      Document document2 = (Document)htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document2.equals((Object)document1));
      assertNotSame(document2, document1);
      assertSame(document2, document0);
      assertEquals("#document", document2.nodeName());
      assertEquals("XB8LLQa", document2.location());
      assertEquals(0, document2.siblingIndex());
      assertFalse(document2.isBlock());
      assertEquals(1, document2.childNodeSize());
      assertFalse(document2.hasParent());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("XB8LLQa", document2.baseUri());
      assertNotNull(document2);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("p.fzf<a<$p4S", "p.fzf<a<$p4S");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("p.fzf<a<$p4S", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("p.fzf<a<$p4S", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      List<Node> list0 = parser0.parseFragmentInput("", document0, ",>");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("p.fzf<a<$p4S", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("p.fzf<a<$p4S", document0.location());
      assertFalse(document0.hasParent());
      assertTrue(list0.isEmpty());
      assertEquals(0, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("href");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InColumnGroup;
      htmlTreeBuilder0.transition(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("X", parseSettings0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals("x", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "ScriptDataEscapeStart", attributes0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals("x", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("ScriptDataEscapeStart", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertNotNull(formElement0);
      
      htmlTreeBuilder0.setHeadElement(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals("x", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("ScriptDataEscapeStart", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      htmlTreeBuilder0.setFormElement((FormElement) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      htmlTreeBuilder0.newPendingTableCharacters();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      htmlTreeBuilder0.framesetOk(true);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("XB8LLQa");
      assertNotNull(stringReader0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, ")~", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(")~", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(")~", document0.location());
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.currentElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(")~", element0.baseUri());
      assertNotNull(element0);
      
      htmlTreeBuilder0.replaceOnStack(element0, document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(")~", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(")~", document0.location());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(")~", element0.baseUri());
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("td", "td");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("td", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("td", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("td", attributes0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertEquals(0, attributes0.size());
      assertNotNull(token_StartTag1);
      
      token_StartTag1.selfClosing = true;
      assertEquals(0, attributes0.size());
      
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertEquals(0, attributes0.size());
      assertEquals(0, element0.childNodeSize());
      assertEquals("td", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Tag tag0 = Tag.valueOf("listing");
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals("listing", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "xS}e!en%gl", attributes0);
      assertEquals(0, attributes0.size());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals("listing", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("xS}e!en%gl", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      
      List<Node> list0 = parser0.parseFragmentInput("D{w{GF", formElement0, "D{w{GF");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, attributes0.size());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertEquals("listing", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(formElement0.hasParent());
      assertEquals("xS}e!en%gl", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      htmlTreeBuilder0.clearStackToTableRowContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("XB8LLQa");
      assertNotNull(stringReader0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tbody", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("tbody", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tbody", document0.location());
      assertNotNull(document0);
      
      htmlTreeBuilder0.clearStackToTableBodyContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Tag tag0 = Tag.valueOf("X");
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("X", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "meta", attributes0);
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("X", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals("meta", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      
      List<Node> list0 = parser0.parseFragmentInput("meta", formElement0, "meta");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertEquals("X", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals("meta", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      String string0 = htmlTreeBuilder0.toString();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("XB8LLQa");
      assertNotNull(stringReader0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tbody", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tbody", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("tbody", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      htmlTreeBuilder0.state();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("XB8LLQa");
      assertNotNull(stringReader0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, ")~", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(")~", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(")~", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.currentElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(")~", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(")~", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(element1, element0);
      assertEquals(1, element1.childNodeSize());
      assertEquals(")~", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("tfyot");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tfyot", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tfyot", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("tfyot", document0.location());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("tfyot");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(element0.isBlock());
      assertEquals("tfyot", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(element0.isBlock());
      assertEquals("tfyot", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(element1, element0);
      assertEquals("tfyot", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Token.CData token_CData0 = new Token.CData((String) null);
      assertNotNull(token_CData0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.ForeignContent;
      boolean boolean0 = htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("zwbr");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "XB8LLQa", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("XB8LLQa", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("XB8LLQa", document0.baseUri());
      assertNotNull(document0);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(token_Doctype0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InSelect;
      boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0, htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("g)|W9", parseSettings0);
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("g)|W9", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, ";!8bw", attributes0);
      assertEquals(0, attributes0.size());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("g)|W9", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(";!8bw", formElement0.baseUri());
      assertNotNull(formElement0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = parser0.parseFragmentInput("g)|W9", formElement0, "S)NM<5nfQY");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, attributes0.size());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertEquals("g)|W9", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(";!8bw", formElement0.baseUri());
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      boolean boolean0 = htmlTreeBuilder0.process(token_Comment0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("XB8LLQa");
      assertNotNull(stringReader0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Tag tag0 = Tag.valueOf("listing");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertEquals("listing", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "xS}e!en%gl", attributes0);
      assertEquals(0, attributes0.size());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertEquals("listing", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("xS}e!en%gl", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      
      List<Node> list0 = parser0.parseFragmentInput("?&gfK4G[93z,xP", formElement0, ",Bg8i;Wu}xw!");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, attributes0.size());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.canContainBlock());
      assertEquals("listing", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertEquals("xS}e!en%gl", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 100);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = parser0.getErrors();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("body", attributes0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, attributes0.size());
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(token_StartTag1);
      
      boolean boolean0 = htmlTreeBuilder0.process(token_StartTag1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, attributes0.size());
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("tXyo");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tXyo", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tXyo", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("tXyo", document0.baseUri());
      assertNotNull(document0);
      
      htmlTreeBuilder0.push(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tXyo", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("tXyo", document0.baseUri());
      
      Document document1 = (Document)htmlTreeBuilder0.pop();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertEquals("tXyo", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("tXyo", document1.baseUri());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Tag tag0 = Tag.valueOf("X");
      assertEquals("X", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "ma", attributes0);
      assertEquals("X", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("ma", formElement0.baseUri());
      assertNotNull(formElement0);
      
      List<Node> list0 = parser0.parseFragmentInput("ma", formElement0, "ma");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("X", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("ma", formElement0.baseUri());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      htmlTreeBuilder0.insert(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("X", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertTrue(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("ma", formElement0.baseUri());
      assertEquals(1, formElement0.siblingIndex());
      
      Element element0 = htmlTreeBuilder0.pop();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(element0, formElement0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("ma", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("tXyo");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tXyo", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("tXyo", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tXyo", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.pop();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("tXyo", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      htmlTreeBuilder0.originalState();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Tag tag0 = Tag.valueOf("tr", parseSettings0);
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertEquals("tr", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "ma", attributes0);
      assertEquals(0, attributes0.size());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertEquals("tr", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("ma", formElement0.baseUri());
      assertNotNull(formElement0);
      
      List<Node> list0 = parser0.parseFragmentInput("Od'm@uvmp$pe]VCtQ", formElement0, "Db>4*WC3V{5cDd'}<g");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, attributes0.size());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertEquals("tr", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("ma", formElement0.baseUri());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      htmlTreeBuilder0.originalState();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("XB8LLQa");
      assertNotNull(stringReader0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tRoy", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tRoy", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tRoy", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      htmlTreeBuilder0.insert(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("tRoy", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tRoy", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      boolean boolean0 = htmlTreeBuilder0.onStack(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.siblingIndex());
      assertEquals("tRoy", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tRoy", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("h", parseSettings0);
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("h", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "ma", attributes0);
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("h", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("ma", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertNotNull(formElement0);
      
      List<Node> list0 = parser0.parseFragmentInput("~&eoYO1u23!NQ93{", formElement0, "R");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("h", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("ma", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      boolean boolean0 = htmlTreeBuilder0.onStack(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isKnownTag());
      assertTrue(tag0.formatAsBlock());
      assertEquals("h", tag0.toString());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isBlock());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertEquals("ma", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("XB8LLQa");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "XB8LLQa", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("XB8LLQa", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("XB8LLQa", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X8LLQ");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X8LLQ", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("X8LLQ", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("X8LLQ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("X8LLQ");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("X8LLQ", element0.baseUri());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("X8LLQ", element0.baseUri());
      assertTrue(element0.hasParent());
      
      Element element1 = htmlTreeBuilder0.lastFormattingElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(element1, element0);
      assertEquals(0, element1.childNodeSize());
      assertEquals("X8LLQ", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertTrue(element1.hasParent());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("XB8LLQa");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "XB8LLQa", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("XB8LLQa", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("XB8LLQa", document0.baseUri());
      assertNotNull(document0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("XB8LLQa", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("XB8LLQa", document0.baseUri());
      
      Document document1 = (Document)htmlTreeBuilder0.lastFormattingElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("XB8LLQa", document1.baseUri());
      assertEquals("XB8LLQa", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("XB8LLQa");
      assertNotNull(stringReader0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tbody", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tbody", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tbody", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("td");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tbody", element0.baseUri());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      boolean boolean0 = htmlTreeBuilder0.isSpecial(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tbody", element0.baseUri());
      assertTrue(element0.isBlock());
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("yh");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "yh", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("yh", document0.location());
      assertEquals("yh", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("yh", document0.location());
      assertEquals("yh", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("yh", document0.location());
      assertEquals("yh", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("XB8LLQa");
      assertNotNull(stringReader0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tbody", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("tbody", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tbody", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("td", document0, "XB8LLQa", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("tbody", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tbody", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("tXyo");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tXyo", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("tXyo", document0.location());
      assertEquals("tXyo", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("tXyo");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("tXyo", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = htmlTreeBuilder0.insertStartTag("tXyo");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertTrue(element1.hasParent());
      assertEquals("tXyo", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertFalse(element1.isBlock());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "zhL9rU@1Nkls\"n#Y$", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertNotNull(document0);
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      CDataNode cDataNode0 = new CDataNode("w|kT#[8e");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("S6cj%gPo{1(bF", attributes0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertNotNull(token_StartTag1);
      
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("p.fzf<a<$p4S", "p.fzf<a<$p4S");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("p.fzf<a<$p4S", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("p.fzf<a<$p4S", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      List<Node> list0 = parser0.parseFragmentInput("", document0, ",>");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("p.fzf<a<$p4S", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("p.fzf<a<$p4S", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertNotNull(list0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      token_StartTag0.appendTagName("Vnwzp^f6r3mW");
      Element element0 = htmlTreeBuilder0.insert(token_StartTag0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(",>", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("ktXy7");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "ktXy7", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ktXy7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("ktXy7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("ktXy7");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("ktXy7", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
      
      Element element1 = document0.createElement("ktXy7");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element1, element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ktXy7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("ktXy7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("ktXy7", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      assertNotNull(element1);
      
      htmlTreeBuilder0.insertOnStackAfter(element0, element1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(element0.equals((Object)element1));
      assertFalse(element1.equals((Object)element0));
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ktXy7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("ktXy7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("ktXy7", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals("ktXy7", element1.baseUri());
      assertEquals(0, element1.childNodeSize());
      
      String[] stringArray0 = new String[4];
      stringArray0[1] = "ktXy7";
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(4, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("yh");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "yh", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("yh", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("yh", document0.location());
      assertNotNull(document0);
      
      String[] stringArray0 = new String[2];
      stringArray0[0] = "p=Q1+i%";
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(2, stringArray0.length);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("tfyot");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tfyot", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tfyot", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("tfyot", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("tfyot");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("tfyot", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertNotNull(element0);
      
      String[] stringArray0 = new String[1];
      boolean boolean0 = htmlTreeBuilder0.inScope("tfyot", stringArray0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(1, stringArray0.length);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("html", "html");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("html", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("html", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      boolean boolean0 = htmlTreeBuilder0.inScope("html");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("lcuiptDtaEsczpeLssthanSin", "lcuiptDtaEsczpeLssthanSin");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("lcuiptDtaEsczpeLssthanSin", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("lcuiptDtaEsczpeLssthanSin", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByClass("lcuiptDtaEsczpeLssthanSin");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("lcuiptDtaEsczpeLssthanSin", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("lcuiptDtaEsczpeLssthanSin", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("lcuiptDtaEsczpeLssthanSin", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("lcuiptDtaEsczpeLssthanSin", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertEquals(0, htmlTreeBuilder0.stack.size());
      assertTrue(htmlTreeBuilder0.stack.isEmpty());
      
      boolean boolean0 = htmlTreeBuilder0.inScope("lcuiptDtaEsczpeLssthanSin");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("tfyot");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tfyot", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tfyot", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("tfyot", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("tfyot");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("tfyot", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("tfyot");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Parser.parseBodyFragment("+Lv0O,", "ScuiptDatEsczpedLssthanSign");
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ScuiptDatEsczpedLssthanSign", document0.location());
      assertEquals("ScuiptDatEsczpedLssthanSign", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByClass("ScuiptDatEsczpedLssthanSign");
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ScuiptDatEsczpedLssthanSign", document0.location());
      assertEquals("ScuiptDatEsczpedLssthanSign", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("ScuiptDatEsczpedLssthanSign", document0.location());
      assertEquals("ScuiptDatEsczpedLssthanSign", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertTrue(htmlTreeBuilder0.stack.isEmpty());
      assertEquals(0, htmlTreeBuilder0.stack.size());
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("+Lv0O,");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("c");
      assertNotNull(stringReader0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "c", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("c", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("c", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("c");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, element0.childNodeSize());
      assertEquals("c", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("c");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("zwbr");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "&`", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("&`", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("&`", document0.location());
      assertNotNull(document0);
      
      htmlTreeBuilder0.popStackToClose("5[<CU*-j:6RF");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      StringReader stringReader0 = new StringReader("selekt");
      assertNotNull(stringReader0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "ltQ5~['", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ltQ5~['", document0.location());
      assertEquals("ltQ5~['", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Tag tag0 = Tag.valueOf("ma");
      assertEquals("ma", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "C", attributes0);
      assertEquals("ma", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("C", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertNotNull(formElement0);
      
      List<Node> list0 = parser0.parseFragmentInput("Od'm@uvmp$pe]VCtQ", formElement0, "Db>4*WC3V{5cDd'}<g");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("ma", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals("C", formElement0.baseUri());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      List<String> list1 = htmlTreeBuilder0.getPendingTableCharacters();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(list1.isEmpty());
      assertEquals(0, list1.size());
      assertNotNull(list1);
      assertFalse(list1.contains("Db>4*WC3V{5cDd'}<g"));
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("XB8LLQa");
      assertNotNull(stringReader0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tbody", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("tbody", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("tbody", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("tbody", element0.baseUri());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Parser.parseBodyFragment("XWS&m", "ScriptDataEscapedLessthanSign");
      assertEquals("ScriptDataEscapedLessthanSign", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ScriptDataEscapedLessthanSign", document0.location());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByClass("ScriptDataEscapedLessthanSign");
      assertEquals("ScriptDataEscapedLessthanSign", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ScriptDataEscapedLessthanSign", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertNotNull(elements0);
      
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      assertEquals("ScriptDataEscapedLessthanSign", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("ScriptDataEscapedLessthanSign", document0.location());
      assertTrue(elements0.isEmpty());
      assertEquals(0, elements0.size());
      assertEquals(0, htmlTreeBuilder0.stack.size());
      assertTrue(htmlTreeBuilder0.stack.isEmpty());
      
      Element element0 = htmlTreeBuilder0.getFromStack("style");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("hrem");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "hrem", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("hrem", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("hrem", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.getFromStack("html");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.childNodeSize());
      assertEquals("hrem", element0.baseUri());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Tag tag0 = Tag.valueOf("thead", parseSettings0);
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("thead", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "noresize", attributes0);
      assertEquals(0, attributes0.size());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("thead", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertTrue(formElement0.isBlock());
      assertEquals("noresize", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertNotNull(formElement0);
      
      List<Node> list0 = parser0.parseFragmentInput("R", formElement0, "ma");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, attributes0.size());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertEquals("thead", tag0.toString());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertTrue(formElement0.isBlock());
      assertEquals("noresize", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      FormElement formElement1 = htmlTreeBuilder0.getFormElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(formElement1, formElement0);
      assertEquals(0, formElement1.siblingIndex());
      assertEquals("noresize", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertTrue(formElement1.isBlock());
      assertFalse(formElement1.hasParent());
      assertNotNull(formElement1);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("XB8LLQa");
      assertNotNull(stringReader0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tbody", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("tbody", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("tbody", document0.location());
      assertNotNull(document0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = parser0.getErrors();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("DoctypeSystemIdentifier_singleQuoted", attributes0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertEquals(0, attributes0.size());
      assertNotNull(token_StartTag1);
      
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertEquals(0, attributes0.size());
      assertTrue(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals(1, formElement0.siblingIndex());
      assertEquals("tbody", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertNotNull(formElement0);
      
      FormElement formElement1 = htmlTreeBuilder0.getFormElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(formElement1, formElement0);
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("tbody", formElement1.baseUri());
      assertEquals(1, formElement1.siblingIndex());
      assertTrue(formElement1.hasParent());
      assertNotNull(formElement1);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      assertNotNull(parseSettings0);
      
      Tag tag0 = Tag.valueOf("h", parseSettings0);
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("h", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, ",\"a", attributes0);
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("h", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals(0, attributes0.size());
      assertEquals(",\"a", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertNotNull(formElement0);
      
      Element element0 = formElement0.prepend(",\"a");
      assertSame(formElement0, element0);
      assertSame(element0, formElement0);
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("h", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals(0, attributes0.size());
      assertEquals(",\"a", formElement0.baseUri());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(",\"a", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertNotNull(element0);
      
      List<Node> list0 = parser0.parseFragmentInput("~&eoYO1u23!NBQ93{", formElement0, "R");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(formElement0, element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertEquals("h", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertEquals(0, attributes0.size());
      assertEquals(",\"a", formElement0.baseUri());
      assertEquals(1, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      FormElement formElement1 = htmlTreeBuilder0.getFormElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(formElement1, element0);
      assertSame(formElement1, formElement0);
      assertFalse(formElement1.hasParent());
      assertFalse(formElement1.isBlock());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(",\"a", formElement1.baseUri());
      assertEquals(1, formElement1.childNodeSize());
      assertNotNull(formElement1);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      StringReader stringReader0 = new StringReader("org.jsoup.select.Evaluator$IsRoot");
      assertNotNull(stringReader0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "org.jsoup.select.Evaluator$IsRoot", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.tagName("noscript");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.baseUri());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document0.location());
      assertTrue(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#document", document1.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document1.location());
      assertTrue(document1.isBlock());
      assertNotNull(document1);
      
      Document document2 = htmlTreeBuilder0.getDocument();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document2, document0);
      assertSame(document2, document1);
      assertFalse(document2.hasParent());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document2.location());
      assertTrue(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("org.jsoup.select.Evaluator$IsRoot", document2.baseUri());
      assertEquals(1, document2.childNodeSize());
      assertEquals("#document", document2.nodeName());
      assertEquals(0, document2.siblingIndex());
      assertNotNull(document2);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("KKP. */!sJKQc>U]Pb");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "[qo", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("[qo", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("[qo", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("[qo", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("[qo", document0.location());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals("[qo", document1.baseUri());
      assertEquals("[qo", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertEquals(2, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("re", "listing");
      assertEquals(1, document0.childNodeSize());
      assertEquals("listing", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("listing", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("listing", document0, "listing", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("listing", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("listing", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      Element element0 = htmlTreeBuilder0.currentElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("listing", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      htmlTreeBuilder0.insert(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("listing", element0.baseUri());
      assertEquals(2, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertEquals("listing", document1.location());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(0, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("listing", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Tag tag0 = Tag.valueOf("rt");
      assertEquals("rt", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.formatAsBlock());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "8ZKRaPTS_9[%gm", attributes0);
      assertEquals("rt", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.formatAsBlock());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals("8ZKRaPTS_9[%gm", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertNotNull(formElement0);
      
      List<Node> list0 = parser0.parseFragmentInput("tbody", formElement0, "rt");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("rt", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertTrue(tag0.isInline());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.formatAsBlock());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.hasParent());
      assertEquals("8ZKRaPTS_9[%gm", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertNotNull(list0);
      
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("rt", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("body");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      htmlTreeBuilder0.initialiseParse(stringReader0, "", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("Id[o]P\u0007=");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Id[o]P\u0007=", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals("Id[o]P\u0007=", document0.location());
      assertEquals("Id[o]P\u0007=", document0.baseUri());
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("frameset");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("Id[o]P\u0007=", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertNotNull(element0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("Id[o]P\u0007=", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("frameset");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(element1, element0);
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("Id[o]P\u0007=", element1.baseUri());
      assertTrue(element1.isBlock());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("select");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = Parser.parseBodyFragment("select", "select");
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Document document1 = htmlTreeBuilder0.parse(stringReader0, "D& ^$L6|Bhz", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document1.equals((Object)document0));
      assertNotSame(document1, document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals("D& ^$L6|Bhz", document1.location());
      assertEquals("D& ^$L6|Bhz", document1.baseUri());
      assertNotNull(document1);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document0.equals((Object)document1));
      assertNotSame(document0, document1);
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("select", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      
      Document document2 = (Document)htmlTreeBuilder0.getActiveFormattingElement("#document");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(document2.equals((Object)document1));
      assertSame(document2, document0);
      assertNotSame(document2, document1);
      assertFalse(document2.hasParent());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertEquals("select", document2.baseUri());
      assertEquals(0, document2.siblingIndex());
      assertEquals("select", document2.location());
      assertEquals("#document", document2.nodeName());
      assertEquals(1, document2.childNodeSize());
      assertNotNull(document2);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("c");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[4];
      int int0 = stringReader0.read(charArray0);
      assertEquals(4, charArray0.length);
      assertEquals(1, int0);
      assertArrayEquals(new char[] {'c', '\u0000', '\u0000', '\u0000'}, charArray0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "c", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("c", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("c", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(parseSettings0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("tXyo");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tXyo", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tXyo", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tXyo", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      htmlTreeBuilder0.push(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tXyo", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("tXyo", document0.location());
      assertEquals(0, document0.siblingIndex());
      
      Element element0 = htmlTreeBuilder0.insertStartTag("tXyo");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("tXyo", element0.baseUri());
      assertNotNull(element0);
      
      Document document1 = (Document)htmlTreeBuilder0.aboveOnStack(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("tXyo", element0.baseUri());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertEquals("tXyo", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("tXyo", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("ktXy7");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "ktXy7", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("ktXy7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("ktXy7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("ktXy7");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(element0.isBlock());
      assertEquals("ktXy7", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertNotNull(element0);
      
      htmlTreeBuilder0.insertOnStackAfter(element0, element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(element0.isBlock());
      assertEquals("ktXy7", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(element0, element1);
      assertSame(element1, element0);
      assertFalse(element0.isBlock());
      assertEquals("ktXy7", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals("ktXy7", element1.baseUri());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("=pXB8LLaa", "=pXB8LLaa");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("=pXB8LLaa", document0.location());
      assertEquals("=pXB8LLaa", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals("=pXB8LLaa", document0.location());
      assertEquals("=pXB8LLaa", document0.baseUri());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.isBlock());
      
      // Undeclared exception!
      htmlTreeBuilder0.toString();
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      CharacterReader characterReader0 = new CharacterReader("D|V=w");
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(tokeniser0);
      
      Token.Tag token_Tag0 = tokeniser0.createTagPending(false);
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(token_Tag0);
      
      htmlTreeBuilder0.currentToken = (Token) token_Tag0;
      assertEquals(0, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.resetInsertionMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeLastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromStack((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.reconstructFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Element element0 = new Element("lcuiptDtaEsczpeLsthanSin");
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pushActiveFormattingElements(element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.push((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Token.EOF token_EOF0 = new Token.EOF();
      assertNotNull(token_EOF0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Text;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_EOF0, htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Token.EOF token_EOF0 = new Token.EOF();
      assertNotNull(token_EOF0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.BeforeHtml;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_EOF0, htmlTreeBuilderState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Token.Character token_Character0 = new Token.Character();
      assertNotNull(token_Character0);
      
      Token.Character token_Character1 = token_Character0.asCharacter();
      assertSame(token_Character0, token_Character1);
      assertSame(token_Character1, token_Character0);
      assertNotNull(token_Character1);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Comment;
      token_Character1.type = token_TokenType0;
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InFrameset;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Character1, htmlTreeBuilderState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$Character cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process((Token) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose((String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose("select");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToBefore("=\"");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("hrem");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "hrem", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("hrem", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("hrem", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      htmlTreeBuilder0.popStackToClose("hrem");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("hrem");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "hrem", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("hrem", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("hrem", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Document document1 = (Document)document0.appendChild(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("hrem", document0.baseUri());
      assertEquals(1, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(2, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals("hrem", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("hrem", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.siblingIndex());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertEquals("hrem", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      // Undeclared exception!
      htmlTreeBuilder0.parseFragment("hUJm", document0, "hUJm", parser0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("tr", (Element) null, "tr", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("6nQOf$s9Nyvm", (Element) null, (String) null, parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.onStack((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.maybeSetBaseUri((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.lastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isSpecial((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isInActiveFormattingElements((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag("yh");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag("select");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("lcuiptDtaEsczpeLssthanSin", "lcuiptDtaEsczpeLssthanSin");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("lcuiptDtaEsczpeLssthanSin", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("lcuiptDtaEsczpeLssthanSin", document0.baseUri());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(document0, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      TextNode textNode0 = new TextNode("canvas");
      assertEquals("#text", textNode0.nodeName());
      assertFalse(textNode0.hasParent());
      assertEquals(0, textNode0.siblingIndex());
      assertNotNull(textNode0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent(textNode0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Parser.parseBodyFragment("cuiDtaEsczpeLsthanin", "cuiDtaEsczpeLsthanin");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("cuiDtaEsczpeLsthanin", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("cuiDtaEsczpeLsthanin", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Elements elements0 = document0.getElementsByClass("cuiDtaEsczpeLsthanin");
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("cuiDtaEsczpeLsthanin", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("cuiDtaEsczpeLsthanin", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertNotNull(elements0);
      
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("cuiDtaEsczpeLsthanin", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals("cuiDtaEsczpeLsthanin", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, elements0.size());
      assertTrue(elements0.isEmpty());
      assertEquals(0, htmlTreeBuilder0.stack.size());
      assertTrue(htmlTreeBuilder0.stack.isEmpty());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("SciptDataEscap:dLesstbanSign", "SciptDataEscap:dLesstbanSign");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("SciptDataEscap:dLesstbanSign", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("SciptDataEscap:dLesstbanSign", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm((Token.StartTag) null, true);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm(token_StartTag0, true);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty((Token.StartTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Token.StartTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Token.Comment token_Comment0 = new Token.Comment();
      assertNotNull(token_Comment0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Comment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Token.Character token_Character0 = new Token.Character();
      assertNotNull(token_Character0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      List<Node> list0 = parser0.parseFragmentInput("{#AN2E<+$n", (Element) null, "{#AN2E<+$n");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertNotNull(list0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      PipedReader pipedReader0 = new PipedReader(100);
      assertNotNull(pipedReader0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(pipedReader0, "DOCTYPE", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse((Reader) null, "Aw", (Parser) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String input must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("form");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      String[] stringArray0 = new String[1];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("\"K0XEmB8,!$", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getFromStack("^lt:,W-4vcvyZ");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getActiveFormattingElement("Kp]v)twASz<p\">!");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.generateImpliedEndTags("XB8LLQa");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTable;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.error(htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("hed", "hed");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("hed", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("hed", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertNotNull(document0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      htmlTreeBuilder0.setFosterInserts(true);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("hed", attributes0);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertEquals(0, attributes0.size());
      assertNotNull(token_StartTag1);
      
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertEquals(0, attributes0.size());
      assertTrue(element0.hasParent());
      assertEquals(2, element0.siblingIndex());
      assertEquals("hed", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("", "7;zI5");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("7;zI5", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("7;zI5", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      Token.CData token_CData0 = new Token.CData((String) null);
      assertNotNull(token_CData0);
      
      htmlTreeBuilder0.insert(token_CData0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("table");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "table", parser0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.hasParent());
      assertEquals("table", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("table", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("table");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("table", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertNotNull(element0);
      
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("table", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("table", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      StringReader stringReader0 = new StringReader("link");
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "link", parser0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("XB8LLQa");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parse(stringReader0, ")~", parser0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("X8LLQ");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X8LLQ", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("XB8LLQa");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "XB8LLQa", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Element element0 = htmlTreeBuilder0.currentElement();
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      StringReader stringReader0 = new StringReader("selekt");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "ltQ5~['", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("XB8LLQa");
      Parser parser0 = Parser.htmlParser();
      Document document0 = Parser.parseBodyFragment("XB8LLQa", "XB8LLQa");
      htmlTreeBuilder0.parse(stringReader0, "=u~P}~`", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("Unexpected characters returned for ", "Unexpected characters returned for ");
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tfyot");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "tfyot", parser0);
      htmlTreeBuilder0.generateImpliedEndTags("h1");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tXyo");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "tXyo", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("tXyo");
      assertEquals(1, element0.siblingIndex());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("tXyo");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragmentRelaxed("lcuiptDataEsczpedLssthanSign", "lcuiptDataEsczpedLssthanSign");
      Elements elements0 = document0.getElementsByClass("lcuiptDataEsczpedLssthanSign");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("lcuiptDataEsczpedLssthanSign");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("XB8LLQa");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parse(stringReader0, "XB8LLQa", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("href");
      assertEquals(1, element0.siblingIndex());
      
      String[] stringArray0 = new String[8];
      stringArray0[3] = "href";
      boolean boolean0 = htmlTreeBuilder0.inScope("T.+* T_A|&*.SH!y_", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("ktXy7");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "ktXy7", parser0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inTableScope("ktXy7");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("ktXy7");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "ktXy7", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("ktXy7");
      Element element1 = document0.createElement("ktXy7");
      htmlTreeBuilder0.insertOnStackAfter(element0, element1);
      assertEquals(1, element0.siblingIndex());
      
      boolean boolean0 = htmlTreeBuilder0.inTableScope("ktXy7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("XBqoLQa", "XBqoLQa");
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("XBqoLQa");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("tfyot", "tfyot");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.reconstructFormattingElements();
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      Tag tag0 = Tag.valueOf("html");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "tfoot", attributes0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("html", formElement0, "tfoot");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      Tag tag0 = Tag.valueOf("frameset");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "frameset", attributes0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("frameset", formElement0, "frameset");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("head");
      FormElement formElement0 = new FormElement(tag0, "head", attributes0);
      List<Node> list0 = parser0.parseFragmentInput("head", formElement0, "head");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("colgroup");
      List<Node> list0 = parser0.parseFragmentInput("selet", element0, "selet");
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("caption");
      List<Node> list0 = parser0.parseFragmentInput("caption", element0, "table");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Tag tag0 = Tag.valueOf("tfoot");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "tfoot", attributes0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("org.jsoup.examples.HtmlToPlainText$FormattingVisitor", formElement0, "org.jsoup.examples.HtmlToPlainText$FormattingVisitor");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("tbody");
      List<Node> list0 = parser0.parseFragmentInput("KHAA$`", element0, "xb8lqa");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Tag tag0 = Tag.valueOf("th");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "th", attributes0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("th", formElement0, "th");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      Tag tag0 = Tag.valueOf("td");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "td", attributes0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("td", formElement0, "6+T2yRj_(LnJ\"U;`");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("select", formElement0, "select");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("XWS&m", "ScriptDataEscapedLessthanSign");
      Elements elements0 = document0.getElementsByClass("ScriptDataEscapedLessthanSign");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("XB8LLQa");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = htmlTreeBuilder0.parse(stringReader0, ")~", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tXyo");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tXyo", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("X");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "ma", attributes0);
      parser0.parseFragmentInput("ma", formElement0, "ma");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(formElement0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("SciptDataEscap:dLesstbanSign", "SciptDataEscap:dLesstbanSign");
      htmlTreeBuilder0.clearStackToTableContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("table");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "table", parser0);
      htmlTreeBuilder0.insertStartTag("table");
      htmlTreeBuilder0.clearStackToTableContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("lcuiptDtaEsczpeLsthanSi%", "lcuiptDtaEsczpeLsthanSi%");
      Elements elements0 = document0.getElementsByClass("lcuiptDtaEsczpeLsthanSi%");
      htmlTreeBuilder0.stack = (ArrayList<Element>) elements0;
      htmlTreeBuilder0.clearStackToTableContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("q' ");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "script", parser0);
      htmlTreeBuilder0.popStackToBefore("body");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("X");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "ma", attributes0);
      parser0.parseFragmentInput("ma", formElement0, "ma");
      htmlTreeBuilder0.popStackToBefore("XfZ-UKS'x$,quC");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("table");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "table", parser0);
      htmlTreeBuilder0.insertStartTag("table");
      String[] stringArray0 = new String[2];
      stringArray0[0] = "table";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(2, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("xb8llqd");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, ";!8bw", attributes0);
      parser0.parseFragmentInput("xb8llqa", formElement0, "i`33oC=!1 W=1k_u");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "col";
      stringArray0[1] = "i`33oC=!1 W=1k_u";
      stringArray0[3] = "i`33oC=!1 W=1k_u";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      Token.Comment token_Comment0 = new Token.Comment();
      htmlTreeBuilder0.insert(token_Comment0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tXyo");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "tXyo", parser0);
      htmlTreeBuilder0.insertStartTag("tXyo");
      boolean boolean0 = htmlTreeBuilder0.processEndTag("tXyo");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("href");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "href", parser0);
      htmlTreeBuilder0.popStackToClose("href");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      StringReader stringReader0 = new StringReader("del");
      htmlTreeBuilder0.parse(stringReader0, "device", parser0);
      Element element0 = htmlTreeBuilder0.currentElement();
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
      assertTrue(boolean0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("XBqoLQa", "XBqoLQa");
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tfyot");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "tfyot", parser0);
      htmlTreeBuilder0.insertStartTag("tfyot");
      Element element0 = htmlTreeBuilder0.getFromStack("tfyot");
      assertNotNull(element0);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      Document document0 = Parser.parseBodyFragmentRelaxed("XB8LQa", "XB8LQa");
      htmlTreeBuilder0.parseFragment("XB8LQa", document0, "XB8LQa", parser0);
      htmlTreeBuilder0.insert(document0);
      Element element0 = htmlTreeBuilder0.aboveOnStack(document0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(element0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader(":");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "#BRy\"6", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("select");
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "tF", attributes0);
      parser0.parseFragmentInput("textarea", formElement0, "=Zy%)lakHF3");
      htmlTreeBuilder0.insert(formElement0);
      assertEquals(0, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      StringReader stringReader0 = new StringReader("H");
      htmlTreeBuilder0.parse(stringReader0, "section", parser0);
      htmlTreeBuilder0.insertStartTag("script");
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("head", "head");
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("head", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("hed", "hed");
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("hed", attributes0);
      token_StartTag1.selfClosing = true;
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("td", "td");
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("td", attributes0);
      token_StartTag1.selfClosing = true;
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(1, element0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("td", attributes0);
      token_StartTag1.selfClosing = true;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_StartTag1);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("XB8LLQa");
      Parser parser0 = Parser.htmlParser();
      parser0.setTrackErrors(100);
      htmlTreeBuilder0.parse(stringReader0, "XB8LLQa", parser0);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTableText;
      htmlTreeBuilder0.error(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("Gl YJ]5OI/Zm<Nnq0q<", "Gl YJ]5OI/Zm<Nnq0q<");
      htmlTreeBuilder0.maybeSetBaseUri(document0);
      assertEquals("Gl YJ]5OI/Zm<Nnq0q<", document0.location());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      Tag tag0 = Tag.valueOf("plaintext");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "plaintext", attributes0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("plaintext", formElement0, "plaintext");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      Tag tag0 = Tag.valueOf("noscript");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "#root", attributes0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("#root", formElement0, "noscript");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      Tag tag0 = Tag.valueOf("script");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "script", attributes0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("script", formElement0, "script");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      Tag tag0 = Tag.valueOf("xmp");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "tlble", attributes0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("xmp", formElement0, "tlble");
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inTableScope("ktXy7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      Tag tag0 = Tag.valueOf("table");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "table", attributes0);
      Parser parser0 = Parser.htmlParser();
      List<Node> list0 = parser0.parseFragmentInput("v<?JMy~Nh", formElement0, "v<?JMy~Nh");
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      StringReader stringReader0 = new StringReader("del");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "device", parser0);
      htmlTreeBuilder0.isSpecial(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setFosterInserts(true);
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("yh");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "yh", parser0);
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(document0);
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("6%$So;Ei");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.getDocument();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[8];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableRowContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.generateImpliedEndTags();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inListItemScope("tfyot");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableBodyContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("XB8LLQa");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parse(stringReader0, "tbody", parser0);
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      ParseErrorList parseErrorList0 = parser0.getErrors();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("DoctypeSystemIdentifier_singleQuoted", attributes0);
      htmlTreeBuilder0.insertForm(token_StartTag0, true);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, true);
      assertEquals(0, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      StringReader stringReader0 = new StringReader("del");
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "device", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inButtonScope("XBqoLQa");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }
}
