/*
 * This file was automatically generated by EvoSuite
 * Tue Nov 17 02:33:26 GMT 2020
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.nodes.PseudoTextElement;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.HtmlTreeBuilderState;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN-", "/sN-");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("/sN-", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/sN-", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("/sN-", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/sN-", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("/sN-", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/sN-", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("/sN-");
      assertNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("![NyY", "![NyY");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("![NyY", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("![NyY", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("![NyY", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("![NyY", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("![NyY", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("![NyY", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("![NyY", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("![NyY", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tag tag0 = Tag.valueOf("ul");
      assertNotNull(tag0);
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("ul", tag0.toString());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "ul", attributes0);
      assertNotNull(formElement0);
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("ul", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals("ul", formElement0.baseUri());
      assertTrue(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("ul", formElement0, "FU%sX8nCOGrz}t", parser0);
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("ul", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals("ul", formElement0.baseUri());
      assertTrue(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      FormElement formElement1 = new FormElement(tag0, "FU%sX8nCOGrz}t", attributes0);
      assertNotNull(formElement1);
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("ul", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement1.siblingIndex());
      assertTrue(formElement1.isBlock());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("FU%sX8nCOGrz}t", formElement1.baseUri());
      assertFalse(formElement1.equals((Object)formElement0));
      
      htmlTreeBuilder0.pushActiveFormattingElements(formElement1);
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("ul", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement1.siblingIndex());
      assertTrue(formElement1.isBlock());
      assertFalse(formElement1.hasParent());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals("FU%sX8nCOGrz}t", formElement1.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(formElement1, formElement0);
      assertFalse(formElement1.equals((Object)formElement0));
      
      htmlTreeBuilder0.pushActiveFormattingElements(formElement0);
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isData());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("ul", tag0.toString());
      assertEquals(0, attributes0.size());
      assertEquals("ul", formElement0.baseUri());
      assertTrue(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(formElement0, formElement1);
      assertFalse(formElement0.equals((Object)formElement1));
      
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("N7", "N7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("N7", document0.baseUri());
      assertEquals("N7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("N7", document0.baseUri());
      assertEquals("N7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("N7", document0.baseUri());
      assertEquals("N7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document1 = (Document)htmlTreeBuilder0.removeLastFormattingElement();
      assertNotNull(document1);
      assertEquals("#document", document1.nodeName());
      assertEquals("N7", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.isBlock());
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("N7", document1.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "DoctypeSystemIdentifier_singleQuoted");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = document0.body();
      assertNotNull(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.insertOnStackAfter(element0, document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "DoctypeSystemIdentifier_singleQuoted");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.insert(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.baseUri());
      assertFalse(document0.isBlock());
      assertTrue(document0.hasParent());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("oiBjc*0n3\"wdE");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      htmlTreeBuilder0.initialiseParse(stringReader0, "oiBjc*0n3\"wdE", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("yavvNg", "yavvNg");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("yavvNg", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yavvNg", document0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InRow;
      htmlTreeBuilder0.error(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterFrameset;
      htmlTreeBuilder0.transition(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.setHeadElement((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/sN7", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("/sN7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.Tag token_Tag0 = token_StartTag0.name("title");
      assertNotNull(token_Tag0);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_Tag0, token_StartTag0);
      
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, false);
      assertNotNull(formElement0);
      assertEquals(1, formElement0.siblingIndex());
      assertTrue(formElement0.hasParent());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("/sN7", formElement0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_Tag0);
      
      htmlTreeBuilder0.setFormElement(formElement0);
      assertEquals(1, formElement0.siblingIndex());
      assertTrue(formElement0.hasParent());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("/sN7", formElement0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_Tag0);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.newPendingTableCharacters();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.generateImpliedEndTags();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/sN7", document0.location());
      assertEquals("/sN7", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.replaceActiveFormattingElement((Element) null, document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/sN7", document0.location());
      assertEquals("/sN7", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "DoctypeSystemIdentifier_singleQuoted");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearStackToTableContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "DoctypeSystemIdentifier_singleQuoted");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearStackToTableBodyContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/sN7", document0.location());
      assertEquals("/sN7", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = htmlTreeBuilder0.toString();
      assertNotNull(string0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/sN7", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/sN7", document0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.state();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("/sN7", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/sN7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.currentElement();
      assertNotNull(element0);
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("/sN7", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("/sN7", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNotNull(element1);
      assertEquals("/sN7", element1.baseUri());
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/sN7", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/sN7", document0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("/sN7");
      assertNotNull(element0);
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("/sN7", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("/sN7", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNotNull(element1);
      assertTrue(element1.hasParent());
      assertEquals("/sN7", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("pre", "h5");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("h5", document0.baseUri());
      assertEquals("h5", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.currentElement();
      assertNotNull(element0);
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("h5", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("h5", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "OOW9|f_?i;=o0Q*.9%");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("OOW9|f_?i;=o0Q*.9%", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("OOW9|f_?i;=o0Q*.9%", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      assertNotNull(tokeniser0);
      
      Token token0 = tokeniser0.read();
      assertNotNull(token0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InCaption;
      boolean boolean0 = htmlTreeBuilder0.process(token0, htmlTreeBuilderState0);
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("/sN7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/sN7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterHead;
      boolean boolean0 = htmlTreeBuilder0.process(token_EndTag0, htmlTreeBuilderState0);
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("/sN7", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("/sN7", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertNotNull(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      
      boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("section", "l");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("l", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("l", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.push(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("l", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals("l", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document1 = (Document)htmlTreeBuilder0.pop();
      assertNotNull(document1);
      assertEquals("l", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("l", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "DoctypeSystemIdentifier_singleQuoted");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.pop();
      assertNotNull(element0);
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", element0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.originalState();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("/sN7", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/sN7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.Tag token_Tag0 = token_StartTag0.name("title");
      assertNotNull(token_Tag0);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_Tag0, token_StartTag0);
      
      boolean boolean0 = htmlTreeBuilder0.process(token_Tag0);
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_Tag0, token_StartTag0);
      
      htmlTreeBuilder0.originalState();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "DoctypeSystemIdentifier_singleQuoted");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("base");
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.onStack(element0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "DoctypeSystemIdentifier_singleQuoted");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.onStack(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "h4");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("h4", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("h4", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      CDataNode cDataNode0 = new CDataNode("section");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      Tag tag0 = Tag.valueOf("section");
      assertNotNull(tag0);
      assertEquals("section", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      
      FormElement formElement0 = new FormElement(tag0, "section", attributes0);
      assertNotNull(formElement0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("section", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertFalse(formElement0.hasParent());
      assertTrue(formElement0.isBlock());
      assertEquals("section", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      
      List<Node> list0 = parser0.parseFragmentInput("section", formElement0, ":containsData");
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("section", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertFalse(formElement0.hasParent());
      assertTrue(formElement0.isBlock());
      assertEquals("section", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(formElement0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("section", tag0.toString());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isInline());
      assertTrue(tag0.isBlock());
      assertFalse(formElement0.hasParent());
      assertTrue(formElement0.isBlock());
      assertEquals("section", formElement0.baseUri());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertNotNull(element0);
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals("section", element0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(element0, formElement0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/sN7", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/sN7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("/sN7");
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("/sN7", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("/sN7", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element1 = htmlTreeBuilder0.lastFormattingElement();
      assertNotNull(element1);
      assertEquals(0, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("/sN7", element1.baseUri());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      CDataNode cDataNode0 = new CDataNode("textarea");
      assertNotNull(cDataNode0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      Tag tag0 = Tag.valueOf("h4");
      assertNotNull(tag0);
      assertFalse(tag0.isInline());
      assertEquals("h4", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      assertNotNull(formElement0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isInline());
      assertEquals("h4", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      
      boolean boolean0 = htmlTreeBuilder0.isSpecial(formElement0);
      assertEquals(0, cDataNode0.siblingIndex());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertFalse(tag0.isInline());
      assertEquals("h4", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertTrue(tag0.isKnownTag());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertEquals("textarea", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tag tag0 = Tag.valueOf("]~s\"|T9");
      assertNotNull(tag0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("]~s\"|T9", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      PseudoTextElement pseudoTextElement0 = new PseudoTextElement(tag0, "", attributes0);
      assertNotNull(pseudoTextElement0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("]~s\"|T9", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.isBlock());
      
      boolean boolean0 = htmlTreeBuilder0.isSpecial(pseudoTextElement0);
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.formatAsBlock());
      assertEquals("]~s\"|T9", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertEquals(0, attributes0.size());
      assertEquals(0, pseudoTextElement0.siblingIndex());
      assertEquals(0, pseudoTextElement0.childNodeSize());
      assertFalse(pseudoTextElement0.hasParent());
      assertEquals("", pseudoTextElement0.baseUri());
      assertFalse(pseudoTextElement0.isBlock());
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Tag tag0 = Tag.valueOf("select");
      assertNotNull(tag0);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("select", tag0.toString());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      assertNotNull(formElement0);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("select", tag0.toString());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("select", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment(":containsOwn", formElement0, "ul", parser0);
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("select", tag0.toString());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("select", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(formElement0);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("select", tag0.toString());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("select", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(formElement0);
      assertTrue(tag0.isInline());
      assertFalse(tag0.isBlock());
      assertTrue(tag0.isFormSubmittable());
      assertFalse(tag0.canContainBlock());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isData());
      assertFalse(tag0.preserveWhitespace());
      assertEquals("select", tag0.toString());
      assertTrue(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("select", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/sN7", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/sN7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/sN7", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/sN7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("/sN7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("/sN7", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document1 = (Document)document0.prepend("/sN7");
      assertNotNull(document1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("/sN7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("/sN7", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(2, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("/sN7", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("/sN7", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document0, document1);
      assertSame(document1, document0);
      
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("Data collection must not be null", ".LbH8w|o$srfqxjTcH");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(".LbH8w|o$srfqxjTcH", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(".LbH8w|o$srfqxjTcH", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.Tag token_Tag0 = token_StartTag0.name("title");
      assertNotNull(token_Tag0);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_Tag0, token_StartTag0);
      
      boolean boolean0 = htmlTreeBuilder0.process(token_StartTag0);
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_Tag0);
      
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, false);
      assertNotNull(formElement0);
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(formElement0.hasParent());
      assertEquals(".LbH8w|o$srfqxjTcH", formElement0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_Tag0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/sN7", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("/sN7", document0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("me");
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals("/sN7", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr(", currentElement=", (Attributes) null);
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Element element1 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertNotNull(element1);
      assertFalse(element1.isBlock());
      assertEquals("/sN7", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(0, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/sN7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/sN7", document0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = (Token.StartTag)token_StartTag0.name("title");
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertNotNull(element0);
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals("/sN7", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/sN7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/sN7", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = (Token.StartTag)token_StartTag0.name("title");
      assertNotNull(token_StartTag1);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      boolean boolean0 = htmlTreeBuilder0.process(token_StartTag1);
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      assertNotNull(element0);
      assertTrue(element0.isBlock());
      assertEquals("/sN7", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "DoctypeSystemIdentifier_singleQuoted");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("/sN7", attributes0);
      assertNotNull(token_StartTag1);
      assertEquals(0, attributes0.size());
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      assertNotNull(element0);
      assertEquals(0, attributes0.size());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", element0.baseUri());
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/sN7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/sN7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.Tag token_Tag0 = token_StartTag0.name("title");
      assertNotNull(token_Tag0);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_Tag0, token_StartTag0);
      
      boolean boolean0 = htmlTreeBuilder0.process(token_Tag0);
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_Tag0, token_StartTag0);
      
      boolean boolean1 = htmlTreeBuilder0.inTableScope("title");
      assertTrue(boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/sN7", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("/sN7", document0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.processStartTag("fwlm");
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String[] stringArray0 = new String[5];
      stringArray0[2] = "fwlm";
      boolean boolean1 = htmlTreeBuilder0.inScope(stringArray0);
      assertEquals(5, stringArray0.length);
      assertTrue(boolean1);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean1 == boolean0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "DoctypeSystemIdentifier_singleQuoted");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("k7", "k7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("k7", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("k7", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "k7";
      stringArray0[1] = "html";
      stringArray0[4] = "html";
      boolean boolean0 = htmlTreeBuilder0.inScope("html", stringArray0);
      assertEquals(9, stringArray0.length);
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "DoctypSystemIdentifier_singleQuoted");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("DoctypSystemIdentifier_singleQuoted", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("DoctypSystemIdentifier_singleQuoted", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = htmlTreeBuilder0.inScope("1[+V\u0006O=<%1zM&]5", stringArray0);
      assertEquals(0, stringArray0.length);
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/sN7", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("/sN7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.inScope("body");
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("section", "l");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("l", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("l", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("section");
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals("l", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("section");
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("/sN7", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/sN7", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("/sN7");
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("textarea", "textarea");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("textarea", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("textarea");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertTrue(element0.hasParent());
      assertEquals("textarea", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("textarea");
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/tsN7", "/tsN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("/tsN7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/tsN7", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("/tsN7");
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertNull(arrayList0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/sN7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/sN7", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToBefore(":first-child");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertNotNull(arrayList0);
      assertEquals(0, arrayList0.size());
      assertTrue(arrayList0.isEmpty());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.xmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      Parser parser1 = parser0.setTreeBuilder(htmlTreeBuilder0);
      assertNotNull(parser1);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      Document document0 = parser1.parseInput("N$gKI0", ":b(]2+MU6`m");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(parser1.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(":b(]2+MU6`m", document0.location());
      assertEquals(":b(]2+MU6`m", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(parser0, parser1);
      assertSame(parser1, parser0);
      
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertNotNull(arrayList0);
      assertEquals(2, arrayList0.size());
      assertFalse(arrayList0.isEmpty());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNull(list0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tag tag0 = Tag.valueOf("me");
      assertNotNull(tag0);
      assertFalse(tag0.canContainBlock());
      assertEquals("me", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "me", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.canContainBlock());
      assertEquals("me", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals(0, attributes0.size());
      assertEquals("me", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("textarea", formElement0, "<html><head></head><body>uP</body></html>", parser0);
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(tag0.canContainBlock());
      assertEquals("me", tag0.toString());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormSubmittable());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isData());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isFormListed());
      assertEquals(0, attributes0.size());
      assertEquals("me", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.isBlock());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      List<String> list1 = htmlTreeBuilder0.getPendingTableCharacters();
      assertNotNull(list1);
      assertFalse(list1.contains("textarea"));
      assertEquals(0, list1.size());
      assertTrue(list1.isEmpty());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tag tag0 = Tag.valueOf("ul");
      assertNotNull(tag0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("ul", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      
      Attributes attributes0 = new Attributes();
      assertNotNull(attributes0);
      assertEquals(0, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "ul", attributes0);
      assertNotNull(formElement0);
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("ul", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals("ul", formElement0.baseUri());
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("ul", formElement0, "FU%sX8nCOGrz}t", parser0);
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertEquals("ul", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.isBlock());
      assertTrue(tag0.isKnownTag());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isData());
      assertTrue(tag0.canContainBlock());
      assertFalse(tag0.isInline());
      assertFalse(tag0.isFormSubmittable());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(formElement0.isBlock());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.hasParent());
      assertEquals("ul", formElement0.baseUri());
      assertEquals(1, list0.size());
      assertFalse(list0.isEmpty());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      FormElement formElement1 = htmlTreeBuilder0.getFormElement();
      assertNotNull(formElement1);
      assertFalse(formElement1.hasParent());
      assertTrue(formElement1.isBlock());
      assertEquals("ul", formElement1.baseUri());
      assertEquals(0, formElement1.childNodeSize());
      assertEquals(0, formElement1.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(formElement1, formElement0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("#root", "#root");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertTrue(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#root", document0.location());
      assertEquals(2, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#root", document1.location());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertTrue(document1.hasParent());
      assertEquals(2, document1.siblingIndex());
      assertEquals("#root", document1.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("#root", "#root");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("#root", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#root", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertNotNull(document1);
      assertEquals(1, document1.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertFalse(document1.isBlock());
      assertEquals("#root", document1.baseUri());
      assertEquals(0, document1.siblingIndex());
      assertEquals("#root", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/sN7", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/sN7", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNotNull(string0);
      assertEquals("/sN7", string0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tag tag0 = Tag.valueOf("#root");
      assertNotNull(tag0);
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      
      CDataNode cDataNode0 = new CDataNode("#root");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "p~AYS@uRBtJV?", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("p~AYS@uRBtJV?", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("style", formElement0, "", parser0);
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(tag0.isBlock());
      assertEquals("#root", tag0.toString());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertFalse(tag0.isKnownTag());
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals("p~AYS@uRBtJV?", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNotNull(string0);
      assertEquals("", string0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("tn89'PYckt&GVU,", "Cookie name must not be empty");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("Cookie name must not be empty", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Cookie name must not be empty", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("td");
      assertNotNull(element0);
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Cookie name must not be empty", element0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("Cookie name must not be empty", element0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("td");
      assertNotNull(element1);
      assertTrue(element1.hasParent());
      assertEquals(1, element1.siblingIndex());
      assertTrue(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("Cookie name must not be empty", element1.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN-", "/sN-");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/sN-", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/sN-", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = new Element("/sN-");
      assertNotNull(element0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(0, element0.childNodeSize());
      assertEquals("", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("/sN-");
      assertNotNull(element1);
      assertFalse(element1.isBlock());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals("", element1.baseUri());
      assertEquals(0, element1.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(element1, element0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.framesetOk(true);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      assertNotNull(parseSettings0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("/sN7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/sN7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.Tag token_Tag0 = token_StartTag0.name("/sN7");
      assertNotNull(token_Tag0);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_Tag0, token_StartTag0);
      
      boolean boolean0 = htmlTreeBuilder0.process(token_Tag0);
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_Tag0, token_StartTag0);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("cb8vjpXM&V");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertEquals("/sN7", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertFalse(element0.isBlock());
      assertEquals("/sN7", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("/sN7", element1.baseUri());
      assertEquals(1, element1.siblingIndex());
      assertEquals(1, element1.childNodeSize());
      assertTrue(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(element0, element1);
      assertNotSame(element1, element0);
      assertFalse(element1.equals((Object)element0));
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.resetInsertionMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeLastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = new Document("div");
      assertNotNull(document0);
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("div", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("div", document0.location());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromStack(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.reconstructFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = Parser.parse("U", "U");
      assertNotNull(document0);
      assertEquals("U", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("U", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.push((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      StringReader stringReader0 = new StringReader("m?f");
      assertNotNull(stringReader0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertNotNull(characterReader0);
      assertEquals(0, characterReader0.pos());
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ParseErrorList parseErrorList0 = parser0.getErrors();
      assertNotNull(parseErrorList0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertNotNull(tokeniser0);
      assertEquals(0, characterReader0.pos());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token token0 = tokeniser0.read();
      assertNotNull(token0);
      assertEquals(3, characterReader0.pos());
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.BeforeHtml;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token0, htmlTreeBuilderState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.Character token_Character0 = new Token.Character();
      assertNotNull(token_Character0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("$/N", "$/N");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("$/N", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("$/N", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.Tag token_Tag0 = token_StartTag0.name((String) null);
      assertNotNull(token_Tag0);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_Tag0, token_StartTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/sN7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/sN7", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Token.Tag token_Tag0 = token_StartTag0.name("title");
      assertNotNull(token_Tag0);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_Tag0, token_StartTag0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.Comment;
      token_Tag0.type = token_TokenType0;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Tag0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$StartTag cannot be cast to org.jsoup.parser.Token$Comment
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String[] stringArray0 = new String[2];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose("[K.i$$oLD");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToBefore("#doctype");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("yavvNg", "yavvNg");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("yavvNg", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("yavvNg", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToBefore("fwlm");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("tbody", "@?tkKjj[ 2~memN!gyT5");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("@?tkKjj[ 2~memN!gyT5", document0.location());
      assertEquals("@?tkKjj[ 2~memN!gyT5", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertFalse(parser0.isTrackErrors());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(2, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("@?tkKjj[ 2~memN!gyT5", document0.location());
      assertEquals("@?tkKjj[ 2~memN!gyT5", document0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      htmlTreeBuilder0.parseFragment("tbody", document0, "tbody", parser0);
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = Parser.parse("U", "U");
      assertNotNull(document0);
      assertEquals(1, document0.childNodeSize());
      assertEquals("U", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("U", document0.location());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("U", document0, "U", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("*h6IxX]dV-s#el", (Element) null, (String) null, parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = Parser.parseBodyFragment("aside", "tm3G?m,");
      assertNotNull(document0);
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tm3G?m,", document0.location());
      assertEquals("tm3G?m,", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.onStack(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.maybeSetBaseUri((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.lastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isSpecial((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag("2.euC-QrAn9ka\u0006l0f");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag("section");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = new Document("m`4P'S/&Lp9cvHR0PX/");
      assertNotNull(document0);
      assertEquals("m`4P'S/&Lp9cvHR0PX/", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("m`4P'S/&Lp9cvHR0PX/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(document0, document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = Parser.parse("U", "U");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertEquals("U", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("U", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/sN7", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/sN7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm((Token.StartTag) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm(token_StartTag0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty((Token.StartTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Token.StartTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.Character token_Character0 = new Token.Character();
      assertNotNull(token_Character0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = Parser.parse("caption", "caption");
      assertNotNull(document0);
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("caption", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("caption", document0.baseUri());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("`&flXt3&_ bzuBZRg|", (Element) null, "8JlW3G(o-:$!+", parser0);
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      PipedReader pipedReader0 = new PipedReader();
      assertNotNull(pipedReader0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(pipedReader0, "", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = Parser.htmlParser();
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse((Reader) null, "fwlm", parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // String input must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("4H+96");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("select", (String[]) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("Unexpected token [%s] when in state [%s]");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getFromStack("thead");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getActiveFormattingElement("9M4`~b+z");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.generateImpliedEndTags("/sN7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InSelectInTable;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.error(htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = new Document(")q_pU}ip]ZPBw^XH:zV");
      assertNotNull(document0);
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(")q_pU}ip]ZPBw^XH:zV", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(")q_pU}ip]ZPBw^XH:zV", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/sN7", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/sN7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/sN7", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("/sN7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document1 = (Document)htmlTreeBuilder0.lastFormattingElement();
      assertNotNull(document1);
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.hasParent());
      assertEquals("/sN7", document1.baseUri());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("/sN7", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(1, document1.childNodeSize());
      assertEquals("#document", document1.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/sN7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/sN7", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("/sN7");
      assertNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/tsN7", "/tsN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("/tsN7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/tsN7", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("/tsN7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/tsN7", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "DoctypeSystemIdentifier_singleQuoted");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.baseUri());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("/sN7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/sN7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals("/sN7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/sN7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/tsN7", "/tsN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/tsN7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("/tsN7", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/tsN7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("/tsN7", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.processStartTag("/tsN7");
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals("/tsN7", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("/tsN7", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("section", "colgroup");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("colgroup", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("colgroup", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("(Q1}p QkpV");
      assertNotNull(element0);
      assertFalse(element0.isBlock());
      assertEquals("colgroup", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertFalse(element0.isBlock());
      assertEquals("colgroup", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/tsN7", "/tsN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/tsN7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/tsN7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/tsN7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/tsN7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/tsN7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/tsN7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/tsN7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/tsN7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/tsN7", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("/tsN7", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/sN7", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("/sN7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("/sN7");
      assertNotNull(element0);
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("/sN7", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals("/sN7", element0.baseUri());
      assertFalse(element0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/sN7", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals("/sN7", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("N7", "N7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("N7", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("N7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements((Element) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("N7", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals("N7", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.processStartTag("N7");
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "DoctypeSystemIdentifier_singleQuoted");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.location());
      assertEquals("DoctypeSystemIdentifier_singleQuoted", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("/sN7", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("/sN7", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.generateImpliedEndTags("N$gKI0");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Tag tag0 = Tag.valueOf("tm3G?m,");
      assertNotNull(tag0);
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertEquals("tm3G?m,", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      
      CDataNode cDataNode0 = new CDataNode("html");
      assertNotNull(cDataNode0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      
      Attributes attributes0 = cDataNode0.attributes();
      assertNotNull(attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      
      FormElement formElement0 = new FormElement(tag0, "tm3G?m,", attributes0);
      assertNotNull(formElement0);
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertEquals("tm3G?m,", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("tm3G?m,", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("fLKre", formElement0, "av", parser0);
      assertNotNull(list0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(tag0.isData());
      assertTrue(tag0.isInline());
      assertFalse(tag0.isKnownTag());
      assertFalse(tag0.isBlock());
      assertEquals("tm3G?m,", tag0.toString());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.isEmpty());
      assertTrue(tag0.formatAsBlock());
      assertFalse(tag0.canContainBlock());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(1, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertFalse(formElement0.hasParent());
      assertFalse(formElement0.isBlock());
      assertEquals("tm3G?m,", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("html");
      assertTrue(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("textarea", "textarea");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("textarea", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("textarea", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope((String) null);
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/sN7", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("/sN7", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToBefore("base");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("R/pgwzwE]Ko");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "h4");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("h4", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("h4", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.inTableScope("/sN7");
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertNotNull(htmlTreeBuilder0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertNotNull(parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      assertNotNull(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("/sN7", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("/sN7", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.popStackToClose("fwlm");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.inScope("       ");
      assertFalse(boolean0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("/sN7", "/sN7");
      htmlTreeBuilder0.insertStartTag("/sN7");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("html");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "table", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("q$O~aiJet5X CLF", formElement0, "q$O~aiJet5X CLF", parser0);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("frameset");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "Sb-'.`[", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("&XJwZWnU~.Tr&iOFXNY", formElement0, "systemId", parser0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("/sN7", "DoctypeSystemIdentifier_singleQuoted");
      Element element0 = htmlTreeBuilder0.getHeadElement();
      List<Node> list0 = htmlTreeBuilder0.parseFragment("html", element0, "/sN7", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      Tag tag0 = Tag.valueOf("table");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "table", attributes0);
      formElement0.prepend("PUBLIC");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("colgroup");
      FormElement formElement0 = new FormElement(tag0, "colgroup", attributes0);
      Element element0 = formElement0.prepend("fwlm");
      assertEquals(0, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("caption");
      CDataNode cDataNode0 = new CDataNode("caption");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "/sN7", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("html", formElement0, "caption", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      Tag tag0 = Tag.valueOf("tbody");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "me", attributes0);
      formElement0.prepend("tbody");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Element element0 = new Element("tr");
      List<Node> list0 = htmlTreeBuilder0.parseFragment(" -M", element0, "/8fpep8p", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      Tag tag0 = Tag.valueOf("th");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "tt", attributes0);
      formElement0.prepend("th");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      CDataNode cDataNode0 = new CDataNode("aNp*9#*DIF\"hEo");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("td");
      FormElement formElement0 = new FormElement(tag0, "ob?%a+AEb:l$'H", attributes0);
      ParseErrorList parseErrorList0 = parser0.getErrors();
      List<Node> list0 = Parser.parseFragment("tm3G?m,", (Element) formElement0, "D$-bd&]C<PL[", parseErrorList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.htmlParser();
      Tag tag0 = Tag.valueOf("select");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "select", attributes0);
      htmlTreeBuilder0.parseFragment(":containsOwn", formElement0, "ul", parser0);
      FormElement formElement1 = htmlTreeBuilder0.getFormElement();
      assertFalse(formElement1.hasParent());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("/sN7", "/sN7");
      htmlTreeBuilder0.popStackToClose("fwlm");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("section", "J&Gn\"\u0007fsS6");
      Element element0 = htmlTreeBuilder0.currentElement();
      htmlTreeBuilder0.replaceOnStack(element0, document0);
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("encoding", "encoding");
      htmlTreeBuilder0.insertStartTag("tr");
      htmlTreeBuilder0.clearStackToTableRowContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("/sN7", "DoctypeSystemIdentifier_singleQuoted");
      document0.prepend("form");
      htmlTreeBuilder0.pop();
      htmlTreeBuilder0.clearStackToTableRowContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("/sN7", "/sN7");
      htmlTreeBuilder0.popStackToBefore("body");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      htmlTreeBuilder0.popStackToBefore("/sN7");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("comment", "comment");
      htmlTreeBuilder0.insertStartTag("/sn7");
      String[] stringArray0 = new String[7];
      stringArray0[0] = "/sn7";
      stringArray0[1] = "tr";
      stringArray0[3] = "comment";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(7, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("/sN7", "DoctypeSystemIdentifier_singleQuoted");
      String[] stringArray0 = new String[0];
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("/sN7", "/sN7");
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("tm3G?m,");
      CDataNode cDataNode0 = new CDataNode("html");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "tm3G?m,", attributes0);
      htmlTreeBuilder0.parseFragment("figure", formElement0, "b5", parser0);
      Element element0 = htmlTreeBuilder0.getFromStack("html");
      assertNotNull(element0);
      assertEquals(1, element0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("/sN7", "/sN7");
      Element element0 = htmlTreeBuilder0.getFromStack("/sN7");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Tag tag0 = Tag.valueOf("'%xSB`QF)Ra");
      FormElement formElement0 = new FormElement(tag0, "me", (Attributes) null);
      htmlTreeBuilder0.parseFragment("me", formElement0, "B!H&dWy{C7", parser0);
      Element element0 = htmlTreeBuilder0.insertStartTag("j1;B'OK;W`\u0004$sG");
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertEquals(0, element1.siblingIndex());
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("/sN7", "OOW9|f_?i;=o0Q*.9%");
      Token.Comment token_Comment0 = new Token.Comment();
      htmlTreeBuilder0.insert(token_Comment0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("/sN7", "/sN7");
      htmlTreeBuilder0.insertStartTag("style");
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("/sN7", "/sN7");
      Token.CData token_CData0 = new Token.CData("noframes");
      boolean boolean0 = htmlTreeBuilder0.process(token_CData0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("/sN7", "/sN7");
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      Token.Tag token_Tag0 = token_StartTag0.name("/sN7");
      boolean boolean0 = htmlTreeBuilder0.process(token_Tag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("/sN-", "/sN-");
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      Token.Tag token_Tag0 = token_StartTag0.name("title");
      boolean boolean0 = htmlTreeBuilder0.process(token_Tag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      CDataNode cDataNode0 = new CDataNode("tfoot");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("tfoot");
      FormElement formElement0 = new FormElement(tag0, "tm3G?m,", attributes0);
      parser0.setTrackErrors(831);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("p~AYS@uRBtJV?", formElement0, "p~AYS@uRBtJV?", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("/sN7", "DoctypSystemIdentifier_singleQuoted");
      htmlTreeBuilder0.maybeSetBaseUri(document0);
      assertEquals("DoctypSystemIdentifier_singleQuoted", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      Tag tag0 = Tag.valueOf("plaintext");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "!S*rH", attributes0);
      formElement0.prepend("h6");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("noscript", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "noscript", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("CM<4Y", formElement0, "object", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("script", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "script", attributes0);
      formElement0.prepend("script");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      CDataNode cDataNode0 = new CDataNode("style");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("style");
      FormElement formElement0 = new FormElement(tag0, "p~AYS@uRBtJV?", attributes0);
      List<Node> list0 = htmlTreeBuilder0.parseFragment("}km%*]%-Z,_zO", formElement0, "}km%*]%-Z,_zO", parser0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      CDataNode cDataNode0 = new CDataNode("textarea");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "textarea", attributes0);
      formElement0.prepend("textarea");
      assertEquals(1, formElement0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parseFragment("afv", (Element) null, "afv", parser0);
      Element element0 = htmlTreeBuilder0.getFromStack("html");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(element0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inTableScope("k7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.Comment token_Comment0 = new Token.Comment();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Comment0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setFosterInserts(false);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("section", "li");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("<html><head></head><body>uP</body></html>", "#document");
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isInActiveFormattingElements((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.getDocument();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.state();
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableRowContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("isindex", "title");
      boolean boolean0 = htmlTreeBuilder0.processStartTag("isindex");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      CDataNode cDataNode0 = new CDataNode("STOP");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("thead");
      FormElement formElement0 = new FormElement(tag0, "script", attributes0);
      ParseErrorList parseErrorList0 = parser0.getErrors();
      List<Node> list0 = Parser.parseFragment("script", (Element) formElement0, "STOP", parseErrorList0);
      assertEquals(1, list0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.EndTag token_EndTag0 = new Token.EndTag();
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterHead;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_EndTag0, htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inListItemScope("/sN7");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableBodyContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("/sN7", "DoctypeSystemIdentifier_singleQuoted");
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Attributes attributes0 = new Attributes();
      token_StartTag0.nameAttr("input", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag0, false);
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = parser0.parseInput("/sN7", "DoctypeSystemIdentifier_singleQuoted");
      CDataNode cDataNode0 = new CDataNode("DoctypeSystemIdentifier_singleQuoted");
      Attributes attributes0 = cDataNode0.attributes();
      Tag tag0 = Tag.valueOf("/sN7");
      FormElement formElement0 = new FormElement(tag0, "#!$L?VS*9\"", attributes0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(document0, formElement0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inButtonScope("textarea");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Parser parser0 = new Parser(htmlTreeBuilder0);
      parser0.parseInput("textarea", "textarea");
      htmlTreeBuilder0.insertStartTag("textarea");
      htmlTreeBuilder0.getFromStack("textarea");
  }
}
