/*
 * This file was automatically generated by EvoSuite
 * Sun Jan 31 23:16:04 GMT 2021
 */

package org.jsoup.parser;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import java.io.PipedReader;
import java.io.PipedWriter;
import java.io.Reader;
import java.io.StringReader;
import java.util.ArrayList;
import java.util.List;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.jsoup.nodes.Attributes;
import org.jsoup.nodes.CDataNode;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;
import org.jsoup.nodes.FormElement;
import org.jsoup.nodes.Node;
import org.jsoup.parser.CharacterReader;
import org.jsoup.parser.HtmlTreeBuilder;
import org.jsoup.parser.HtmlTreeBuilderState;
import org.jsoup.parser.ParseErrorList;
import org.jsoup.parser.ParseSettings;
import org.jsoup.parser.Parser;
import org.jsoup.parser.Tag;
import org.jsoup.parser.Token;
import org.jsoup.parser.Tokeniser;
import org.jsoup.parser.XmlTreeBuilder;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true) 
public class HtmlTreeBuilder_ESTest extends HtmlTreeBuilder_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test000()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      assertNotNull(xmlTreeBuilder0);
      
      Document document0 = xmlTreeBuilder0.parse("select", "Split offset must not be greater than current text length");
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("Split offset must not be greater than current text length", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("Split offset must not be greater than current text length", document0.location());
      assertNotNull(document0);
      
      Element element0 = new Element("select");
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals("", element0.baseUri());
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(document0, element0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test001()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("nosipt");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "nosipt", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("nosipt", document0.location());
      assertEquals("nosipt", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("nosipt", document0.location());
      assertEquals("nosipt", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("nosipt", document0.location());
      assertEquals("nosipt", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("nosipt");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test002()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("X:[0M)1N7/", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("X:[0M)1N7/", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("X:[0M)1N7/", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test003()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("$oQl]Mb");
      assertNotNull(stringReader0);
      
      Parser parser0 = new Parser(htmlTreeBuilder0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "KD9<*b\" ", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("KD9<*b\" ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("KD9<*b\" ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Document document1 = parser0.parseInput((Reader) stringReader0, "K(@,4");
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals("K(@,4", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("K(@,4", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(document0.equals((Object)document1));
      assertFalse(parser0.isTrackErrors());
      assertEquals("KD9<*b\" ", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("KD9<*b\" ", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document0, document1);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals("K(@,4", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals("K(@,4", document1.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document1, document0);
      
      Token.CData token_CData0 = new Token.CData("^f;H#I0LAN3l=[");
      assertNotNull(token_CData0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InBody;
      boolean boolean0 = htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test004()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("X:[0M)1N7/", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("X:[0M)1N7/", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals("X:[0M)1N7/", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document1 = (Document)htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals(0, document1.siblingIndex());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("#document", document1.nodeName());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("X:[0M)1N7/", document1.location());
      assertFalse(document1.hasParent());
      assertEquals("X:[0M)1N7/", document1.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test005()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("XiS:[0MN7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "XiS:[0MN7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("XiS:[0MN7/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("XiS:[0MN7/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("XiS:[0MN7/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("XiS:[0MN7/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("XiS:[0MN7/", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(element0);
      
      htmlTreeBuilder0.push(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("XiS:[0MN7/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("XiS:[0MN7/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.insertOnStackAfter(document0, element0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("XiS:[0MN7/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("XiS:[0MN7/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("XiS:[0MN7/", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test006()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X:[0M)1N7/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Element element0 = document0.shallowClone();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X:[0M)1N7/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertEquals("X:[0M)1N7/", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(element0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter(document0, element0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test007()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("tm<l");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tm<l", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("tm<l", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tm<l", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      htmlTreeBuilder0.reconstructFormattingElements();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test008()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("X:[0M)1N7/", document0.location());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      htmlTreeBuilder0.insert(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("X:[0M)1N7/", document0.location());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test009()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals("X:[0M)1N7/", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InTableText;
      htmlTreeBuilder0.error(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test010()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Text;
      htmlTreeBuilder0.transition(htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test011()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      htmlTreeBuilder0.newPendingTableCharacters();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test012()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      htmlTreeBuilder0.markInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test013()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      htmlTreeBuilder0.framesetOk(true);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test014()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("select");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "select", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.currentElement();
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("select", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(element0);
      
      htmlTreeBuilder0.replaceOnStack(element0, document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(1, element0.childNodeSize());
      assertEquals("select", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test015()  throws Throwable  {
      StringReader stringReader0 = new StringReader(";Q|#audI");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tr", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tr", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("tr", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      htmlTreeBuilder0.clearStackToTableRowContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test016()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("X:[0M)1N7/", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      htmlTreeBuilder0.clearStackToTableContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test017()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("X:[0M)1N7/", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      String string0 = htmlTreeBuilder0.toString();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test018()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      htmlTreeBuilder0.state();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test019()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X:[0M)1N7/", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      htmlTreeBuilder0.state();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test020()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("XiS:[0MN7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "XiS:[0MN7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("XiS:[0MN7/", document0.baseUri());
      assertEquals("XiS:[0MN7/", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("XiS:[0MN7/", document0.baseUri());
      assertEquals("XiS:[0MN7/", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("XiS:[0MN7/", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(element0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("XiS:[0MN7/", document0.baseUri());
      assertEquals("XiS:[0MN7/", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("XiS:[0MN7/", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element1 = htmlTreeBuilder0.removeLastFormattingElement();
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("XiS:[0MN7/", element1.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(element1, element0);
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test021()  throws Throwable  {
      StringReader stringReader0 = new StringReader("@NDjo]4FZ*ZH\"[Eo[q");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "summary", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("summary", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("summary", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Tag tag0 = Tag.valueOf("iframe");
      assertEquals("iframe", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertNotNull(tag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      FormElement formElement0 = new FormElement(tag0, "iframe", attributes0);
      assertEquals("iframe", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("iframe", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertNotNull(formElement0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(formElement0);
      assertEquals("iframe", tag0.toString());
      assertFalse(tag0.isData());
      assertFalse(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.formatAsBlock());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.canContainBlock());
      assertTrue(tag0.isInline());
      assertFalse(tag0.preserveWhitespace());
      assertFalse(tag0.isSelfClosing());
      assertTrue(tag0.isKnownTag());
      assertEquals(0, attributes0.size());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("iframe", formElement0.baseUri());
      assertEquals(0, formElement0.siblingIndex());
      assertFalse(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertEquals("iframe", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(element0, formElement0);
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test022()  throws Throwable  {
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("X:[0M)1N7/", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertNotNull(token_Doctype0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterFrameset;
      boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0, htmlTreeBuilderState0);
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test023()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("select");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "select", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertEquals("select", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Token.Doctype token_Doctype0 = new Token.Doctype();
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertNotNull(token_Doctype0);
      
      boolean boolean0 = htmlTreeBuilder0.process(token_Doctype0);
      assertEquals("", token_Doctype0.getSystemIdentifier());
      assertFalse(token_Doctype0.isForceQuirks());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test024()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X:[0M)1N7");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X:[0M)1N7", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("X:[0M)1N7", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      htmlTreeBuilder0.push(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X:[0M)1N7", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals("X:[0M)1N7", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document1 = (Document)htmlTreeBuilder0.pop();
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.isBlock());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("X:[0M)1N7", document1.location());
      assertFalse(document1.hasParent());
      assertEquals(1, document1.childNodeSize());
      assertEquals(0, document1.siblingIndex());
      assertEquals("X:[0M)1N7", document1.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test025()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("welect");
      assertNotNull(stringReader0);
      
      char[] charArray0 = new char[9];
      int int0 = stringReader0.read(charArray0);
      assertEquals(6, int0);
      assertArrayEquals(new char[] {'w', 'e', 'l', 'e', 'c', 't', '\u0000', '\u0000', '\u0000'}, charArray0);
      assertEquals(9, charArray0.length);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "qMR@htnyUm", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("qMR@htnyUm", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("qMR@htnyUm", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.pop();
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals("qMR@htnyUm", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test026()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("XiS:[0MeN7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "XiS:[0MeN7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("XiS:[0MeN7/", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("XiS:[0MeN7/", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.pop();
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("XiS:[0MeN7/", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(element0);
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("html");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test027()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      htmlTreeBuilder0.originalState();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test028()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("XiS:[0MN7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "XiS:[0MN7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("XiS:[0MN7/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("XiS:[0MN7/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("XiS:[0MN7/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("XiS:[0MN7/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("XiS:[0MN7/", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(element0);
      
      boolean boolean0 = htmlTreeBuilder0.onStack(element0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("XiS:[0MN7/", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals("XiS:[0MN7/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals("XiS:[0MN7/", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test029()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("X:[0M)1N7/", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      boolean boolean0 = htmlTreeBuilder0.onStack(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("X:[0M)1N7/", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test030()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("slc&");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "slc&", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("slc&", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("slc&", document0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test031()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("XiS:[0MN7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "XiS:[0MN7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("XiS:[0MN7/", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("XiS:[0MN7/", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Element element0 = document0.body();
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("XiS:[0MN7/", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("XiS:[0MN7/", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("XiS:[0MN7/", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(element0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("XiS:[0MN7/", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("XiS:[0MN7/", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertTrue(element0.isBlock());
      assertEquals(1, element0.childNodeSize());
      assertEquals("XiS:[0MN7/", element0.baseUri());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element1 = htmlTreeBuilder0.lastFormattingElement();
      assertTrue(element1.hasParent());
      assertTrue(element1.isBlock());
      assertEquals(1, element1.childNodeSize());
      assertEquals(1, element1.siblingIndex());
      assertEquals("XiS:[0MN7/", element1.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(element1, element0);
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test032()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X:[0M)1N7/", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X:[0M)1N7/", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.CData token_CData0 = new Token.CData("X:[0M)1N7/");
      assertNotNull(token_CData0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.BeforeHtml;
      boolean boolean0 = htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
      
      Element element0 = htmlTreeBuilder0.lastFormattingElement();
      assertEquals(1, element0.childNodeSize());
      assertEquals("X:[0M)1N7/", element0.baseUri());
      assertTrue(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test033()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("iS:[0MN7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "iS:[0MN7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("iS:[0MN7/", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("iS:[0MN7/", document0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Document document1 = new Document("iS:[0MN7/");
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("iS:[0MN7/", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("iS:[0MN7/", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertNotNull(document1);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("iS:[0MN7/", document1.baseUri());
      assertEquals(0, document1.childNodeSize());
      assertEquals("iS:[0MN7/", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document1, document0);
      
      Document document2 = (Document)htmlTreeBuilder0.lastFormattingElement();
      assertFalse(document2.equals((Object)document0));
      assertEquals("iS:[0MN7/", document2.location());
      assertFalse(document2.hasParent());
      assertEquals(0, document2.childNodeSize());
      assertEquals(0, document2.siblingIndex());
      assertEquals("#document", document2.nodeName());
      assertEquals(Document.QuirksMode.noQuirks, document2.quirksMode());
      assertFalse(document2.isBlock());
      assertFalse(document2.updateMetaCharsetElement());
      assertEquals("iS:[0MN7/", document2.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document2, document0);
      assertSame(document2, document1);
      assertNotNull(document2);
  }

  @Test(timeout = 4000)
  public void test034()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Tag tag0 = Tag.valueOf("noscript");
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isKnownTag());
      assertEquals("noscript", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertNotNull(tag0);
      
      FormElement formElement0 = new FormElement(tag0, "`6{O%5>5`S?R<] y.", attributes0);
      assertEquals(0, attributes0.size());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isKnownTag());
      assertEquals("noscript", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("`6{O%5>5`S?R<] y.", formElement0.baseUri());
      assertNotNull(formElement0);
      
      boolean boolean0 = htmlTreeBuilder0.isSpecial(formElement0);
      assertEquals(0, attributes0.size());
      assertFalse(tag0.isFormSubmittable());
      assertFalse(tag0.isEmpty());
      assertFalse(tag0.isInline());
      assertTrue(tag0.formatAsBlock());
      assertTrue(tag0.isBlock());
      assertFalse(tag0.isFormListed());
      assertFalse(tag0.isData());
      assertTrue(tag0.canContainBlock());
      assertTrue(tag0.isKnownTag());
      assertEquals("noscript", tag0.toString());
      assertFalse(tag0.isSelfClosing());
      assertFalse(tag0.preserveWhitespace());
      assertEquals(0, formElement0.siblingIndex());
      assertTrue(formElement0.isBlock());
      assertFalse(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals("`6{O%5>5`S?R<] y.", formElement0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test035()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("o", "o");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("o", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      boolean boolean0 = htmlTreeBuilder0.isSpecial(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("o", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("o", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test036()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X:[0M)1N7/", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X:[0M)1N7/", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X:[0M)1N7/", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test037()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = Document.createShell(":not(selector) subselect must not be empty");
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not(selector) subselect must not be empty", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":not(selector) subselect must not be empty", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      List<Node> list0 = htmlTreeBuilder0.parseFragment("tbody", document0, "tr", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(":not(selector) subselect must not be empty", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(":not(selector) subselect must not be empty", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(list0.isEmpty());
      assertEquals(1, list0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(list0);
      
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test038()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      boolean boolean0 = htmlTreeBuilder0.isFragmentParsing();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test039()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test040()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader(":[M+N7");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, ":[M+N7", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(":[M+N7", document0.location());
      assertEquals(":[M+N7", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Document document1 = htmlTreeBuilder0.parse(stringReader0, ":[M+N7", parser0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals(":[M+N7", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals(":[M+N7", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("Quu\"Y)Ga7hp");
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals(":[M+N7", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test041()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("X:[0M)1N7/", document0.location());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.insertStartTag("hgroup");
      assertTrue(element0.isBlock());
      assertEquals("X:[0M)1N7/", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertTrue(element0.hasParent());
      assertEquals(1, element0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test042()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader(" ");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "6", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("6", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("6", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 100);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("6", attributes0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, attributes0.size());
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotNull(token_StartTag1);
      
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, false);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, attributes0.size());
      assertEquals("6", formElement0.baseUri());
      assertFalse(formElement0.isBlock());
      assertTrue(formElement0.hasParent());
      assertEquals(0, formElement0.childNodeSize());
      assertEquals(0, formElement0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotNull(formElement0);
  }

  @Test(timeout = 4000)
  public void test043()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("=G__f(k[#ArF9IZ");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "=G__f(k[#ArF9IZ", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("=G__f(k[#ArF9IZ", document0.location());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("=G__f(k[#ArF9IZ", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("style", attributes0);
      assertEquals(0, attributes0.size());
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotNull(token_StartTag1);
      
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, true);
      assertEquals(0, attributes0.size());
      assertEquals(1, formElement0.siblingIndex());
      assertEquals(0, formElement0.childNodeSize());
      assertTrue(formElement0.isBlock());
      assertTrue(formElement0.hasParent());
      assertEquals("=G__f(k[#ArF9IZ", formElement0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotNull(formElement0);
  }

  @Test(timeout = 4000)
  public void test044()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("select");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "select", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals("select", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Document document1 = htmlTreeBuilder0.parse(stringReader0, "select", parser0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.hasParent());
      assertEquals("select", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals("select", document1.location());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertFalse(document1.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      CharacterReader characterReader0 = htmlTreeBuilder0.reader;
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, characterReader0.pos());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("select", attributes0);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, characterReader0.pos());
      assertEquals(0, attributes0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotNull(token_StartTag1);
      
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag1);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, characterReader0.pos());
      assertEquals(0, attributes0.size());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals("select", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test045()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("X:[0M)1N7/", document0.location());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Attributes attributes0 = new Attributes();
      assertEquals(0, attributes0.size());
      assertNotNull(attributes0);
      
      CharacterReader characterReader0 = htmlTreeBuilder0.reader;
      assertEquals(10, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking((-1095016248));
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(10, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("h4", attributes0);
      assertEquals(0, attributes0.size());
      assertEquals(10, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotNull(token_StartTag1);
      
      Element element0 = htmlTreeBuilder0.insertEmpty(token_StartTag0);
      assertEquals(10, characterReader0.pos());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(0, parseErrorList0.size());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("X:[0M)1N7/", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test046()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("nosipt");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "nosipt", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("nosipt", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nosipt", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Element element0 = document0.createElement("nosipt");
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("nosipt", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nosipt", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("nosipt", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(element0);
      
      htmlTreeBuilder0.push(element0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("nosipt", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nosipt", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertFalse(element0.isBlock());
      assertEquals("nosipt", element0.baseUri());
      assertEquals(0, element0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      CDataNode cDataNode0 = new CDataNode("nosipt");
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("nosipt", attributes0);
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotNull(token_StartTag1);
      
      Element element1 = htmlTreeBuilder0.insert(token_StartTag1);
      assertFalse(element1.equals((Object)element0));
      assertFalse(cDataNode0.hasParent());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertTrue(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(0, element1.siblingIndex());
      assertEquals("nosipt", element1.baseUri());
      assertFalse(element1.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotSame(element1, element0);
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test047()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("s}5Pv");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "s}5Pv", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("s}5Pv", document0.baseUri());
      assertEquals("s}5Pv", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      CharacterReader characterReader0 = new CharacterReader(stringReader0);
      assertEquals(0, characterReader0.pos());
      assertNotNull(characterReader0);
      
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(100);
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(parseErrorList0);
      
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      CDataNode cDataNode0 = new CDataNode("s}5Pv");
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertNotNull(cDataNode0);
      
      Attributes attributes0 = cDataNode0.attributes();
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertNotNull(attributes0);
      
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("head", attributes0);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotNull(token_StartTag1);
      
      Element element0 = htmlTreeBuilder0.insert(token_StartTag1);
      assertEquals(0, characterReader0.pos());
      assertEquals(0, parseErrorList0.size());
      assertTrue(parseErrorList0.isEmpty());
      assertEquals("#cdata", cDataNode0.nodeName());
      assertFalse(cDataNode0.hasParent());
      assertEquals(0, cDataNode0.siblingIndex());
      assertEquals(1, attributes0.size());
      assertEquals(1, element0.siblingIndex());
      assertEquals("s}5Pv", element0.baseUri());
      assertTrue(element0.hasParent());
      assertTrue(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_StartTag1);
      assertSame(token_StartTag1, token_StartTag0);
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test048()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("select");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "select", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals("select", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      boolean boolean0 = htmlTreeBuilder0.inTableScope("html");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test049()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("vs61xPBUgz-|O3");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "vs61xPBUgz-|O3", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("vs61xPBUgz-|O3", document0.location());
      assertEquals("vs61xPBUgz-|O3", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      String[] stringArray0 = new String[9];
      stringArray0[0] = "html";
      stringArray0[1] = "html";
      stringArray0[4] = "html";
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
      assertEquals(9, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test050()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("X:[0M)1N7/", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      String[] stringArray0 = new String[6];
      stringArray0[0] = "X:[0M)1N7/";
      stringArray0[1] = "X:[0M)1N7/";
      stringArray0[2] = "w-6BS;+";
      boolean boolean0 = htmlTreeBuilder0.inScope(stringArray0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
      assertEquals(6, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test051()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("tfomt");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tfomt", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tfomt", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("tfomt", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Element element0 = document0.createElement("tfoet");
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tfomt", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("tfomt", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tfomt", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(element0);
      
      htmlTreeBuilder0.push(element0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals("tfomt", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertFalse(document0.isBlock());
      assertEquals("tfomt", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, element0.siblingIndex());
      assertEquals("tfomt", element0.baseUri());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.isBlock());
      assertFalse(element0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      String[] stringArray0 = new String[0];
      boolean boolean0 = htmlTreeBuilder0.inScope("tfoet", stringArray0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test052()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("select");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "select", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("select", document0.location());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      boolean boolean0 = htmlTreeBuilder0.inScope("select");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test053()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("select");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "select", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("select", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("html");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test054()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6K7~j,");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "6K7~j,", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("6K7~j,", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("6K7~j,", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      boolean boolean0 = htmlTreeBuilder0.inListItemScope("6K7~j,");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test055()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("select");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "select", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      boolean boolean0 = htmlTreeBuilder0.inButtonScope("html");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test056()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals("X:[0M)1N7/", document0.location());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      htmlTreeBuilder0.popStackToBefore("td");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertTrue(arrayList0.isEmpty());
      assertEquals(0, arrayList0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test057()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals("", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertFalse(arrayList0.isEmpty());
      assertEquals(2, arrayList0.size());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test058()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNull(list0);
  }

  @Test(timeout = 4000)
  public void test059()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("XiS:[0MN7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "XiS:[0MN7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("XiS:[0MN7/", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("XiS:[0MN7/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      List<String> list0 = htmlTreeBuilder0.getPendingTableCharacters();
      assertFalse(list0.contains("XiS:[0MN7/"));
      assertEquals(0, list0.size());
      assertTrue(list0.isEmpty());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(list0);
  }

  @Test(timeout = 4000)
  public void test060()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X:[0M)1N7/", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertTrue(element0.hasParent());
      assertEquals(0, element0.siblingIndex());
      assertEquals(0, element0.childNodeSize());
      assertEquals("X:[0M)1N7/", element0.baseUri());
      assertTrue(element0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test061()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = parser0.parseInput("style", "style");
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals("style", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("style", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertNotNull(document0);
      
      htmlTreeBuilder0.setHeadElement(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertEquals("style", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("style", document0.location());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document1 = (Document)htmlTreeBuilder0.getHeadElement();
      assertFalse(document1.isBlock());
      assertFalse(document1.hasParent());
      assertEquals("style", document1.location());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("#document", document1.nodeName());
      assertEquals("style", document1.baseUri());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test062()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("X:[0M)1N7/", document0.location());
      assertFalse(document0.hasParent());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.getFromStack("X:[0M)1N7/");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test063()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("mm");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "mm", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("mm", document0.location());
      assertEquals("mm", document0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Element element0 = htmlTreeBuilder0.getFromStack("body");
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.hasParent());
      assertEquals("mm", element0.baseUri());
      assertEquals(1, element0.childNodeSize());
      assertTrue(element0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test064()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X;f5C");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X;f5C", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("X;f5C", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("X;f5C", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Element element0 = document0.createElement("nosipt");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("X;f5C", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("X;f5C", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("X;f5C", element0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(element0);
      
      htmlTreeBuilder0.push(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("X;f5C", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("X;f5C", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, element0.siblingIndex());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.childNodeSize());
      assertFalse(element0.hasParent());
      assertEquals("X;f5C", element0.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element1 = htmlTreeBuilder0.getFromStack("nosipt");
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.hasParent());
      assertFalse(element1.isBlock());
      assertEquals(0, element1.childNodeSize());
      assertEquals("X;f5C", element1.baseUri());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(element1, element0);
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test065()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("select");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      htmlTreeBuilder0.initialiseParse(stringReader0, "select", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document0 = htmlTreeBuilder0.getDocument();
      assertFalse(document0.hasParent());
      assertEquals("select", document0.baseUri());
      assertEquals(0, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("select", document0.location());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
  }

  @Test(timeout = 4000)
  public void test066()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.hasParent());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertEquals("X:[0M)1N7/", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertEquals("X:[0M)1N7/", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("X:[0M)1N7/", document1.location());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document1, document0);
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test067()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals("X:[0M)1N7/", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("X:[0M)1N7/", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test068()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("", document0.location());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals("", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertEquals("", string0);
      assertNotNull(string0);
  }

  @Test(timeout = 4000)
  public void test069()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("nosipt");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "nosipt", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nosipt", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("nosipt", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Element element0 = document0.createElement("nosipt");
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nosipt", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("nosipt", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("nosipt", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(element0);
      
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("nosipt", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("nosipt", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(1, document0.childNodeSize());
      assertEquals("#document", document0.nodeName());
      assertFalse(element0.isBlock());
      assertEquals(0, element0.siblingIndex());
      assertEquals("nosipt", element0.baseUri());
      assertFalse(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Element element1 = htmlTreeBuilder0.getActiveFormattingElement("nosipt");
      assertEquals(0, element1.siblingIndex());
      assertFalse(element1.isBlock());
      assertEquals("nosipt", element1.baseUri());
      assertFalse(element1.hasParent());
      assertEquals(0, element1.childNodeSize());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(element1, element0);
      assertNotNull(element1);
  }

  @Test(timeout = 4000)
  public void test070()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("select");
      assertNotNull(stringReader0);
      
      long long0 = stringReader0.skip(100);
      assertEquals(6L, long0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "select", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("select", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("select", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test071()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      boolean boolean0 = htmlTreeBuilder0.framesetOk();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test072()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X:[0M)1N7/", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      htmlTreeBuilder0.push(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X:[0M)1N7/", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      htmlTreeBuilder0.insertOnStackAfter(document0, document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X:[0M)1N7/", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Document document1 = (Document)htmlTreeBuilder0.aboveOnStack(document0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("X:[0M)1N7/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("X:[0M)1N7/", document0.location());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertEquals(0, document1.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals("X:[0M)1N7/", document1.baseUri());
      assertFalse(document1.hasParent());
      assertEquals("X:[0M)1N7/", document1.location());
      assertEquals(1, document1.childNodeSize());
      assertFalse(document1.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(document0, document1);
      assertSame(document1, document0);
      assertNotNull(document1);
  }

  @Test(timeout = 4000)
  public void test073()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("sZS>ct");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "li", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("li", document0.location());
      assertEquals("li", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Document document1 = htmlTreeBuilder0.parse(stringReader0, "sZS>ct", parser0);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals("sZS>ct", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("sZS>ct", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document1, document0);
      assertNotNull(document1);
      
      htmlTreeBuilder0.push(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals("sZS>ct", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("sZS>ct", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document1, document0);
      
      Element element0 = htmlTreeBuilder0.aboveOnStack(document1);
      assertFalse(document1.equals((Object)document0));
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document1.childNodeSize());
      assertEquals("sZS>ct", document1.location());
      assertEquals(Document.QuirksMode.noQuirks, document1.quirksMode());
      assertEquals(0, document1.siblingIndex());
      assertEquals("sZS>ct", document1.baseUri());
      assertFalse(document1.isBlock());
      assertEquals("#document", document1.nodeName());
      assertFalse(document1.updateMetaCharsetElement());
      assertFalse(document1.hasParent());
      assertEquals("sZS>ct", element0.baseUri());
      assertTrue(element0.hasParent());
      assertEquals(0, element0.childNodeSize());
      assertEquals(1, element0.siblingIndex());
      assertTrue(element0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotSame(document1, document0);
      assertNotNull(element0);
  }

  @Test(timeout = 4000)
  public void test074()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("57P,q3;ANv9l3%");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "57P,q3;ANv9l3%", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("57P,q3;ANv9l3%", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("57P,q3;ANv9l3%", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("57P,q3;ANv9l3%", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("57P,q3;ANv9l3%", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(2, document0.siblingIndex());
      assertTrue(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      htmlTreeBuilder0.toString();
  }

  @Test(timeout = 4000)
  public void test075()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.resetInsertionMode();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test076()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test077()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeLastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test078()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Parser.parse("table", "table");
      assertFalse(document0.isBlock());
      assertFalse(document0.hasParent());
      assertEquals("table", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertEquals("table", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromStack(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test079()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.removeFromActiveFormattingElements((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test080()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.reconstructFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test081()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Parser.parseBodyFragmentRelaxed("D", "D");
      assertEquals(1, document0.childNodeSize());
      assertEquals("D", document0.baseUri());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("D", document0.location());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pushActiveFormattingElements(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test082()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.push((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test083()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Token.CData token_CData0 = new Token.CData("XiS:[0MN7/");
      assertNotNull(token_CData0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.BeforeHtml;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test084()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Token.CData token_CData0 = new Token.CData("X:[0M)1N7/");
      assertNotNull(token_CData0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.EndTag;
      token_CData0.type = token_TokenType0;
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Initial;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$CData cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test085()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("tfomt");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tfomt", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("tfomt", document0.location());
      assertEquals("tfomt", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      htmlTreeBuilder0.popStackToBefore("tfomt");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      Token.EOF token_EOF0 = new Token.EOF();
      assertNotNull(token_EOF0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Text;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_EOF0, htmlTreeBuilderState0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test086()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Token.EndTag token_EndTag0 = new Token.EndTag();
      assertNotNull(token_EndTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_EndTag0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test087()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      StringReader stringReader0 = new StringReader("=K$?q,o{5W$Tf7'5r");
      assertNotNull(stringReader0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "=K$?q,o{5W$Tf7'5r", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("=K$?q,o{5W$Tf7'5r", document0.baseUri());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("#document", document0.nodeName());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals("=K$?q,o{5W$Tf7'5r", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Tokeniser tokeniser0 = htmlTreeBuilder0.tokeniser;
      assertNotNull(tokeniser0);
      
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      assertNotNull(token_StartTag0);
      
      Token.Tag token_Tag0 = token_StartTag0.name((String) null);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertSame(token_StartTag0, token_Tag0);
      assertSame(token_Tag0, token_StartTag0);
      assertNotNull(token_Tag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_Tag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test088()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("noscript");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "u_]KbG", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("u_]KbG", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("u_]KbG", document0.baseUri());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      Token.CData token_CData0 = new Token.CData(":eq(");
      assertNotNull(token_CData0);
      
      Token.TokenType token_TokenType0 = Token.TokenType.EndTag;
      token_CData0.type = token_TokenType0;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_CData0);
        fail("Expecting exception: ClassCastException");
      
      } catch(ClassCastException e) {
         //
         // org.jsoup.parser.Token$CData cannot be cast to org.jsoup.parser.Token$EndTag
         //
         verifyException("org.jsoup.parser.Token", e);
      }
  }

  @Test(timeout = 4000)
  public void test089()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test090()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToClose("2xIY");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test091()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.popStackToBefore(")QiM!VKuu");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test092()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test093()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("selecv");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "selecv", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("selecv", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertEquals("selecv", document0.location());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      htmlTreeBuilder0.popStackToBefore("selecv");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.pop();
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test094()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("8elCcH&t");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "8elCcH&t", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("8elCcH&t", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("8elCcH&t", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals("8elCcH&t", document0.baseUri());
      assertEquals("8elCcH&t", document0.location());
      assertFalse(document0.isBlock());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertTrue(document0.hasParent());
      assertEquals(2, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      htmlTreeBuilder0.parseFragment("#`0aGZJh?rNNEC.", document0, "8elCcH&t", parser0);
  }

  @Test(timeout = 4000)
  public void test095()  throws Throwable  {
      Document document0 = Parser.parseBodyFragmentRelaxed("mT/{Rs}HeajM7,\"", "mT/{Rs}HeajM7,\"");
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals("mT/{Rs}HeajM7,\"", document0.baseUri());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("mT/{Rs}HeajM7,\"", document0.location());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.hasParent());
      assertFalse(document0.updateMetaCharsetElement());
      assertNotNull(document0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("e", document0, "jul^/;@4O-2", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test096()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("tm<l");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tm<l", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("tm<l", document0.location());
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals("tm<l", document0.baseUri());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parseFragment("tm<l", document0, (String) null, parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // BaseURI must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test097()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.onStack((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test098()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.maybeSetBaseUri((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test099()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.lastFormattingElement();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test100()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isSpecial((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test101()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.isInActiveFormattingElements((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test102()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag("org.jsoup.parser.Par3>r");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.Tag", e);
      }
  }

  @Test(timeout = 4000)
  public void test103()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertStartTag("thead");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test104()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertOnStackAfter((Element) null, (Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test105()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test106()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("1+u@c~?c=");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "1+u@c~?c=", parser0);
      assertFalse(parser0.isTrackErrors());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertEquals(0, document0.siblingIndex());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      htmlTreeBuilder0.popStackToBefore("1+u@c~?c=");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent(document0);
        fail("Expecting exception: IndexOutOfBoundsException");
      
      } catch(IndexOutOfBoundsException e) {
         //
         // Index: 0, Size: 0
         //
         verifyException("java.util.ArrayList", e);
      }
  }

  @Test(timeout = 4000)
  public void test107()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      StringReader stringReader0 = new StringReader("caption");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "caption", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals("caption", document0.baseUri());
      assertEquals("#document", document0.nodeName());
      assertEquals("caption", document0.location());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertInFosterParent((Node) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test108()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm((Token.StartTag) null, false);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test109()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertForm(token_StartTag0, false);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test110()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty((Token.StartTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test111()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertEmpty(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test112()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Token.StartTag) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test113()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Token.StartTag token_StartTag0 = new Token.StartTag();
      assertNotNull(token_StartTag0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_StartTag0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be false
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test114()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Token.Character token_Character0 = new Token.Character();
      assertNotNull(token_Character0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(token_Character0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test115()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = Document.createShell("FG/)*>2");
      assertFalse(document0.isBlock());
      assertEquals("#document", document0.nodeName());
      assertEquals("FG/)*>2", document0.baseUri());
      assertFalse(document0.updateMetaCharsetElement());
      assertFalse(document0.hasParent());
      assertEquals(1, document0.childNodeSize());
      assertEquals("FG/)*>2", document0.location());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert(document0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test116()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XiS:[0MeN7/");
      assertNotNull(stringReader0);
      
      Parser parser0 = Parser.htmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "XiS:[0MeN7/", parser0);
      assertFalse(parser0.isTrackErrors());
      assertEquals("XiS:[0MeN7/", document0.location());
      assertEquals("XiS:[0MeN7/", document0.baseUri());
      assertFalse(document0.hasParent());
      assertEquals("#document", document0.nodeName());
      assertFalse(document0.updateMetaCharsetElement());
      assertEquals(1, document0.childNodeSize());
      assertEquals(0, document0.siblingIndex());
      assertEquals(Document.QuirksMode.noQuirks, document0.quirksMode());
      assertFalse(document0.isBlock());
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(document0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Element) null);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Object must not be null
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test117()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      PipedWriter pipedWriter0 = new PipedWriter();
      assertNotNull(pipedWriter0);
      
      PipedReader pipedReader0 = new PipedReader(pipedWriter0, 100);
      assertNotNull(pipedReader0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(pipedReader0, "810a,=6`f,tgt", (Parser) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.TreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test118()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      PipedReader pipedReader0 = new PipedReader(100);
      assertNotNull(pipedReader0);
      
      Parser parser0 = Parser.xmlParser();
      assertFalse(parser0.isTrackErrors());
      assertNotNull(parser0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.initialiseParse(pipedReader0, "HFpE\"o6~P;1?;)f", parser0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test119()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("DMgQ6:xR[~k");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test120()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      String[] stringArray0 = new String[0];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("VW+$j([s", stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test121()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getFromStack("twaN?UM");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test122()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.getActiveFormattingElement("VW+$uj([s");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test123()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InBody;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.error(htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test124()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearFormattingElementsToLastMarker();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
      }
  }

  @Test(timeout = 4000)
  public void test125()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
      assertNotNull(htmlTreeBuilder0);
      
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack((Element) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test126()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader(":[M+N7");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, ":[M+N7", parser0);
      htmlTreeBuilder0.popStackToClose(":[M+N7");
      htmlTreeBuilder0.push(document0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: ArrayIndexOutOfBoundsException");
      
      } catch(ArrayIndexOutOfBoundsException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test127()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("select");
      Parser parser0 = Parser.xmlParser();
      Parser parser1 = parser0.settings((ParseSettings) null);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.parse(stringReader0, "select", parser1);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test128()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("select");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "select", parser0);
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      token_StartTag0.selfClosing = true;
      token_StartTag0.nameAttr("select", attributes0);
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InCaption;
      boolean boolean0 = htmlTreeBuilder0.process(token_StartTag0, htmlTreeBuilderState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test129()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      Element element0 = htmlTreeBuilder0.getActiveFormattingElement("X:[0M)1N7/");
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test130()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.removeFromActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test131()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("XiS:[0MN7/");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "XiS:[0MN7/", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test132()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("Unexpected count of entities loaded");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "Unexpected count of entities loaded", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.processStartTag("Unexpected count of entities loaded");
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Token.CData token_CData0 = new Token.CData("Unexpected count of entities loaded");
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.AfterBody;
      boolean boolean0 = htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test133()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("XiS:[0MN7/");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "XiS:[0MN7/", parser0);
      Element element0 = document0.body();
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      CharacterReader characterReader0 = new CharacterReader(stringReader0, 100);
      ParseErrorList parseErrorList0 = parser0.getErrors();
      Tokeniser tokeniser0 = new Tokeniser(characterReader0, parseErrorList0);
      Token.StartTag token_StartTag0 = tokeniser0.startPending;
      CDataNode cDataNode0 = new CDataNode("XiS:[0MN7/");
      Attributes attributes0 = cDataNode0.attributes();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("UMV6/Or7eC!", attributes0);
      boolean boolean0 = htmlTreeBuilder0.process(token_StartTag1);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test134()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("XiS:[0MN7/");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "XiS:[0MN7/", parser0);
      Element element0 = document0.body();
      htmlTreeBuilder0.pushActiveFormattingElements(element0);
      assertEquals(1, element0.siblingIndex());
      
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test135()  throws Throwable  {
      StringReader stringReader0 = new StringReader("XiS:[0MeN7/");
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "XiS:[0MeN7/", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test136()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("$oQl]Mb");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "KD9<*b\" ", parser0);
      document0.addClass("KD9<*b\" ");
      Document document1 = parser0.parseInput((Reader) stringReader0, "K(@,4");
      Document document2 = document1.ownerDocument();
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.pushActiveFormattingElements(document2);
      assertEquals(1, document2.childNodeSize());
      assertEquals(1, document1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test137()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Token.CData token_CData0 = new Token.CData("X:[0M)1N7/");
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InBody;
      boolean boolean0 = htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test138()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("Y*48jv`|QjE1)");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "|M7\"E", parser0);
      htmlTreeBuilder0.insertMarkerToFormattingElements();
      htmlTreeBuilder0.clearFormattingElementsToLastMarker();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test139()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader(":[M+N7");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, ":[M+N7", parser0);
      Element element0 = htmlTreeBuilder0.removeLastFormattingElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test140()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("dd");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "dd", parser0);
      Element element0 = document0.createElement("dd");
      htmlTreeBuilder0.push(element0);
      htmlTreeBuilder0.generateImpliedEndTags("tfoet");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test141()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      htmlTreeBuilder0.generateImpliedEndTags("body");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test142()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.generateImpliedEndTags("audio");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test143()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader(":[M+N7");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, ":[M+N7", parser0);
      assertEquals(1, document0.childNodeSize());
      
      htmlTreeBuilder0.processStartTag(":[M+N7");
      boolean boolean0 = htmlTreeBuilder0.inSelectScope(":[M+N7");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test144()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("select");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "select", parser0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inSelectScope("html");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test145()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "F", parser0);
      htmlTreeBuilder0.popStackToBefore("pQz");
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inSelectScope("X:[0M)1N7/");
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Should not be reachable
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test146()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("X;f5C");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X;f5C", parser0);
      Element element0 = document0.createElement("nosipt");
      htmlTreeBuilder0.push(element0);
      String[] stringArray0 = new String[9];
      stringArray0[4] = "X;f5C";
      stringArray0[6] = "X;f5C";
      stringArray0[7] = "nosipt";
      boolean boolean0 = htmlTreeBuilder0.inScope("X;f5C", stringArray0);
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test147()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("select");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "select", parser0);
      assertEquals(1, document0.childNodeSize());
      
      boolean boolean0 = htmlTreeBuilder0.inScope("html");
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test148()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("$oQl]Mb");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      htmlTreeBuilder0.parse(stringReader0, "KD9<*b\" ", parser0);
      htmlTreeBuilder0.inButtonScope("thead");
  }

  @Test(timeout = 4000)
  public void test149()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("1+u@c~?c=");
      Parser parser0 = Parser.htmlParser();
      htmlTreeBuilder0.parse(stringReader0, "1+u@c~?c=", parser0);
      htmlTreeBuilder0.popStackToBefore("1+u@c~?c=");
      boolean boolean0 = htmlTreeBuilder0.inTableScope("1+u@c~?c=");
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test150()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      Token.CData token_CData0 = new Token.CData("X:[0M)1N7/");
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.Initial;
      htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test151()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Tag tag0 = Tag.valueOf("html", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, " > ", (Attributes) null);
      List<Node> list0 = Parser.parseFragment(":not%s", (Element) formElement0, "html", (ParseErrorList) null);
      assertEquals(2, list0.size());
  }

  @Test(timeout = 4000)
  public void test152()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = new ParseSettings(true, true);
      Tag tag0 = Tag.valueOf("frameset", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "12osP.Q(}5q6Yf1", (Attributes) null);
      ParseErrorList parseErrorList0 = parser0.getErrors();
      List<Node> list0 = Parser.parseFragment("frameset", (Element) formElement0, "}2^gO>8|&", parseErrorList0);
      assertEquals(0, parseErrorList0.size());
      assertEquals(0, list0.size());
  }

  @Test(timeout = 4000)
  public void test153()  throws Throwable  {
      XmlTreeBuilder xmlTreeBuilder0 = new XmlTreeBuilder();
      ParseSettings parseSettings0 = xmlTreeBuilder0.defaultSettings();
      Tag tag0 = Tag.valueOf("head", parseSettings0);
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "thead", attributes0);
      Parser parser0 = Parser.htmlParser();
      ParseErrorList parseErrorList0 = parser0.getErrors();
      List<Node> list0 = Parser.parseFragment("noscript", (Element) formElement0, "^:2[8Ri/", parseErrorList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test154()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("colgroup");
      FormElement formElement0 = new FormElement(tag0, "bi", attributes0);
      ParseErrorList parseErrorList0 = parser0.getErrors();
      List<Node> list0 = Parser.parseFragment("select", (Element) formElement0, "plaintext", parseErrorList0);
      assertTrue(list0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test155()  throws Throwable  {
      Tag tag0 = Tag.valueOf("caption");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "caption", attributes0);
      List<Node> list0 = Parser.parseFragment(",i1", (Element) formElement0, ",i1", (ParseErrorList) null);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test156()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Tag tag0 = Tag.valueOf("tfoot", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("select");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "tfoot", attributes0);
      List<Node> list0 = Parser.parseFragment("tfoot", (Element) formElement0, "select", parseErrorList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test157()  throws Throwable  {
      Tag tag0 = Tag.valueOf("thead");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "weect", attributes0);
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      List<Node> list0 = Parser.parseFragment("colgroup", (Element) formElement0, "colgroup", parseErrorList0);
      assertEquals(1, list0.size());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test158()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Tag tag0 = Tag.valueOf("tbody");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "X:[0M)1N7/", attributes0);
      ParseErrorList parseErrorList0 = parser0.getErrors();
      List<Node> list0 = Parser.parseFragment("X:[0M)1N7/", (Element) formElement0, "X:[0M)1N7/", parseErrorList0);
      assertEquals(1, list0.size());
      assertTrue(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test159()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      ParseSettings parseSettings0 = ParseSettings.preserveCase;
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("tr", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "marquee", attributes0);
      ParseErrorList parseErrorList0 = parser0.getErrors();
      List<Node> list0 = Parser.parseFragment("9;z#'rFi=", (Element) formElement0, "marquee", parseErrorList0);
      assertTrue(parseErrorList0.isEmpty());
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test160()  throws Throwable  {
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("th");
      FormElement formElement0 = new FormElement(tag0, "th", attributes0);
      List<Node> list0 = Parser.parseFragment("th", (Element) formElement0, "th", (ParseErrorList) null);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test161()  throws Throwable  {
      Tag tag0 = Tag.valueOf("td");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "td", attributes0);
      List<Node> list0 = Parser.parseFragment("td", (Element) formElement0, "td", (ParseErrorList) null);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test162()  throws Throwable  {
      ParseSettings parseSettings0 = ParseSettings.htmlDefault;
      Tag tag0 = Tag.valueOf("select", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "select", (Attributes) null);
      List<Node> list0 = Parser.parseFragment("select", (Element) formElement0, "select", (ParseErrorList) null);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test163()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      htmlTreeBuilder0.pushActiveFormattingElements(document0);
      htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test164()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("XiS:[0MN7/");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "XiS:[0MN7/", parser0);
      Element element0 = document0.body();
      htmlTreeBuilder0.push(document0);
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      assertNotNull(element1);
      assertEquals(2, element1.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test165()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader(":[M+N7");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, ":[M+N7", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.aboveOnStack(document0);
        fail("Expecting exception: AssertionError");
      
      } catch(AssertionError e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test166()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("select");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "select", parser0);
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Tag tag0 = Tag.valueOf("tfoot", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("select");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "PLAINTEXT", attributes0);
      htmlTreeBuilder0.push(formElement0);
      htmlTreeBuilder0.clearStackToTableBodyContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test167()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("1+u@c~?c=");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "1+u@c~?c=", parser0);
      htmlTreeBuilder0.popStackToBefore("1+u@c~?c=");
      htmlTreeBuilder0.clearStackToTableBodyContext();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test168()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader(":[M+N7");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, ":[M+N7", parser0);
      htmlTreeBuilder0.processStartTag(":[M+N7");
      htmlTreeBuilder0.popStackToBefore(":[M+N7");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test169()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("57P,q3;ANv9l3%");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "57P,q3;ANv9l3%", parser0);
      htmlTreeBuilder0.popStackToBefore("57P,q3;ANv9l3%");
      htmlTreeBuilder0.resetInsertionMode();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test170()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("sZS>ct");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "sZS>ct", parser0);
      String[] stringArray0 = new String[3];
      stringArray0[0] = "html";
      stringArray0[1] = "sZS>ct";
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test171()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("d+&fWDYE#]&?8fH$!");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "d+&fWDYE#]&?8fH$!", parser0);
      String[] stringArray0 = new String[0];
      htmlTreeBuilder0.popStackToClose(stringArray0);
      assertEquals(0, stringArray0.length);
  }

  @Test(timeout = 4000)
  public void test172()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      htmlTreeBuilder0.popStackToClose("html");
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test173()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("h4");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "h4", parser0);
      Element element0 = document0.body();
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(element0);
      assertEquals(1, element0.siblingIndex());
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test174()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("$oQl]Mb");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "KD9<*b\" ", parser0);
      boolean boolean0 = htmlTreeBuilder0.removeFromStack(document0);
      assertEquals(1, document0.childNodeSize());
      assertFalse(boolean0);
  }

  @Test(timeout = 4000)
  public void test175()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "", parser0);
      htmlTreeBuilder0.insertInFosterParent(document0);
      assertEquals(2, document0.siblingIndex());
      
      Document document1 = htmlTreeBuilder0.getDocument();
      assertEquals(2, document1.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test176()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("html");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "html", parser0);
      Element element0 = document0.body();
      Element element1 = htmlTreeBuilder0.aboveOnStack(element0);
      htmlTreeBuilder0.pushActiveFormattingElements(element1);
      Element element2 = htmlTreeBuilder0.getActiveFormattingElement("html");
      assertEquals(2, element2.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test177()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("select");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "select", parser0);
      Attributes attributes0 = new Attributes();
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.StartTag token_StartTag1 = token_StartTag0.nameAttr("select", attributes0);
      FormElement formElement0 = htmlTreeBuilder0.insertForm(token_StartTag1, true);
      assertEquals(1, formElement0.siblingIndex());
  }

  @Test(timeout = 4000)
  public void test178()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("=G__f(k[#ArF9IZ");
      Parser parser0 = Parser.xmlParser();
      htmlTreeBuilder0.parse(stringReader0, "=G__f(k[#ArF9IZ", parser0);
      ParseErrorList parseErrorList0 = parser0.getErrors();
      Tokeniser tokeniser0 = new Tokeniser((CharacterReader) null, parseErrorList0);
      Token.Comment token_Comment0 = tokeniser0.commentPending;
      htmlTreeBuilder0.insert(token_Comment0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test179()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("tabole");
      Parser parser0 = Parser.htmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "tabole", parser0);
      Element element0 = document0.createElement("style");
      htmlTreeBuilder0.push(element0);
      Token.Character token_Character0 = new Token.Character();
      htmlTreeBuilder0.insert(token_Character0);
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test180()  throws Throwable  {
      StringReader stringReader0 = new StringReader("6K7~j,");
      Parser parser0 = Parser.htmlParser();
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.parse(stringReader0, "6K7~j,", parser0);
      Token.StartTag token_StartTag0 = new Token.StartTag();
      Token.Tag token_Tag0 = token_StartTag0.name("6K7~j,");
      token_Tag0.selfClosing = true;
      boolean boolean0 = htmlTreeBuilder0.process(token_Tag0);
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test181()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = Parser.parseBodyFragment("R ok6+E@s6)o ", "R ok6+E@s6)o ");
      htmlTreeBuilder0.maybeSetBaseUri(document0);
      assertEquals("R ok6+E@s6)o ", document0.baseUri());
  }

  @Test(timeout = 4000)
  public void test182()  throws Throwable  {
      Tag tag0 = Tag.valueOf("plaintext");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "plaintext", attributes0);
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 100);
      List<Node> list0 = Parser.parseFragment("plaintext", (Element) formElement0, "plaintext", parseErrorList0);
      assertEquals(1, list0.size());
      assertEquals(0, parseErrorList0.size());
  }

  @Test(timeout = 4000)
  public void test183()  throws Throwable  {
      Parser parser0 = Parser.xmlParser();
      Attributes attributes0 = new Attributes();
      Tag tag0 = Tag.valueOf("noscript");
      FormElement formElement0 = new FormElement(tag0, "`6{O%5>5`S?R<] y.", attributes0);
      ParseErrorList parseErrorList0 = parser0.getErrors();
      List<Node> list0 = Parser.parseFragment("X:[0M)1N7/", (Element) formElement0, "`6{O%5>5`S?R<] y.", parseErrorList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test184()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseErrorList parseErrorList0 = ParseErrorList.noTracking();
      ParseSettings parseSettings0 = htmlTreeBuilder0.defaultSettings();
      Tag tag0 = Tag.valueOf("script", parseSettings0);
      CDataNode cDataNode0 = new CDataNode("script");
      Attributes attributes0 = cDataNode0.attributes();
      FormElement formElement0 = new FormElement(tag0, "y", attributes0);
      List<Node> list0 = Parser.parseFragment("&U/e0Q$FpJ~;y>32mmm", (Element) formElement0, "&U/e0Q$FpJ~;y>32mmm", parseErrorList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test185()  throws Throwable  {
      Element element0 = new Element("iframe");
      ParseErrorList parseErrorList0 = new ParseErrorList(100, 100);
      List<Node> list0 = Parser.parseFragment("iframe", element0, "iframe", parseErrorList0);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test186()  throws Throwable  {
      Tag tag0 = Tag.valueOf("textarea");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "ul", attributes0);
      List<Node> list0 = Parser.parseFragment("InHead", (Element) formElement0, "textarea", (ParseErrorList) null);
      assertEquals(1, list0.size());
  }

  @Test(timeout = 4000)
  public void test187()  throws Throwable  {
      CDataNode cDataNode0 = new CDataNode("col");
      // Undeclared exception!
      try { 
        cDataNode0.wrap("plaintext");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.nodes.Node", e);
      }
  }

  @Test(timeout = 4000)
  public void test188()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test189()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inTableScope((String) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test190()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insert((Token.Comment) null);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test191()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.setFosterInserts(true);
      boolean boolean0 = htmlTreeBuilder0.isFosterInserts();
      assertTrue(boolean0);
  }

  @Test(timeout = 4000)
  public void test192()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("$oQl]Mb");
      Parser parser0 = new Parser(htmlTreeBuilder0);
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "KD9<*b\" ", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceActiveFormattingElement(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test193()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("X:[0M)1N7/");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "X:[0M)1N7/", parser0);
      boolean boolean0 = htmlTreeBuilder0.isInActiveFormattingElements(document0);
      assertFalse(boolean0);
      assertEquals(1, document0.childNodeSize());
  }

  @Test(timeout = 4000)
  public void test194()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String string0 = htmlTreeBuilder0.getBaseUri();
      assertNull(string0);
  }

  @Test(timeout = 4000)
  public void test195()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope("j7r(5ioIn%m<W");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test196()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Document document0 = htmlTreeBuilder0.getDocument();
      assertNull(document0);
  }

  @Test(timeout = 4000)
  public void test197()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      String[] stringArray0 = new String[9];
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inScope(stringArray0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test198()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableRowContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test199()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      FormElement formElement0 = htmlTreeBuilder0.getFormElement();
      assertNull(formElement0);
  }

  @Test(timeout = 4000)
  public void test200()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.insertMarkerToFormattingElements();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test201()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      htmlTreeBuilder0.generateImpliedEndTags();
      assertEquals(100, HtmlTreeBuilder.MaxScopeSearchDepth);
  }

  @Test(timeout = 4000)
  public void test202()  throws Throwable  {
      Tag tag0 = Tag.valueOf("table");
      Attributes attributes0 = new Attributes();
      FormElement formElement0 = new FormElement(tag0, "table", attributes0);
      ParseErrorList parseErrorList0 = ParseErrorList.tracking(100);
      Parser.parseFragment("h6", (Element) formElement0, "h6", parseErrorList0);
      assertEquals(2, parseErrorList0.size());
      assertFalse(parseErrorList0.isEmpty());
  }

  @Test(timeout = 4000)
  public void test203()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Token.CData token_CData0 = new Token.CData("^f;H#I0LAN3l=[");
      HtmlTreeBuilderState htmlTreeBuilderState0 = HtmlTreeBuilderState.InBody;
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.process(token_CData0, htmlTreeBuilderState0);
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test204()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.toString();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
      }
  }

  @Test(timeout = 4000)
  public void test205()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inListItemScope("html");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test206()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.clearStackToTableBodyContext();
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }

  @Test(timeout = 4000)
  public void test207()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ArrayList<Element> arrayList0 = htmlTreeBuilder0.getStack();
      assertNull(arrayList0);
  }

  @Test(timeout = 4000)
  public void test208()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      ParseSettings parseSettings0 = new ParseSettings(false, true);
      Tag tag0 = Tag.valueOf("summary", parseSettings0);
      FormElement formElement0 = new FormElement(tag0, "U*q]/[", (Attributes) null);
      htmlTreeBuilder0.setFormElement(formElement0);
      assertEquals("U*q]/[", formElement0.baseUri());
  }

  @Test(timeout = 4000)
  public void test209()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      Element element0 = htmlTreeBuilder0.getHeadElement();
      assertNull(element0);
  }

  @Test(timeout = 4000)
  public void test210()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      StringReader stringReader0 = new StringReader("select");
      Parser parser0 = Parser.xmlParser();
      Document document0 = htmlTreeBuilder0.parse(stringReader0, "select", parser0);
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.replaceOnStack(document0, document0);
        fail("Expecting exception: IllegalArgumentException");
      
      } catch(IllegalArgumentException e) {
         //
         // Must be true
         //
         verifyException("org.jsoup.helper.Validate", e);
      }
  }

  @Test(timeout = 4000)
  public void test211()  throws Throwable  {
      HtmlTreeBuilder htmlTreeBuilder0 = new HtmlTreeBuilder();
      // Undeclared exception!
      try { 
        htmlTreeBuilder0.inButtonScope("thead");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("org.jsoup.parser.HtmlTreeBuilder", e);
      }
  }
}
